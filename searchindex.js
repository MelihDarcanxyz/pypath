Search.setIndex({"docnames": ["api/pypath", "api/pypath.core", "api/pypath.core.annot", "api/pypath.core.annot.Adhesome", "api/pypath.core.annot.Almen2009", "api/pypath.core.annot.AnnotationBase", "api/pypath.core.annot.AnnotationTable", "api/pypath.core.annot.Baccin2019", "api/pypath.core.annot.Biogps", "api/pypath.core.annot.CancerGeneCensus", "api/pypath.core.annot.Cancerdrugsdb", "api/pypath.core.annot.Cancersea", "api/pypath.core.annot.CellPhoneDB", "api/pypath.core.annot.CellPhoneDBComplex", "api/pypath.core.annot.CellSurfaceProteinAtlas", "api/pypath.core.annot.CellSurfaceProteinAtlasCellType", "api/pypath.core.annot.Cellcall", "api/pypath.core.annot.Cellcellinteractions", "api/pypath.core.annot.Cellchatdb", "api/pypath.core.annot.CellchatdbComplex", "api/pypath.core.annot.Cellinker", "api/pypath.core.annot.CellinkerComplex", "api/pypath.core.annot.Celltalkdb", "api/pypath.core.annot.Celltypist", "api/pypath.core.annot.Comppi", "api/pypath.core.annot.Connectomedb", "api/pypath.core.annot.Corum", "api/pypath.core.annot.CorumFuncat", "api/pypath.core.annot.CorumGO", "api/pypath.core.annot.Cpad", "api/pypath.core.annot.CustomAnnotation", "api/pypath.core.annot.Cytosig", "api/pypath.core.annot.Dgidb", "api/pypath.core.annot.Disgenet", "api/pypath.core.annot.Embrace", "api/pypath.core.annot.Exocarta", "api/pypath.core.annot.GOCustomIntercell", "api/pypath.core.annot.GOIntercell", "api/pypath.core.annot.Gpcrdb", "api/pypath.core.annot.GuideToPharmacology", "api/pypath.core.annot.HPO", "api/pypath.core.annot.Hgnc", "api/pypath.core.annot.HpmrComplex", "api/pypath.core.annot.HumanPlasmaMembraneReceptome", "api/pypath.core.annot.HumanProteinAtlas", "api/pypath.core.annot.HumanProteinAtlasSecretome", "api/pypath.core.annot.HumanProteinAtlasSubcellular", "api/pypath.core.annot.Humancellmap", "api/pypath.core.annot.Icellnet", "api/pypath.core.annot.IcellnetComplex", "api/pypath.core.annot.Integrins", "api/pypath.core.annot.InterPro", "api/pypath.core.annot.Intogen", "api/pypath.core.annot.Italk", "api/pypath.core.annot.KeggPathways", "api/pypath.core.annot.KeggPathwaysPC", "api/pypath.core.annot.Kinasedotcom", "api/pypath.core.annot.Kirouac2010", "api/pypath.core.annot.Lambert2018", "api/pypath.core.annot.LigandReceptor", "api/pypath.core.annot.Locate", "api/pypath.core.annot.Lrdb", "api/pypath.core.annot.Matrisome", "api/pypath.core.annot.Matrixdb", "api/pypath.core.annot.Mcam", "api/pypath.core.annot.Membranome", "api/pypath.core.annot.Msigdb", "api/pypath.core.annot.NetpathPathways", "api/pypath.core.annot.Opm", "api/pypath.core.annot.Panglaodb", "api/pypath.core.annot.Phobius", "api/pypath.core.annot.Phosphatome", "api/pypath.core.annot.Progeny", "api/pypath.core.annot.Ramilowski2015", "api/pypath.core.annot.Ramilowski2015Location", "api/pypath.core.annot.Scconnect", "api/pypath.core.annot.ScconnectComplex", "api/pypath.core.annot.SignalinkFunctions", "api/pypath.core.annot.SignalinkPathways", "api/pypath.core.annot.SignorPathways", "api/pypath.core.annot.Surfaceome", "api/pypath.core.annot.Talklr", "api/pypath.core.annot.Tcdb", "api/pypath.core.annot.Tfcensus", "api/pypath.core.annot.Topdb", "api/pypath.core.annot.UniprotFamilies", "api/pypath.core.annot.UniprotKeywords", "api/pypath.core.annot.UniprotLocations", "api/pypath.core.annot.UniprotTissues", "api/pypath.core.annot.UniprotTopologies", "api/pypath.core.annot.Vesiclepedia", "api/pypath.core.annot.Wang", "api/pypath.core.annot.Zhong2015", "api/pypath.core.annot.get_db", "api/pypath.core.annot.init_db", "api/pypath.core.attrs", "api/pypath.core.attrs.AttributeHandler", "api/pypath.core.common", "api/pypath.core.common.filter_network_df", "api/pypath.core.complex", "api/pypath.core.complex.AbstractComplexResource", "api/pypath.core.complex.CellPhoneDB", "api/pypath.core.complex.Cellchatdb", "api/pypath.core.complex.Cellinker", "api/pypath.core.complex.Compleat", "api/pypath.core.complex.ComplexAggregator", "api/pypath.core.complex.ComplexPortal", "api/pypath.core.complex.Corum", "api/pypath.core.complex.GuideToPharmacology", "api/pypath.core.complex.Havugimana", "api/pypath.core.complex.Hpmr", "api/pypath.core.complex.Humap", "api/pypath.core.complex.Humap2", "api/pypath.core.complex.Icellnet", "api/pypath.core.complex.Kegg", "api/pypath.core.complex.Pdb", "api/pypath.core.complex.Signor", "api/pypath.core.complex.Spike", "api/pypath.core.complex.all_complexes", "api/pypath.core.complex.get_db", "api/pypath.core.complex.init_db", "api/pypath.core.entity", "api/pypath.core.entity.Entity", "api/pypath.core.entity.EntityKey", "api/pypath.core.entity.EntityList", "api/pypath.core.enz_sub", "api/pypath.core.enz_sub.EnzymeSubstrateAggregator", "api/pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor", "api/pypath.core.enz_sub.EnzymeSubstrateProcessor", "api/pypath.core.enz_sub.get_db", "api/pypath.core.enz_sub.init_db", "api/pypath.core.evidence", "api/pypath.core.evidence.Evidence", "api/pypath.core.evidence.Evidences", "api/pypath.core.interaction", "api/pypath.core.interaction.Interaction", "api/pypath.core.interaction.InteractionDataFrameRecord", "api/pypath.core.interaction.InteractionKey", "api/pypath.core.intercell", "api/pypath.core.intercell.IntercellAnnotation", "api/pypath.core.intercell.get_db", "api/pypath.core.intercell.init_db", "api/pypath.core.intercell_annot", "api/pypath.core.intercell_annot.excludes", "api/pypath.core.network", "api/pypath.core.network.Network", "api/pypath.core.network.NetworkEntityCollection", "api/pypath.core.network.NetworkStatsRecord", "api/pypath.core.network.get_db", "api/pypath.core.network.init_db", "api/pypath.data", "api/pypath.disclaimer", "api/pypath.info", "api/pypath.inputs", "api/pypath.inputs.abs", "api/pypath.inputs.abs.abs_interactions", "api/pypath.inputs.acsn", "api/pypath.inputs.acsn.acsn_interactions", "api/pypath.inputs.acsn.acsn_interactions_sif", "api/pypath.inputs.adhesome", "api/pypath.inputs.adhesome.adhesome_annotations", "api/pypath.inputs.adhesome.adhesome_interactions", "api/pypath.inputs.almen2009", "api/pypath.inputs.almen2009.almen2009_annotations", "api/pypath.inputs.baccin2019", "api/pypath.inputs.baccin2019.baccin2019_annotations", "api/pypath.inputs.baccin2019.baccin2019_interactions", "api/pypath.inputs.biogps", "api/pypath.inputs.biogps.BiogpsDataset", "api/pypath.inputs.biogps.biogps_annotations", "api/pypath.inputs.biogps.biogps_datasets", "api/pypath.inputs.biogps.biogps_download", "api/pypath.inputs.biogps.biogps_download_all", "api/pypath.inputs.biogrid", "api/pypath.inputs.biogrid.biogrid_all_interactions", "api/pypath.inputs.biogrid.biogrid_interactions", "api/pypath.inputs.biomart", "api/pypath.inputs.biomart.biomart_homology", "api/pypath.inputs.biomart.biomart_microarray", "api/pypath.inputs.biomart.biomart_microarray_types", "api/pypath.inputs.biomart.biomart_microarrays", "api/pypath.inputs.biomart.biomart_query", "api/pypath.inputs.biomodels", "api/pypath.inputs.biomodels.download_single_model", "api/pypath.inputs.biomodels.get_all_models", "api/pypath.inputs.biomodels.get_biomodels", "api/pypath.inputs.biomodels.get_biomodels_req", "api/pypath.inputs.biomodels.get_single_model", "api/pypath.inputs.ca1", "api/pypath.inputs.ca1.ca1_interactions", "api/pypath.inputs.cancercellmap", "api/pypath.inputs.cancercellmap.ccmap_interactions", "api/pypath.inputs.cancerdrugsdb", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_download", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions", "api/pypath.inputs.cancersea", "api/pypath.inputs.cancersea.cancersea_annotations", "api/pypath.inputs.cell", "api/pypath.inputs.cell.cell_supplementary", "api/pypath.inputs.cellcall", "api/pypath.inputs.cellcall.cellcall_annotations", "api/pypath.inputs.cellcall.cellcall_download", "api/pypath.inputs.cellcall.cellcall_download_all", "api/pypath.inputs.cellcall.cellcall_interactions", "api/pypath.inputs.cellcellinteractions", "api/pypath.inputs.cellcellinteractions.cellcellinteractions_annotations", "api/pypath.inputs.cellchatdb", "api/pypath.inputs.cellchatdb.cellchatdb_annotations", "api/pypath.inputs.cellchatdb.cellchatdb_cofactors", "api/pypath.inputs.cellchatdb.cellchatdb_complexes", "api/pypath.inputs.cellchatdb.cellchatdb_download", "api/pypath.inputs.cellchatdb.cellchatdb_interactions", "api/pypath.inputs.cellinker", "api/pypath.inputs.cellinker.CellinkerInteraction", "api/pypath.inputs.cellinker.cellinker_annotations", "api/pypath.inputs.cellinker.cellinker_complex_annotations", "api/pypath.inputs.cellinker.cellinker_complexes", "api/pypath.inputs.cellinker.cellinker_complexes_raw", "api/pypath.inputs.cellinker.cellinker_lr_interactions", "api/pypath.inputs.cellinker.cellinker_lr_interactions_raw", "api/pypath.inputs.cellinker.cellinker_protein_annotations", "api/pypath.inputs.cellinker.cellinker_smol_interactions", "api/pypath.inputs.cellinker.cellinker_smol_interactions_raw", "api/pypath.inputs.cellinker.components_to_complex", "api/pypath.inputs.cellphonedb", "api/pypath.inputs.cellphonedb.CellPhoneDBAnnotation", "api/pypath.inputs.cellphonedb.cellphonedb_complex_annotations", "api/pypath.inputs.cellphonedb.cellphonedb_complexes", "api/pypath.inputs.cellphonedb.cellphonedb_interactions", "api/pypath.inputs.cellphonedb.cellphonedb_ligands_receptors", "api/pypath.inputs.cellphonedb.cellphonedb_protein_annotations", "api/pypath.inputs.celltalkdb", "api/pypath.inputs.celltalkdb.celltalkdb_annotations", "api/pypath.inputs.celltalkdb.celltalkdb_download", "api/pypath.inputs.celltalkdb.celltalkdb_interactions", "api/pypath.inputs.celltypist", "api/pypath.inputs.celltypist.celltypist_annotations", "api/pypath.inputs.chembl", "api/pypath.inputs.chembl.chembl_activities", "api/pypath.inputs.chembl.chembl_assays", "api/pypath.inputs.chembl.chembl_documents", "api/pypath.inputs.chembl.chembl_drug_indications", "api/pypath.inputs.chembl.chembl_molecules", "api/pypath.inputs.chembl.chembl_targets", "api/pypath.inputs.clinvar", "api/pypath.inputs.clinvar.clinvar_citations", "api/pypath.inputs.clinvar.clinvar_raw", "api/pypath.inputs.common", "api/pypath.inputs.common.csv_sep_change", "api/pypath.inputs.common.glom_fields", "api/pypath.inputs.common.json_extract", "api/pypath.inputs.common.json_read", "api/pypath.inputs.common.read_table", "api/pypath.inputs.common.read_xls", "api/pypath.inputs.compleat", "api/pypath.inputs.compleat.compleat_complexes", "api/pypath.inputs.compleat.compleat_raw", "api/pypath.inputs.complexportal", "api/pypath.inputs.complexportal.complexportal_complexes", "api/pypath.inputs.comppi", "api/pypath.inputs.comppi.comppi_interaction_locations", "api/pypath.inputs.comppi.comppi_locations", "api/pypath.inputs.connectomedb", "api/pypath.inputs.connectomedb.connectomedb_annotations", "api/pypath.inputs.connectomedb.connectomedb_interactions", "api/pypath.inputs.corum", "api/pypath.inputs.corum.corum_complexes", "api/pypath.inputs.cosmic", "api/pypath.inputs.cosmic.cancer_gene_census_annotations", "api/pypath.inputs.cpad", "api/pypath.inputs.cpad.cpad_annotations", "api/pypath.inputs.cpad.cpad_pathway_cancer", "api/pypath.inputs.cpad.get_cpad", "api/pypath.inputs.cpdb", "api/pypath.inputs.cpdb.cpdb_interactions", "api/pypath.inputs.cpdb.cpdb_interactions_ltp", "api/pypath.inputs.credentials", "api/pypath.inputs.credentials.credentials", "api/pypath.inputs.csa", "api/pypath.inputs.csa.get_csa", "api/pypath.inputs.cspa", "api/pypath.inputs.cspa.cspa_annotations", "api/pypath.inputs.cspa.cspa_cell_type_annotations", "api/pypath.inputs.cspa.cspa_cell_types", "api/pypath.inputs.ctdbase", "api/pypath.inputs.ctdbase.ctdbase_relations", "api/pypath.inputs.ctdbase.ctdbase_vocabulary", "api/pypath.inputs.cytosig", "api/pypath.inputs.cytosig.cytosig_annotations", "api/pypath.inputs.cytosig.cytosig_df", "api/pypath.inputs.dbptm", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate_old", "api/pypath.inputs.dbptm.dbptm_interactions", "api/pypath.inputs.deathdomain", "api/pypath.inputs.deathdomain.deathdomain_interactions", "api/pypath.inputs.deathdomain.deathdomain_interactions_rescued", "api/pypath.inputs.depod", "api/pypath.inputs.depod.depod_enzyme_substrate", "api/pypath.inputs.depod.depod_interactions", "api/pypath.inputs.dgidb", "api/pypath.inputs.dgidb.dgidb_annotations", "api/pypath.inputs.dgidb.dgidb_interactions", "api/pypath.inputs.dgidb.get_dgidb_old", "api/pypath.inputs.dip", "api/pypath.inputs.dip.dip_interactions", "api/pypath.inputs.dip.dip_login", "api/pypath.inputs.disgenet", "api/pypath.inputs.disgenet.DisgenetApi", "api/pypath.inputs.disgenet.disease_id_mappings", "api/pypath.inputs.disgenet.disgenet_annotations", "api/pypath.inputs.disgenet.variant_gene_mappings", "api/pypath.inputs.domino", "api/pypath.inputs.domino.domino_ddi", "api/pypath.inputs.domino.domino_enzsub", "api/pypath.inputs.domino.domino_interactions", "api/pypath.inputs.domino.get_domino", "api/pypath.inputs.dorothea", "api/pypath.inputs.dorothea.DorotheaInteraction", "api/pypath.inputs.dorothea.dorothea_full_raw", "api/pypath.inputs.dorothea.dorothea_interactions", "api/pypath.inputs.dorothea.dorothea_interactions_old", "api/pypath.inputs.dorothea.dorothea_old_csv", "api/pypath.inputs.dorothea.dorothea_rda_raw", "api/pypath.inputs.dorothea.get_dorothea_old", "api/pypath.inputs.dorothea.get_tfregulons", "api/pypath.inputs.dorothea.tfregulons_interactions", "api/pypath.inputs.dorothea.tfregulons_interactions_old", "api/pypath.inputs.drugbank", "api/pypath.inputs.drugbank.DrugbankFull", "api/pypath.inputs.drugbank.drugbank_annotations", "api/pypath.inputs.drugbank.drugbank_drugs", "api/pypath.inputs.drugbank.drugbank_interactions", "api/pypath.inputs.drugbank.drugbank_mapping", "api/pypath.inputs.drugbank.drugbank_raw_interactions", "api/pypath.inputs.drugcentral", "api/pypath.inputs.drugcentral.drugcentral_drugs", "api/pypath.inputs.drugcentral.drugcentral_interactions", "api/pypath.inputs.drugcentral.drugcentral_mapping", "api/pypath.inputs.ebi", "api/pypath.inputs.ebi.ebi_rest", "api/pypath.inputs.elm", "api/pypath.inputs.elm.elm_classes", "api/pypath.inputs.elm.elm_domains", "api/pypath.inputs.elm.elm_instances", "api/pypath.inputs.elm.elm_interactions", "api/pypath.inputs.embopress", "api/pypath.inputs.embopress.embopress_supplementary", "api/pypath.inputs.embrace", "api/pypath.inputs.embrace.embrace_annotations", "api/pypath.inputs.embrace.embrace_interactions", "api/pypath.inputs.embrace.embrace_raw", "api/pypath.inputs.embrace.embrace_translated", "api/pypath.inputs.encode", "api/pypath.inputs.encode.encode_tf_mirna_interactions", "api/pypath.inputs.ensembl", "api/pypath.inputs.ensembl.ensembl_organisms", "api/pypath.inputs.exocarta", "api/pypath.inputs.exocarta.get_exocarta", "api/pypath.inputs.exocarta.get_vesiclepedia", "api/pypath.inputs.genecards", "api/pypath.inputs.genecards.genecards_datasheet", "api/pypath.inputs.genecards.genecards_soup", "api/pypath.inputs.genecards.genecards_summaries", "api/pypath.inputs.get_method", "api/pypath.inputs.go", "api/pypath.inputs.go.get_go_desc", "api/pypath.inputs.go.get_go_quick", "api/pypath.inputs.go.get_goslim", "api/pypath.inputs.go.go_ancestors", "api/pypath.inputs.go.go_ancestors_goose", "api/pypath.inputs.go.go_ancestors_quickgo", "api/pypath.inputs.go.go_annotations", "api/pypath.inputs.go.go_annotations_all", "api/pypath.inputs.go.go_annotations_goa", "api/pypath.inputs.go.go_annotations_goose", "api/pypath.inputs.go.go_annotations_quickgo", "api/pypath.inputs.go.go_annotations_solr", "api/pypath.inputs.go.go_annotations_uniprot", "api/pypath.inputs.go.go_descendants", "api/pypath.inputs.go.go_descendants_goose", "api/pypath.inputs.go.go_descendants_quickgo", "api/pypath.inputs.go.go_descendants_to_ancestors", "api/pypath.inputs.go.go_terms", "api/pypath.inputs.go.go_terms_goose", "api/pypath.inputs.go.go_terms_quickgo", "api/pypath.inputs.go.go_terms_solr", "api/pypath.inputs.gpcrdb", "api/pypath.inputs.gpcrdb.gpcrdb_annotations", "api/pypath.inputs.graphviz", "api/pypath.inputs.graphviz.graphviz_attrs", "api/pypath.inputs.guide2pharma", "api/pypath.inputs.guide2pharma.guide2pharma_complexes", "api/pypath.inputs.guide2pharma.guide2pharma_download", "api/pypath.inputs.guide2pharma.guide2pharma_interactions", "api/pypath.inputs.havugimana", "api/pypath.inputs.havugimana.get_havugimana", "api/pypath.inputs.havugimana.havugimana_complexes", "api/pypath.inputs.hgnc", "api/pypath.inputs.hgnc.hgnc_genegroups", "api/pypath.inputs.hippie", "api/pypath.inputs.hippie.hippie_interactions", "api/pypath.inputs.homologene", "api/pypath.inputs.homologene.get_homologene", "api/pypath.inputs.homologene.homologene_dict", "api/pypath.inputs.homologene.homologene_uniprot_dict", "api/pypath.inputs.hpmr", "api/pypath.inputs.hpmr.HpmrInteraction", "api/pypath.inputs.hpmr.get_hpmr", "api/pypath.inputs.hpmr.hpmr_annotations", "api/pypath.inputs.hpmr.hpmr_complexes", "api/pypath.inputs.hpmr.hpmr_interactions", "api/pypath.inputs.hpo", "api/pypath.inputs.hpo.hpo_annotations", "api/pypath.inputs.hpo.hpo_diseases", "api/pypath.inputs.hpo.hpo_ontology", "api/pypath.inputs.hpo.hpo_terms", "api/pypath.inputs.hprd", "api/pypath.inputs.hprd.get_hprd", "api/pypath.inputs.hprd.hprd_enzyme_substrate", "api/pypath.inputs.hprd.hprd_interactions", "api/pypath.inputs.hprd.hprd_interactions_htp", "api/pypath.inputs.htri", "api/pypath.inputs.htri.htri_interactions", "api/pypath.inputs.humancellmap", "api/pypath.inputs.humancellmap.humancellmap_annotations", "api/pypath.inputs.humap", "api/pypath.inputs.humap.humap2_complexes", "api/pypath.inputs.humap.humap_complexes", "api/pypath.inputs.huri", "api/pypath.inputs.huri.hi_i_interactions", "api/pypath.inputs.huri.hi_ii_interactions", "api/pypath.inputs.huri.hi_iii_old", "api/pypath.inputs.huri.hi_union_interactions", "api/pypath.inputs.huri.huri_interactions", "api/pypath.inputs.huri.lit_bm_13_interactions", "api/pypath.inputs.huri.lit_bm_17_interactions", "api/pypath.inputs.huri.lit_bm_interactions", "api/pypath.inputs.huri.rolland_hi_ii_14", "api/pypath.inputs.huri.vidal_hi_iii_old", "api/pypath.inputs.huri.yang2016_interactions", "api/pypath.inputs.huri.yu2011_interactions", "api/pypath.inputs.i3d", "api/pypath.inputs.i3d.get_i3d", "api/pypath.inputs.icellnet", "api/pypath.inputs.icellnet.IcellnetRecord", "api/pypath.inputs.icellnet.icellnet_annotations", "api/pypath.inputs.icellnet.icellnet_complexes", "api/pypath.inputs.icellnet.icellnet_interactions", "api/pypath.inputs.ielm", "api/pypath.inputs.ielm.get_ielm", "api/pypath.inputs.ielm.get_ielm_huge", "api/pypath.inputs.imweb", "api/pypath.inputs.imweb.get_imweb", "api/pypath.inputs.imweb.get_imweb_req", "api/pypath.inputs.innatedb", "api/pypath.inputs.innatedb.innatedb_interactions", "api/pypath.inputs.instruct", "api/pypath.inputs.instruct.get_instruct", "api/pypath.inputs.instruct.get_instruct_offsets", "api/pypath.inputs.intact", "api/pypath.inputs.intact.intact_interactions", "api/pypath.inputs.integrins", "api/pypath.inputs.integrins.get_integrins", "api/pypath.inputs.interpro", "api/pypath.inputs.interpro.interpro2go_annotations", "api/pypath.inputs.interpro.interpro_annotations", "api/pypath.inputs.interpro.interpro_entries", "api/pypath.inputs.interpro.interpro_xrefs", "api/pypath.inputs.intogen", "api/pypath.inputs.intogen.intogen_annotations", "api/pypath.inputs.ipi", "api/pypath.inputs.ipi.ipi_uniprot", "api/pypath.inputs.iptmnet", "api/pypath.inputs.iptmnet.IptmnetInteraction", "api/pypath.inputs.iptmnet.iptmnet_interactions", "api/pypath.inputs.italk", "api/pypath.inputs.italk.italk_annotations", "api/pypath.inputs.italk.italk_interactions", "api/pypath.inputs.italk.italk_raw", "api/pypath.inputs.kea", "api/pypath.inputs.kea.kea_enzyme_substrate", "api/pypath.inputs.kea.kea_interactions", "api/pypath.inputs.kegg", "api/pypath.inputs.kegg.KeggPathway", "api/pypath.inputs.kegg.kegg_dbget", "api/pypath.inputs.kegg.kegg_interactions", "api/pypath.inputs.kegg.kegg_medicus", "api/pypath.inputs.kegg.kegg_medicus_complexes", "api/pypath.inputs.kegg.kegg_medicus_interactions", "api/pypath.inputs.kegg.kegg_pathway_annotations", "api/pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons", "api/pypath.inputs.kegg.kegg_pathways", "api/pypath.inputs.kegg_api", "api/pypath.inputs.kegg_api.disease_to_drug", "api/pypath.inputs.kegg_api.disease_to_gene", "api/pypath.inputs.kegg_api.disease_to_pathway", "api/pypath.inputs.kegg_api.drug_to_disease", "api/pypath.inputs.kegg_api.drug_to_drug", "api/pypath.inputs.kegg_api.drug_to_gene", "api/pypath.inputs.kegg_api.drug_to_pathway", "api/pypath.inputs.kegg_api.gene_to_disease", "api/pypath.inputs.kegg_api.gene_to_drug", "api/pypath.inputs.kegg_api.gene_to_pathway", "api/pypath.inputs.kegg_api.kegg_drug_to_chebi", "api/pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid", "api/pypath.inputs.kegg_api.kegg_gene_to_uniprot", "api/pypath.inputs.kegg_api.pathway_to_disease", "api/pypath.inputs.kegg_api.pathway_to_drug", "api/pypath.inputs.kegg_api.pathway_to_gene", "api/pypath.inputs.kinasedotcom", "api/pypath.inputs.kinasedotcom.kinasedotcom_annotations", "api/pypath.inputs.kirouac2010", "api/pypath.inputs.kirouac2010.kirouac2010_interactions", "api/pypath.inputs.lambert2018", "api/pypath.inputs.lambert2018.lambert2018_annotations", "api/pypath.inputs.lambert2018.lambert2018_s1_raw", "api/pypath.inputs.laudanna", "api/pypath.inputs.laudanna.laudanna_directions", "api/pypath.inputs.laudanna.laudanna_effects", "api/pypath.inputs.li2012", "api/pypath.inputs.li2012.get_li2012", "api/pypath.inputs.li2012.li2012_dmi", "api/pypath.inputs.li2012.li2012_enzyme_substrate", "api/pypath.inputs.li2012.li2012_interactions", "api/pypath.inputs.lincs", "api/pypath.inputs.lincs.lincs_compounds", "api/pypath.inputs.lmpid", "api/pypath.inputs.lmpid.lmpid_dmi", "api/pypath.inputs.lmpid.lmpid_interactions", "api/pypath.inputs.lmpid.load_lmpid", "api/pypath.inputs.lncdisease", "api/pypath.inputs.lncdisease.lncdisease_interactions", "api/pypath.inputs.lncrnadb", "api/pypath.inputs.lncrnadb.lncrnadb_interactions", "api/pypath.inputs.locate", "api/pypath.inputs.locate.locate_localizations", "api/pypath.inputs.lrdb", "api/pypath.inputs.lrdb.LrdbAnnotation", "api/pypath.inputs.lrdb.lrdb_annotations", "api/pypath.inputs.lrdb.lrdb_interactions", "api/pypath.inputs.macrophage", "api/pypath.inputs.macrophage.macrophage_interactions", "api/pypath.inputs.main", "api/pypath.inputs.matrisome", "api/pypath.inputs.matrisome.matrisome_annotations", "api/pypath.inputs.matrixdb", "api/pypath.inputs.matrixdb.matrixdb_annotations", "api/pypath.inputs.matrixdb.matrixdb_ecm_proteins", "api/pypath.inputs.matrixdb.matrixdb_interactions", "api/pypath.inputs.matrixdb.matrixdb_membrane_proteins", "api/pypath.inputs.matrixdb.matrixdb_secreted_proteins", "api/pypath.inputs.mcam", "api/pypath.inputs.mcam.mcam_cell_adhesion_molecules", "api/pypath.inputs.membranome", "api/pypath.inputs.membranome.membranome_annotations", "api/pypath.inputs.mimp", "api/pypath.inputs.mimp.get_kinase_class", "api/pypath.inputs.mimp.mimp_enzyme_substrate", "api/pypath.inputs.mimp.mimp_interactions", "api/pypath.inputs.mir2disease", "api/pypath.inputs.mir2disease.mir2disease_interactions", "api/pypath.inputs.mirbase", "api/pypath.inputs.mirbase.get_mirbase_aliases", "api/pypath.inputs.mirbase.mirbase_ids", "api/pypath.inputs.mirbase.mirbase_mature", "api/pypath.inputs.mirbase.mirbase_mature_all", "api/pypath.inputs.mirbase.mirbase_precursor", "api/pypath.inputs.mirbase.mirbase_precursor_all", "api/pypath.inputs.mirbase.mirbase_precursor_to_mature", "api/pypath.inputs.mirdeathdb", "api/pypath.inputs.mirdeathdb.mirdeathdb_interactions", "api/pypath.inputs.mirecords", "api/pypath.inputs.mirecords.mirecords_interactions", "api/pypath.inputs.mirtarbase", "api/pypath.inputs.mirtarbase.mirtarbase_interactions", "api/pypath.inputs.mitab", "api/pypath.inputs.mitab.mitab_field_list", "api/pypath.inputs.mitab.mitab_field_uniprot", "api/pypath.inputs.mppi", "api/pypath.inputs.mppi.mppi_interactions", "api/pypath.inputs.ncrdeathdb", "api/pypath.inputs.ncrdeathdb.ncrdeathdb_interactions", "api/pypath.inputs.negatome", "api/pypath.inputs.negatome.negatome_interactions", "api/pypath.inputs.netbiol", "api/pypath.inputs.netbiol.arn_interactions", "api/pypath.inputs.netbiol.nrf2ome_interactions", "api/pypath.inputs.netpath", "api/pypath.inputs.netpath.netpath_interactions", "api/pypath.inputs.netpath.netpath_names", "api/pypath.inputs.netpath.netpath_pathway_annotations", "api/pypath.inputs.oma", "api/pypath.inputs.oma.oma_orthologs", "api/pypath.inputs.ontology", "api/pypath.inputs.ontology.listof_ontologies", "api/pypath.inputs.ontology.ontology", "api/pypath.inputs.opm", "api/pypath.inputs.opm.opm_annotations", "api/pypath.inputs.oreganno", "api/pypath.inputs.oreganno.oreganno_interactions", "api/pypath.inputs.oreganno.oreganno_raw", "api/pypath.inputs.panglaodb", "api/pypath.inputs.panglaodb.panglaodb_annotations", "api/pypath.inputs.panglaodb.panglaodb_raw", "api/pypath.inputs.pathophenodb", "api/pypath.inputs.pathophenodb.DiseasePathogen", "api/pypath.inputs.pathophenodb.disease_pathogen_interactions", "api/pypath.inputs.pathwaycommons", "api/pypath.inputs.pathwaycommons.PathwayCommonsInteraction", "api/pypath.inputs.pathwaycommons.PathwayCommonsResource", "api/pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions", "api/pypath.inputs.pazar", "api/pypath.inputs.pazar.pazar_interactions", "api/pypath.inputs.pdb", "api/pypath.inputs.pdb.pdb_chains", "api/pypath.inputs.pdb.pdb_complexes", "api/pypath.inputs.pdb.pdb_uniprot", "api/pypath.inputs.pdzbase", "api/pypath.inputs.pdzbase.pdzbase_interactions", "api/pypath.inputs.pepcyber", "api/pypath.inputs.pepcyber.pepcyber_details", "api/pypath.inputs.pepcyber.pepcyber_interactions", "api/pypath.inputs.pfam", "api/pypath.inputs.pfam.pfam_names", "api/pypath.inputs.pfam.pfam_pdb", "api/pypath.inputs.pfam.pfam_regions", "api/pypath.inputs.pfam.pfam_uniprot", "api/pypath.inputs.pharos", "api/pypath.inputs.pharos.pharos_diseases", "api/pypath.inputs.pharos.pharos_expression", "api/pypath.inputs.pharos.pharos_general", "api/pypath.inputs.pharos.pharos_gtex", "api/pypath.inputs.pharos.pharos_ligands", "api/pypath.inputs.pharos.pharos_orthologs", "api/pypath.inputs.pharos.pharos_targets", "api/pypath.inputs.pharos.pharos_xrefs", "api/pypath.inputs.phobius", "api/pypath.inputs.phobius.phobius_annotations", "api/pypath.inputs.phosphatome", "api/pypath.inputs.phosphatome.phosphatome_annotations", "api/pypath.inputs.phosphoelm", "api/pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate", "api/pypath.inputs.phosphoelm.phosphoelm_interactions", "api/pypath.inputs.phosphoelm.phosphoelm_kinases", "api/pypath.inputs.phosphonetworks", "api/pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate", "api/pypath.inputs.phosphonetworks.phosphonetworks_interactions", "api/pypath.inputs.phosphopoint", "api/pypath.inputs.phosphopoint.phosphopoint_directions", "api/pypath.inputs.phosphopoint.phosphopoint_interactions", "api/pypath.inputs.phosphosite", "api/pypath.inputs.phosphosite.phosphosite_directions", "api/pypath.inputs.phosphosite.phosphosite_enzyme_substrate", "api/pypath.inputs.phosphosite.phosphosite_interactions", "api/pypath.inputs.phosphosite.phosphosite_interactions_all", "api/pypath.inputs.phosphosite.phosphosite_interactions_curated", "api/pypath.inputs.phosphosite.phosphosite_interactions_new", "api/pypath.inputs.phosphosite.phosphosite_interactions_noref", "api/pypath.inputs.phosphosite.phosphosite_ptm_orthology", "api/pypath.inputs.phosphosite.phosphosite_ptms", "api/pypath.inputs.phosphosite.phosphosite_regsites", "api/pypath.inputs.phosphosite.phosphosite_regsites_one_organism", "api/pypath.inputs.phosphosite.regsites_tab", "api/pypath.inputs.pisa", "api/pypath.inputs.pisa.PisaBond", "api/pypath.inputs.pisa.pisa_bonds", "api/pypath.inputs.pisa.pisa_interfaces", "api/pypath.inputs.pro", "api/pypath.inputs.pro.get_pro", "api/pypath.inputs.pro.pro_mapping", "api/pypath.inputs.progeny", "api/pypath.inputs.progeny.progeny_annotations", "api/pypath.inputs.progeny.progeny_raw", "api/pypath.inputs.proteinatlas", "api/pypath.inputs.proteinatlas.get_proteinatlas", "api/pypath.inputs.proteinatlas.proteinatlas_annotations", "api/pypath.inputs.proteinatlas.proteinatlas_secretome_annotations", "api/pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations", "api/pypath.inputs.proteins", "api/pypath.inputs.proteins.variants", "api/pypath.inputs.protmapper", "api/pypath.inputs.protmapper.get_protmapper", "api/pypath.inputs.protmapper.protmapper_enzyme_substrate", "api/pypath.inputs.protmapper.protmapper_interactions", "api/pypath.inputs.pubchem", "api/pypath.inputs.pubchem.pubchem_mapping", "api/pypath.inputs.pubmed", "api/pypath.inputs.pubmed.get_pmid", "api/pypath.inputs.pubmed.get_pubmeds", "api/pypath.inputs.pubmed.only_pmids", "api/pypath.inputs.pubmed.open_pubmed", "api/pypath.inputs.pubmed.pmids_dict", "api/pypath.inputs.pubmed.pmids_list", "api/pypath.inputs.ramilowski2015", "api/pypath.inputs.ramilowski2015.ramilowski_interactions", "api/pypath.inputs.ramilowski2015.ramilowski_locations", "api/pypath.inputs.rdata", "api/pypath.inputs.reaction", "api/pypath.inputs.reaction.acsn_biopax", "api/pypath.inputs.reaction.acsn_interactions_2", "api/pypath.inputs.reaction.get_acsn_effects", "api/pypath.inputs.reaction.get_controls", "api/pypath.inputs.reaction.get_interactions", "api/pypath.inputs.reaction.get_reactions", "api/pypath.inputs.reaction.get_soup", "api/pypath.inputs.reaction.panther_biopax", "api/pypath.inputs.reaction.panther_interactions", "api/pypath.inputs.reaction.pid_biopax", "api/pypath.inputs.reaction.pid_interactions", "api/pypath.inputs.reaction.process_complex", "api/pypath.inputs.reaction.process_controls", "api/pypath.inputs.reaction.process_reactions", "api/pypath.inputs.reaction.reactions_biopax", "api/pypath.inputs.reaction.reactome_biopax", "api/pypath.inputs.reaction.reactome_bs", "api/pypath.inputs.reaction.reactome_interactions", "api/pypath.inputs.reaction.reactome_sbml", "api/pypath.inputs.scconnect", "api/pypath.inputs.scconnect.scconnect_annotations", "api/pypath.inputs.scconnect.scconnect_complexes", "api/pypath.inputs.scconnect.scconnect_interactions", "api/pypath.inputs.science", "api/pypath.inputs.science.science_download", "api/pypath.inputs.signalink", "api/pypath.inputs.signalink.signalink_annotations", "api/pypath.inputs.signalink.signalink_function_annotations", "api/pypath.inputs.signalink.signalink_interactions", "api/pypath.inputs.signalink.signalink_pathway_annotations", "api/pypath.inputs.signor", "api/pypath.inputs.signor.signor_complexes", "api/pypath.inputs.signor.signor_enzyme_substrate", "api/pypath.inputs.signor.signor_interactions", "api/pypath.inputs.signor.signor_pathway_annotations", "api/pypath.inputs.signor.signor_pathways", "api/pypath.inputs.signor.signor_protein_families", "api/pypath.inputs.spike", "api/pypath.inputs.spike.spike_complexes", "api/pypath.inputs.spike.spike_interactions", "api/pypath.inputs.stitch", "api/pypath.inputs.stitch.stitch_actions_interactions", "api/pypath.inputs.stitch.stitch_links_interactions", "api/pypath.inputs.string", "api/pypath.inputs.string.string_effects", "api/pypath.inputs.string.string_links_interactions", "api/pypath.inputs.string.string_physical_interactions", "api/pypath.inputs.string.string_species", "api/pypath.inputs.surfaceome", "api/pypath.inputs.surfaceome.surfaceome_annotations", "api/pypath.inputs.switches_elm", "api/pypath.inputs.switches_elm.get_switches_elm", "api/pypath.inputs.talklr", "api/pypath.inputs.talklr.talklr_annotations", "api/pypath.inputs.talklr.talklr_interactions", "api/pypath.inputs.talklr.talklr_raw", "api/pypath.inputs.tcdb", "api/pypath.inputs.tcdb.tcdb_annotations", "api/pypath.inputs.tcdb.tcdb_classes", "api/pypath.inputs.tcdb.tcdb_families", "api/pypath.inputs.tfcensus", "api/pypath.inputs.tfcensus.tfcensus_annotations", "api/pypath.inputs.threedcomplex", "api/pypath.inputs.threedcomplex.threedcomplex_chains", "api/pypath.inputs.threedcomplex.threedcomplex_complexes", "api/pypath.inputs.threedcomplex.threedcomplex_contacts", "api/pypath.inputs.threedcomplex.threedcomplex_ddi", "api/pypath.inputs.threedcomplex.threedcomplex_nresidues", "api/pypath.inputs.threedid", "api/pypath.inputs.threedid.get_3did", "api/pypath.inputs.threedid.get_3did_ddi", "api/pypath.inputs.threedid.get_3did_dmi", "api/pypath.inputs.threedid.process_3did_dmi", "api/pypath.inputs.topdb", "api/pypath.inputs.topdb.topdb_annotations", "api/pypath.inputs.transmir", "api/pypath.inputs.transmir.transmir_interactions", "api/pypath.inputs.trip", "api/pypath.inputs.trip.take_a_trip", "api/pypath.inputs.trip.trip_find_uniprot", "api/pypath.inputs.trip.trip_get_uniprot", "api/pypath.inputs.trip.trip_interactions", "api/pypath.inputs.trip.trip_process", "api/pypath.inputs.trip.trip_process_table", "api/pypath.inputs.trrust", "api/pypath.inputs.trrust.scrape_human", "api/pypath.inputs.trrust.scrape_mouse", "api/pypath.inputs.trrust.trrust_general", "api/pypath.inputs.trrust.trrust_human", "api/pypath.inputs.trrust.trrust_mouse", "api/pypath.inputs.trrust.trrust_scraping", "api/pypath.inputs.unichem", "api/pypath.inputs.unichem.info", "api/pypath.inputs.unichem.unichem_info", "api/pypath.inputs.unichem.unichem_mapping", "api/pypath.inputs.unichem.unichem_sources", "api/pypath.inputs.uniprot", "api/pypath.inputs.uniprot.Taxon", "api/pypath.inputs.uniprot.UniprotRecordHistory", "api/pypath.inputs.uniprot.all_swissprots", "api/pypath.inputs.uniprot.all_trembls", "api/pypath.inputs.uniprot.all_uniprots", "api/pypath.inputs.uniprot.deleted_uniprot_genesymbol", "api/pypath.inputs.uniprot.get_db", "api/pypath.inputs.uniprot.get_uniprot_sec", "api/pypath.inputs.uniprot.init_db", "api/pypath.inputs.uniprot.is_swissprot", "api/pypath.inputs.uniprot.is_trembl", "api/pypath.inputs.uniprot.is_uniprot", "api/pypath.inputs.uniprot.protein_datasheet", "api/pypath.inputs.uniprot.swissprot_deleted", "api/pypath.inputs.uniprot.trembl_deleted", "api/pypath.inputs.uniprot.uniprot_data", "api/pypath.inputs.uniprot.uniprot_deleted", "api/pypath.inputs.uniprot.uniprot_families", "api/pypath.inputs.uniprot.uniprot_history", "api/pypath.inputs.uniprot.uniprot_history_recent_datasheet", "api/pypath.inputs.uniprot.uniprot_keywords", "api/pypath.inputs.uniprot.uniprot_locations", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids_2", "api/pypath.inputs.uniprot.uniprot_preprocess", "api/pypath.inputs.uniprot.uniprot_recent_version", "api/pypath.inputs.uniprot.uniprot_taxonomy", "api/pypath.inputs.uniprot.uniprot_tissues", "api/pypath.inputs.uniprot.uniprot_topology", "api/pypath.inputs.uniprot.valid_uniprot", "api/pypath.inputs.wang", "api/pypath.inputs.wang.cui_interactions", "api/pypath.inputs.wang.hsn_interactions", "api/pypath.inputs.wang.wang_annotations", "api/pypath.inputs.wang.wang_interactions", "api/pypath.inputs.wojtowicz2020", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_interactions", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_raw", "api/pypath.inputs.zhong2015", "api/pypath.inputs.zhong2015.zhong2015_annotations", "api/pypath.internals", "api/pypath.internals.annot_formats", "api/pypath.internals.annot_formats.AnnotDef", "api/pypath.internals.annot_formats.AnnotDefKey", "api/pypath.internals.annot_formats.AnnotOp", "api/pypath.internals.annot_formats.AnnotationGroup", "api/pypath.internals.input_formats", "api/pypath.internals.input_formats.ArrayMapping", "api/pypath.internals.input_formats.BiomartMapping", "api/pypath.internals.input_formats.FileMapping", "api/pypath.internals.input_formats.MappingInput", "api/pypath.internals.input_formats.NetworkInput", "api/pypath.internals.input_formats.PickleMapping", "api/pypath.internals.input_formats.ProMapping", "api/pypath.internals.input_formats.ReadList", "api/pypath.internals.input_formats.UnichemMapping", "api/pypath.internals.input_formats.UniprotListMapping", "api/pypath.internals.input_formats.UniprotMapping", "api/pypath.internals.intera", "api/pypath.internals.intera.Complex", "api/pypath.internals.intera.Domain", "api/pypath.internals.intera.DomainDomain", "api/pypath.internals.intera.DomainMotif", "api/pypath.internals.intera.Interface", "api/pypath.internals.intera.Motif", "api/pypath.internals.intera.Ptm", "api/pypath.internals.intera.Regulation", "api/pypath.internals.intera.Residue", "api/pypath.internals.license", "api/pypath.internals.license.License", "api/pypath.internals.license.LicenseAttrib", "api/pypath.internals.license.LicenseFeature", "api/pypath.internals.license.LicensePurpose", "api/pypath.internals.license.LicenseSharing", "api/pypath.internals.maps", "api/pypath.internals.refs", "api/pypath.internals.refs.Reference", "api/pypath.internals.refs.get_pubmed_data", "api/pypath.internals.resource", "api/pypath.internals.resource.AbstractResource", "api/pypath.internals.resource.EnzymeSubstrateResource", "api/pypath.internals.resource.EnzymeSubstrateResourceKey", "api/pypath.internals.resource.NetworkResource", "api/pypath.internals.resource.NetworkResourceKey", "api/pypath.internals.resource.ResourceAttributes", "api/pypath.legacy", "api/pypath.legacy.db_categories", "api/pypath.legacy.db_categories.get_categories", "api/pypath.legacy.db_categories.get_category", "api/pypath.legacy.main", "api/pypath.legacy.main.Direction", "api/pypath.legacy.main.NetworkEntityCollection", "api/pypath.legacy.main.NetworkStatsRecord", "api/pypath.legacy.main.PyPath", "api/pypath.legacy.main.get_db", "api/pypath.legacy.main.init_db", "api/pypath.log", "api/pypath.omnipath", "api/pypath.omnipath.app", "api/pypath.omnipath.app.DatabaseManager", "api/pypath.omnipath.databases", "api/pypath.omnipath.databases.build", "api/pypath.omnipath.databases.class_and_param", "api/pypath.omnipath.databases.define", "api/pypath.omnipath.databases.define.DatabaseClass", "api/pypath.omnipath.databases.define.DatabaseDefinition", "api/pypath.omnipath.databases.define.DatabaseDefinitionManager", "api/pypath.omnipath.databases.get_manager", "api/pypath.omnipath.databases.init_manager", "api/pypath.omnipath.export", "api/pypath.omnipath.export.Export", "api/pypath.omnipath.init", "api/pypath.omnipath.param", "api/pypath.omnipath.param.curated_ppi_resources", "api/pypath.omnipath.param.tf_target_resources", "api/pypath.omnipath.server", "api/pypath.omnipath.server.build", "api/pypath.omnipath.server.build.WebserviceTables", "api/pypath.omnipath.server.generate_about_page", "api/pypath.omnipath.server.generate_about_page.export_licenses", "api/pypath.omnipath.server.generate_about_page.generate_about_html", "api/pypath.omnipath.server.generate_about_page.resource_list_latex", "api/pypath.omnipath.server.generate_about_page.write_html", "api/pypath.omnipath.server.legacy", "api/pypath.omnipath.server.legacy.PypathServer", "api/pypath.omnipath.server.run", "api/pypath.omnipath.server.run.BaseServer", "api/pypath.omnipath.server.run.Rest", "api/pypath.omnipath.server.run.TableServer", "api/pypath.omnipath.server.run.TwistedWebResource", "api/pypath.omnipath.server.run.TwistedWebSite", "api/pypath.omnipath.server.run.stop_server", "api/pypath.omnipath.server.run.twisted_listen_tcp", "api/pypath.omnipath.server.run.twisted_run", "api/pypath.resources", "api/pypath.resources.controller", "api/pypath.resources.controller.ResourceController", "api/pypath.resources.data", "api/pypath.resources.data_formats", "api/pypath.resources.data_formats.ROOT", "api/pypath.resources.data_formats.activity_flow", "api/pypath.resources.data_formats.enzyme_substrate", "api/pypath.resources.data_formats.interaction", "api/pypath.resources.data_formats.interaction_htp", "api/pypath.resources.data_formats.obsolate", "api/pypath.resources.data_formats.pathway_bad", "api/pypath.resources.data_formats.reaction_pc", "api/pypath.resources.data_formats.transcription_deprecated", "api/pypath.resources.data_formats.transcription_onebyone", "api/pypath.resources.descriptions", "api/pypath.resources.descriptions.export_licenses", "api/pypath.resources.descriptions.gen_html", "api/pypath.resources.descriptions.resource_list_latex", "api/pypath.resources.descriptions.write_html", "api/pypath.resources.get_controller", "api/pypath.resources.licenses", "api/pypath.resources.licenses.Licenses", "api/pypath.resources.network", "api/pypath.resources.network.dorothea_expand_levels", "api/pypath.resources.urls", "api/pypath.share", "api/pypath.share.cache", "api/pypath.share.cache.cache_item", "api/pypath.share.cache.get_cachedir", "api/pypath.share.common", "api/pypath.share.common.add_to_list", "api/pypath.share.common.add_to_set", "api/pypath.share.common.at_least_in", "api/pypath.share.common.clean_dict", "api/pypath.share.common.combine_attrs", "api/pypath.share.common.console", "api/pypath.share.common.decode", "api/pypath.share.common.del_empty", "api/pypath.share.common.df_memory_usage", "api/pypath.share.common.dict_collapse_keys", "api/pypath.share.common.dict_counts", "api/pypath.share.common.dict_diff", "api/pypath.share.common.dict_expand_keys", "api/pypath.share.common.dict_percent", "api/pypath.share.common.dict_set_path", "api/pypath.share.common.dict_set_percent", "api/pypath.share.common.dict_str", "api/pypath.share.common.dict_subtotals", "api/pypath.share.common.dict_sym_diff", "api/pypath.share.common.dict_union", "api/pypath.share.common.eq", "api/pypath.share.common.filtr", "api/pypath.share.common.first", "api/pypath.share.common.flat_list", "api/pypath.share.common.float_or_nan", "api/pypath.share.common.gen_session_id", "api/pypath.share.common.get", "api/pypath.share.common.get_args", "api/pypath.share.common.is_float", "api/pypath.share.common.is_int", "api/pypath.share.common.is_str", "api/pypath.share.common.jaccard_index", "api/pypath.share.common.join_dicts", "api/pypath.share.common.latex_table", "api/pypath.share.common.match", "api/pypath.share.common.maybe_in_dict", "api/pypath.share.common.md5", "api/pypath.share.common.merge_dicts", "api/pypath.share.common.n_shared_elements", "api/pypath.share.common.n_shared_foreach", "api/pypath.share.common.n_shared_total", "api/pypath.share.common.n_shared_unique_foreach", "api/pypath.share.common.n_unique_elements", "api/pypath.share.common.n_unique_foreach", "api/pypath.share.common.n_unique_total", "api/pypath.share.common.negate", "api/pypath.share.common.none_or_len", "api/pypath.share.common.paginate", "api/pypath.share.common.prefix", "api/pypath.share.common.print_table", "api/pypath.share.common.re_safe_groups", "api/pypath.share.common.remove_prefix", "api/pypath.share.common.rotate", "api/pypath.share.common.sets_to_sorted_lists", "api/pypath.share.common.sfirst", "api/pypath.share.common.shared_elements", "api/pypath.share.common.shared_foreach", "api/pypath.share.common.shared_total", "api/pypath.share.common.shared_unique", "api/pypath.share.common.shared_unique_foreach", "api/pypath.share.common.shared_unique_total", "api/pypath.share.common.silent", "api/pypath.share.common.simpson_index", "api/pypath.share.common.simpson_index_counts", "api/pypath.share.common.something", "api/pypath.share.common.sorensen_index", "api/pypath.share.common.suffix", "api/pypath.share.common.sum_dicts", "api/pypath.share.common.swap_dict", "api/pypath.share.common.swap_dict_simple", "api/pypath.share.common.swap_suffix", "api/pypath.share.common.table_add_row_numbers", "api/pypath.share.common.table_format", "api/pypath.share.common.table_textwrap", "api/pypath.share.common.to_list", "api/pypath.share.common.to_set", "api/pypath.share.common.try_bool", "api/pypath.share.common.try_float", "api/pypath.share.common.tsv_table", "api/pypath.share.common.uniq_list", "api/pypath.share.common.uniq_list1", "api/pypath.share.common.uniq_list2", "api/pypath.share.common.uniq_ord_list", "api/pypath.share.common.unique_elements", "api/pypath.share.common.unique_foreach", "api/pypath.share.common.unique_list", "api/pypath.share.common.unique_total", "api/pypath.share.common.upper0", "api/pypath.share.common.values", "api/pypath.share.common.wcl", "api/pypath.share.common.wrap_truncate", "api/pypath.share.constants", "api/pypath.share.curl", "api/pypath.share.curl.Curl", "api/pypath.share.curl.FileOpener", "api/pypath.share.curl.RemoteFile", "api/pypath.share.curl.cache_delete_off", "api/pypath.share.curl.cache_delete_on", "api/pypath.share.curl.cache_off", "api/pypath.share.curl.cache_on", "api/pypath.share.curl.cache_print_off", "api/pypath.share.curl.cache_print_on", "api/pypath.share.curl.debug_off", "api/pypath.share.curl.debug_on", "api/pypath.share.curl.dryrun_off", "api/pypath.share.curl.dryrun_on", "api/pypath.share.curl.is_url", "api/pypath.share.curl.preserve_off", "api/pypath.share.curl.preserve_on", "api/pypath.share.log", "api/pypath.share.log.Logger", "api/pypath.share.log.new_logger", "api/pypath.share.progress", "api/pypath.share.progress.Progress", "api/pypath.share.session", "api/pypath.share.session.Logger", "api/pypath.share.session.Session", "api/pypath.share.session.get_log", "api/pypath.share.session.get_session", "api/pypath.share.session.new_session", "api/pypath.share.settings", "api/pypath.share.settings.Settings", "api/pypath.share.settings.context", "api/pypath.share.settings.get", "api/pypath.share.settings.setup", "api/pypath.utils", "api/pypath.utils.go", "api/pypath.utils.go.GOAnnotation", "api/pypath.utils.go.GOCustomAnnotation", "api/pypath.utils.go.GeneOntology", "api/pypath.utils.go.annotate", "api/pypath.utils.go.get_db", "api/pypath.utils.go.init_db", "api/pypath.utils.go.load_go", "api/pypath.utils.homology", "api/pypath.utils.homology.HomologyManager", "api/pypath.utils.homology.Ortholog", "api/pypath.utils.homology.ProteinHomology", "api/pypath.utils.homology.Proteomes", "api/pypath.utils.homology.PtmHomology", "api/pypath.utils.homology.SequenceContainer", "api/pypath.utils.homology.get_df", "api/pypath.utils.homology.get_dict", "api/pypath.utils.homology.get_manager", "api/pypath.utils.homology.init", "api/pypath.utils.homology.translate", "api/pypath.utils.homology.translate_df", "api/pypath.utils.mapping", "api/pypath.utils.mapping.MapReader", "api/pypath.utils.mapping.Mapper", "api/pypath.utils.mapping.MappingTable", "api/pypath.utils.mapping.MappingTableKey", "api/pypath.utils.mapping.UNIPROT_ID_TYPES", "api/pypath.utils.mapping.get_mapper", "api/pypath.utils.mapping.guess_type", "api/pypath.utils.mapping.id_from_label", "api/pypath.utils.mapping.id_from_label0", "api/pypath.utils.mapping.init", "api/pypath.utils.mapping.label", "api/pypath.utils.mapping.map_name", "api/pypath.utils.mapping.map_name0", "api/pypath.utils.mapping.map_names", "api/pypath.utils.pdb", "api/pypath.utils.pdb.Residue", "api/pypath.utils.pdb.ResidueMapper", "api/pypath.utils.pdb.Segment", "api/pypath.utils.pdb.residue_pdb", "api/pypath.utils.proteomicsdb", "api/pypath.utils.proteomicsdb.ProteomicsDB", "api/pypath.utils.pyreact", "api/pypath.utils.pyreact.AttributeHandler", "api/pypath.utils.pyreact.BioPaxReader", "api/pypath.utils.pyreact.Complex", "api/pypath.utils.pyreact.ComplexVariations", "api/pypath.utils.pyreact.Control", "api/pypath.utils.pyreact.Entity", "api/pypath.utils.pyreact.EntitySet", "api/pypath.utils.pyreact.Intersecting", "api/pypath.utils.pyreact.Protein", "api/pypath.utils.pyreact.ProteinFamily", "api/pypath.utils.pyreact.PyReact", "api/pypath.utils.pyreact.Reaction", "api/pypath.utils.pyreact.ReactionSide", "api/pypath.utils.pyreact.Reference", "api/pypath.utils.reflists", "api/pypath.utils.reflists.ReferenceListManager", "api/pypath.utils.reflists.check", "api/pypath.utils.reflists.get_manager", "api/pypath.utils.reflists.get_reflist", "api/pypath.utils.reflists.init", "api/pypath.utils.reflists.is_not", "api/pypath.utils.reflists.select", "api/pypath.utils.residues", "api/pypath.utils.residues.ResidueMapper", "api/pypath.utils.seq", "api/pypath.utils.seq.Pfam", "api/pypath.utils.seq.Resource", "api/pypath.utils.seq.Seq", "api/pypath.utils.seq.get_isoforms", "api/pypath.utils.seq.read_fasta", "api/pypath.utils.seq.swissprot_seq", "api/pypath.utils.taxonomy", "api/pypath.utils.taxonomy.ensure_common_name", "api/pypath.utils.taxonomy.ensure_ensembl_name", "api/pypath.utils.taxonomy.ensure_latin_name", "api/pypath.utils.taxonomy.ensure_ncbi_tax_id", "api/pypath.utils.taxonomy.get_db", "api/pypath.utils.taxonomy.init_db", "api/pypath.utils.taxonomy.short_latin_names", "api/pypath.utils.taxonomy.shorten_latin_name", "api/pypath.utils.taxonomy.taxid_from_common_name", "api/pypath.utils.taxonomy.taxid_from_dbptm_taxon_name", "api/pypath.utils.taxonomy.taxid_from_ensembl_name", "api/pypath.utils.taxonomy.taxid_from_latin_name", "api/pypath.utils.taxonomy.taxid_from_nonstandard", "api/pypath.utils.taxonomy.uniprot_taxid", "api/pypath.utils.unichem", "api/pypath.utils.unichem.Unichem", "api/pypath.utils.uniprot", "api/pypath.utils.uniprot.UniprotProtein", "api/pypath.utils.uniprot.ac", "api/pypath.utils.uniprot.activity_regulation", "api/pypath.utils.uniprot.activity_regulation_with_xrefs", "api/pypath.utils.uniprot.alternative_products", "api/pypath.utils.uniprot.alternative_products_with_xrefs", "api/pypath.utils.uniprot.browse", "api/pypath.utils.uniprot.catalytic_activity", "api/pypath.utils.uniprot.catalytic_activity_with_xrefs", "api/pypath.utils.uniprot.collect", "api/pypath.utils.uniprot.databases", "api/pypath.utils.uniprot.disease", "api/pypath.utils.uniprot.disease_with_xrefs", "api/pypath.utils.uniprot.ec", "api/pypath.utils.uniprot.features_table", "api/pypath.utils.uniprot.full_name", "api/pypath.utils.uniprot.function", "api/pypath.utils.uniprot.function_genecards", "api/pypath.utils.uniprot.function_or_genecards", "api/pypath.utils.uniprot.function_with_genecards", "api/pypath.utils.uniprot.function_with_xrefs", "api/pypath.utils.uniprot.genesymbol", "api/pypath.utils.uniprot.has_tag", "api/pypath.utils.uniprot.id", "api/pypath.utils.uniprot.info", "api/pypath.utils.uniprot.info_section", "api/pypath.utils.uniprot.interaction", "api/pypath.utils.uniprot.interaction_with_xrefs", "api/pypath.utils.uniprot.is_reviewed", "api/pypath.utils.uniprot.itertag", "api/pypath.utils.uniprot.keywords", "api/pypath.utils.uniprot.keywords_with_xrefs", "api/pypath.utils.uniprot.length", "api/pypath.utils.uniprot.lengths", "api/pypath.utils.uniprot.load", "api/pypath.utils.uniprot.organism", "api/pypath.utils.uniprot.print_features", "api/pypath.utils.uniprot.ptm", "api/pypath.utils.uniprot.ptm_with_xrefs", "api/pypath.utils.uniprot.query", "api/pypath.utils.uniprot.reload", "api/pypath.utils.uniprot.remove_xrefs", "api/pypath.utils.uniprot.sequence", "api/pypath.utils.uniprot.sequence_caution", "api/pypath.utils.uniprot.sequence_caution_with_xrefs", "api/pypath.utils.uniprot.similarity", "api/pypath.utils.uniprot.similarity_with_xrefs", "api/pypath.utils.uniprot.subcellular_location", "api/pypath.utils.uniprot.subcellular_location_with_xrefs", "api/pypath.utils.uniprot.subunit", "api/pypath.utils.uniprot.subunit_with_xrefs", "api/pypath.utils.uniprot.tissue_specificity", "api/pypath.utils.uniprot.tissue_specificity_with_xrefs", "api/pypath.utils.uniprot.update_databases", "api/pypath.utils.uniprot.update_info", "api/pypath.utils.uniprot.web_resource", "api/pypath.utils.uniprot.web_resource_with_xrefs", "api/pypath.utils.uniprot.weight", "api/pypath.utils.uniprot.weights", "api/pypath.visual", "api/pypath.visual.drawing", "api/pypath.visual.drawing.InterSet", "api/pypath.visual.drawing.Plot", "api/pypath.visual.igraph_drawing", "api/pypath.visual.igraph_drawing.AbstractCairoGraphDrawer", "api/pypath.visual.igraph_drawing.ArrowEdgeDrawer", "api/pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport", "api/pypath.visual.igraph_drawing.DefaultVertexDrawer", "api/pypath.visual.igraph_drawing.TextDrawer", "api/pypath.visual.igraph_drawing.edge", "api/pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer", "api/pypath.visual.igraph_drawing.vertex", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer", "api/pypath.visual.igraph_drawing.vertex.AbstractDrawer", "api/pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer", "api/pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer", "api/pypath.visual.plot", "api/pypath.visual.plot.Barplot", "api/pypath.visual.plot.BarplotsGrid", "api/pypath.visual.plot.CurationPlot", "api/pypath.visual.plot.Dendrogram", "api/pypath.visual.plot.Histogram", "api/pypath.visual.plot.HistoryTree", "api/pypath.visual.plot.HtpCharacteristics", "api/pypath.visual.plot.MultiBarplot", "api/pypath.visual.plot.Plot", "api/pypath.visual.plot.RefsComposite", "api/pypath.visual.plot.ScatterPlus", "api/pypath.visual.plot.SimilarityGraph", "api/pypath.visual.plot.StackedBarplot", "api/pypath.visual.plot.boxplot", "api/pypath.visual.plot.get_moves", "api/pypath.visual.plot.is_opentype_cff_font", "api/pypath.visual.plot.move_labels", "api/pypath.visual.plot.overlap", "api/pypath.visual.plot.rotate_labels", "contents", "index", "notebooks/manual", "reference", "releasehistory", "webservice"], "filenames": ["api/pypath.rst", "api/pypath.core.rst", "api/pypath.core.annot.rst", "api/pypath.core.annot.Adhesome.rst", "api/pypath.core.annot.Almen2009.rst", "api/pypath.core.annot.AnnotationBase.rst", "api/pypath.core.annot.AnnotationTable.rst", "api/pypath.core.annot.Baccin2019.rst", "api/pypath.core.annot.Biogps.rst", "api/pypath.core.annot.CancerGeneCensus.rst", "api/pypath.core.annot.Cancerdrugsdb.rst", "api/pypath.core.annot.Cancersea.rst", "api/pypath.core.annot.CellPhoneDB.rst", "api/pypath.core.annot.CellPhoneDBComplex.rst", "api/pypath.core.annot.CellSurfaceProteinAtlas.rst", "api/pypath.core.annot.CellSurfaceProteinAtlasCellType.rst", "api/pypath.core.annot.Cellcall.rst", "api/pypath.core.annot.Cellcellinteractions.rst", "api/pypath.core.annot.Cellchatdb.rst", "api/pypath.core.annot.CellchatdbComplex.rst", "api/pypath.core.annot.Cellinker.rst", "api/pypath.core.annot.CellinkerComplex.rst", "api/pypath.core.annot.Celltalkdb.rst", "api/pypath.core.annot.Celltypist.rst", "api/pypath.core.annot.Comppi.rst", "api/pypath.core.annot.Connectomedb.rst", "api/pypath.core.annot.Corum.rst", "api/pypath.core.annot.CorumFuncat.rst", "api/pypath.core.annot.CorumGO.rst", "api/pypath.core.annot.Cpad.rst", "api/pypath.core.annot.CustomAnnotation.rst", "api/pypath.core.annot.Cytosig.rst", "api/pypath.core.annot.Dgidb.rst", "api/pypath.core.annot.Disgenet.rst", "api/pypath.core.annot.Embrace.rst", "api/pypath.core.annot.Exocarta.rst", "api/pypath.core.annot.GOCustomIntercell.rst", "api/pypath.core.annot.GOIntercell.rst", "api/pypath.core.annot.Gpcrdb.rst", "api/pypath.core.annot.GuideToPharmacology.rst", "api/pypath.core.annot.HPO.rst", "api/pypath.core.annot.Hgnc.rst", "api/pypath.core.annot.HpmrComplex.rst", "api/pypath.core.annot.HumanPlasmaMembraneReceptome.rst", "api/pypath.core.annot.HumanProteinAtlas.rst", "api/pypath.core.annot.HumanProteinAtlasSecretome.rst", "api/pypath.core.annot.HumanProteinAtlasSubcellular.rst", "api/pypath.core.annot.Humancellmap.rst", "api/pypath.core.annot.Icellnet.rst", "api/pypath.core.annot.IcellnetComplex.rst", "api/pypath.core.annot.Integrins.rst", "api/pypath.core.annot.InterPro.rst", "api/pypath.core.annot.Intogen.rst", "api/pypath.core.annot.Italk.rst", "api/pypath.core.annot.KeggPathways.rst", "api/pypath.core.annot.KeggPathwaysPC.rst", "api/pypath.core.annot.Kinasedotcom.rst", "api/pypath.core.annot.Kirouac2010.rst", "api/pypath.core.annot.Lambert2018.rst", "api/pypath.core.annot.LigandReceptor.rst", "api/pypath.core.annot.Locate.rst", "api/pypath.core.annot.Lrdb.rst", "api/pypath.core.annot.Matrisome.rst", "api/pypath.core.annot.Matrixdb.rst", "api/pypath.core.annot.Mcam.rst", "api/pypath.core.annot.Membranome.rst", "api/pypath.core.annot.Msigdb.rst", "api/pypath.core.annot.NetpathPathways.rst", "api/pypath.core.annot.Opm.rst", "api/pypath.core.annot.Panglaodb.rst", "api/pypath.core.annot.Phobius.rst", "api/pypath.core.annot.Phosphatome.rst", "api/pypath.core.annot.Progeny.rst", "api/pypath.core.annot.Ramilowski2015.rst", "api/pypath.core.annot.Ramilowski2015Location.rst", "api/pypath.core.annot.Scconnect.rst", "api/pypath.core.annot.ScconnectComplex.rst", "api/pypath.core.annot.SignalinkFunctions.rst", "api/pypath.core.annot.SignalinkPathways.rst", "api/pypath.core.annot.SignorPathways.rst", "api/pypath.core.annot.Surfaceome.rst", "api/pypath.core.annot.Talklr.rst", "api/pypath.core.annot.Tcdb.rst", "api/pypath.core.annot.Tfcensus.rst", "api/pypath.core.annot.Topdb.rst", "api/pypath.core.annot.UniprotFamilies.rst", "api/pypath.core.annot.UniprotKeywords.rst", "api/pypath.core.annot.UniprotLocations.rst", "api/pypath.core.annot.UniprotTissues.rst", "api/pypath.core.annot.UniprotTopologies.rst", "api/pypath.core.annot.Vesiclepedia.rst", "api/pypath.core.annot.Wang.rst", "api/pypath.core.annot.Zhong2015.rst", "api/pypath.core.annot.get_db.rst", "api/pypath.core.annot.init_db.rst", "api/pypath.core.attrs.rst", "api/pypath.core.attrs.AttributeHandler.rst", "api/pypath.core.common.rst", "api/pypath.core.common.filter_network_df.rst", "api/pypath.core.complex.rst", "api/pypath.core.complex.AbstractComplexResource.rst", "api/pypath.core.complex.CellPhoneDB.rst", "api/pypath.core.complex.Cellchatdb.rst", "api/pypath.core.complex.Cellinker.rst", "api/pypath.core.complex.Compleat.rst", "api/pypath.core.complex.ComplexAggregator.rst", "api/pypath.core.complex.ComplexPortal.rst", "api/pypath.core.complex.Corum.rst", "api/pypath.core.complex.GuideToPharmacology.rst", "api/pypath.core.complex.Havugimana.rst", "api/pypath.core.complex.Hpmr.rst", "api/pypath.core.complex.Humap.rst", "api/pypath.core.complex.Humap2.rst", "api/pypath.core.complex.Icellnet.rst", "api/pypath.core.complex.Kegg.rst", "api/pypath.core.complex.Pdb.rst", "api/pypath.core.complex.Signor.rst", "api/pypath.core.complex.Spike.rst", "api/pypath.core.complex.all_complexes.rst", "api/pypath.core.complex.get_db.rst", "api/pypath.core.complex.init_db.rst", "api/pypath.core.entity.rst", "api/pypath.core.entity.Entity.rst", "api/pypath.core.entity.EntityKey.rst", "api/pypath.core.entity.EntityList.rst", "api/pypath.core.enz_sub.rst", "api/pypath.core.enz_sub.EnzymeSubstrateAggregator.rst", "api/pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.rst", "api/pypath.core.enz_sub.EnzymeSubstrateProcessor.rst", "api/pypath.core.enz_sub.get_db.rst", "api/pypath.core.enz_sub.init_db.rst", "api/pypath.core.evidence.rst", "api/pypath.core.evidence.Evidence.rst", "api/pypath.core.evidence.Evidences.rst", "api/pypath.core.interaction.rst", "api/pypath.core.interaction.Interaction.rst", "api/pypath.core.interaction.InteractionDataFrameRecord.rst", "api/pypath.core.interaction.InteractionKey.rst", "api/pypath.core.intercell.rst", "api/pypath.core.intercell.IntercellAnnotation.rst", "api/pypath.core.intercell.get_db.rst", "api/pypath.core.intercell.init_db.rst", "api/pypath.core.intercell_annot.rst", "api/pypath.core.intercell_annot.excludes.rst", "api/pypath.core.network.rst", "api/pypath.core.network.Network.rst", "api/pypath.core.network.NetworkEntityCollection.rst", "api/pypath.core.network.NetworkStatsRecord.rst", "api/pypath.core.network.get_db.rst", "api/pypath.core.network.init_db.rst", "api/pypath.data.rst", "api/pypath.disclaimer.rst", "api/pypath.info.rst", "api/pypath.inputs.rst", "api/pypath.inputs.abs.rst", "api/pypath.inputs.abs.abs_interactions.rst", "api/pypath.inputs.acsn.rst", "api/pypath.inputs.acsn.acsn_interactions.rst", "api/pypath.inputs.acsn.acsn_interactions_sif.rst", "api/pypath.inputs.adhesome.rst", "api/pypath.inputs.adhesome.adhesome_annotations.rst", "api/pypath.inputs.adhesome.adhesome_interactions.rst", "api/pypath.inputs.almen2009.rst", "api/pypath.inputs.almen2009.almen2009_annotations.rst", "api/pypath.inputs.baccin2019.rst", "api/pypath.inputs.baccin2019.baccin2019_annotations.rst", "api/pypath.inputs.baccin2019.baccin2019_interactions.rst", "api/pypath.inputs.biogps.rst", "api/pypath.inputs.biogps.BiogpsDataset.rst", "api/pypath.inputs.biogps.biogps_annotations.rst", "api/pypath.inputs.biogps.biogps_datasets.rst", "api/pypath.inputs.biogps.biogps_download.rst", "api/pypath.inputs.biogps.biogps_download_all.rst", "api/pypath.inputs.biogrid.rst", "api/pypath.inputs.biogrid.biogrid_all_interactions.rst", "api/pypath.inputs.biogrid.biogrid_interactions.rst", "api/pypath.inputs.biomart.rst", "api/pypath.inputs.biomart.biomart_homology.rst", "api/pypath.inputs.biomart.biomart_microarray.rst", "api/pypath.inputs.biomart.biomart_microarray_types.rst", "api/pypath.inputs.biomart.biomart_microarrays.rst", "api/pypath.inputs.biomart.biomart_query.rst", "api/pypath.inputs.biomodels.rst", "api/pypath.inputs.biomodels.download_single_model.rst", "api/pypath.inputs.biomodels.get_all_models.rst", "api/pypath.inputs.biomodels.get_biomodels.rst", "api/pypath.inputs.biomodels.get_biomodels_req.rst", "api/pypath.inputs.biomodels.get_single_model.rst", "api/pypath.inputs.ca1.rst", "api/pypath.inputs.ca1.ca1_interactions.rst", "api/pypath.inputs.cancercellmap.rst", "api/pypath.inputs.cancercellmap.ccmap_interactions.rst", "api/pypath.inputs.cancerdrugsdb.rst", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations.rst", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_download.rst", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions.rst", "api/pypath.inputs.cancersea.rst", "api/pypath.inputs.cancersea.cancersea_annotations.rst", "api/pypath.inputs.cell.rst", "api/pypath.inputs.cell.cell_supplementary.rst", "api/pypath.inputs.cellcall.rst", "api/pypath.inputs.cellcall.cellcall_annotations.rst", "api/pypath.inputs.cellcall.cellcall_download.rst", "api/pypath.inputs.cellcall.cellcall_download_all.rst", "api/pypath.inputs.cellcall.cellcall_interactions.rst", "api/pypath.inputs.cellcellinteractions.rst", "api/pypath.inputs.cellcellinteractions.cellcellinteractions_annotations.rst", "api/pypath.inputs.cellchatdb.rst", "api/pypath.inputs.cellchatdb.cellchatdb_annotations.rst", "api/pypath.inputs.cellchatdb.cellchatdb_cofactors.rst", "api/pypath.inputs.cellchatdb.cellchatdb_complexes.rst", "api/pypath.inputs.cellchatdb.cellchatdb_download.rst", "api/pypath.inputs.cellchatdb.cellchatdb_interactions.rst", "api/pypath.inputs.cellinker.rst", "api/pypath.inputs.cellinker.CellinkerInteraction.rst", "api/pypath.inputs.cellinker.cellinker_annotations.rst", "api/pypath.inputs.cellinker.cellinker_complex_annotations.rst", "api/pypath.inputs.cellinker.cellinker_complexes.rst", "api/pypath.inputs.cellinker.cellinker_complexes_raw.rst", "api/pypath.inputs.cellinker.cellinker_lr_interactions.rst", "api/pypath.inputs.cellinker.cellinker_lr_interactions_raw.rst", "api/pypath.inputs.cellinker.cellinker_protein_annotations.rst", "api/pypath.inputs.cellinker.cellinker_smol_interactions.rst", "api/pypath.inputs.cellinker.cellinker_smol_interactions_raw.rst", "api/pypath.inputs.cellinker.components_to_complex.rst", "api/pypath.inputs.cellphonedb.rst", "api/pypath.inputs.cellphonedb.CellPhoneDBAnnotation.rst", "api/pypath.inputs.cellphonedb.cellphonedb_complex_annotations.rst", "api/pypath.inputs.cellphonedb.cellphonedb_complexes.rst", "api/pypath.inputs.cellphonedb.cellphonedb_interactions.rst", "api/pypath.inputs.cellphonedb.cellphonedb_ligands_receptors.rst", "api/pypath.inputs.cellphonedb.cellphonedb_protein_annotations.rst", "api/pypath.inputs.celltalkdb.rst", "api/pypath.inputs.celltalkdb.celltalkdb_annotations.rst", "api/pypath.inputs.celltalkdb.celltalkdb_download.rst", "api/pypath.inputs.celltalkdb.celltalkdb_interactions.rst", "api/pypath.inputs.celltypist.rst", "api/pypath.inputs.celltypist.celltypist_annotations.rst", "api/pypath.inputs.chembl.rst", "api/pypath.inputs.chembl.chembl_activities.rst", "api/pypath.inputs.chembl.chembl_assays.rst", "api/pypath.inputs.chembl.chembl_documents.rst", "api/pypath.inputs.chembl.chembl_drug_indications.rst", "api/pypath.inputs.chembl.chembl_molecules.rst", "api/pypath.inputs.chembl.chembl_targets.rst", "api/pypath.inputs.clinvar.rst", "api/pypath.inputs.clinvar.clinvar_citations.rst", "api/pypath.inputs.clinvar.clinvar_raw.rst", "api/pypath.inputs.common.rst", "api/pypath.inputs.common.csv_sep_change.rst", "api/pypath.inputs.common.glom_fields.rst", "api/pypath.inputs.common.json_extract.rst", "api/pypath.inputs.common.json_read.rst", "api/pypath.inputs.common.read_table.rst", "api/pypath.inputs.common.read_xls.rst", "api/pypath.inputs.compleat.rst", "api/pypath.inputs.compleat.compleat_complexes.rst", "api/pypath.inputs.compleat.compleat_raw.rst", "api/pypath.inputs.complexportal.rst", "api/pypath.inputs.complexportal.complexportal_complexes.rst", "api/pypath.inputs.comppi.rst", "api/pypath.inputs.comppi.comppi_interaction_locations.rst", "api/pypath.inputs.comppi.comppi_locations.rst", "api/pypath.inputs.connectomedb.rst", "api/pypath.inputs.connectomedb.connectomedb_annotations.rst", "api/pypath.inputs.connectomedb.connectomedb_interactions.rst", "api/pypath.inputs.corum.rst", "api/pypath.inputs.corum.corum_complexes.rst", "api/pypath.inputs.cosmic.rst", "api/pypath.inputs.cosmic.cancer_gene_census_annotations.rst", "api/pypath.inputs.cpad.rst", "api/pypath.inputs.cpad.cpad_annotations.rst", "api/pypath.inputs.cpad.cpad_pathway_cancer.rst", "api/pypath.inputs.cpad.get_cpad.rst", "api/pypath.inputs.cpdb.rst", "api/pypath.inputs.cpdb.cpdb_interactions.rst", "api/pypath.inputs.cpdb.cpdb_interactions_ltp.rst", "api/pypath.inputs.credentials.rst", "api/pypath.inputs.credentials.credentials.rst", "api/pypath.inputs.csa.rst", "api/pypath.inputs.csa.get_csa.rst", "api/pypath.inputs.cspa.rst", "api/pypath.inputs.cspa.cspa_annotations.rst", "api/pypath.inputs.cspa.cspa_cell_type_annotations.rst", "api/pypath.inputs.cspa.cspa_cell_types.rst", "api/pypath.inputs.ctdbase.rst", "api/pypath.inputs.ctdbase.ctdbase_relations.rst", "api/pypath.inputs.ctdbase.ctdbase_vocabulary.rst", "api/pypath.inputs.cytosig.rst", "api/pypath.inputs.cytosig.cytosig_annotations.rst", "api/pypath.inputs.cytosig.cytosig_df.rst", "api/pypath.inputs.dbptm.rst", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate.rst", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate_old.rst", "api/pypath.inputs.dbptm.dbptm_interactions.rst", "api/pypath.inputs.deathdomain.rst", "api/pypath.inputs.deathdomain.deathdomain_interactions.rst", "api/pypath.inputs.deathdomain.deathdomain_interactions_rescued.rst", "api/pypath.inputs.depod.rst", "api/pypath.inputs.depod.depod_enzyme_substrate.rst", "api/pypath.inputs.depod.depod_interactions.rst", "api/pypath.inputs.dgidb.rst", "api/pypath.inputs.dgidb.dgidb_annotations.rst", "api/pypath.inputs.dgidb.dgidb_interactions.rst", "api/pypath.inputs.dgidb.get_dgidb_old.rst", "api/pypath.inputs.dip.rst", "api/pypath.inputs.dip.dip_interactions.rst", "api/pypath.inputs.dip.dip_login.rst", "api/pypath.inputs.disgenet.rst", "api/pypath.inputs.disgenet.DisgenetApi.rst", "api/pypath.inputs.disgenet.disease_id_mappings.rst", "api/pypath.inputs.disgenet.disgenet_annotations.rst", "api/pypath.inputs.disgenet.variant_gene_mappings.rst", "api/pypath.inputs.domino.rst", "api/pypath.inputs.domino.domino_ddi.rst", "api/pypath.inputs.domino.domino_enzsub.rst", "api/pypath.inputs.domino.domino_interactions.rst", "api/pypath.inputs.domino.get_domino.rst", "api/pypath.inputs.dorothea.rst", "api/pypath.inputs.dorothea.DorotheaInteraction.rst", "api/pypath.inputs.dorothea.dorothea_full_raw.rst", "api/pypath.inputs.dorothea.dorothea_interactions.rst", "api/pypath.inputs.dorothea.dorothea_interactions_old.rst", "api/pypath.inputs.dorothea.dorothea_old_csv.rst", "api/pypath.inputs.dorothea.dorothea_rda_raw.rst", "api/pypath.inputs.dorothea.get_dorothea_old.rst", "api/pypath.inputs.dorothea.get_tfregulons.rst", "api/pypath.inputs.dorothea.tfregulons_interactions.rst", "api/pypath.inputs.dorothea.tfregulons_interactions_old.rst", "api/pypath.inputs.drugbank.rst", "api/pypath.inputs.drugbank.DrugbankFull.rst", "api/pypath.inputs.drugbank.drugbank_annotations.rst", "api/pypath.inputs.drugbank.drugbank_drugs.rst", "api/pypath.inputs.drugbank.drugbank_interactions.rst", "api/pypath.inputs.drugbank.drugbank_mapping.rst", "api/pypath.inputs.drugbank.drugbank_raw_interactions.rst", "api/pypath.inputs.drugcentral.rst", "api/pypath.inputs.drugcentral.drugcentral_drugs.rst", "api/pypath.inputs.drugcentral.drugcentral_interactions.rst", "api/pypath.inputs.drugcentral.drugcentral_mapping.rst", "api/pypath.inputs.ebi.rst", "api/pypath.inputs.ebi.ebi_rest.rst", "api/pypath.inputs.elm.rst", "api/pypath.inputs.elm.elm_classes.rst", "api/pypath.inputs.elm.elm_domains.rst", "api/pypath.inputs.elm.elm_instances.rst", "api/pypath.inputs.elm.elm_interactions.rst", "api/pypath.inputs.embopress.rst", "api/pypath.inputs.embopress.embopress_supplementary.rst", "api/pypath.inputs.embrace.rst", "api/pypath.inputs.embrace.embrace_annotations.rst", "api/pypath.inputs.embrace.embrace_interactions.rst", "api/pypath.inputs.embrace.embrace_raw.rst", "api/pypath.inputs.embrace.embrace_translated.rst", "api/pypath.inputs.encode.rst", "api/pypath.inputs.encode.encode_tf_mirna_interactions.rst", "api/pypath.inputs.ensembl.rst", "api/pypath.inputs.ensembl.ensembl_organisms.rst", "api/pypath.inputs.exocarta.rst", "api/pypath.inputs.exocarta.get_exocarta.rst", "api/pypath.inputs.exocarta.get_vesiclepedia.rst", "api/pypath.inputs.genecards.rst", "api/pypath.inputs.genecards.genecards_datasheet.rst", "api/pypath.inputs.genecards.genecards_soup.rst", "api/pypath.inputs.genecards.genecards_summaries.rst", "api/pypath.inputs.get_method.rst", "api/pypath.inputs.go.rst", "api/pypath.inputs.go.get_go_desc.rst", "api/pypath.inputs.go.get_go_quick.rst", "api/pypath.inputs.go.get_goslim.rst", "api/pypath.inputs.go.go_ancestors.rst", "api/pypath.inputs.go.go_ancestors_goose.rst", "api/pypath.inputs.go.go_ancestors_quickgo.rst", "api/pypath.inputs.go.go_annotations.rst", "api/pypath.inputs.go.go_annotations_all.rst", "api/pypath.inputs.go.go_annotations_goa.rst", "api/pypath.inputs.go.go_annotations_goose.rst", "api/pypath.inputs.go.go_annotations_quickgo.rst", "api/pypath.inputs.go.go_annotations_solr.rst", "api/pypath.inputs.go.go_annotations_uniprot.rst", "api/pypath.inputs.go.go_descendants.rst", "api/pypath.inputs.go.go_descendants_goose.rst", "api/pypath.inputs.go.go_descendants_quickgo.rst", "api/pypath.inputs.go.go_descendants_to_ancestors.rst", "api/pypath.inputs.go.go_terms.rst", "api/pypath.inputs.go.go_terms_goose.rst", "api/pypath.inputs.go.go_terms_quickgo.rst", "api/pypath.inputs.go.go_terms_solr.rst", "api/pypath.inputs.gpcrdb.rst", "api/pypath.inputs.gpcrdb.gpcrdb_annotations.rst", "api/pypath.inputs.graphviz.rst", "api/pypath.inputs.graphviz.graphviz_attrs.rst", "api/pypath.inputs.guide2pharma.rst", "api/pypath.inputs.guide2pharma.guide2pharma_complexes.rst", "api/pypath.inputs.guide2pharma.guide2pharma_download.rst", "api/pypath.inputs.guide2pharma.guide2pharma_interactions.rst", "api/pypath.inputs.havugimana.rst", "api/pypath.inputs.havugimana.get_havugimana.rst", "api/pypath.inputs.havugimana.havugimana_complexes.rst", "api/pypath.inputs.hgnc.rst", "api/pypath.inputs.hgnc.hgnc_genegroups.rst", "api/pypath.inputs.hippie.rst", "api/pypath.inputs.hippie.hippie_interactions.rst", "api/pypath.inputs.homologene.rst", "api/pypath.inputs.homologene.get_homologene.rst", "api/pypath.inputs.homologene.homologene_dict.rst", "api/pypath.inputs.homologene.homologene_uniprot_dict.rst", "api/pypath.inputs.hpmr.rst", "api/pypath.inputs.hpmr.HpmrInteraction.rst", "api/pypath.inputs.hpmr.get_hpmr.rst", "api/pypath.inputs.hpmr.hpmr_annotations.rst", "api/pypath.inputs.hpmr.hpmr_complexes.rst", "api/pypath.inputs.hpmr.hpmr_interactions.rst", "api/pypath.inputs.hpo.rst", "api/pypath.inputs.hpo.hpo_annotations.rst", "api/pypath.inputs.hpo.hpo_diseases.rst", "api/pypath.inputs.hpo.hpo_ontology.rst", "api/pypath.inputs.hpo.hpo_terms.rst", "api/pypath.inputs.hprd.rst", "api/pypath.inputs.hprd.get_hprd.rst", "api/pypath.inputs.hprd.hprd_enzyme_substrate.rst", "api/pypath.inputs.hprd.hprd_interactions.rst", "api/pypath.inputs.hprd.hprd_interactions_htp.rst", "api/pypath.inputs.htri.rst", "api/pypath.inputs.htri.htri_interactions.rst", "api/pypath.inputs.humancellmap.rst", "api/pypath.inputs.humancellmap.humancellmap_annotations.rst", "api/pypath.inputs.humap.rst", "api/pypath.inputs.humap.humap2_complexes.rst", "api/pypath.inputs.humap.humap_complexes.rst", "api/pypath.inputs.huri.rst", "api/pypath.inputs.huri.hi_i_interactions.rst", "api/pypath.inputs.huri.hi_ii_interactions.rst", "api/pypath.inputs.huri.hi_iii_old.rst", "api/pypath.inputs.huri.hi_union_interactions.rst", "api/pypath.inputs.huri.huri_interactions.rst", "api/pypath.inputs.huri.lit_bm_13_interactions.rst", "api/pypath.inputs.huri.lit_bm_17_interactions.rst", "api/pypath.inputs.huri.lit_bm_interactions.rst", "api/pypath.inputs.huri.rolland_hi_ii_14.rst", "api/pypath.inputs.huri.vidal_hi_iii_old.rst", "api/pypath.inputs.huri.yang2016_interactions.rst", "api/pypath.inputs.huri.yu2011_interactions.rst", "api/pypath.inputs.i3d.rst", "api/pypath.inputs.i3d.get_i3d.rst", "api/pypath.inputs.icellnet.rst", "api/pypath.inputs.icellnet.IcellnetRecord.rst", "api/pypath.inputs.icellnet.icellnet_annotations.rst", "api/pypath.inputs.icellnet.icellnet_complexes.rst", "api/pypath.inputs.icellnet.icellnet_interactions.rst", "api/pypath.inputs.ielm.rst", "api/pypath.inputs.ielm.get_ielm.rst", "api/pypath.inputs.ielm.get_ielm_huge.rst", "api/pypath.inputs.imweb.rst", "api/pypath.inputs.imweb.get_imweb.rst", "api/pypath.inputs.imweb.get_imweb_req.rst", "api/pypath.inputs.innatedb.rst", "api/pypath.inputs.innatedb.innatedb_interactions.rst", "api/pypath.inputs.instruct.rst", "api/pypath.inputs.instruct.get_instruct.rst", "api/pypath.inputs.instruct.get_instruct_offsets.rst", "api/pypath.inputs.intact.rst", "api/pypath.inputs.intact.intact_interactions.rst", "api/pypath.inputs.integrins.rst", "api/pypath.inputs.integrins.get_integrins.rst", "api/pypath.inputs.interpro.rst", "api/pypath.inputs.interpro.interpro2go_annotations.rst", "api/pypath.inputs.interpro.interpro_annotations.rst", "api/pypath.inputs.interpro.interpro_entries.rst", "api/pypath.inputs.interpro.interpro_xrefs.rst", "api/pypath.inputs.intogen.rst", "api/pypath.inputs.intogen.intogen_annotations.rst", "api/pypath.inputs.ipi.rst", "api/pypath.inputs.ipi.ipi_uniprot.rst", "api/pypath.inputs.iptmnet.rst", "api/pypath.inputs.iptmnet.IptmnetInteraction.rst", "api/pypath.inputs.iptmnet.iptmnet_interactions.rst", "api/pypath.inputs.italk.rst", "api/pypath.inputs.italk.italk_annotations.rst", "api/pypath.inputs.italk.italk_interactions.rst", "api/pypath.inputs.italk.italk_raw.rst", "api/pypath.inputs.kea.rst", "api/pypath.inputs.kea.kea_enzyme_substrate.rst", "api/pypath.inputs.kea.kea_interactions.rst", "api/pypath.inputs.kegg.rst", "api/pypath.inputs.kegg.KeggPathway.rst", "api/pypath.inputs.kegg.kegg_dbget.rst", "api/pypath.inputs.kegg.kegg_interactions.rst", "api/pypath.inputs.kegg.kegg_medicus.rst", "api/pypath.inputs.kegg.kegg_medicus_complexes.rst", "api/pypath.inputs.kegg.kegg_medicus_interactions.rst", "api/pypath.inputs.kegg.kegg_pathway_annotations.rst", "api/pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons.rst", "api/pypath.inputs.kegg.kegg_pathways.rst", "api/pypath.inputs.kegg_api.rst", "api/pypath.inputs.kegg_api.disease_to_drug.rst", "api/pypath.inputs.kegg_api.disease_to_gene.rst", "api/pypath.inputs.kegg_api.disease_to_pathway.rst", "api/pypath.inputs.kegg_api.drug_to_disease.rst", "api/pypath.inputs.kegg_api.drug_to_drug.rst", "api/pypath.inputs.kegg_api.drug_to_gene.rst", "api/pypath.inputs.kegg_api.drug_to_pathway.rst", "api/pypath.inputs.kegg_api.gene_to_disease.rst", "api/pypath.inputs.kegg_api.gene_to_drug.rst", "api/pypath.inputs.kegg_api.gene_to_pathway.rst", "api/pypath.inputs.kegg_api.kegg_drug_to_chebi.rst", "api/pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid.rst", "api/pypath.inputs.kegg_api.kegg_gene_to_uniprot.rst", "api/pypath.inputs.kegg_api.pathway_to_disease.rst", "api/pypath.inputs.kegg_api.pathway_to_drug.rst", "api/pypath.inputs.kegg_api.pathway_to_gene.rst", "api/pypath.inputs.kinasedotcom.rst", "api/pypath.inputs.kinasedotcom.kinasedotcom_annotations.rst", "api/pypath.inputs.kirouac2010.rst", "api/pypath.inputs.kirouac2010.kirouac2010_interactions.rst", "api/pypath.inputs.lambert2018.rst", "api/pypath.inputs.lambert2018.lambert2018_annotations.rst", "api/pypath.inputs.lambert2018.lambert2018_s1_raw.rst", "api/pypath.inputs.laudanna.rst", "api/pypath.inputs.laudanna.laudanna_directions.rst", "api/pypath.inputs.laudanna.laudanna_effects.rst", "api/pypath.inputs.li2012.rst", "api/pypath.inputs.li2012.get_li2012.rst", "api/pypath.inputs.li2012.li2012_dmi.rst", "api/pypath.inputs.li2012.li2012_enzyme_substrate.rst", "api/pypath.inputs.li2012.li2012_interactions.rst", "api/pypath.inputs.lincs.rst", "api/pypath.inputs.lincs.lincs_compounds.rst", "api/pypath.inputs.lmpid.rst", "api/pypath.inputs.lmpid.lmpid_dmi.rst", "api/pypath.inputs.lmpid.lmpid_interactions.rst", "api/pypath.inputs.lmpid.load_lmpid.rst", "api/pypath.inputs.lncdisease.rst", "api/pypath.inputs.lncdisease.lncdisease_interactions.rst", "api/pypath.inputs.lncrnadb.rst", "api/pypath.inputs.lncrnadb.lncrnadb_interactions.rst", "api/pypath.inputs.locate.rst", "api/pypath.inputs.locate.locate_localizations.rst", "api/pypath.inputs.lrdb.rst", "api/pypath.inputs.lrdb.LrdbAnnotation.rst", "api/pypath.inputs.lrdb.lrdb_annotations.rst", "api/pypath.inputs.lrdb.lrdb_interactions.rst", "api/pypath.inputs.macrophage.rst", "api/pypath.inputs.macrophage.macrophage_interactions.rst", "api/pypath.inputs.main.rst", "api/pypath.inputs.matrisome.rst", "api/pypath.inputs.matrisome.matrisome_annotations.rst", "api/pypath.inputs.matrixdb.rst", "api/pypath.inputs.matrixdb.matrixdb_annotations.rst", "api/pypath.inputs.matrixdb.matrixdb_ecm_proteins.rst", "api/pypath.inputs.matrixdb.matrixdb_interactions.rst", "api/pypath.inputs.matrixdb.matrixdb_membrane_proteins.rst", "api/pypath.inputs.matrixdb.matrixdb_secreted_proteins.rst", "api/pypath.inputs.mcam.rst", "api/pypath.inputs.mcam.mcam_cell_adhesion_molecules.rst", "api/pypath.inputs.membranome.rst", "api/pypath.inputs.membranome.membranome_annotations.rst", "api/pypath.inputs.mimp.rst", "api/pypath.inputs.mimp.get_kinase_class.rst", "api/pypath.inputs.mimp.mimp_enzyme_substrate.rst", "api/pypath.inputs.mimp.mimp_interactions.rst", "api/pypath.inputs.mir2disease.rst", "api/pypath.inputs.mir2disease.mir2disease_interactions.rst", "api/pypath.inputs.mirbase.rst", "api/pypath.inputs.mirbase.get_mirbase_aliases.rst", "api/pypath.inputs.mirbase.mirbase_ids.rst", "api/pypath.inputs.mirbase.mirbase_mature.rst", "api/pypath.inputs.mirbase.mirbase_mature_all.rst", "api/pypath.inputs.mirbase.mirbase_precursor.rst", "api/pypath.inputs.mirbase.mirbase_precursor_all.rst", "api/pypath.inputs.mirbase.mirbase_precursor_to_mature.rst", "api/pypath.inputs.mirdeathdb.rst", "api/pypath.inputs.mirdeathdb.mirdeathdb_interactions.rst", "api/pypath.inputs.mirecords.rst", "api/pypath.inputs.mirecords.mirecords_interactions.rst", "api/pypath.inputs.mirtarbase.rst", "api/pypath.inputs.mirtarbase.mirtarbase_interactions.rst", "api/pypath.inputs.mitab.rst", "api/pypath.inputs.mitab.mitab_field_list.rst", "api/pypath.inputs.mitab.mitab_field_uniprot.rst", "api/pypath.inputs.mppi.rst", "api/pypath.inputs.mppi.mppi_interactions.rst", "api/pypath.inputs.ncrdeathdb.rst", "api/pypath.inputs.ncrdeathdb.ncrdeathdb_interactions.rst", "api/pypath.inputs.negatome.rst", "api/pypath.inputs.negatome.negatome_interactions.rst", "api/pypath.inputs.netbiol.rst", "api/pypath.inputs.netbiol.arn_interactions.rst", "api/pypath.inputs.netbiol.nrf2ome_interactions.rst", "api/pypath.inputs.netpath.rst", "api/pypath.inputs.netpath.netpath_interactions.rst", "api/pypath.inputs.netpath.netpath_names.rst", "api/pypath.inputs.netpath.netpath_pathway_annotations.rst", "api/pypath.inputs.oma.rst", "api/pypath.inputs.oma.oma_orthologs.rst", "api/pypath.inputs.ontology.rst", "api/pypath.inputs.ontology.listof_ontologies.rst", "api/pypath.inputs.ontology.ontology.rst", "api/pypath.inputs.opm.rst", "api/pypath.inputs.opm.opm_annotations.rst", "api/pypath.inputs.oreganno.rst", "api/pypath.inputs.oreganno.oreganno_interactions.rst", "api/pypath.inputs.oreganno.oreganno_raw.rst", "api/pypath.inputs.panglaodb.rst", "api/pypath.inputs.panglaodb.panglaodb_annotations.rst", "api/pypath.inputs.panglaodb.panglaodb_raw.rst", "api/pypath.inputs.pathophenodb.rst", "api/pypath.inputs.pathophenodb.DiseasePathogen.rst", "api/pypath.inputs.pathophenodb.disease_pathogen_interactions.rst", "api/pypath.inputs.pathwaycommons.rst", "api/pypath.inputs.pathwaycommons.PathwayCommonsInteraction.rst", "api/pypath.inputs.pathwaycommons.PathwayCommonsResource.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions.rst", "api/pypath.inputs.pazar.rst", "api/pypath.inputs.pazar.pazar_interactions.rst", "api/pypath.inputs.pdb.rst", "api/pypath.inputs.pdb.pdb_chains.rst", "api/pypath.inputs.pdb.pdb_complexes.rst", "api/pypath.inputs.pdb.pdb_uniprot.rst", "api/pypath.inputs.pdzbase.rst", "api/pypath.inputs.pdzbase.pdzbase_interactions.rst", "api/pypath.inputs.pepcyber.rst", "api/pypath.inputs.pepcyber.pepcyber_details.rst", "api/pypath.inputs.pepcyber.pepcyber_interactions.rst", "api/pypath.inputs.pfam.rst", "api/pypath.inputs.pfam.pfam_names.rst", "api/pypath.inputs.pfam.pfam_pdb.rst", "api/pypath.inputs.pfam.pfam_regions.rst", "api/pypath.inputs.pfam.pfam_uniprot.rst", "api/pypath.inputs.pharos.rst", "api/pypath.inputs.pharos.pharos_diseases.rst", "api/pypath.inputs.pharos.pharos_expression.rst", "api/pypath.inputs.pharos.pharos_general.rst", "api/pypath.inputs.pharos.pharos_gtex.rst", "api/pypath.inputs.pharos.pharos_ligands.rst", "api/pypath.inputs.pharos.pharos_orthologs.rst", "api/pypath.inputs.pharos.pharos_targets.rst", "api/pypath.inputs.pharos.pharos_xrefs.rst", "api/pypath.inputs.phobius.rst", "api/pypath.inputs.phobius.phobius_annotations.rst", "api/pypath.inputs.phosphatome.rst", "api/pypath.inputs.phosphatome.phosphatome_annotations.rst", "api/pypath.inputs.phosphoelm.rst", "api/pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate.rst", "api/pypath.inputs.phosphoelm.phosphoelm_interactions.rst", "api/pypath.inputs.phosphoelm.phosphoelm_kinases.rst", "api/pypath.inputs.phosphonetworks.rst", "api/pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate.rst", "api/pypath.inputs.phosphonetworks.phosphonetworks_interactions.rst", "api/pypath.inputs.phosphopoint.rst", "api/pypath.inputs.phosphopoint.phosphopoint_directions.rst", "api/pypath.inputs.phosphopoint.phosphopoint_interactions.rst", "api/pypath.inputs.phosphosite.rst", "api/pypath.inputs.phosphosite.phosphosite_directions.rst", "api/pypath.inputs.phosphosite.phosphosite_enzyme_substrate.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_all.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_curated.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_new.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_noref.rst", "api/pypath.inputs.phosphosite.phosphosite_ptm_orthology.rst", "api/pypath.inputs.phosphosite.phosphosite_ptms.rst", "api/pypath.inputs.phosphosite.phosphosite_regsites.rst", "api/pypath.inputs.phosphosite.phosphosite_regsites_one_organism.rst", "api/pypath.inputs.phosphosite.regsites_tab.rst", "api/pypath.inputs.pisa.rst", "api/pypath.inputs.pisa.PisaBond.rst", "api/pypath.inputs.pisa.pisa_bonds.rst", "api/pypath.inputs.pisa.pisa_interfaces.rst", "api/pypath.inputs.pro.rst", "api/pypath.inputs.pro.get_pro.rst", "api/pypath.inputs.pro.pro_mapping.rst", "api/pypath.inputs.progeny.rst", "api/pypath.inputs.progeny.progeny_annotations.rst", "api/pypath.inputs.progeny.progeny_raw.rst", "api/pypath.inputs.proteinatlas.rst", "api/pypath.inputs.proteinatlas.get_proteinatlas.rst", "api/pypath.inputs.proteinatlas.proteinatlas_annotations.rst", "api/pypath.inputs.proteinatlas.proteinatlas_secretome_annotations.rst", "api/pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations.rst", "api/pypath.inputs.proteins.rst", "api/pypath.inputs.proteins.variants.rst", "api/pypath.inputs.protmapper.rst", "api/pypath.inputs.protmapper.get_protmapper.rst", "api/pypath.inputs.protmapper.protmapper_enzyme_substrate.rst", "api/pypath.inputs.protmapper.protmapper_interactions.rst", "api/pypath.inputs.pubchem.rst", "api/pypath.inputs.pubchem.pubchem_mapping.rst", "api/pypath.inputs.pubmed.rst", "api/pypath.inputs.pubmed.get_pmid.rst", "api/pypath.inputs.pubmed.get_pubmeds.rst", "api/pypath.inputs.pubmed.only_pmids.rst", "api/pypath.inputs.pubmed.open_pubmed.rst", "api/pypath.inputs.pubmed.pmids_dict.rst", "api/pypath.inputs.pubmed.pmids_list.rst", "api/pypath.inputs.ramilowski2015.rst", "api/pypath.inputs.ramilowski2015.ramilowski_interactions.rst", "api/pypath.inputs.ramilowski2015.ramilowski_locations.rst", "api/pypath.inputs.rdata.rst", "api/pypath.inputs.reaction.rst", "api/pypath.inputs.reaction.acsn_biopax.rst", "api/pypath.inputs.reaction.acsn_interactions_2.rst", "api/pypath.inputs.reaction.get_acsn_effects.rst", "api/pypath.inputs.reaction.get_controls.rst", "api/pypath.inputs.reaction.get_interactions.rst", "api/pypath.inputs.reaction.get_reactions.rst", "api/pypath.inputs.reaction.get_soup.rst", "api/pypath.inputs.reaction.panther_biopax.rst", "api/pypath.inputs.reaction.panther_interactions.rst", "api/pypath.inputs.reaction.pid_biopax.rst", "api/pypath.inputs.reaction.pid_interactions.rst", "api/pypath.inputs.reaction.process_complex.rst", "api/pypath.inputs.reaction.process_controls.rst", "api/pypath.inputs.reaction.process_reactions.rst", "api/pypath.inputs.reaction.reactions_biopax.rst", "api/pypath.inputs.reaction.reactome_biopax.rst", "api/pypath.inputs.reaction.reactome_bs.rst", "api/pypath.inputs.reaction.reactome_interactions.rst", "api/pypath.inputs.reaction.reactome_sbml.rst", "api/pypath.inputs.scconnect.rst", "api/pypath.inputs.scconnect.scconnect_annotations.rst", "api/pypath.inputs.scconnect.scconnect_complexes.rst", "api/pypath.inputs.scconnect.scconnect_interactions.rst", "api/pypath.inputs.science.rst", "api/pypath.inputs.science.science_download.rst", "api/pypath.inputs.signalink.rst", "api/pypath.inputs.signalink.signalink_annotations.rst", "api/pypath.inputs.signalink.signalink_function_annotations.rst", "api/pypath.inputs.signalink.signalink_interactions.rst", "api/pypath.inputs.signalink.signalink_pathway_annotations.rst", "api/pypath.inputs.signor.rst", "api/pypath.inputs.signor.signor_complexes.rst", "api/pypath.inputs.signor.signor_enzyme_substrate.rst", "api/pypath.inputs.signor.signor_interactions.rst", "api/pypath.inputs.signor.signor_pathway_annotations.rst", "api/pypath.inputs.signor.signor_pathways.rst", "api/pypath.inputs.signor.signor_protein_families.rst", "api/pypath.inputs.spike.rst", "api/pypath.inputs.spike.spike_complexes.rst", "api/pypath.inputs.spike.spike_interactions.rst", "api/pypath.inputs.stitch.rst", "api/pypath.inputs.stitch.stitch_actions_interactions.rst", "api/pypath.inputs.stitch.stitch_links_interactions.rst", "api/pypath.inputs.string.rst", "api/pypath.inputs.string.string_effects.rst", "api/pypath.inputs.string.string_links_interactions.rst", "api/pypath.inputs.string.string_physical_interactions.rst", "api/pypath.inputs.string.string_species.rst", "api/pypath.inputs.surfaceome.rst", "api/pypath.inputs.surfaceome.surfaceome_annotations.rst", "api/pypath.inputs.switches_elm.rst", "api/pypath.inputs.switches_elm.get_switches_elm.rst", "api/pypath.inputs.talklr.rst", "api/pypath.inputs.talklr.talklr_annotations.rst", "api/pypath.inputs.talklr.talklr_interactions.rst", "api/pypath.inputs.talklr.talklr_raw.rst", "api/pypath.inputs.tcdb.rst", "api/pypath.inputs.tcdb.tcdb_annotations.rst", "api/pypath.inputs.tcdb.tcdb_classes.rst", "api/pypath.inputs.tcdb.tcdb_families.rst", "api/pypath.inputs.tfcensus.rst", "api/pypath.inputs.tfcensus.tfcensus_annotations.rst", "api/pypath.inputs.threedcomplex.rst", "api/pypath.inputs.threedcomplex.threedcomplex_chains.rst", "api/pypath.inputs.threedcomplex.threedcomplex_complexes.rst", "api/pypath.inputs.threedcomplex.threedcomplex_contacts.rst", "api/pypath.inputs.threedcomplex.threedcomplex_ddi.rst", "api/pypath.inputs.threedcomplex.threedcomplex_nresidues.rst", "api/pypath.inputs.threedid.rst", "api/pypath.inputs.threedid.get_3did.rst", "api/pypath.inputs.threedid.get_3did_ddi.rst", "api/pypath.inputs.threedid.get_3did_dmi.rst", "api/pypath.inputs.threedid.process_3did_dmi.rst", "api/pypath.inputs.topdb.rst", "api/pypath.inputs.topdb.topdb_annotations.rst", "api/pypath.inputs.transmir.rst", "api/pypath.inputs.transmir.transmir_interactions.rst", "api/pypath.inputs.trip.rst", "api/pypath.inputs.trip.take_a_trip.rst", "api/pypath.inputs.trip.trip_find_uniprot.rst", "api/pypath.inputs.trip.trip_get_uniprot.rst", "api/pypath.inputs.trip.trip_interactions.rst", "api/pypath.inputs.trip.trip_process.rst", "api/pypath.inputs.trip.trip_process_table.rst", "api/pypath.inputs.trrust.rst", "api/pypath.inputs.trrust.scrape_human.rst", "api/pypath.inputs.trrust.scrape_mouse.rst", "api/pypath.inputs.trrust.trrust_general.rst", "api/pypath.inputs.trrust.trrust_human.rst", "api/pypath.inputs.trrust.trrust_mouse.rst", "api/pypath.inputs.trrust.trrust_scraping.rst", "api/pypath.inputs.unichem.rst", "api/pypath.inputs.unichem.info.rst", "api/pypath.inputs.unichem.unichem_info.rst", "api/pypath.inputs.unichem.unichem_mapping.rst", "api/pypath.inputs.unichem.unichem_sources.rst", "api/pypath.inputs.uniprot.rst", "api/pypath.inputs.uniprot.Taxon.rst", "api/pypath.inputs.uniprot.UniprotRecordHistory.rst", "api/pypath.inputs.uniprot.all_swissprots.rst", "api/pypath.inputs.uniprot.all_trembls.rst", "api/pypath.inputs.uniprot.all_uniprots.rst", "api/pypath.inputs.uniprot.deleted_uniprot_genesymbol.rst", "api/pypath.inputs.uniprot.get_db.rst", "api/pypath.inputs.uniprot.get_uniprot_sec.rst", "api/pypath.inputs.uniprot.init_db.rst", "api/pypath.inputs.uniprot.is_swissprot.rst", "api/pypath.inputs.uniprot.is_trembl.rst", "api/pypath.inputs.uniprot.is_uniprot.rst", "api/pypath.inputs.uniprot.protein_datasheet.rst", "api/pypath.inputs.uniprot.swissprot_deleted.rst", "api/pypath.inputs.uniprot.trembl_deleted.rst", "api/pypath.inputs.uniprot.uniprot_data.rst", "api/pypath.inputs.uniprot.uniprot_deleted.rst", "api/pypath.inputs.uniprot.uniprot_families.rst", "api/pypath.inputs.uniprot.uniprot_history.rst", "api/pypath.inputs.uniprot.uniprot_history_recent_datasheet.rst", "api/pypath.inputs.uniprot.uniprot_keywords.rst", "api/pypath.inputs.uniprot.uniprot_locations.rst", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids.rst", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids_2.rst", "api/pypath.inputs.uniprot.uniprot_preprocess.rst", "api/pypath.inputs.uniprot.uniprot_recent_version.rst", "api/pypath.inputs.uniprot.uniprot_taxonomy.rst", "api/pypath.inputs.uniprot.uniprot_tissues.rst", "api/pypath.inputs.uniprot.uniprot_topology.rst", "api/pypath.inputs.uniprot.valid_uniprot.rst", "api/pypath.inputs.wang.rst", "api/pypath.inputs.wang.cui_interactions.rst", "api/pypath.inputs.wang.hsn_interactions.rst", "api/pypath.inputs.wang.wang_annotations.rst", "api/pypath.inputs.wang.wang_interactions.rst", "api/pypath.inputs.wojtowicz2020.rst", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_interactions.rst", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_raw.rst", "api/pypath.inputs.zhong2015.rst", "api/pypath.inputs.zhong2015.zhong2015_annotations.rst", "api/pypath.internals.rst", "api/pypath.internals.annot_formats.rst", "api/pypath.internals.annot_formats.AnnotDef.rst", "api/pypath.internals.annot_formats.AnnotDefKey.rst", "api/pypath.internals.annot_formats.AnnotOp.rst", "api/pypath.internals.annot_formats.AnnotationGroup.rst", "api/pypath.internals.input_formats.rst", "api/pypath.internals.input_formats.ArrayMapping.rst", "api/pypath.internals.input_formats.BiomartMapping.rst", "api/pypath.internals.input_formats.FileMapping.rst", "api/pypath.internals.input_formats.MappingInput.rst", "api/pypath.internals.input_formats.NetworkInput.rst", "api/pypath.internals.input_formats.PickleMapping.rst", "api/pypath.internals.input_formats.ProMapping.rst", "api/pypath.internals.input_formats.ReadList.rst", "api/pypath.internals.input_formats.UnichemMapping.rst", "api/pypath.internals.input_formats.UniprotListMapping.rst", "api/pypath.internals.input_formats.UniprotMapping.rst", "api/pypath.internals.intera.rst", "api/pypath.internals.intera.Complex.rst", "api/pypath.internals.intera.Domain.rst", "api/pypath.internals.intera.DomainDomain.rst", "api/pypath.internals.intera.DomainMotif.rst", "api/pypath.internals.intera.Interface.rst", "api/pypath.internals.intera.Motif.rst", "api/pypath.internals.intera.Ptm.rst", "api/pypath.internals.intera.Regulation.rst", "api/pypath.internals.intera.Residue.rst", "api/pypath.internals.license.rst", "api/pypath.internals.license.License.rst", "api/pypath.internals.license.LicenseAttrib.rst", "api/pypath.internals.license.LicenseFeature.rst", "api/pypath.internals.license.LicensePurpose.rst", "api/pypath.internals.license.LicenseSharing.rst", "api/pypath.internals.maps.rst", "api/pypath.internals.refs.rst", "api/pypath.internals.refs.Reference.rst", "api/pypath.internals.refs.get_pubmed_data.rst", "api/pypath.internals.resource.rst", "api/pypath.internals.resource.AbstractResource.rst", "api/pypath.internals.resource.EnzymeSubstrateResource.rst", "api/pypath.internals.resource.EnzymeSubstrateResourceKey.rst", "api/pypath.internals.resource.NetworkResource.rst", "api/pypath.internals.resource.NetworkResourceKey.rst", "api/pypath.internals.resource.ResourceAttributes.rst", "api/pypath.legacy.rst", "api/pypath.legacy.db_categories.rst", "api/pypath.legacy.db_categories.get_categories.rst", "api/pypath.legacy.db_categories.get_category.rst", "api/pypath.legacy.main.rst", "api/pypath.legacy.main.Direction.rst", "api/pypath.legacy.main.NetworkEntityCollection.rst", "api/pypath.legacy.main.NetworkStatsRecord.rst", "api/pypath.legacy.main.PyPath.rst", "api/pypath.legacy.main.get_db.rst", "api/pypath.legacy.main.init_db.rst", "api/pypath.log.rst", "api/pypath.omnipath.rst", "api/pypath.omnipath.app.rst", "api/pypath.omnipath.app.DatabaseManager.rst", "api/pypath.omnipath.databases.rst", "api/pypath.omnipath.databases.build.rst", "api/pypath.omnipath.databases.class_and_param.rst", "api/pypath.omnipath.databases.define.rst", "api/pypath.omnipath.databases.define.DatabaseClass.rst", "api/pypath.omnipath.databases.define.DatabaseDefinition.rst", "api/pypath.omnipath.databases.define.DatabaseDefinitionManager.rst", "api/pypath.omnipath.databases.get_manager.rst", "api/pypath.omnipath.databases.init_manager.rst", "api/pypath.omnipath.export.rst", "api/pypath.omnipath.export.Export.rst", "api/pypath.omnipath.init.rst", "api/pypath.omnipath.param.rst", "api/pypath.omnipath.param.curated_ppi_resources.rst", "api/pypath.omnipath.param.tf_target_resources.rst", "api/pypath.omnipath.server.rst", "api/pypath.omnipath.server.build.rst", "api/pypath.omnipath.server.build.WebserviceTables.rst", "api/pypath.omnipath.server.generate_about_page.rst", "api/pypath.omnipath.server.generate_about_page.export_licenses.rst", "api/pypath.omnipath.server.generate_about_page.generate_about_html.rst", "api/pypath.omnipath.server.generate_about_page.resource_list_latex.rst", "api/pypath.omnipath.server.generate_about_page.write_html.rst", "api/pypath.omnipath.server.legacy.rst", "api/pypath.omnipath.server.legacy.PypathServer.rst", "api/pypath.omnipath.server.run.rst", "api/pypath.omnipath.server.run.BaseServer.rst", "api/pypath.omnipath.server.run.Rest.rst", "api/pypath.omnipath.server.run.TableServer.rst", "api/pypath.omnipath.server.run.TwistedWebResource.rst", "api/pypath.omnipath.server.run.TwistedWebSite.rst", "api/pypath.omnipath.server.run.stop_server.rst", "api/pypath.omnipath.server.run.twisted_listen_tcp.rst", "api/pypath.omnipath.server.run.twisted_run.rst", "api/pypath.resources.rst", "api/pypath.resources.controller.rst", "api/pypath.resources.controller.ResourceController.rst", "api/pypath.resources.data.rst", "api/pypath.resources.data_formats.rst", "api/pypath.resources.data_formats.ROOT.rst", "api/pypath.resources.data_formats.activity_flow.rst", "api/pypath.resources.data_formats.enzyme_substrate.rst", "api/pypath.resources.data_formats.interaction.rst", "api/pypath.resources.data_formats.interaction_htp.rst", "api/pypath.resources.data_formats.obsolate.rst", "api/pypath.resources.data_formats.pathway_bad.rst", "api/pypath.resources.data_formats.reaction_pc.rst", "api/pypath.resources.data_formats.transcription_deprecated.rst", "api/pypath.resources.data_formats.transcription_onebyone.rst", "api/pypath.resources.descriptions.rst", "api/pypath.resources.descriptions.export_licenses.rst", "api/pypath.resources.descriptions.gen_html.rst", "api/pypath.resources.descriptions.resource_list_latex.rst", "api/pypath.resources.descriptions.write_html.rst", "api/pypath.resources.get_controller.rst", "api/pypath.resources.licenses.rst", "api/pypath.resources.licenses.Licenses.rst", "api/pypath.resources.network.rst", "api/pypath.resources.network.dorothea_expand_levels.rst", "api/pypath.resources.urls.rst", "api/pypath.share.rst", "api/pypath.share.cache.rst", "api/pypath.share.cache.cache_item.rst", "api/pypath.share.cache.get_cachedir.rst", "api/pypath.share.common.rst", "api/pypath.share.common.add_to_list.rst", "api/pypath.share.common.add_to_set.rst", "api/pypath.share.common.at_least_in.rst", "api/pypath.share.common.clean_dict.rst", "api/pypath.share.common.combine_attrs.rst", "api/pypath.share.common.console.rst", "api/pypath.share.common.decode.rst", "api/pypath.share.common.del_empty.rst", "api/pypath.share.common.df_memory_usage.rst", "api/pypath.share.common.dict_collapse_keys.rst", "api/pypath.share.common.dict_counts.rst", "api/pypath.share.common.dict_diff.rst", "api/pypath.share.common.dict_expand_keys.rst", "api/pypath.share.common.dict_percent.rst", "api/pypath.share.common.dict_set_path.rst", "api/pypath.share.common.dict_set_percent.rst", "api/pypath.share.common.dict_str.rst", "api/pypath.share.common.dict_subtotals.rst", "api/pypath.share.common.dict_sym_diff.rst", "api/pypath.share.common.dict_union.rst", "api/pypath.share.common.eq.rst", "api/pypath.share.common.filtr.rst", "api/pypath.share.common.first.rst", "api/pypath.share.common.flat_list.rst", "api/pypath.share.common.float_or_nan.rst", "api/pypath.share.common.gen_session_id.rst", "api/pypath.share.common.get.rst", "api/pypath.share.common.get_args.rst", "api/pypath.share.common.is_float.rst", "api/pypath.share.common.is_int.rst", "api/pypath.share.common.is_str.rst", "api/pypath.share.common.jaccard_index.rst", "api/pypath.share.common.join_dicts.rst", "api/pypath.share.common.latex_table.rst", "api/pypath.share.common.match.rst", "api/pypath.share.common.maybe_in_dict.rst", "api/pypath.share.common.md5.rst", "api/pypath.share.common.merge_dicts.rst", "api/pypath.share.common.n_shared_elements.rst", "api/pypath.share.common.n_shared_foreach.rst", "api/pypath.share.common.n_shared_total.rst", "api/pypath.share.common.n_shared_unique_foreach.rst", "api/pypath.share.common.n_unique_elements.rst", "api/pypath.share.common.n_unique_foreach.rst", "api/pypath.share.common.n_unique_total.rst", "api/pypath.share.common.negate.rst", "api/pypath.share.common.none_or_len.rst", "api/pypath.share.common.paginate.rst", "api/pypath.share.common.prefix.rst", "api/pypath.share.common.print_table.rst", "api/pypath.share.common.re_safe_groups.rst", "api/pypath.share.common.remove_prefix.rst", "api/pypath.share.common.rotate.rst", "api/pypath.share.common.sets_to_sorted_lists.rst", "api/pypath.share.common.sfirst.rst", "api/pypath.share.common.shared_elements.rst", "api/pypath.share.common.shared_foreach.rst", "api/pypath.share.common.shared_total.rst", "api/pypath.share.common.shared_unique.rst", "api/pypath.share.common.shared_unique_foreach.rst", "api/pypath.share.common.shared_unique_total.rst", "api/pypath.share.common.silent.rst", "api/pypath.share.common.simpson_index.rst", "api/pypath.share.common.simpson_index_counts.rst", "api/pypath.share.common.something.rst", "api/pypath.share.common.sorensen_index.rst", "api/pypath.share.common.suffix.rst", "api/pypath.share.common.sum_dicts.rst", "api/pypath.share.common.swap_dict.rst", "api/pypath.share.common.swap_dict_simple.rst", "api/pypath.share.common.swap_suffix.rst", "api/pypath.share.common.table_add_row_numbers.rst", "api/pypath.share.common.table_format.rst", "api/pypath.share.common.table_textwrap.rst", "api/pypath.share.common.to_list.rst", "api/pypath.share.common.to_set.rst", "api/pypath.share.common.try_bool.rst", "api/pypath.share.common.try_float.rst", "api/pypath.share.common.tsv_table.rst", "api/pypath.share.common.uniq_list.rst", "api/pypath.share.common.uniq_list1.rst", "api/pypath.share.common.uniq_list2.rst", "api/pypath.share.common.uniq_ord_list.rst", "api/pypath.share.common.unique_elements.rst", "api/pypath.share.common.unique_foreach.rst", "api/pypath.share.common.unique_list.rst", "api/pypath.share.common.unique_total.rst", "api/pypath.share.common.upper0.rst", "api/pypath.share.common.values.rst", "api/pypath.share.common.wcl.rst", "api/pypath.share.common.wrap_truncate.rst", "api/pypath.share.constants.rst", "api/pypath.share.curl.rst", "api/pypath.share.curl.Curl.rst", "api/pypath.share.curl.FileOpener.rst", "api/pypath.share.curl.RemoteFile.rst", "api/pypath.share.curl.cache_delete_off.rst", "api/pypath.share.curl.cache_delete_on.rst", "api/pypath.share.curl.cache_off.rst", "api/pypath.share.curl.cache_on.rst", "api/pypath.share.curl.cache_print_off.rst", "api/pypath.share.curl.cache_print_on.rst", "api/pypath.share.curl.debug_off.rst", "api/pypath.share.curl.debug_on.rst", "api/pypath.share.curl.dryrun_off.rst", "api/pypath.share.curl.dryrun_on.rst", "api/pypath.share.curl.is_url.rst", "api/pypath.share.curl.preserve_off.rst", "api/pypath.share.curl.preserve_on.rst", "api/pypath.share.log.rst", "api/pypath.share.log.Logger.rst", "api/pypath.share.log.new_logger.rst", "api/pypath.share.progress.rst", "api/pypath.share.progress.Progress.rst", "api/pypath.share.session.rst", "api/pypath.share.session.Logger.rst", "api/pypath.share.session.Session.rst", "api/pypath.share.session.get_log.rst", "api/pypath.share.session.get_session.rst", "api/pypath.share.session.new_session.rst", "api/pypath.share.settings.rst", "api/pypath.share.settings.Settings.rst", "api/pypath.share.settings.context.rst", "api/pypath.share.settings.get.rst", "api/pypath.share.settings.setup.rst", "api/pypath.utils.rst", "api/pypath.utils.go.rst", "api/pypath.utils.go.GOAnnotation.rst", "api/pypath.utils.go.GOCustomAnnotation.rst", "api/pypath.utils.go.GeneOntology.rst", "api/pypath.utils.go.annotate.rst", "api/pypath.utils.go.get_db.rst", "api/pypath.utils.go.init_db.rst", "api/pypath.utils.go.load_go.rst", "api/pypath.utils.homology.rst", "api/pypath.utils.homology.HomologyManager.rst", "api/pypath.utils.homology.Ortholog.rst", "api/pypath.utils.homology.ProteinHomology.rst", "api/pypath.utils.homology.Proteomes.rst", "api/pypath.utils.homology.PtmHomology.rst", "api/pypath.utils.homology.SequenceContainer.rst", "api/pypath.utils.homology.get_df.rst", "api/pypath.utils.homology.get_dict.rst", "api/pypath.utils.homology.get_manager.rst", "api/pypath.utils.homology.init.rst", "api/pypath.utils.homology.translate.rst", "api/pypath.utils.homology.translate_df.rst", "api/pypath.utils.mapping.rst", "api/pypath.utils.mapping.MapReader.rst", "api/pypath.utils.mapping.Mapper.rst", "api/pypath.utils.mapping.MappingTable.rst", "api/pypath.utils.mapping.MappingTableKey.rst", "api/pypath.utils.mapping.UNIPROT_ID_TYPES.rst", "api/pypath.utils.mapping.get_mapper.rst", "api/pypath.utils.mapping.guess_type.rst", "api/pypath.utils.mapping.id_from_label.rst", "api/pypath.utils.mapping.id_from_label0.rst", "api/pypath.utils.mapping.init.rst", "api/pypath.utils.mapping.label.rst", "api/pypath.utils.mapping.map_name.rst", "api/pypath.utils.mapping.map_name0.rst", "api/pypath.utils.mapping.map_names.rst", "api/pypath.utils.pdb.rst", "api/pypath.utils.pdb.Residue.rst", "api/pypath.utils.pdb.ResidueMapper.rst", "api/pypath.utils.pdb.Segment.rst", "api/pypath.utils.pdb.residue_pdb.rst", "api/pypath.utils.proteomicsdb.rst", "api/pypath.utils.proteomicsdb.ProteomicsDB.rst", "api/pypath.utils.pyreact.rst", "api/pypath.utils.pyreact.AttributeHandler.rst", "api/pypath.utils.pyreact.BioPaxReader.rst", "api/pypath.utils.pyreact.Complex.rst", "api/pypath.utils.pyreact.ComplexVariations.rst", "api/pypath.utils.pyreact.Control.rst", "api/pypath.utils.pyreact.Entity.rst", "api/pypath.utils.pyreact.EntitySet.rst", "api/pypath.utils.pyreact.Intersecting.rst", "api/pypath.utils.pyreact.Protein.rst", "api/pypath.utils.pyreact.ProteinFamily.rst", "api/pypath.utils.pyreact.PyReact.rst", "api/pypath.utils.pyreact.Reaction.rst", "api/pypath.utils.pyreact.ReactionSide.rst", "api/pypath.utils.pyreact.Reference.rst", "api/pypath.utils.reflists.rst", "api/pypath.utils.reflists.ReferenceListManager.rst", "api/pypath.utils.reflists.check.rst", "api/pypath.utils.reflists.get_manager.rst", "api/pypath.utils.reflists.get_reflist.rst", "api/pypath.utils.reflists.init.rst", "api/pypath.utils.reflists.is_not.rst", "api/pypath.utils.reflists.select.rst", "api/pypath.utils.residues.rst", "api/pypath.utils.residues.ResidueMapper.rst", "api/pypath.utils.seq.rst", "api/pypath.utils.seq.Pfam.rst", "api/pypath.utils.seq.Resource.rst", "api/pypath.utils.seq.Seq.rst", "api/pypath.utils.seq.get_isoforms.rst", "api/pypath.utils.seq.read_fasta.rst", "api/pypath.utils.seq.swissprot_seq.rst", "api/pypath.utils.taxonomy.rst", "api/pypath.utils.taxonomy.ensure_common_name.rst", "api/pypath.utils.taxonomy.ensure_ensembl_name.rst", "api/pypath.utils.taxonomy.ensure_latin_name.rst", "api/pypath.utils.taxonomy.ensure_ncbi_tax_id.rst", "api/pypath.utils.taxonomy.get_db.rst", "api/pypath.utils.taxonomy.init_db.rst", "api/pypath.utils.taxonomy.short_latin_names.rst", "api/pypath.utils.taxonomy.shorten_latin_name.rst", "api/pypath.utils.taxonomy.taxid_from_common_name.rst", "api/pypath.utils.taxonomy.taxid_from_dbptm_taxon_name.rst", "api/pypath.utils.taxonomy.taxid_from_ensembl_name.rst", "api/pypath.utils.taxonomy.taxid_from_latin_name.rst", "api/pypath.utils.taxonomy.taxid_from_nonstandard.rst", "api/pypath.utils.taxonomy.uniprot_taxid.rst", "api/pypath.utils.unichem.rst", "api/pypath.utils.unichem.Unichem.rst", "api/pypath.utils.uniprot.rst", "api/pypath.utils.uniprot.UniprotProtein.rst", "api/pypath.utils.uniprot.ac.rst", "api/pypath.utils.uniprot.activity_regulation.rst", "api/pypath.utils.uniprot.activity_regulation_with_xrefs.rst", "api/pypath.utils.uniprot.alternative_products.rst", "api/pypath.utils.uniprot.alternative_products_with_xrefs.rst", "api/pypath.utils.uniprot.browse.rst", "api/pypath.utils.uniprot.catalytic_activity.rst", "api/pypath.utils.uniprot.catalytic_activity_with_xrefs.rst", "api/pypath.utils.uniprot.collect.rst", "api/pypath.utils.uniprot.databases.rst", "api/pypath.utils.uniprot.disease.rst", "api/pypath.utils.uniprot.disease_with_xrefs.rst", "api/pypath.utils.uniprot.ec.rst", "api/pypath.utils.uniprot.features_table.rst", "api/pypath.utils.uniprot.full_name.rst", "api/pypath.utils.uniprot.function.rst", "api/pypath.utils.uniprot.function_genecards.rst", "api/pypath.utils.uniprot.function_or_genecards.rst", "api/pypath.utils.uniprot.function_with_genecards.rst", "api/pypath.utils.uniprot.function_with_xrefs.rst", "api/pypath.utils.uniprot.genesymbol.rst", "api/pypath.utils.uniprot.has_tag.rst", "api/pypath.utils.uniprot.id.rst", "api/pypath.utils.uniprot.info.rst", "api/pypath.utils.uniprot.info_section.rst", "api/pypath.utils.uniprot.interaction.rst", "api/pypath.utils.uniprot.interaction_with_xrefs.rst", "api/pypath.utils.uniprot.is_reviewed.rst", "api/pypath.utils.uniprot.itertag.rst", "api/pypath.utils.uniprot.keywords.rst", "api/pypath.utils.uniprot.keywords_with_xrefs.rst", "api/pypath.utils.uniprot.length.rst", "api/pypath.utils.uniprot.lengths.rst", "api/pypath.utils.uniprot.load.rst", "api/pypath.utils.uniprot.organism.rst", "api/pypath.utils.uniprot.print_features.rst", "api/pypath.utils.uniprot.ptm.rst", "api/pypath.utils.uniprot.ptm_with_xrefs.rst", "api/pypath.utils.uniprot.query.rst", "api/pypath.utils.uniprot.reload.rst", "api/pypath.utils.uniprot.remove_xrefs.rst", "api/pypath.utils.uniprot.sequence.rst", "api/pypath.utils.uniprot.sequence_caution.rst", "api/pypath.utils.uniprot.sequence_caution_with_xrefs.rst", "api/pypath.utils.uniprot.similarity.rst", "api/pypath.utils.uniprot.similarity_with_xrefs.rst", "api/pypath.utils.uniprot.subcellular_location.rst", "api/pypath.utils.uniprot.subcellular_location_with_xrefs.rst", "api/pypath.utils.uniprot.subunit.rst", "api/pypath.utils.uniprot.subunit_with_xrefs.rst", "api/pypath.utils.uniprot.tissue_specificity.rst", "api/pypath.utils.uniprot.tissue_specificity_with_xrefs.rst", "api/pypath.utils.uniprot.update_databases.rst", "api/pypath.utils.uniprot.update_info.rst", "api/pypath.utils.uniprot.web_resource.rst", "api/pypath.utils.uniprot.web_resource_with_xrefs.rst", "api/pypath.utils.uniprot.weight.rst", "api/pypath.utils.uniprot.weights.rst", "api/pypath.visual.rst", "api/pypath.visual.drawing.rst", "api/pypath.visual.drawing.InterSet.rst", "api/pypath.visual.drawing.Plot.rst", "api/pypath.visual.igraph_drawing.rst", "api/pypath.visual.igraph_drawing.AbstractCairoGraphDrawer.rst", "api/pypath.visual.igraph_drawing.ArrowEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport.rst", "api/pypath.visual.igraph_drawing.DefaultVertexDrawer.rst", "api/pypath.visual.igraph_drawing.TextDrawer.rst", "api/pypath.visual.igraph_drawing.edge.rst", "api/pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer.rst", "api/pypath.visual.plot.rst", "api/pypath.visual.plot.Barplot.rst", "api/pypath.visual.plot.BarplotsGrid.rst", "api/pypath.visual.plot.CurationPlot.rst", "api/pypath.visual.plot.Dendrogram.rst", "api/pypath.visual.plot.Histogram.rst", "api/pypath.visual.plot.HistoryTree.rst", "api/pypath.visual.plot.HtpCharacteristics.rst", "api/pypath.visual.plot.MultiBarplot.rst", "api/pypath.visual.plot.Plot.rst", "api/pypath.visual.plot.RefsComposite.rst", "api/pypath.visual.plot.ScatterPlus.rst", "api/pypath.visual.plot.SimilarityGraph.rst", "api/pypath.visual.plot.StackedBarplot.rst", "api/pypath.visual.plot.boxplot.rst", "api/pypath.visual.plot.get_moves.rst", "api/pypath.visual.plot.is_opentype_cff_font.rst", "api/pypath.visual.plot.move_labels.rst", "api/pypath.visual.plot.overlap.rst", "api/pypath.visual.plot.rotate_labels.rst", "contents.rst", "index.rst", "notebooks/manual.ipynb", "reference.rst", "releasehistory.rst", "webservice.rst"], "titles": ["pypath", "pypath.core", "pypath.core.annot", "pypath.core.annot.Adhesome", "pypath.core.annot.Almen2009", "pypath.core.annot.AnnotationBase", "pypath.core.annot.AnnotationTable", "pypath.core.annot.Baccin2019", "pypath.core.annot.Biogps", "pypath.core.annot.CancerGeneCensus", "pypath.core.annot.Cancerdrugsdb", "pypath.core.annot.Cancersea", "pypath.core.annot.CellPhoneDB", "pypath.core.annot.CellPhoneDBComplex", "pypath.core.annot.CellSurfaceProteinAtlas", "pypath.core.annot.CellSurfaceProteinAtlasCellType", "pypath.core.annot.Cellcall", "pypath.core.annot.Cellcellinteractions", "pypath.core.annot.Cellchatdb", "pypath.core.annot.CellchatdbComplex", "pypath.core.annot.Cellinker", "pypath.core.annot.CellinkerComplex", "pypath.core.annot.Celltalkdb", "pypath.core.annot.Celltypist", "pypath.core.annot.Comppi", "pypath.core.annot.Connectomedb", "pypath.core.annot.Corum", "pypath.core.annot.CorumFuncat", "pypath.core.annot.CorumGO", "pypath.core.annot.Cpad", "pypath.core.annot.CustomAnnotation", "pypath.core.annot.Cytosig", "pypath.core.annot.Dgidb", "pypath.core.annot.Disgenet", "pypath.core.annot.Embrace", "pypath.core.annot.Exocarta", "pypath.core.annot.GOCustomIntercell", "pypath.core.annot.GOIntercell", "pypath.core.annot.Gpcrdb", "pypath.core.annot.GuideToPharmacology", "pypath.core.annot.HPO", "pypath.core.annot.Hgnc", "pypath.core.annot.HpmrComplex", "pypath.core.annot.HumanPlasmaMembraneReceptome", "pypath.core.annot.HumanProteinAtlas", "pypath.core.annot.HumanProteinAtlasSecretome", "pypath.core.annot.HumanProteinAtlasSubcellular", "pypath.core.annot.Humancellmap", "pypath.core.annot.Icellnet", "pypath.core.annot.IcellnetComplex", "pypath.core.annot.Integrins", "pypath.core.annot.InterPro", "pypath.core.annot.Intogen", "pypath.core.annot.Italk", "pypath.core.annot.KeggPathways", "pypath.core.annot.KeggPathwaysPC", "pypath.core.annot.Kinasedotcom", "pypath.core.annot.Kirouac2010", "pypath.core.annot.Lambert2018", "pypath.core.annot.LigandReceptor", "pypath.core.annot.Locate", "pypath.core.annot.Lrdb", "pypath.core.annot.Matrisome", "pypath.core.annot.Matrixdb", "pypath.core.annot.Mcam", "pypath.core.annot.Membranome", "pypath.core.annot.Msigdb", "pypath.core.annot.NetpathPathways", "pypath.core.annot.Opm", "pypath.core.annot.Panglaodb", "pypath.core.annot.Phobius", "pypath.core.annot.Phosphatome", "pypath.core.annot.Progeny", "pypath.core.annot.Ramilowski2015", "pypath.core.annot.Ramilowski2015Location", "pypath.core.annot.Scconnect", "pypath.core.annot.ScconnectComplex", "pypath.core.annot.SignalinkFunctions", "pypath.core.annot.SignalinkPathways", "pypath.core.annot.SignorPathways", "pypath.core.annot.Surfaceome", "pypath.core.annot.Talklr", "pypath.core.annot.Tcdb", "pypath.core.annot.Tfcensus", "pypath.core.annot.Topdb", "pypath.core.annot.UniprotFamilies", "pypath.core.annot.UniprotKeywords", "pypath.core.annot.UniprotLocations", "pypath.core.annot.UniprotTissues", "pypath.core.annot.UniprotTopologies", "pypath.core.annot.Vesiclepedia", "pypath.core.annot.Wang", "pypath.core.annot.Zhong2015", "pypath.core.annot.get_db", "pypath.core.annot.init_db", "pypath.core.attrs", "pypath.core.attrs.AttributeHandler", "pypath.core.common", "pypath.core.common.filter_network_df", "pypath.core.complex", "pypath.core.complex.AbstractComplexResource", "pypath.core.complex.CellPhoneDB", "pypath.core.complex.Cellchatdb", "pypath.core.complex.Cellinker", "pypath.core.complex.Compleat", "pypath.core.complex.ComplexAggregator", "pypath.core.complex.ComplexPortal", "pypath.core.complex.Corum", "pypath.core.complex.GuideToPharmacology", "pypath.core.complex.Havugimana", "pypath.core.complex.Hpmr", "pypath.core.complex.Humap", "pypath.core.complex.Humap2", "pypath.core.complex.Icellnet", "pypath.core.complex.Kegg", "pypath.core.complex.Pdb", "pypath.core.complex.Signor", "pypath.core.complex.Spike", "pypath.core.complex.all_complexes", "pypath.core.complex.get_db", "pypath.core.complex.init_db", "pypath.core.entity", "pypath.core.entity.Entity", "pypath.core.entity.EntityKey", "pypath.core.entity.EntityList", "pypath.core.enz_sub", "pypath.core.enz_sub.EnzymeSubstrateAggregator", "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor", "pypath.core.enz_sub.EnzymeSubstrateProcessor", "pypath.core.enz_sub.get_db", "pypath.core.enz_sub.init_db", "pypath.core.evidence", "pypath.core.evidence.Evidence", "pypath.core.evidence.Evidences", "pypath.core.interaction", "pypath.core.interaction.Interaction", "pypath.core.interaction.InteractionDataFrameRecord", "pypath.core.interaction.InteractionKey", "pypath.core.intercell", "pypath.core.intercell.IntercellAnnotation", "pypath.core.intercell.get_db", "pypath.core.intercell.init_db", "pypath.core.intercell_annot", "pypath.core.intercell_annot.excludes", "pypath.core.network", "pypath.core.network.Network", "pypath.core.network.NetworkEntityCollection", "pypath.core.network.NetworkStatsRecord", "pypath.core.network.get_db", "pypath.core.network.init_db", "pypath.data", "pypath.disclaimer", "pypath.info", "pypath.inputs", "pypath.inputs.abs", "pypath.inputs.abs.abs_interactions", "pypath.inputs.acsn", "pypath.inputs.acsn.acsn_interactions", "pypath.inputs.acsn.acsn_interactions_sif", "pypath.inputs.adhesome", "pypath.inputs.adhesome.adhesome_annotations", "pypath.inputs.adhesome.adhesome_interactions", "pypath.inputs.almen2009", "pypath.inputs.almen2009.almen2009_annotations", "pypath.inputs.baccin2019", "pypath.inputs.baccin2019.baccin2019_annotations", "pypath.inputs.baccin2019.baccin2019_interactions", "pypath.inputs.biogps", "pypath.inputs.biogps.BiogpsDataset", "pypath.inputs.biogps.biogps_annotations", "pypath.inputs.biogps.biogps_datasets", "pypath.inputs.biogps.biogps_download", "pypath.inputs.biogps.biogps_download_all", "pypath.inputs.biogrid", "pypath.inputs.biogrid.biogrid_all_interactions", "pypath.inputs.biogrid.biogrid_interactions", "pypath.inputs.biomart", "pypath.inputs.biomart.biomart_homology", "pypath.inputs.biomart.biomart_microarray", "pypath.inputs.biomart.biomart_microarray_types", "pypath.inputs.biomart.biomart_microarrays", "pypath.inputs.biomart.biomart_query", "pypath.inputs.biomodels", "pypath.inputs.biomodels.download_single_model", "pypath.inputs.biomodels.get_all_models", "pypath.inputs.biomodels.get_biomodels", "pypath.inputs.biomodels.get_biomodels_req", "pypath.inputs.biomodels.get_single_model", "pypath.inputs.ca1", "pypath.inputs.ca1.ca1_interactions", "pypath.inputs.cancercellmap", "pypath.inputs.cancercellmap.ccmap_interactions", "pypath.inputs.cancerdrugsdb", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions", "pypath.inputs.cancersea", "pypath.inputs.cancersea.cancersea_annotations", "pypath.inputs.cell", "pypath.inputs.cell.cell_supplementary", "pypath.inputs.cellcall", "pypath.inputs.cellcall.cellcall_annotations", "pypath.inputs.cellcall.cellcall_download", "pypath.inputs.cellcall.cellcall_download_all", "pypath.inputs.cellcall.cellcall_interactions", "pypath.inputs.cellcellinteractions", "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations", "pypath.inputs.cellchatdb", "pypath.inputs.cellchatdb.cellchatdb_annotations", "pypath.inputs.cellchatdb.cellchatdb_cofactors", "pypath.inputs.cellchatdb.cellchatdb_complexes", "pypath.inputs.cellchatdb.cellchatdb_download", "pypath.inputs.cellchatdb.cellchatdb_interactions", "pypath.inputs.cellinker", "pypath.inputs.cellinker.CellinkerInteraction", "pypath.inputs.cellinker.cellinker_annotations", "pypath.inputs.cellinker.cellinker_complex_annotations", "pypath.inputs.cellinker.cellinker_complexes", "pypath.inputs.cellinker.cellinker_complexes_raw", "pypath.inputs.cellinker.cellinker_lr_interactions", "pypath.inputs.cellinker.cellinker_lr_interactions_raw", "pypath.inputs.cellinker.cellinker_protein_annotations", "pypath.inputs.cellinker.cellinker_smol_interactions", "pypath.inputs.cellinker.cellinker_smol_interactions_raw", "pypath.inputs.cellinker.components_to_complex", "pypath.inputs.cellphonedb", "pypath.inputs.cellphonedb.CellPhoneDBAnnotation", "pypath.inputs.cellphonedb.cellphonedb_complex_annotations", "pypath.inputs.cellphonedb.cellphonedb_complexes", "pypath.inputs.cellphonedb.cellphonedb_interactions", "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors", "pypath.inputs.cellphonedb.cellphonedb_protein_annotations", "pypath.inputs.celltalkdb", "pypath.inputs.celltalkdb.celltalkdb_annotations", "pypath.inputs.celltalkdb.celltalkdb_download", "pypath.inputs.celltalkdb.celltalkdb_interactions", "pypath.inputs.celltypist", "pypath.inputs.celltypist.celltypist_annotations", "pypath.inputs.chembl", "pypath.inputs.chembl.chembl_activities", "pypath.inputs.chembl.chembl_assays", "pypath.inputs.chembl.chembl_documents", "pypath.inputs.chembl.chembl_drug_indications", "pypath.inputs.chembl.chembl_molecules", "pypath.inputs.chembl.chembl_targets", "pypath.inputs.clinvar", "pypath.inputs.clinvar.clinvar_citations", "pypath.inputs.clinvar.clinvar_raw", "pypath.inputs.common", "pypath.inputs.common.csv_sep_change", "pypath.inputs.common.glom_fields", "pypath.inputs.common.json_extract", "pypath.inputs.common.json_read", "pypath.inputs.common.read_table", "pypath.inputs.common.read_xls", "pypath.inputs.compleat", "pypath.inputs.compleat.compleat_complexes", "pypath.inputs.compleat.compleat_raw", "pypath.inputs.complexportal", "pypath.inputs.complexportal.complexportal_complexes", "pypath.inputs.comppi", "pypath.inputs.comppi.comppi_interaction_locations", "pypath.inputs.comppi.comppi_locations", "pypath.inputs.connectomedb", "pypath.inputs.connectomedb.connectomedb_annotations", "pypath.inputs.connectomedb.connectomedb_interactions", "pypath.inputs.corum", "pypath.inputs.corum.corum_complexes", "pypath.inputs.cosmic", "pypath.inputs.cosmic.cancer_gene_census_annotations", "pypath.inputs.cpad", "pypath.inputs.cpad.cpad_annotations", "pypath.inputs.cpad.cpad_pathway_cancer", "pypath.inputs.cpad.get_cpad", "pypath.inputs.cpdb", "pypath.inputs.cpdb.cpdb_interactions", "pypath.inputs.cpdb.cpdb_interactions_ltp", "pypath.inputs.credentials", "pypath.inputs.credentials.credentials", "pypath.inputs.csa", "pypath.inputs.csa.get_csa", "pypath.inputs.cspa", "pypath.inputs.cspa.cspa_annotations", "pypath.inputs.cspa.cspa_cell_type_annotations", "pypath.inputs.cspa.cspa_cell_types", "pypath.inputs.ctdbase", "pypath.inputs.ctdbase.ctdbase_relations", "pypath.inputs.ctdbase.ctdbase_vocabulary", "pypath.inputs.cytosig", "pypath.inputs.cytosig.cytosig_annotations", "pypath.inputs.cytosig.cytosig_df", "pypath.inputs.dbptm", "pypath.inputs.dbptm.dbptm_enzyme_substrate", "pypath.inputs.dbptm.dbptm_enzyme_substrate_old", "pypath.inputs.dbptm.dbptm_interactions", "pypath.inputs.deathdomain", "pypath.inputs.deathdomain.deathdomain_interactions", "pypath.inputs.deathdomain.deathdomain_interactions_rescued", "pypath.inputs.depod", "pypath.inputs.depod.depod_enzyme_substrate", "pypath.inputs.depod.depod_interactions", "pypath.inputs.dgidb", "pypath.inputs.dgidb.dgidb_annotations", "pypath.inputs.dgidb.dgidb_interactions", "pypath.inputs.dgidb.get_dgidb_old", "pypath.inputs.dip", "pypath.inputs.dip.dip_interactions", "pypath.inputs.dip.dip_login", "pypath.inputs.disgenet", "pypath.inputs.disgenet.DisgenetApi", "pypath.inputs.disgenet.disease_id_mappings", "pypath.inputs.disgenet.disgenet_annotations", "pypath.inputs.disgenet.variant_gene_mappings", "pypath.inputs.domino", "pypath.inputs.domino.domino_ddi", "pypath.inputs.domino.domino_enzsub", "pypath.inputs.domino.domino_interactions", "pypath.inputs.domino.get_domino", "pypath.inputs.dorothea", "pypath.inputs.dorothea.DorotheaInteraction", "pypath.inputs.dorothea.dorothea_full_raw", "pypath.inputs.dorothea.dorothea_interactions", "pypath.inputs.dorothea.dorothea_interactions_old", "pypath.inputs.dorothea.dorothea_old_csv", "pypath.inputs.dorothea.dorothea_rda_raw", "pypath.inputs.dorothea.get_dorothea_old", "pypath.inputs.dorothea.get_tfregulons", "pypath.inputs.dorothea.tfregulons_interactions", "pypath.inputs.dorothea.tfregulons_interactions_old", "pypath.inputs.drugbank", "pypath.inputs.drugbank.DrugbankFull", "pypath.inputs.drugbank.drugbank_annotations", "pypath.inputs.drugbank.drugbank_drugs", "pypath.inputs.drugbank.drugbank_interactions", "pypath.inputs.drugbank.drugbank_mapping", "pypath.inputs.drugbank.drugbank_raw_interactions", "pypath.inputs.drugcentral", "pypath.inputs.drugcentral.drugcentral_drugs", "pypath.inputs.drugcentral.drugcentral_interactions", "pypath.inputs.drugcentral.drugcentral_mapping", "pypath.inputs.ebi", "pypath.inputs.ebi.ebi_rest", "pypath.inputs.elm", "pypath.inputs.elm.elm_classes", "pypath.inputs.elm.elm_domains", "pypath.inputs.elm.elm_instances", "pypath.inputs.elm.elm_interactions", "pypath.inputs.embopress", "pypath.inputs.embopress.embopress_supplementary", "pypath.inputs.embrace", "pypath.inputs.embrace.embrace_annotations", "pypath.inputs.embrace.embrace_interactions", "pypath.inputs.embrace.embrace_raw", "pypath.inputs.embrace.embrace_translated", "pypath.inputs.encode", "pypath.inputs.encode.encode_tf_mirna_interactions", "pypath.inputs.ensembl", "pypath.inputs.ensembl.ensembl_organisms", "pypath.inputs.exocarta", "pypath.inputs.exocarta.get_exocarta", "pypath.inputs.exocarta.get_vesiclepedia", "pypath.inputs.genecards", "pypath.inputs.genecards.genecards_datasheet", "pypath.inputs.genecards.genecards_soup", "pypath.inputs.genecards.genecards_summaries", "pypath.inputs.get_method", "pypath.inputs.go", "pypath.inputs.go.get_go_desc", "pypath.inputs.go.get_go_quick", "pypath.inputs.go.get_goslim", "pypath.inputs.go.go_ancestors", "pypath.inputs.go.go_ancestors_goose", "pypath.inputs.go.go_ancestors_quickgo", "pypath.inputs.go.go_annotations", "pypath.inputs.go.go_annotations_all", "pypath.inputs.go.go_annotations_goa", "pypath.inputs.go.go_annotations_goose", "pypath.inputs.go.go_annotations_quickgo", "pypath.inputs.go.go_annotations_solr", "pypath.inputs.go.go_annotations_uniprot", "pypath.inputs.go.go_descendants", "pypath.inputs.go.go_descendants_goose", "pypath.inputs.go.go_descendants_quickgo", "pypath.inputs.go.go_descendants_to_ancestors", "pypath.inputs.go.go_terms", "pypath.inputs.go.go_terms_goose", "pypath.inputs.go.go_terms_quickgo", "pypath.inputs.go.go_terms_solr", "pypath.inputs.gpcrdb", "pypath.inputs.gpcrdb.gpcrdb_annotations", "pypath.inputs.graphviz", "pypath.inputs.graphviz.graphviz_attrs", "pypath.inputs.guide2pharma", "pypath.inputs.guide2pharma.guide2pharma_complexes", "pypath.inputs.guide2pharma.guide2pharma_download", "pypath.inputs.guide2pharma.guide2pharma_interactions", "pypath.inputs.havugimana", "pypath.inputs.havugimana.get_havugimana", "pypath.inputs.havugimana.havugimana_complexes", "pypath.inputs.hgnc", "pypath.inputs.hgnc.hgnc_genegroups", "pypath.inputs.hippie", "pypath.inputs.hippie.hippie_interactions", "pypath.inputs.homologene", "pypath.inputs.homologene.get_homologene", "pypath.inputs.homologene.homologene_dict", "pypath.inputs.homologene.homologene_uniprot_dict", "pypath.inputs.hpmr", "pypath.inputs.hpmr.HpmrInteraction", "pypath.inputs.hpmr.get_hpmr", "pypath.inputs.hpmr.hpmr_annotations", "pypath.inputs.hpmr.hpmr_complexes", "pypath.inputs.hpmr.hpmr_interactions", "pypath.inputs.hpo", "pypath.inputs.hpo.hpo_annotations", "pypath.inputs.hpo.hpo_diseases", "pypath.inputs.hpo.hpo_ontology", "pypath.inputs.hpo.hpo_terms", "pypath.inputs.hprd", "pypath.inputs.hprd.get_hprd", "pypath.inputs.hprd.hprd_enzyme_substrate", "pypath.inputs.hprd.hprd_interactions", "pypath.inputs.hprd.hprd_interactions_htp", "pypath.inputs.htri", "pypath.inputs.htri.htri_interactions", "pypath.inputs.humancellmap", "pypath.inputs.humancellmap.humancellmap_annotations", "pypath.inputs.humap", "pypath.inputs.humap.humap2_complexes", "pypath.inputs.humap.humap_complexes", "pypath.inputs.huri", "pypath.inputs.huri.hi_i_interactions", "pypath.inputs.huri.hi_ii_interactions", "pypath.inputs.huri.hi_iii_old", "pypath.inputs.huri.hi_union_interactions", "pypath.inputs.huri.huri_interactions", "pypath.inputs.huri.lit_bm_13_interactions", "pypath.inputs.huri.lit_bm_17_interactions", "pypath.inputs.huri.lit_bm_interactions", "pypath.inputs.huri.rolland_hi_ii_14", "pypath.inputs.huri.vidal_hi_iii_old", "pypath.inputs.huri.yang2016_interactions", "pypath.inputs.huri.yu2011_interactions", "pypath.inputs.i3d", "pypath.inputs.i3d.get_i3d", "pypath.inputs.icellnet", "pypath.inputs.icellnet.IcellnetRecord", "pypath.inputs.icellnet.icellnet_annotations", "pypath.inputs.icellnet.icellnet_complexes", "pypath.inputs.icellnet.icellnet_interactions", "pypath.inputs.ielm", "pypath.inputs.ielm.get_ielm", "pypath.inputs.ielm.get_ielm_huge", "pypath.inputs.imweb", "pypath.inputs.imweb.get_imweb", "pypath.inputs.imweb.get_imweb_req", "pypath.inputs.innatedb", "pypath.inputs.innatedb.innatedb_interactions", "pypath.inputs.instruct", "pypath.inputs.instruct.get_instruct", "pypath.inputs.instruct.get_instruct_offsets", "pypath.inputs.intact", "pypath.inputs.intact.intact_interactions", "pypath.inputs.integrins", "pypath.inputs.integrins.get_integrins", "pypath.inputs.interpro", "pypath.inputs.interpro.interpro2go_annotations", "pypath.inputs.interpro.interpro_annotations", "pypath.inputs.interpro.interpro_entries", "pypath.inputs.interpro.interpro_xrefs", "pypath.inputs.intogen", "pypath.inputs.intogen.intogen_annotations", "pypath.inputs.ipi", "pypath.inputs.ipi.ipi_uniprot", "pypath.inputs.iptmnet", "pypath.inputs.iptmnet.IptmnetInteraction", "pypath.inputs.iptmnet.iptmnet_interactions", "pypath.inputs.italk", "pypath.inputs.italk.italk_annotations", "pypath.inputs.italk.italk_interactions", "pypath.inputs.italk.italk_raw", "pypath.inputs.kea", "pypath.inputs.kea.kea_enzyme_substrate", "pypath.inputs.kea.kea_interactions", "pypath.inputs.kegg", "pypath.inputs.kegg.KeggPathway", "pypath.inputs.kegg.kegg_dbget", "pypath.inputs.kegg.kegg_interactions", "pypath.inputs.kegg.kegg_medicus", "pypath.inputs.kegg.kegg_medicus_complexes", "pypath.inputs.kegg.kegg_medicus_interactions", "pypath.inputs.kegg.kegg_pathway_annotations", "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons", "pypath.inputs.kegg.kegg_pathways", "pypath.inputs.kegg_api", "pypath.inputs.kegg_api.disease_to_drug", "pypath.inputs.kegg_api.disease_to_gene", "pypath.inputs.kegg_api.disease_to_pathway", "pypath.inputs.kegg_api.drug_to_disease", "pypath.inputs.kegg_api.drug_to_drug", "pypath.inputs.kegg_api.drug_to_gene", "pypath.inputs.kegg_api.drug_to_pathway", "pypath.inputs.kegg_api.gene_to_disease", "pypath.inputs.kegg_api.gene_to_drug", "pypath.inputs.kegg_api.gene_to_pathway", "pypath.inputs.kegg_api.kegg_drug_to_chebi", "pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid", "pypath.inputs.kegg_api.kegg_gene_to_uniprot", "pypath.inputs.kegg_api.pathway_to_disease", "pypath.inputs.kegg_api.pathway_to_drug", "pypath.inputs.kegg_api.pathway_to_gene", "pypath.inputs.kinasedotcom", "pypath.inputs.kinasedotcom.kinasedotcom_annotations", "pypath.inputs.kirouac2010", "pypath.inputs.kirouac2010.kirouac2010_interactions", "pypath.inputs.lambert2018", "pypath.inputs.lambert2018.lambert2018_annotations", "pypath.inputs.lambert2018.lambert2018_s1_raw", "pypath.inputs.laudanna", "pypath.inputs.laudanna.laudanna_directions", "pypath.inputs.laudanna.laudanna_effects", "pypath.inputs.li2012", "pypath.inputs.li2012.get_li2012", "pypath.inputs.li2012.li2012_dmi", "pypath.inputs.li2012.li2012_enzyme_substrate", "pypath.inputs.li2012.li2012_interactions", "pypath.inputs.lincs", "pypath.inputs.lincs.lincs_compounds", "pypath.inputs.lmpid", "pypath.inputs.lmpid.lmpid_dmi", "pypath.inputs.lmpid.lmpid_interactions", "pypath.inputs.lmpid.load_lmpid", "pypath.inputs.lncdisease", "pypath.inputs.lncdisease.lncdisease_interactions", "pypath.inputs.lncrnadb", "pypath.inputs.lncrnadb.lncrnadb_interactions", "pypath.inputs.locate", "pypath.inputs.locate.locate_localizations", "pypath.inputs.lrdb", "pypath.inputs.lrdb.LrdbAnnotation", "pypath.inputs.lrdb.lrdb_annotations", "pypath.inputs.lrdb.lrdb_interactions", "pypath.inputs.macrophage", "pypath.inputs.macrophage.macrophage_interactions", "pypath.inputs.main", "pypath.inputs.matrisome", "pypath.inputs.matrisome.matrisome_annotations", "pypath.inputs.matrixdb", "pypath.inputs.matrixdb.matrixdb_annotations", "pypath.inputs.matrixdb.matrixdb_ecm_proteins", "pypath.inputs.matrixdb.matrixdb_interactions", "pypath.inputs.matrixdb.matrixdb_membrane_proteins", "pypath.inputs.matrixdb.matrixdb_secreted_proteins", "pypath.inputs.mcam", "pypath.inputs.mcam.mcam_cell_adhesion_molecules", "pypath.inputs.membranome", "pypath.inputs.membranome.membranome_annotations", "pypath.inputs.mimp", "pypath.inputs.mimp.get_kinase_class", "pypath.inputs.mimp.mimp_enzyme_substrate", "pypath.inputs.mimp.mimp_interactions", "pypath.inputs.mir2disease", "pypath.inputs.mir2disease.mir2disease_interactions", "pypath.inputs.mirbase", "pypath.inputs.mirbase.get_mirbase_aliases", "pypath.inputs.mirbase.mirbase_ids", "pypath.inputs.mirbase.mirbase_mature", "pypath.inputs.mirbase.mirbase_mature_all", "pypath.inputs.mirbase.mirbase_precursor", "pypath.inputs.mirbase.mirbase_precursor_all", "pypath.inputs.mirbase.mirbase_precursor_to_mature", "pypath.inputs.mirdeathdb", "pypath.inputs.mirdeathdb.mirdeathdb_interactions", "pypath.inputs.mirecords", "pypath.inputs.mirecords.mirecords_interactions", "pypath.inputs.mirtarbase", "pypath.inputs.mirtarbase.mirtarbase_interactions", "pypath.inputs.mitab", "pypath.inputs.mitab.mitab_field_list", "pypath.inputs.mitab.mitab_field_uniprot", "pypath.inputs.mppi", "pypath.inputs.mppi.mppi_interactions", "pypath.inputs.ncrdeathdb", "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions", "pypath.inputs.negatome", "pypath.inputs.negatome.negatome_interactions", "pypath.inputs.netbiol", "pypath.inputs.netbiol.arn_interactions", "pypath.inputs.netbiol.nrf2ome_interactions", "pypath.inputs.netpath", "pypath.inputs.netpath.netpath_interactions", "pypath.inputs.netpath.netpath_names", "pypath.inputs.netpath.netpath_pathway_annotations", "pypath.inputs.oma", "pypath.inputs.oma.oma_orthologs", "pypath.inputs.ontology", "pypath.inputs.ontology.listof_ontologies", "pypath.inputs.ontology.ontology", "pypath.inputs.opm", "pypath.inputs.opm.opm_annotations", "pypath.inputs.oreganno", "pypath.inputs.oreganno.oreganno_interactions", "pypath.inputs.oreganno.oreganno_raw", "pypath.inputs.panglaodb", "pypath.inputs.panglaodb.panglaodb_annotations", "pypath.inputs.panglaodb.panglaodb_raw", "pypath.inputs.pathophenodb", "pypath.inputs.pathophenodb.DiseasePathogen", "pypath.inputs.pathophenodb.disease_pathogen_interactions", "pypath.inputs.pathwaycommons", "pypath.inputs.pathwaycommons.PathwayCommonsInteraction", "pypath.inputs.pathwaycommons.PathwayCommonsResource", "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions", "pypath.inputs.pazar", "pypath.inputs.pazar.pazar_interactions", "pypath.inputs.pdb", "pypath.inputs.pdb.pdb_chains", "pypath.inputs.pdb.pdb_complexes", "pypath.inputs.pdb.pdb_uniprot", "pypath.inputs.pdzbase", "pypath.inputs.pdzbase.pdzbase_interactions", "pypath.inputs.pepcyber", "pypath.inputs.pepcyber.pepcyber_details", "pypath.inputs.pepcyber.pepcyber_interactions", "pypath.inputs.pfam", "pypath.inputs.pfam.pfam_names", "pypath.inputs.pfam.pfam_pdb", "pypath.inputs.pfam.pfam_regions", "pypath.inputs.pfam.pfam_uniprot", "pypath.inputs.pharos", "pypath.inputs.pharos.pharos_diseases", "pypath.inputs.pharos.pharos_expression", "pypath.inputs.pharos.pharos_general", "pypath.inputs.pharos.pharos_gtex", "pypath.inputs.pharos.pharos_ligands", "pypath.inputs.pharos.pharos_orthologs", "pypath.inputs.pharos.pharos_targets", "pypath.inputs.pharos.pharos_xrefs", "pypath.inputs.phobius", "pypath.inputs.phobius.phobius_annotations", "pypath.inputs.phosphatome", "pypath.inputs.phosphatome.phosphatome_annotations", "pypath.inputs.phosphoelm", "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate", "pypath.inputs.phosphoelm.phosphoelm_interactions", "pypath.inputs.phosphoelm.phosphoelm_kinases", "pypath.inputs.phosphonetworks", "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate", "pypath.inputs.phosphonetworks.phosphonetworks_interactions", "pypath.inputs.phosphopoint", "pypath.inputs.phosphopoint.phosphopoint_directions", "pypath.inputs.phosphopoint.phosphopoint_interactions", "pypath.inputs.phosphosite", "pypath.inputs.phosphosite.phosphosite_directions", "pypath.inputs.phosphosite.phosphosite_enzyme_substrate", "pypath.inputs.phosphosite.phosphosite_interactions", "pypath.inputs.phosphosite.phosphosite_interactions_all", "pypath.inputs.phosphosite.phosphosite_interactions_curated", "pypath.inputs.phosphosite.phosphosite_interactions_new", "pypath.inputs.phosphosite.phosphosite_interactions_noref", "pypath.inputs.phosphosite.phosphosite_ptm_orthology", "pypath.inputs.phosphosite.phosphosite_ptms", "pypath.inputs.phosphosite.phosphosite_regsites", "pypath.inputs.phosphosite.phosphosite_regsites_one_organism", "pypath.inputs.phosphosite.regsites_tab", "pypath.inputs.pisa", "pypath.inputs.pisa.PisaBond", "pypath.inputs.pisa.pisa_bonds", "pypath.inputs.pisa.pisa_interfaces", "pypath.inputs.pro", "pypath.inputs.pro.get_pro", "pypath.inputs.pro.pro_mapping", "pypath.inputs.progeny", "pypath.inputs.progeny.progeny_annotations", "pypath.inputs.progeny.progeny_raw", "pypath.inputs.proteinatlas", "pypath.inputs.proteinatlas.get_proteinatlas", "pypath.inputs.proteinatlas.proteinatlas_annotations", "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations", "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations", "pypath.inputs.proteins", "pypath.inputs.proteins.variants", "pypath.inputs.protmapper", "pypath.inputs.protmapper.get_protmapper", "pypath.inputs.protmapper.protmapper_enzyme_substrate", "pypath.inputs.protmapper.protmapper_interactions", "pypath.inputs.pubchem", "pypath.inputs.pubchem.pubchem_mapping", "pypath.inputs.pubmed", "pypath.inputs.pubmed.get_pmid", "pypath.inputs.pubmed.get_pubmeds", "pypath.inputs.pubmed.only_pmids", "pypath.inputs.pubmed.open_pubmed", "pypath.inputs.pubmed.pmids_dict", "pypath.inputs.pubmed.pmids_list", "pypath.inputs.ramilowski2015", "pypath.inputs.ramilowski2015.ramilowski_interactions", "pypath.inputs.ramilowski2015.ramilowski_locations", "pypath.inputs.rdata", "pypath.inputs.reaction", "pypath.inputs.reaction.acsn_biopax", "pypath.inputs.reaction.acsn_interactions_2", "pypath.inputs.reaction.get_acsn_effects", "pypath.inputs.reaction.get_controls", "pypath.inputs.reaction.get_interactions", "pypath.inputs.reaction.get_reactions", "pypath.inputs.reaction.get_soup", "pypath.inputs.reaction.panther_biopax", "pypath.inputs.reaction.panther_interactions", "pypath.inputs.reaction.pid_biopax", "pypath.inputs.reaction.pid_interactions", "pypath.inputs.reaction.process_complex", "pypath.inputs.reaction.process_controls", "pypath.inputs.reaction.process_reactions", "pypath.inputs.reaction.reactions_biopax", "pypath.inputs.reaction.reactome_biopax", "pypath.inputs.reaction.reactome_bs", "pypath.inputs.reaction.reactome_interactions", "pypath.inputs.reaction.reactome_sbml", "pypath.inputs.scconnect", "pypath.inputs.scconnect.scconnect_annotations", "pypath.inputs.scconnect.scconnect_complexes", "pypath.inputs.scconnect.scconnect_interactions", "pypath.inputs.science", "pypath.inputs.science.science_download", "pypath.inputs.signalink", "pypath.inputs.signalink.signalink_annotations", "pypath.inputs.signalink.signalink_function_annotations", "pypath.inputs.signalink.signalink_interactions", "pypath.inputs.signalink.signalink_pathway_annotations", "pypath.inputs.signor", "pypath.inputs.signor.signor_complexes", "pypath.inputs.signor.signor_enzyme_substrate", "pypath.inputs.signor.signor_interactions", "pypath.inputs.signor.signor_pathway_annotations", "pypath.inputs.signor.signor_pathways", "pypath.inputs.signor.signor_protein_families", "pypath.inputs.spike", "pypath.inputs.spike.spike_complexes", "pypath.inputs.spike.spike_interactions", "pypath.inputs.stitch", "pypath.inputs.stitch.stitch_actions_interactions", "pypath.inputs.stitch.stitch_links_interactions", "pypath.inputs.string", "pypath.inputs.string.string_effects", "pypath.inputs.string.string_links_interactions", "pypath.inputs.string.string_physical_interactions", "pypath.inputs.string.string_species", "pypath.inputs.surfaceome", "pypath.inputs.surfaceome.surfaceome_annotations", "pypath.inputs.switches_elm", "pypath.inputs.switches_elm.get_switches_elm", "pypath.inputs.talklr", "pypath.inputs.talklr.talklr_annotations", "pypath.inputs.talklr.talklr_interactions", "pypath.inputs.talklr.talklr_raw", "pypath.inputs.tcdb", "pypath.inputs.tcdb.tcdb_annotations", "pypath.inputs.tcdb.tcdb_classes", "pypath.inputs.tcdb.tcdb_families", "pypath.inputs.tfcensus", "pypath.inputs.tfcensus.tfcensus_annotations", "pypath.inputs.threedcomplex", "pypath.inputs.threedcomplex.threedcomplex_chains", "pypath.inputs.threedcomplex.threedcomplex_complexes", "pypath.inputs.threedcomplex.threedcomplex_contacts", "pypath.inputs.threedcomplex.threedcomplex_ddi", "pypath.inputs.threedcomplex.threedcomplex_nresidues", "pypath.inputs.threedid", "pypath.inputs.threedid.get_3did", "pypath.inputs.threedid.get_3did_ddi", "pypath.inputs.threedid.get_3did_dmi", "pypath.inputs.threedid.process_3did_dmi", "pypath.inputs.topdb", "pypath.inputs.topdb.topdb_annotations", "pypath.inputs.transmir", "pypath.inputs.transmir.transmir_interactions", "pypath.inputs.trip", "pypath.inputs.trip.take_a_trip", "pypath.inputs.trip.trip_find_uniprot", "pypath.inputs.trip.trip_get_uniprot", "pypath.inputs.trip.trip_interactions", "pypath.inputs.trip.trip_process", "pypath.inputs.trip.trip_process_table", "pypath.inputs.trrust", "pypath.inputs.trrust.scrape_human", "pypath.inputs.trrust.scrape_mouse", "pypath.inputs.trrust.trrust_general", "pypath.inputs.trrust.trrust_human", "pypath.inputs.trrust.trrust_mouse", "pypath.inputs.trrust.trrust_scraping", "pypath.inputs.unichem", "pypath.inputs.unichem.info", "pypath.inputs.unichem.unichem_info", "pypath.inputs.unichem.unichem_mapping", "pypath.inputs.unichem.unichem_sources", "pypath.inputs.uniprot", "pypath.inputs.uniprot.Taxon", "pypath.inputs.uniprot.UniprotRecordHistory", "pypath.inputs.uniprot.all_swissprots", "pypath.inputs.uniprot.all_trembls", "pypath.inputs.uniprot.all_uniprots", "pypath.inputs.uniprot.deleted_uniprot_genesymbol", "pypath.inputs.uniprot.get_db", "pypath.inputs.uniprot.get_uniprot_sec", "pypath.inputs.uniprot.init_db", "pypath.inputs.uniprot.is_swissprot", "pypath.inputs.uniprot.is_trembl", "pypath.inputs.uniprot.is_uniprot", "pypath.inputs.uniprot.protein_datasheet", "pypath.inputs.uniprot.swissprot_deleted", "pypath.inputs.uniprot.trembl_deleted", "pypath.inputs.uniprot.uniprot_data", "pypath.inputs.uniprot.uniprot_deleted", "pypath.inputs.uniprot.uniprot_families", "pypath.inputs.uniprot.uniprot_history", "pypath.inputs.uniprot.uniprot_history_recent_datasheet", "pypath.inputs.uniprot.uniprot_keywords", "pypath.inputs.uniprot.uniprot_locations", "pypath.inputs.uniprot.uniprot_ncbi_taxids", "pypath.inputs.uniprot.uniprot_ncbi_taxids_2", "pypath.inputs.uniprot.uniprot_preprocess", "pypath.inputs.uniprot.uniprot_recent_version", "pypath.inputs.uniprot.uniprot_taxonomy", "pypath.inputs.uniprot.uniprot_tissues", "pypath.inputs.uniprot.uniprot_topology", "pypath.inputs.uniprot.valid_uniprot", "pypath.inputs.wang", "pypath.inputs.wang.cui_interactions", "pypath.inputs.wang.hsn_interactions", "pypath.inputs.wang.wang_annotations", "pypath.inputs.wang.wang_interactions", "pypath.inputs.wojtowicz2020", "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions", "pypath.inputs.wojtowicz2020.wojtowicz2020_raw", "pypath.inputs.zhong2015", "pypath.inputs.zhong2015.zhong2015_annotations", "pypath.internals", "pypath.internals.annot_formats", "pypath.internals.annot_formats.AnnotDef", "pypath.internals.annot_formats.AnnotDefKey", "pypath.internals.annot_formats.AnnotOp", "pypath.internals.annot_formats.AnnotationGroup", "pypath.internals.input_formats", "pypath.internals.input_formats.ArrayMapping", "pypath.internals.input_formats.BiomartMapping", "pypath.internals.input_formats.FileMapping", "pypath.internals.input_formats.MappingInput", "pypath.internals.input_formats.NetworkInput", "pypath.internals.input_formats.PickleMapping", "pypath.internals.input_formats.ProMapping", "pypath.internals.input_formats.ReadList", "pypath.internals.input_formats.UnichemMapping", "pypath.internals.input_formats.UniprotListMapping", "pypath.internals.input_formats.UniprotMapping", "pypath.internals.intera", "pypath.internals.intera.Complex", "pypath.internals.intera.Domain", "pypath.internals.intera.DomainDomain", "pypath.internals.intera.DomainMotif", "pypath.internals.intera.Interface", "pypath.internals.intera.Motif", "pypath.internals.intera.Ptm", "pypath.internals.intera.Regulation", "pypath.internals.intera.Residue", "pypath.internals.license", "pypath.internals.license.License", "pypath.internals.license.LicenseAttrib", "pypath.internals.license.LicenseFeature", "pypath.internals.license.LicensePurpose", "pypath.internals.license.LicenseSharing", "pypath.internals.maps", "pypath.internals.refs", "pypath.internals.refs.Reference", "pypath.internals.refs.get_pubmed_data", "pypath.internals.resource", "pypath.internals.resource.AbstractResource", "pypath.internals.resource.EnzymeSubstrateResource", "pypath.internals.resource.EnzymeSubstrateResourceKey", "pypath.internals.resource.NetworkResource", "pypath.internals.resource.NetworkResourceKey", "pypath.internals.resource.ResourceAttributes", "pypath.legacy", "pypath.legacy.db_categories", "pypath.legacy.db_categories.get_categories", "pypath.legacy.db_categories.get_category", "pypath.legacy.main", "pypath.legacy.main.Direction", "pypath.legacy.main.NetworkEntityCollection", "pypath.legacy.main.NetworkStatsRecord", "pypath.legacy.main.PyPath", "pypath.legacy.main.get_db", "pypath.legacy.main.init_db", "pypath.log", "pypath.omnipath", "pypath.omnipath.app", "pypath.omnipath.app.DatabaseManager", "pypath.omnipath.databases", "pypath.omnipath.databases.build", "pypath.omnipath.databases.class_and_param", "pypath.omnipath.databases.define", "pypath.omnipath.databases.define.DatabaseClass", "pypath.omnipath.databases.define.DatabaseDefinition", "pypath.omnipath.databases.define.DatabaseDefinitionManager", "pypath.omnipath.databases.get_manager", "pypath.omnipath.databases.init_manager", "pypath.omnipath.export", "pypath.omnipath.export.Export", "pypath.omnipath.init", "pypath.omnipath.param", "pypath.omnipath.param.curated_ppi_resources", "pypath.omnipath.param.tf_target_resources", "pypath.omnipath.server", "pypath.omnipath.server.build", "pypath.omnipath.server.build.WebserviceTables", "pypath.omnipath.server.generate_about_page", "pypath.omnipath.server.generate_about_page.export_licenses", "pypath.omnipath.server.generate_about_page.generate_about_html", "pypath.omnipath.server.generate_about_page.resource_list_latex", "pypath.omnipath.server.generate_about_page.write_html", "pypath.omnipath.server.legacy", "pypath.omnipath.server.legacy.PypathServer", "pypath.omnipath.server.run", "pypath.omnipath.server.run.BaseServer", "pypath.omnipath.server.run.Rest", "pypath.omnipath.server.run.TableServer", "pypath.omnipath.server.run.TwistedWebResource", "pypath.omnipath.server.run.TwistedWebSite", "pypath.omnipath.server.run.stop_server", "pypath.omnipath.server.run.twisted_listen_tcp", "pypath.omnipath.server.run.twisted_run", "pypath.resources", "pypath.resources.controller", "pypath.resources.controller.ResourceController", "pypath.resources.data", "pypath.resources.data_formats", "pypath.resources.data_formats.ROOT", "pypath.resources.data_formats.activity_flow", "pypath.resources.data_formats.enzyme_substrate", "pypath.resources.data_formats.interaction", "pypath.resources.data_formats.interaction_htp", "pypath.resources.data_formats.obsolate", "pypath.resources.data_formats.pathway_bad", "pypath.resources.data_formats.reaction_pc", "pypath.resources.data_formats.transcription_deprecated", "pypath.resources.data_formats.transcription_onebyone", "pypath.resources.descriptions", "pypath.resources.descriptions.export_licenses", "pypath.resources.descriptions.gen_html", "pypath.resources.descriptions.resource_list_latex", "pypath.resources.descriptions.write_html", "pypath.resources.get_controller", "pypath.resources.licenses", "pypath.resources.licenses.Licenses", "pypath.resources.network", "pypath.resources.network.dorothea_expand_levels", "pypath.resources.urls", "pypath.share", "pypath.share.cache", "pypath.share.cache.cache_item", "pypath.share.cache.get_cachedir", "pypath.share.common", "pypath.share.common.add_to_list", "pypath.share.common.add_to_set", "pypath.share.common.at_least_in", "pypath.share.common.clean_dict", "pypath.share.common.combine_attrs", "pypath.share.common.console", "pypath.share.common.decode", "pypath.share.common.del_empty", "pypath.share.common.df_memory_usage", "pypath.share.common.dict_collapse_keys", "pypath.share.common.dict_counts", "pypath.share.common.dict_diff", "pypath.share.common.dict_expand_keys", "pypath.share.common.dict_percent", "pypath.share.common.dict_set_path", "pypath.share.common.dict_set_percent", "pypath.share.common.dict_str", "pypath.share.common.dict_subtotals", "pypath.share.common.dict_sym_diff", "pypath.share.common.dict_union", "pypath.share.common.eq", "pypath.share.common.filtr", "pypath.share.common.first", "pypath.share.common.flat_list", "pypath.share.common.float_or_nan", "pypath.share.common.gen_session_id", "pypath.share.common.get", "pypath.share.common.get_args", "pypath.share.common.is_float", "pypath.share.common.is_int", "pypath.share.common.is_str", "pypath.share.common.jaccard_index", "pypath.share.common.join_dicts", "pypath.share.common.latex_table", "pypath.share.common.match", "pypath.share.common.maybe_in_dict", "pypath.share.common.md5", "pypath.share.common.merge_dicts", "pypath.share.common.n_shared_elements", "pypath.share.common.n_shared_foreach", "pypath.share.common.n_shared_total", "pypath.share.common.n_shared_unique_foreach", "pypath.share.common.n_unique_elements", "pypath.share.common.n_unique_foreach", "pypath.share.common.n_unique_total", "pypath.share.common.negate", "pypath.share.common.none_or_len", "pypath.share.common.paginate", "pypath.share.common.prefix", "pypath.share.common.print_table", "pypath.share.common.re_safe_groups", "pypath.share.common.remove_prefix", "pypath.share.common.rotate", "pypath.share.common.sets_to_sorted_lists", "pypath.share.common.sfirst", "pypath.share.common.shared_elements", "pypath.share.common.shared_foreach", "pypath.share.common.shared_total", "pypath.share.common.shared_unique", "pypath.share.common.shared_unique_foreach", "pypath.share.common.shared_unique_total", "pypath.share.common.silent", "pypath.share.common.simpson_index", "pypath.share.common.simpson_index_counts", "pypath.share.common.something", "pypath.share.common.sorensen_index", "pypath.share.common.suffix", "pypath.share.common.sum_dicts", "pypath.share.common.swap_dict", "pypath.share.common.swap_dict_simple", "pypath.share.common.swap_suffix", "pypath.share.common.table_add_row_numbers", "pypath.share.common.table_format", "pypath.share.common.table_textwrap", "pypath.share.common.to_list", "pypath.share.common.to_set", "pypath.share.common.try_bool", "pypath.share.common.try_float", "pypath.share.common.tsv_table", "pypath.share.common.uniq_list", "pypath.share.common.uniq_list1", "pypath.share.common.uniq_list2", "pypath.share.common.uniq_ord_list", "pypath.share.common.unique_elements", "pypath.share.common.unique_foreach", "pypath.share.common.unique_list", "pypath.share.common.unique_total", "pypath.share.common.upper0", "pypath.share.common.values", "pypath.share.common.wcl", "pypath.share.common.wrap_truncate", "pypath.share.constants", "pypath.share.curl", "pypath.share.curl.Curl", "pypath.share.curl.FileOpener", "pypath.share.curl.RemoteFile", "pypath.share.curl.cache_delete_off", "pypath.share.curl.cache_delete_on", "pypath.share.curl.cache_off", "pypath.share.curl.cache_on", "pypath.share.curl.cache_print_off", "pypath.share.curl.cache_print_on", "pypath.share.curl.debug_off", "pypath.share.curl.debug_on", "pypath.share.curl.dryrun_off", "pypath.share.curl.dryrun_on", "pypath.share.curl.is_url", "pypath.share.curl.preserve_off", "pypath.share.curl.preserve_on", "pypath.share.log", "pypath.share.log.Logger", "pypath.share.log.new_logger", "pypath.share.progress", "pypath.share.progress.Progress", "pypath.share.session", "pypath.share.session.Logger", "pypath.share.session.Session", "pypath.share.session.get_log", "pypath.share.session.get_session", "pypath.share.session.new_session", "pypath.share.settings", "pypath.share.settings.Settings", "pypath.share.settings.context", "pypath.share.settings.get", "pypath.share.settings.setup", "pypath.utils", "pypath.utils.go", "pypath.utils.go.GOAnnotation", "pypath.utils.go.GOCustomAnnotation", "pypath.utils.go.GeneOntology", "pypath.utils.go.annotate", "pypath.utils.go.get_db", "pypath.utils.go.init_db", "pypath.utils.go.load_go", "pypath.utils.homology", "pypath.utils.homology.HomologyManager", "pypath.utils.homology.Ortholog", "pypath.utils.homology.ProteinHomology", "pypath.utils.homology.Proteomes", "pypath.utils.homology.PtmHomology", "pypath.utils.homology.SequenceContainer", "pypath.utils.homology.get_df", "pypath.utils.homology.get_dict", "pypath.utils.homology.get_manager", "pypath.utils.homology.init", "pypath.utils.homology.translate", "pypath.utils.homology.translate_df", "pypath.utils.mapping", "pypath.utils.mapping.MapReader", "pypath.utils.mapping.Mapper", "pypath.utils.mapping.MappingTable", "pypath.utils.mapping.MappingTableKey", "pypath.utils.mapping.UNIPROT_ID_TYPES", "pypath.utils.mapping.get_mapper", "pypath.utils.mapping.guess_type", "pypath.utils.mapping.id_from_label", "pypath.utils.mapping.id_from_label0", "pypath.utils.mapping.init", "pypath.utils.mapping.label", "pypath.utils.mapping.map_name", "pypath.utils.mapping.map_name0", "pypath.utils.mapping.map_names", "pypath.utils.pdb", "pypath.utils.pdb.Residue", "pypath.utils.pdb.ResidueMapper", "pypath.utils.pdb.Segment", "pypath.utils.pdb.residue_pdb", "pypath.utils.proteomicsdb", "pypath.utils.proteomicsdb.ProteomicsDB", "pypath.utils.pyreact", "pypath.utils.pyreact.AttributeHandler", "pypath.utils.pyreact.BioPaxReader", "pypath.utils.pyreact.Complex", "pypath.utils.pyreact.ComplexVariations", "pypath.utils.pyreact.Control", "pypath.utils.pyreact.Entity", "pypath.utils.pyreact.EntitySet", "pypath.utils.pyreact.Intersecting", "pypath.utils.pyreact.Protein", "pypath.utils.pyreact.ProteinFamily", "pypath.utils.pyreact.PyReact", "pypath.utils.pyreact.Reaction", "pypath.utils.pyreact.ReactionSide", "pypath.utils.pyreact.Reference", "pypath.utils.reflists", "pypath.utils.reflists.ReferenceListManager", "pypath.utils.reflists.check", "pypath.utils.reflists.get_manager", "pypath.utils.reflists.get_reflist", "pypath.utils.reflists.init", "pypath.utils.reflists.is_not", "pypath.utils.reflists.select", "pypath.utils.residues", "pypath.utils.residues.ResidueMapper", "pypath.utils.seq", "pypath.utils.seq.Pfam", "pypath.utils.seq.Resource", "pypath.utils.seq.Seq", "pypath.utils.seq.get_isoforms", "pypath.utils.seq.read_fasta", "pypath.utils.seq.swissprot_seq", "pypath.utils.taxonomy", "pypath.utils.taxonomy.ensure_common_name", "pypath.utils.taxonomy.ensure_ensembl_name", "pypath.utils.taxonomy.ensure_latin_name", "pypath.utils.taxonomy.ensure_ncbi_tax_id", "pypath.utils.taxonomy.get_db", "pypath.utils.taxonomy.init_db", "pypath.utils.taxonomy.short_latin_names", "pypath.utils.taxonomy.shorten_latin_name", "pypath.utils.taxonomy.taxid_from_common_name", "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name", "pypath.utils.taxonomy.taxid_from_ensembl_name", "pypath.utils.taxonomy.taxid_from_latin_name", "pypath.utils.taxonomy.taxid_from_nonstandard", "pypath.utils.taxonomy.uniprot_taxid", "pypath.utils.unichem", "pypath.utils.unichem.Unichem", "pypath.utils.uniprot", "pypath.utils.uniprot.UniprotProtein", "pypath.utils.uniprot.ac", "pypath.utils.uniprot.activity_regulation", "pypath.utils.uniprot.activity_regulation_with_xrefs", "pypath.utils.uniprot.alternative_products", "pypath.utils.uniprot.alternative_products_with_xrefs", "pypath.utils.uniprot.browse", "pypath.utils.uniprot.catalytic_activity", "pypath.utils.uniprot.catalytic_activity_with_xrefs", "pypath.utils.uniprot.collect", "pypath.utils.uniprot.databases", "pypath.utils.uniprot.disease", "pypath.utils.uniprot.disease_with_xrefs", "pypath.utils.uniprot.ec", "pypath.utils.uniprot.features_table", "pypath.utils.uniprot.full_name", "pypath.utils.uniprot.function", "pypath.utils.uniprot.function_genecards", "pypath.utils.uniprot.function_or_genecards", "pypath.utils.uniprot.function_with_genecards", "pypath.utils.uniprot.function_with_xrefs", "pypath.utils.uniprot.genesymbol", "pypath.utils.uniprot.has_tag", "pypath.utils.uniprot.id", "pypath.utils.uniprot.info", "pypath.utils.uniprot.info_section", "pypath.utils.uniprot.interaction", "pypath.utils.uniprot.interaction_with_xrefs", "pypath.utils.uniprot.is_reviewed", "pypath.utils.uniprot.itertag", "pypath.utils.uniprot.keywords", "pypath.utils.uniprot.keywords_with_xrefs", "pypath.utils.uniprot.length", "pypath.utils.uniprot.lengths", "pypath.utils.uniprot.load", "pypath.utils.uniprot.organism", "pypath.utils.uniprot.print_features", "pypath.utils.uniprot.ptm", "pypath.utils.uniprot.ptm_with_xrefs", "pypath.utils.uniprot.query", "pypath.utils.uniprot.reload", "pypath.utils.uniprot.remove_xrefs", "pypath.utils.uniprot.sequence", "pypath.utils.uniprot.sequence_caution", "pypath.utils.uniprot.sequence_caution_with_xrefs", "pypath.utils.uniprot.similarity", "pypath.utils.uniprot.similarity_with_xrefs", "pypath.utils.uniprot.subcellular_location", "pypath.utils.uniprot.subcellular_location_with_xrefs", "pypath.utils.uniprot.subunit", "pypath.utils.uniprot.subunit_with_xrefs", "pypath.utils.uniprot.tissue_specificity", "pypath.utils.uniprot.tissue_specificity_with_xrefs", "pypath.utils.uniprot.update_databases", "pypath.utils.uniprot.update_info", "pypath.utils.uniprot.web_resource", "pypath.utils.uniprot.web_resource_with_xrefs", "pypath.utils.uniprot.weight", "pypath.utils.uniprot.weights", "pypath.visual", "pypath.visual.drawing", "pypath.visual.drawing.InterSet", "pypath.visual.drawing.Plot", "pypath.visual.igraph_drawing", "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer", "pypath.visual.igraph_drawing.ArrowEdgeDrawer", "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport", "pypath.visual.igraph_drawing.DefaultVertexDrawer", "pypath.visual.igraph_drawing.TextDrawer", "pypath.visual.igraph_drawing.edge", "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer", "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer", "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer", "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer", "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer", "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer", "pypath.visual.igraph_drawing.vertex", "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer", "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer", "pypath.visual.igraph_drawing.vertex.AbstractDrawer", "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer", "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer", "pypath.visual.plot", "pypath.visual.plot.Barplot", "pypath.visual.plot.BarplotsGrid", "pypath.visual.plot.CurationPlot", "pypath.visual.plot.Dendrogram", "pypath.visual.plot.Histogram", "pypath.visual.plot.HistoryTree", "pypath.visual.plot.HtpCharacteristics", "pypath.visual.plot.MultiBarplot", "pypath.visual.plot.Plot", "pypath.visual.plot.RefsComposite", "pypath.visual.plot.ScatterPlus", "pypath.visual.plot.SimilarityGraph", "pypath.visual.plot.StackedBarplot", "pypath.visual.plot.boxplot", "pypath.visual.plot.get_moves", "pypath.visual.plot.is_opentype_cff_font", "pypath.visual.plot.move_labels", "pypath.visual.plot.overlap", "pypath.visual.plot.rotate_labels", "Contents", "Welcome to pypath!", "The pypath book", "Reference", "Release history", "Webservice"], "terms": {"i": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 121, 122, 123, 126, 127, 132, 133, 135, 136, 137, 139, 145, 147, 168, 169, 194, 202, 203, 214, 220, 223, 226, 239, 242, 278, 289, 290, 309, 319, 320, 321, 322, 323, 325, 327, 328, 330, 332, 346, 376, 377, 378, 381, 408, 411, 433, 440, 446, 452, 469, 475, 485, 488, 531, 539, 607, 610, 611, 629, 640, 679, 681, 700, 746, 755, 758, 764, 774, 810, 811, 819, 820, 821, 842, 852, 853, 854, 855, 857, 863, 866, 867, 868, 869, 872, 873, 880, 881, 882, 883, 891, 893, 900, 901, 902, 903, 909, 911, 920, 923, 926, 930, 946, 958, 961, 964, 968, 975, 976, 977, 979, 981, 982, 984, 985, 986, 989, 995, 996, 997, 1003, 1004, 1005, 1008, 1010, 1026, 1027, 1029, 1039, 1045, 1048, 1049, 1050, 1054, 1057, 1060, 1062, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1088, 1095, 1096, 1098, 1102, 1104, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1126, 1134, 1135, 1136, 1138, 1140, 1143, 1146, 1148, 1150, 1153, 1157, 1158, 1160, 1161, 1172, 1184, 1192, 1194, 1208, 1219, 1230, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1274, 1275, 1292, 1296, 1297, 1300, 1301], "modul": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 128, 132, 133, 135, 139, 142, 145, 150, 153, 169, 182, 278, 365, 486, 531, 700, 791, 825, 850, 855, 857, 863, 866, 868, 889, 895, 900, 903, 907, 909, 910, 911, 914, 925, 926, 938, 944, 948, 964, 970, 1025, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1091, 1095, 1096, 1100, 1102, 1103, 1104, 1107, 1118, 1119, 1122, 1124, 1128, 1132, 1143, 1208, 1230, 1253, 1257, 1270, 1284, 1287, 1289, 1296, 1299, 1300, 1301], "primarili": [0, 1298], "build": [0, 30, 126, 127, 134, 139, 145, 855, 900, 903, 909, 916, 922, 924, 984, 987, 1112, 1114, 1123, 1296, 1297, 1300], "molecular": [0, 30, 100, 121, 122, 132, 133, 134, 135, 139, 145, 488, 489, 490, 764, 855, 869, 900, 903, 1194, 1251, 1252, 1296, 1297, 1298, 1300], "interact": [0, 30, 32, 126, 127, 128, 132, 133, 139, 145, 155, 157, 158, 174, 175, 189, 191, 194, 195, 201, 203, 204, 212, 219, 220, 222, 223, 229, 235, 261, 265, 275, 276, 292, 293, 296, 297, 303, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 338, 346, 351, 394, 409, 420, 421, 431, 432, 436, 437, 438, 439, 440, 452, 459, 462, 487, 488, 490, 499, 524, 525, 529, 530, 531, 562, 572, 574, 576, 585, 587, 588, 601, 633, 635, 636, 656, 668, 670, 671, 672, 675, 697, 709, 727, 730, 735, 741, 755, 758, 759, 779, 794, 795, 796, 841, 844, 861, 868, 869, 887, 900, 903, 909, 920, 953, 954, 955, 956, 1146, 1296, 1297, 1300], "network": [0, 30, 98, 126, 134, 139, 189, 486, 758, 903, 909, 920, 924, 1257, 1296, 1297, 1300], "also": [0, 30, 127, 135, 139, 145, 151, 201, 203, 204, 452, 681, 869, 900, 903, 920, 998, 1002, 1027, 1085, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1124, 1155, 1257, 1297, 1298, 1301], "sever": [0, 1297, 1298], "submodul": [0, 3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 365, 1297, 1298, 1300], "access": [0, 97, 278, 309, 330, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 417, 440, 638, 839, 867, 903, 964, 1083, 1102, 1104, 1124, 1134, 1136, 1146, 1296, 1297, 1300], "preprocess": [0, 219, 222, 261, 280, 419, 488, 490, 667, 668, 670, 671, 672, 675, 683, 779, 780, 791, 1170, 1171, 1297], "serv": [0, 118, 134, 796, 889, 903, 909, 927, 937, 1091, 1127, 1139, 1157, 1168, 1301], "data": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 135, 139, 145, 151, 157, 169, 171, 172, 177, 180, 183, 203, 210, 211, 212, 218, 239, 240, 242, 243, 244, 245, 247, 251, 252, 253, 257, 261, 280, 290, 297, 320, 321, 322, 323, 325, 327, 328, 341, 376, 377, 381, 394, 397, 405, 406, 409, 411, 416, 419, 420, 421, 433, 440, 452, 499, 522, 531, 602, 630, 633, 636, 642, 643, 644, 646, 647, 648, 650, 666, 667, 668, 670, 671, 672, 675, 676, 686, 687, 700, 715, 758, 759, 779, 780, 791, 795, 796, 807, 866, 867, 872, 889, 890, 893, 900, 903, 909, 914, 920, 927, 938, 946, 972, 975, 976, 1039, 1068, 1069, 1072, 1073, 1095, 1096, 1104, 1110, 1112, 1114, 1116, 1117, 1118, 1120, 1121, 1123, 1124, 1125, 1127, 1143, 1146, 1170, 1171, 1203, 1277, 1278, 1280, 1281, 1287, 1290, 1296, 1297, 1300, 1301], "from": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 105, 122, 126, 127, 128, 132, 133, 135, 139, 145, 155, 157, 158, 169, 170, 172, 174, 175, 177, 182, 193, 194, 195, 197, 199, 201, 202, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 233, 234, 235, 237, 239, 240, 242, 243, 244, 245, 247, 250, 251, 252, 256, 257, 259, 261, 264, 265, 269, 275, 276, 278, 289, 292, 293, 296, 297, 302, 303, 320, 321, 322, 323, 325, 327, 328, 331, 332, 333, 334, 335, 337, 338, 339, 341, 346, 350, 351, 352, 353, 362, 363, 364, 365, 368, 373, 375, 376, 380, 381, 382, 391, 397, 398, 405, 406, 409, 415, 416, 431, 432, 436, 437, 438, 439, 440, 444, 460, 464, 489, 490, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 509, 510, 512, 514, 519, 520, 522, 531, 549, 551, 552, 562, 564, 572, 574, 576, 585, 587, 588, 594, 596, 597, 601, 602, 604, 605, 608, 630, 633, 635, 636, 638, 639, 641, 642, 643, 644, 646, 647, 648, 650, 654, 656, 666, 667, 668, 670, 671, 672, 673, 674, 675, 686, 687, 696, 700, 709, 710, 733, 734, 735, 737, 741, 746, 748, 752, 774, 778, 779, 780, 789, 791, 792, 793, 796, 807, 815, 825, 828, 841, 842, 847, 849, 855, 861, 863, 866, 867, 889, 890, 893, 900, 903, 909, 920, 922, 927, 930, 933, 946, 961, 975, 976, 978, 982, 983, 984, 987, 999, 1001, 1008, 1010, 1011, 1012, 1022, 1023, 1027, 1041, 1042, 1052, 1053, 1055, 1056, 1057, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1095, 1096, 1102, 1103, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1127, 1129, 1134, 1136, 1143, 1146, 1155, 1160, 1165, 1170, 1171, 1194, 1219, 1257, 1264, 1265, 1266, 1267, 1268, 1269, 1274, 1287, 1296, 1297, 1300, 1301], "variou": [0, 128, 145, 261, 332, 357, 836, 903, 909, 1096, 1099, 1180, 1208, 1230, 1263, 1298], "resourc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 132, 133, 135, 139, 145, 214, 275, 276, 278, 321, 322, 323, 325, 327, 328, 364, 411, 446, 610, 619, 709, 764, 774, 806, 807, 852, 853, 855, 861, 900, 903, 909, 920, 923, 924, 931, 932, 1013, 1017, 1030, 1033, 1058, 1068, 1111, 1124, 1134, 1136, 1170, 1288, 1296, 1297, 1300, 1301], "member": [0, 1, 2, 95, 97, 99, 121, 125, 131, 134, 138, 142, 144, 150, 153, 154, 156, 159, 162, 164, 167, 173, 176, 182, 188, 190, 192, 196, 198, 200, 205, 207, 213, 225, 231, 232, 236, 238, 245, 248, 255, 258, 260, 263, 266, 268, 270, 274, 277, 279, 281, 285, 288, 291, 295, 298, 301, 305, 308, 313, 318, 329, 336, 340, 342, 347, 349, 354, 356, 358, 361, 366, 388, 390, 392, 396, 399, 401, 403, 407, 413, 418, 423, 425, 427, 430, 443, 445, 450, 453, 456, 458, 461, 463, 465, 470, 472, 474, 477, 481, 484, 488, 494, 511, 513, 515, 518, 521, 526, 528, 532, 534, 536, 538, 542, 544, 545, 547, 553, 555, 557, 561, 563, 571, 573, 575, 577, 580, 582, 584, 586, 589, 593, 595, 598, 600, 603, 606, 609, 626, 628, 632, 634, 637, 642, 651, 653, 655, 659, 662, 665, 678, 682, 685, 688, 693, 695, 699, 701, 708, 711, 712, 732, 736, 738, 743, 750, 753, 756, 761, 763, 765, 769, 773, 775, 781, 786, 788, 790, 797, 804, 809, 840, 845, 848, 850, 851, 855, 856, 868, 869, 878, 884, 885, 888, 895, 896, 899, 903, 907, 908, 910, 913, 919, 922, 925, 926, 928, 933, 935, 944, 945, 947, 948, 959, 965, 967, 969, 970, 971, 974, 1066, 1067, 1084, 1087, 1089, 1095, 1100, 1101, 1109, 1122, 1137, 1142, 1144, 1147, 1148, 1151, 1154, 1155, 1157, 1159, 1167, 1169, 1176, 1191, 1193, 1253, 1254, 1257, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1276, 1298], "function": [0, 2, 77, 96, 97, 99, 122, 125, 127, 132, 135, 138, 139, 144, 153, 154, 156, 159, 162, 164, 167, 169, 173, 176, 182, 188, 190, 192, 194, 196, 198, 200, 202, 205, 207, 213, 225, 232, 236, 238, 245, 248, 253, 254, 255, 258, 260, 263, 266, 268, 270, 274, 277, 279, 281, 285, 288, 291, 295, 298, 301, 305, 308, 313, 318, 329, 336, 340, 342, 347, 349, 354, 356, 358, 361, 366, 388, 390, 392, 396, 399, 401, 403, 407, 411, 413, 418, 423, 425, 427, 430, 443, 445, 450, 453, 456, 458, 461, 463, 465, 470, 472, 474, 477, 481, 484, 494, 511, 513, 515, 518, 521, 526, 528, 532, 534, 536, 538, 542, 545, 547, 553, 555, 557, 561, 563, 571, 573, 575, 577, 580, 582, 584, 586, 589, 593, 595, 598, 600, 603, 606, 609, 626, 628, 632, 634, 637, 642, 651, 653, 655, 659, 662, 665, 678, 680, 681, 682, 685, 688, 693, 695, 699, 701, 708, 712, 732, 736, 738, 743, 750, 753, 756, 758, 761, 763, 764, 765, 769, 773, 775, 781, 786, 788, 790, 797, 804, 809, 840, 842, 845, 848, 852, 855, 885, 896, 899, 903, 907, 910, 922, 928, 935, 944, 959, 967, 971, 972, 974, 975, 976, 979, 985, 986, 996, 1009, 1025, 1057, 1067, 1068, 1084, 1085, 1089, 1095, 1101, 1109, 1110, 1112, 1114, 1121, 1122, 1123, 1124, 1127, 1128, 1134, 1136, 1137, 1143, 1159, 1169, 1176, 1193, 1203, 1255, 1260, 1276, 1287, 1297, 1298, 1299, 1300, 1301], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 167, 168, 213, 214, 225, 226, 308, 309, 318, 319, 329, 330, 341, 407, 408, 445, 446, 474, 475, 484, 485, 538, 539, 546, 606, 607, 609, 610, 611, 678, 679, 762, 809, 810, 811, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 889, 890, 891, 892, 893, 894, 899, 900, 901, 902, 903, 908, 909, 913, 914, 915, 916, 919, 920, 926, 927, 933, 934, 935, 936, 937, 938, 939, 940, 945, 946, 965, 966, 974, 1002, 1036, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1095, 1096, 1101, 1102, 1103, 1104, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1122, 1123, 1124, 1125, 1126, 1127, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1167, 1168, 1169, 1170, 1171, 1172, 1191, 1192, 1193, 1194, 1203, 1254, 1255, 1256, 1257, 1258, 1260, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1297, 1299, 1300, 1301], "kwarg": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 127, 128, 129, 130, 132, 135, 139, 140, 141, 145, 148, 149, 278, 310, 311, 312, 393, 395, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 698, 714, 721, 723, 730, 748, 879, 889, 890, 892, 893, 894, 903, 904, 905, 909, 915, 920, 921, 937, 981, 996, 1002, 1008, 1024, 1046, 1047, 1053, 1086, 1096, 1097, 1099, 1110, 1112, 1114, 1121, 1124, 1128, 1132, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1256, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1298], "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 139, 140, 141, 145, 146, 148, 149, 151, 152, 155, 157, 158, 160, 161, 163, 165, 166, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 197, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 259, 261, 262, 264, 265, 267, 269, 271, 272, 273, 275, 276, 278, 280, 282, 283, 284, 286, 287, 289, 290, 292, 293, 294, 296, 297, 299, 300, 302, 303, 304, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 320, 321, 323, 324, 325, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 343, 344, 345, 346, 348, 350, 351, 352, 353, 355, 357, 359, 360, 362, 363, 364, 365, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 391, 393, 394, 395, 397, 398, 400, 402, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 424, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 447, 448, 449, 451, 452, 454, 455, 457, 459, 460, 462, 464, 466, 467, 468, 469, 471, 473, 476, 478, 479, 480, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 499, 512, 514, 516, 517, 519, 520, 522, 523, 524, 525, 527, 529, 530, 531, 533, 535, 537, 539, 540, 541, 543, 546, 548, 549, 550, 551, 552, 554, 556, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 572, 574, 576, 578, 579, 581, 583, 585, 587, 588, 590, 591, 592, 594, 596, 597, 599, 601, 602, 604, 605, 608, 619, 627, 629, 630, 631, 633, 635, 636, 638, 639, 640, 641, 645, 649, 652, 654, 656, 657, 658, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 683, 684, 686, 687, 689, 690, 691, 692, 694, 696, 697, 698, 700, 702, 703, 704, 705, 706, 707, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 757, 758, 759, 760, 762, 764, 766, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 782, 783, 784, 785, 787, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 847, 849, 852, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 886, 887, 889, 890, 892, 893, 894, 897, 898, 900, 903, 904, 905, 906, 909, 911, 912, 914, 915, 916, 917, 918, 920, 921, 923, 924, 927, 929, 930, 931, 932, 934, 936, 937, 938, 939, 940, 941, 946, 960, 961, 962, 963, 964, 966, 968, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1139, 1141, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1194, 1200, 1203, 1208, 1218, 1230, 1233, 1255, 1256, 1258, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1300, 1301], "base": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 126, 127, 128, 132, 133, 135, 136, 137, 139, 145, 146, 147, 168, 214, 226, 309, 319, 321, 322, 323, 325, 327, 328, 330, 408, 446, 475, 485, 539, 607, 610, 611, 673, 679, 686, 687, 696, 778, 779, 810, 811, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 886, 889, 890, 891, 892, 893, 894, 900, 901, 902, 903, 909, 914, 915, 916, 920, 927, 934, 936, 937, 938, 939, 940, 946, 966, 1012, 1036, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1088, 1090, 1091, 1096, 1102, 1103, 1104, 1110, 1111, 1112, 1113, 1114, 1115, 1123, 1124, 1125, 1126, 1138, 1139, 1140, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1168, 1170, 1171, 1172, 1192, 1194, 1255, 1256, 1258, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1296, 1300], "annotationbas": [3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 1298], "__init__": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 126, 127, 128, 132, 133, 135, 136, 137, 139, 145, 146, 147, 168, 214, 226, 307, 309, 319, 330, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 886, 889, 890, 891, 892, 893, 894, 900, 901, 902, 903, 909, 914, 915, 916, 920, 927, 934, 936, 937, 938, 939, 940, 946, 966, 1036, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1088, 1090, 1091, 1096, 1102, 1103, 1104, 1110, 1111, 1112, 1113, 1114, 1115, 1123, 1124, 1125, 1126, 1138, 1139, 1140, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1168, 1170, 1171, 1172, 1192, 1194, 1255, 1256, 1258, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1298], "repres": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 121, 122, 127, 131, 132, 134, 135, 139, 145, 171, 172, 219, 220, 222, 223, 229, 330, 337, 338, 468, 596, 673, 735, 806, 855, 868, 869, 903, 999, 1003, 1004, 1008, 1052, 1053, 1114, 1124, 1155, 1171, 1298], "set": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 127, 128, 132, 133, 135, 139, 145, 169, 172, 178, 180, 193, 194, 201, 204, 215, 216, 219, 221, 222, 224, 230, 272, 275, 276, 278, 289, 321, 322, 323, 325, 327, 328, 331, 334, 339, 346, 350, 359, 360, 370, 371, 372, 374, 376, 377, 378, 380, 381, 382, 405, 406, 414, 415, 416, 452, 459, 464, 466, 467, 488, 490, 549, 551, 552, 594, 631, 639, 640, 641, 681, 686, 697, 700, 779, 791, 807, 836, 852, 854, 855, 857, 861, 863, 866, 867, 869, 880, 881, 882, 883, 889, 890, 900, 903, 909, 923, 924, 952, 976, 977, 979, 985, 986, 989, 992, 994, 995, 996, 1002, 1006, 1009, 1013, 1016, 1017, 1030, 1033, 1034, 1037, 1040, 1043, 1050, 1058, 1063, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1086, 1088, 1102, 1103, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1134, 1136, 1146, 1155, 1192, 1278, 1283, 1284, 1286, 1287, 1288, 1289, 1298, 1300, 1301], "protein": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 135, 139, 145, 210, 215, 217, 218, 219, 222, 223, 231, 233, 256, 257, 261, 280, 302, 304, 315, 333, 335, 350, 359, 360, 362, 363, 368, 376, 377, 411, 414, 452, 459, 462, 467, 488, 489, 490, 546, 549, 551, 552, 585, 587, 630, 635, 636, 675, 676, 683, 734, 735, 746, 755, 758, 759, 796, 825, 855, 859, 861, 863, 864, 868, 869, 870, 872, 873, 874, 875, 877, 903, 909, 1110, 1112, 1114, 1120, 1122, 1123, 1124, 1127, 1133, 1134, 1136, 1143, 1146, 1155, 1157, 1170, 1171, 1172, 1200, 1296, 1297, 1300, 1301], "load": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 145, 297, 368, 433, 439, 440, 452, 462, 670, 672, 745, 791, 889, 903, 909, 958, 972, 1102, 1104, 1118, 1123, 1124, 1125, 1134, 1139, 1170, 1171, 1173, 1175, 1296, 1297, 1300], "origin": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 127, 135, 139, 290, 320, 488, 842, 890, 900, 903, 975, 976, 985, 1026, 1043, 1044, 1096, 1123, 1124, 1134, 1136, 1146, 1296, 1297, 1300], "provid": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 127, 128, 131, 132, 133, 134, 135, 139, 145, 194, 202, 203, 220, 223, 261, 278, 320, 330, 338, 376, 378, 381, 452, 531, 640, 675, 676, 779, 857, 863, 866, 868, 889, 900, 903, 909, 920, 922, 930, 946, 961, 964, 1008, 1053, 1095, 1096, 1099, 1103, 1104, 1110, 1112, 1114, 1118, 1121, 1124, 1160, 1161, 1165, 1166, 1170, 1200, 1270, 1297, 1298, 1300, 1301], "method": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 126, 127, 128, 132, 133, 134, 135, 136, 137, 139, 145, 146, 147, 149, 168, 214, 226, 309, 319, 322, 323, 328, 330, 365, 376, 377, 378, 380, 381, 382, 402, 408, 446, 452, 475, 485, 539, 607, 610, 611, 631, 676, 679, 795, 810, 811, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 886, 889, 890, 891, 892, 893, 894, 900, 901, 902, 903, 909, 911, 914, 915, 916, 920, 927, 934, 936, 937, 938, 939, 940, 946, 966, 977, 979, 984, 1013, 1017, 1025, 1030, 1033, 1036, 1058, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1088, 1090, 1091, 1096, 1102, 1103, 1104, 1110, 1111, 1112, 1113, 1114, 1115, 1123, 1124, 1125, 1126, 1138, 1139, 1140, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1168, 1170, 1171, 1172, 1192, 1194, 1203, 1255, 1256, 1258, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1297, 1298, 1300], "queri": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 133, 134, 135, 139, 145, 150, 181, 309, 341, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 451, 452, 499, 597, 640, 641, 645, 681, 791, 825, 867, 900, 903, 1118, 1123, 1143, 1192, 1203, 1296, 1300], "paramet": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 122, 127, 128, 132, 133, 135, 139, 145, 203, 210, 211, 212, 231, 233, 234, 235, 286, 287, 307, 321, 322, 323, 324, 325, 326, 327, 328, 341, 359, 360, 362, 363, 364, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 389, 451, 452, 594, 643, 644, 645, 646, 647, 648, 649, 650, 656, 673, 676, 697, 791, 817, 852, 855, 857, 861, 863, 866, 867, 887, 900, 903, 909, 915, 938, 946, 975, 976, 978, 979, 980, 982, 984, 986, 987, 989, 998, 1000, 1002, 1006, 1007, 1011, 1012, 1027, 1033, 1037, 1038, 1039, 1040, 1044, 1054, 1057, 1060, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1088, 1094, 1096, 1098, 1099, 1102, 1103, 1104, 1105, 1108, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1143, 1146, 1192, 1200, 1203, 1260, 1287, 1296, 1297, 1298], "name": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 135, 139, 145, 169, 170, 177, 178, 179, 180, 181, 184, 187, 195, 204, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 234, 235, 239, 240, 243, 244, 246, 247, 275, 276, 278, 320, 321, 324, 326, 327, 332, 334, 337, 338, 341, 357, 364, 365, 368, 376, 377, 378, 384, 385, 386, 387, 394, 416, 468, 469, 496, 500, 502, 503, 504, 506, 507, 510, 527, 594, 596, 601, 611, 633, 638, 640, 645, 686, 687, 700, 733, 734, 735, 746, 760, 792, 795, 806, 819, 820, 821, 825, 836, 839, 852, 853, 854, 855, 857, 861, 863, 864, 866, 869, 877, 879, 889, 890, 891, 892, 893, 894, 897, 900, 903, 909, 920, 955, 972, 996, 1001, 1045, 1057, 1063, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1088, 1090, 1094, 1096, 1098, 1099, 1102, 1103, 1104, 1105, 1108, 1110, 1112, 1114, 1121, 1123, 1124, 1129, 1133, 1134, 1135, 1136, 1146, 1160, 1161, 1165, 1166, 1171, 1180, 1183, 1184, 1194, 1203, 1204, 1256, 1284, 1289, 1296, 1299, 1301], "str": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 127, 128, 132, 133, 135, 139, 145, 169, 171, 172, 178, 179, 180, 181, 187, 199, 201, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 241, 250, 251, 252, 253, 278, 286, 287, 309, 320, 321, 324, 326, 327, 330, 331, 332, 333, 334, 335, 338, 339, 341, 348, 362, 363, 364, 374, 389, 394, 405, 414, 415, 416, 417, 452, 466, 467, 469, 499, 594, 596, 597, 640, 645, 686, 687, 694, 697, 700, 704, 705, 733, 734, 737, 746, 751, 757, 760, 791, 793, 795, 796, 805, 807, 825, 855, 857, 861, 863, 866, 867, 869, 889, 893, 900, 903, 909, 915, 920, 937, 946, 972, 980, 981, 982, 996, 1000, 1001, 1007, 1011, 1033, 1063, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1094, 1096, 1098, 1102, 1103, 1104, 1110, 1112, 1114, 1120, 1121, 1123, 1124, 1125, 1134, 1136, 1139, 1143, 1146, 1183, 1184, 1192, 1203], "A": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 121, 122, 127, 128, 131, 133, 135, 139, 145, 171, 178, 180, 184, 194, 202, 203, 215, 216, 217, 219, 220, 221, 222, 223, 224, 275, 276, 278, 303, 315, 317, 320, 321, 322, 323, 325, 327, 328, 330, 341, 362, 363, 364, 415, 467, 468, 469, 499, 594, 635, 638, 639, 641, 645, 681, 687, 700, 746, 778, 779, 806, 807, 808, 825, 869, 893, 900, 903, 909, 920, 958, 972, 981, 984, 987, 1009, 1045, 1085, 1094, 1096, 1099, 1102, 1103, 1110, 1112, 1114, 1116, 1117, 1121, 1123, 1124, 1128, 1139, 1143, 1155, 1192, 1203, 1298, 1300, 1301], "custom": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 135, 139, 145, 278, 755, 758, 759, 855, 857, 863, 866, 869, 889, 903, 922, 932, 937, 963, 1086, 1088, 1094, 1103, 1123, 1127, 1296, 1297], "ncbi_tax_id": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 126, 127, 128, 145, 165, 166, 350, 668, 670, 672, 755, 757, 758, 759, 787, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 870, 874, 875, 877, 889, 903, 909, 1103, 1123, 1124, 1125, 1126, 1130, 1131, 1133, 1134, 1135, 1136, 1155, 1160, 1161, 1163, 1165, 1166, 1170, 1171, 1298, 1301], "int": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 169, 172, 174, 175, 178, 179, 180, 191, 201, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 242, 253, 309, 320, 321, 324, 326, 327, 338, 341, 348, 374, 376, 377, 378, 389, 405, 406, 452, 462, 467, 488, 489, 490, 594, 640, 641, 643, 644, 646, 647, 648, 649, 650, 656, 673, 676, 686, 687, 694, 705, 733, 734, 746, 751, 752, 755, 757, 758, 759, 760, 805, 807, 817, 825, 867, 869, 903, 909, 937, 984, 987, 1000, 1001, 1004, 1063, 1085, 1086, 1088, 1094, 1110, 1112, 1114, 1120, 1121, 1123, 1124, 1125, 1134, 1136, 1139, 1143, 1146, 1183, 1192], "ncbi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 122, 127, 128, 135, 145, 174, 175, 191, 309, 320, 321, 324, 326, 327, 338, 376, 377, 378, 404, 405, 406, 431, 432, 506, 594, 640, 641, 656, 673, 676, 686, 687, 704, 746, 815, 817, 867, 869, 887, 903, 909, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1134, 1136, 1180, 1190, 1296, 1297, 1301], "taxonomi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 122, 127, 128, 135, 145, 174, 175, 191, 320, 321, 324, 326, 327, 338, 376, 377, 378, 405, 406, 594, 640, 641, 656, 673, 676, 686, 687, 746, 815, 817, 867, 869, 903, 909, 1112, 1114, 1123, 1124, 1125, 1134, 1136, 1296, 1297], "identifi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 121, 122, 123, 127, 135, 139, 145, 178, 180, 184, 195, 202, 203, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 253, 309, 330, 332, 334, 335, 339, 462, 488, 629, 630, 631, 700, 733, 734, 807, 815, 822, 825, 828, 829, 835, 855, 869, 900, 903, 1057, 1091, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1146, 1150, 1160, 1161, 1165, 1166, 1192, 1194, 1204, 1296, 1297], "input_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 889, 890, 903, 1298], "callabl": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 128, 250, 341, 694, 852, 889, 903, 920, 996, 1009], "either": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 128, 132, 135, 139, 171, 211, 215, 290, 488, 640, 700, 807, 855, 869, 900, 903, 981, 1016, 1033, 1034, 1068, 1085, 1104, 1124, 1133, 1143, 1146, 1192, 1298, 1301], "ani": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 132, 135, 145, 252, 253, 278, 376, 381, 640, 842, 900, 903, 975, 976, 995, 998, 1002, 1006, 1011, 1013, 1017, 1030, 1033, 1037, 1039, 1040, 1043, 1054, 1057, 1058, 1060, 1102, 1105, 1108, 1123, 1124, 1133, 1155, 1260, 1296, 1297, 1300, 1301], "input": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 127, 128, 145, 861, 864, 867, 889, 903, 949, 976, 1051, 1052, 1110, 1112, 1114, 1121, 1124, 1134, 1296, 1297, 1300], "should": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 133, 139, 145, 169, 172, 183, 239, 367, 368, 377, 379, 460, 777, 796, 852, 855, 869, 903, 911, 920, 949, 996, 1043, 1096, 1103, 1123, 1124, 1134, 1146, 1264, 1265, 1266, 1267, 1268, 1269, 1297, 1298, 1301], "return": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 118, 122, 123, 127, 128, 132, 133, 135, 136, 137, 139, 145, 147, 157, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 184, 187, 189, 191, 193, 194, 195, 199, 201, 202, 203, 204, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 230, 233, 234, 235, 239, 240, 241, 242, 243, 244, 246, 247, 253, 254, 269, 272, 278, 286, 287, 289, 290, 292, 293, 303, 304, 309, 315, 317, 319, 320, 324, 326, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 350, 351, 352, 353, 357, 362, 363, 364, 365, 368, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 391, 394, 404, 405, 406, 408, 409, 411, 414, 415, 416, 420, 421, 436, 437, 439, 440, 446, 464, 466, 467, 468, 469, 471, 475, 480, 485, 487, 488, 490, 499, 519, 520, 522, 527, 531, 539, 546, 549, 551, 552, 594, 596, 607, 608, 610, 611, 629, 630, 631, 633, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 656, 668, 670, 671, 672, 673, 676, 679, 681, 686, 687, 696, 700, 704, 709, 715, 728, 731, 735, 737, 741, 745, 746, 760, 774, 776, 777, 778, 779, 780, 792, 794, 795, 806, 807, 808, 810, 811, 815, 819, 820, 825, 828, 836, 842, 844, 847, 852, 853, 854, 855, 867, 872, 873, 880, 881, 882, 883, 890, 891, 893, 900, 901, 902, 903, 909, 911, 916, 920, 923, 924, 964, 968, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 989, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1020, 1026, 1027, 1029, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1060, 1063, 1068, 1069, 1085, 1086, 1088, 1091, 1092, 1093, 1096, 1098, 1099, 1102, 1103, 1104, 1110, 1111, 1112, 1114, 1116, 1117, 1118, 1120, 1121, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1143, 1160, 1165, 1174, 1180, 1183, 1184, 1190, 1192, 1194, 1203, 1204, 1208, 1219, 1224, 1225, 1226, 1227, 1233, 1236, 1251, 1252, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1292, 1297, 1298, 1301], "dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 126, 127, 128, 133, 135, 139, 145, 169, 172, 184, 187, 193, 194, 201, 202, 203, 215, 216, 217, 220, 221, 223, 241, 250, 251, 252, 253, 269, 272, 278, 289, 292, 293, 315, 330, 331, 334, 339, 341, 350, 364, 368, 370, 371, 372, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 391, 394, 405, 406, 409, 411, 414, 415, 416, 417, 466, 467, 469, 489, 499, 505, 506, 507, 524, 527, 546, 596, 597, 629, 630, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 656, 673, 681, 686, 694, 700, 731, 745, 746, 751, 760, 762, 774, 778, 780, 795, 796, 807, 808, 825, 869, 900, 903, 909, 915, 920, 938, 968, 978, 984, 985, 986, 987, 988, 989, 992, 994, 996, 1001, 1002, 1007, 1010, 1012, 1013, 1016, 1017, 1030, 1033, 1034, 1042, 1043, 1044, 1045, 1058, 1063, 1096, 1099, 1103, 1110, 1112, 1114, 1117, 1121, 1124, 1125, 1143, 1146, 1155, 1174, 1183, 1194, 1204, 1284, 1298, 1300], "uniprot": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 122, 127, 128, 135, 139, 145, 169, 195, 201, 215, 219, 221, 222, 233, 234, 280, 309, 350, 351, 353, 362, 363, 364, 365, 368, 373, 375, 376, 377, 378, 406, 444, 459, 460, 464, 467, 473, 507, 523, 546, 549, 551, 552, 629, 631, 635, 640, 641, 673, 676, 677, 681, 686, 694, 727, 735, 762, 774, 778, 780, 792, 793, 796, 861, 864, 866, 867, 870, 873, 874, 875, 877, 890, 903, 920, 1102, 1103, 1105, 1108, 1110, 1111, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1127, 1130, 1131, 1134, 1136, 1138, 1139, 1140, 1153, 1168, 1170, 1171, 1173, 1190, 1296, 1297, 1300, 1301], "id": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 132, 135, 139, 145, 169, 174, 175, 178, 179, 180, 181, 184, 187, 191, 193, 201, 215, 218, 219, 221, 222, 233, 241, 309, 320, 321, 324, 326, 327, 334, 338, 339, 350, 351, 353, 357, 362, 363, 364, 368, 376, 377, 378, 405, 406, 452, 464, 467, 469, 499, 505, 506, 507, 523, 527, 546, 549, 551, 552, 594, 597, 629, 631, 635, 639, 640, 641, 656, 673, 676, 677, 681, 686, 687, 700, 702, 704, 705, 729, 735, 746, 760, 762, 774, 780, 793, 796, 805, 806, 807, 808, 815, 817, 819, 820, 821, 836, 857, 863, 866, 867, 869, 887, 900, 903, 909, 920, 1102, 1103, 1105, 1108, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1139, 1146, 1155, 1180, 1190, 1192, 1203, 1208, 1218, 1230, 1233, 1296, 1301], "kei": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 169, 172, 178, 180, 184, 193, 201, 215, 216, 217, 221, 233, 241, 253, 278, 334, 339, 341, 350, 364, 370, 371, 372, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 405, 406, 414, 416, 466, 467, 469, 499, 527, 546, 596, 597, 629, 630, 631, 635, 640, 681, 686, 700, 760, 762, 774, 780, 807, 808, 836, 852, 855, 869, 872, 880, 881, 882, 883, 900, 903, 909, 920, 946, 972, 984, 986, 987, 989, 992, 996, 1001, 1002, 1007, 1008, 1010, 1012, 1013, 1017, 1030, 1033, 1042, 1043, 1044, 1048, 1053, 1054, 1058, 1060, 1063, 1068, 1096, 1098, 1099, 1103, 1110, 1112, 1114, 1116, 1117, 1121, 1124, 1125, 1146, 1155, 1174, 1181, 1182, 1192, 1203, 1298, 1301], "an": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 178, 179, 180, 181, 220, 223, 309, 322, 323, 328, 334, 339, 341, 411, 433, 444, 473, 486, 596, 597, 629, 635, 636, 641, 643, 644, 646, 647, 648, 650, 673, 807, 852, 854, 867, 880, 881, 882, 883, 893, 900, 903, 909, 916, 920, 923, 958, 977, 984, 996, 1001, 1004, 1008, 1009, 1029, 1048, 1053, 1063, 1102, 1104, 1110, 1112, 1114, 1115, 1118, 1119, 1121, 1123, 1124, 1128, 1134, 1143, 1146, 1175, 1192, 1200, 1257, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1284, 1292, 1296, 1297, 1301], "object": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 105, 122, 124, 127, 132, 133, 134, 135, 139, 145, 146, 171, 211, 215, 216, 217, 219, 222, 224, 251, 253, 309, 330, 363, 523, 529, 630, 681, 728, 729, 731, 777, 779, 852, 854, 855, 860, 861, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 886, 887, 894, 900, 903, 909, 914, 915, 920, 933, 937, 939, 940, 950, 951, 952, 953, 954, 955, 956, 957, 958, 968, 995, 996, 1009, 1026, 1036, 1050, 1068, 1070, 1085, 1088, 1090, 1091, 1096, 1102, 1103, 1104, 1105, 1108, 1113, 1115, 1118, 1124, 1128, 1134, 1136, 1143, 1145, 1146, 1150, 1152, 1153, 1155, 1157, 1158, 1168, 1171, 1172, 1192, 1194, 1203, 1233, 1255, 1258, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1278, 1279, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1296, 1297, 1299], "suitabl": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 1124, 1157, 1298], "process_method": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "input_arg": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 861, 889, 958], "argument": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 128, 132, 135, 139, 145, 202, 794, 857, 863, 866, 903, 909, 916, 920, 922, 937, 977, 981, 996, 1002, 1039, 1054, 1060, 1096, 1099, 1110, 1112, 1114, 1121, 1260, 1298], "attribut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 127, 132, 133, 135, 136, 137, 139, 142, 145, 146, 147, 168, 181, 184, 214, 226, 239, 319, 391, 408, 446, 475, 485, 488, 519, 520, 539, 607, 610, 611, 679, 810, 811, 825, 852, 853, 854, 855, 861, 867, 869, 879, 880, 881, 882, 883, 886, 890, 891, 892, 893, 900, 901, 902, 903, 909, 920, 934, 936, 938, 948, 979, 996, 1068, 1069, 1096, 1102, 1104, 1105, 1107, 1108, 1110, 1111, 1112, 1114, 1116, 1117, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1132, 1138, 1140, 1155, 1192, 1194, 1264, 1265, 1266, 1267, 1268, 1269, 1298, 1301], "add_complexes_by_infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "complex": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 139, 145, 157, 210, 215, 216, 217, 218, 219, 222, 224, 231, 256, 257, 259, 398, 411, 447, 488, 489, 490, 630, 724, 734, 735, 751, 758, 759, 776, 777, 778, 903, 909, 1103, 1124, 1133, 1134, 1136, 1155, 1157, 1296, 1297, 1300], "none": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 126, 127, 128, 132, 133, 135, 139, 145, 146, 149, 169, 172, 180, 181, 193, 194, 195, 215, 224, 239, 250, 253, 269, 275, 278, 280, 306, 309, 317, 324, 326, 330, 331, 332, 333, 334, 335, 338, 341, 348, 350, 359, 360, 365, 369, 374, 376, 377, 380, 382, 402, 409, 410, 411, 412, 447, 451, 452, 499, 594, 596, 597, 619, 629, 630, 640, 641, 645, 677, 694, 697, 716, 718, 730, 754, 774, 778, 779, 782, 783, 784, 791, 814, 816, 818, 821, 825, 852, 855, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 887, 889, 890, 892, 894, 900, 903, 909, 914, 915, 916, 920, 927, 938, 946, 966, 968, 973, 975, 978, 979, 997, 1008, 1024, 1029, 1039, 1045, 1047, 1048, 1049, 1050, 1053, 1057, 1065, 1068, 1069, 1073, 1074, 1085, 1086, 1088, 1090, 1091, 1094, 1096, 1097, 1098, 1099, 1102, 1103, 1104, 1106, 1107, 1110, 1111, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1139, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1160, 1161, 1163, 1165, 1166, 1170, 1171, 1192, 1194, 1200, 1208, 1218, 1219, 1230, 1255, 1256, 1277, 1278, 1279, 1281, 1284, 1285, 1286, 1287, 1298], "creat": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 132, 133, 135, 139, 145, 778, 861, 903, 909, 916, 920, 927, 968, 988, 989, 1049, 1050, 1085, 1088, 1091, 1093, 1094, 1102, 1110, 1112, 1114, 1116, 1117, 1118, 1119, 1123, 1124, 1125, 1128, 1132, 1136, 1146, 1155, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "silico": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 762, 903], "infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 202, 203, 309, 794, 795, 900, 1298], "add": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 444, 869, 873, 900, 903, 909, 920, 975, 976, 1085, 1105, 1108, 1124, 1134, 1136, 1155, 1297, 1298, 1300, 1301], "them": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 499, 746, 900, 903, 909, 977, 979, 995, 996, 1043, 1112, 1114, 1124, 1135, 1143, 1277, 1297, 1298, 1301], "thi": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 105, 120, 126, 127, 133, 135, 139, 145, 169, 172, 174, 175, 182, 194, 202, 261, 278, 280, 290, 307, 322, 323, 328, 330, 346, 365, 376, 378, 381, 383, 411, 433, 452, 488, 489, 490, 640, 675, 676, 680, 681, 700, 746, 774, 791, 796, 825, 842, 855, 857, 861, 863, 866, 868, 869, 873, 880, 881, 882, 883, 890, 900, 903, 909, 911, 926, 930, 961, 975, 976, 979, 984, 985, 987, 1013, 1017, 1030, 1033, 1058, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1091, 1095, 1096, 1098, 1103, 1107, 1110, 1112, 1114, 1115, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1128, 1132, 1133, 1134, 1136, 1139, 1143, 1146, 1148, 1150, 1153, 1155, 1158, 1168, 1172, 1192, 1255, 1257, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1284, 1289, 1292, 1297, 1298, 1300, 1301], "all_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "all": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 126, 127, 133, 135, 139, 145, 172, 174, 180, 182, 203, 304, 309, 320, 330, 338, 341, 376, 377, 467, 488, 576, 640, 673, 677, 681, 700, 774, 794, 825, 855, 869, 873, 887, 900, 903, 909, 920, 977, 978, 996, 1013, 1016, 1017, 1030, 1033, 1034, 1042, 1043, 1058, 1063, 1068, 1080, 1085, 1091, 1102, 1103, 1104, 1110, 1112, 1114, 1120, 1124, 1125, 1134, 1143, 1146, 1155, 1157, 1170, 1171, 1173, 1175, 1183, 1194, 1227, 1252, 1264, 1274, 1284, 1286, 1289, 1297, 1300, 1301], "all_ent": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "entity_typ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 122, 123, 135, 139, 215, 855, 859, 864, 903, 1123, 1124, 1129, 1133, 1298], "entiti": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 135, 139, 145, 488, 489, 490, 855, 900, 903, 1013, 1017, 1030, 1033, 1058, 1123, 1124, 1129, 1133, 1146, 1153, 1158, 1298, 1300, 1301], "all_mirna": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "mirna": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 135, 139, 145, 562, 572, 574, 576, 789, 903, 909, 957, 1062, 1122, 1123, 1124, 1133, 1297, 1300, 1301], "all_protein": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 903], "all_ref": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "some": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 488, 867, 900, 903, 1078, 1083, 1104, 1120, 1124, 1134, 1136, 1143, 1297, 1298, 1301], "contain": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 135, 139, 145, 187, 315, 330, 341, 411, 444, 459, 639, 704, 758, 764, 796, 842, 855, 893, 900, 903, 909, 915, 920, 922, 975, 976, 989, 995, 1002, 1026, 1027, 1062, 1085, 1143, 1146, 1257, 1264, 1265, 1266, 1267, 1268, 1269, 1297, 1298, 1301], "refer": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 122, 126, 131, 132, 135, 136, 145, 174, 175, 202, 203, 317, 332, 378, 402, 408, 416, 446, 452, 469, 475, 539, 585, 601, 635, 709, 825, 861, 869, 872, 887, 903, 909, 920, 950, 951, 954, 955, 956, 1082, 1083, 1085, 1160, 1161, 1166, 1194, 1204, 1225, 1296, 1297, 1301], "The": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 120, 122, 127, 128, 131, 132, 133, 134, 135, 139, 145, 178, 199, 201, 202, 203, 204, 215, 216, 219, 221, 222, 234, 242, 290, 315, 320, 330, 331, 334, 339, 341, 376, 381, 416, 440, 452, 527, 531, 597, 629, 630, 640, 641, 645, 681, 700, 730, 737, 746, 755, 758, 759, 792, 793, 805, 842, 855, 867, 887, 893, 900, 903, 909, 931, 937, 962, 964, 975, 977, 980, 986, 989, 996, 1001, 1006, 1009, 1020, 1022, 1027, 1037, 1040, 1043, 1044, 1048, 1057, 1063, 1068, 1085, 1088, 1096, 1098, 1103, 1104, 1107, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1128, 1134, 1136, 1139, 1146, 1155, 1192, 1208, 1230, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1275, 1277, 1284, 1289, 1296, 1297, 1300, 1301], "field": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 135, 136, 137, 147, 168, 177, 214, 226, 250, 251, 253, 278, 317, 319, 321, 327, 330, 332, 341, 374, 408, 446, 475, 485, 539, 578, 579, 596, 597, 607, 610, 611, 679, 694, 746, 810, 811, 825, 834, 852, 853, 854, 891, 893, 901, 902, 903, 920, 996, 1001, 1063, 1068, 1111, 1126, 1138, 1140, 1298, 1301], "alwai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 321, 327, 411, 416, 968, 1124, 1136, 1155, 1298], "pmid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 214, 702, 703, 704, 705, 849, 886, 903, 1298], "pubm": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 241, 319, 378, 431, 432, 635, 887, 903, 1158, 1279, 1286, 1298], "collect": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 121, 131, 133, 135, 145, 146, 150, 182, 272, 334, 339, 341, 438, 903, 1298, 1301], "across": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 903, 920, 1013, 1016, 1017, 1030, 1033, 1034, 1058, 1298], "record": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 181, 194, 202, 203, 220, 223, 234, 239, 240, 243, 244, 272, 317, 341, 415, 462, 488, 602, 643, 644, 646, 647, 648, 649, 650, 686, 696, 705, 746, 828, 903, 1120, 1155, 1301], "list": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 122, 126, 127, 128, 132, 133, 135, 139, 145, 157, 170, 171, 174, 175, 177, 178, 179, 181, 184, 189, 191, 194, 195, 202, 203, 204, 212, 218, 220, 223, 235, 239, 240, 242, 243, 244, 246, 247, 250, 251, 252, 253, 254, 269, 286, 287, 292, 293, 303, 304, 309, 317, 330, 331, 332, 333, 335, 337, 338, 341, 348, 352, 357, 374, 376, 377, 391, 394, 420, 421, 436, 437, 439, 440, 452, 462, 468, 469, 471, 487, 490, 499, 514, 519, 520, 522, 523, 524, 525, 529, 530, 531, 594, 596, 597, 608, 629, 633, 635, 636, 643, 644, 646, 647, 648, 649, 650, 654, 656, 666, 668, 670, 671, 672, 681, 694, 702, 704, 709, 715, 735, 741, 746, 752, 754, 755, 757, 758, 759, 760, 774, 779, 780, 794, 795, 806, 807, 841, 842, 844, 847, 854, 855, 866, 867, 869, 872, 900, 903, 920, 931, 962, 975, 976, 979, 982, 989, 995, 996, 998, 1001, 1002, 1008, 1022, 1027, 1043, 1048, 1049, 1050, 1053, 1054, 1057, 1060, 1063, 1068, 1102, 1103, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1139, 1143, 1146, 1155, 1160, 1161, 1166, 1192, 1194, 1203, 1208, 1218, 1224, 1225, 1227, 1230, 1233, 1252, 1284, 1297, 1298, 1300, 1301], "annotate_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "cplex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 724, 1298], "singl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 183, 187, 194, 202, 488, 489, 490, 704, 869, 903, 920, 998, 1049, 1050, 1102, 1103, 1104, 1110, 1112, 1114, 1121, 1124, 1131, 1233, 1296], "brows": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 906, 1085, 1296], "option": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 135, 139, 145, 174, 175, 180, 181, 224, 250, 278, 309, 330, 331, 332, 333, 334, 335, 338, 341, 348, 374, 376, 377, 488, 489, 490, 499, 594, 596, 597, 645, 694, 754, 900, 903, 909, 979, 1000, 1002, 1007, 1020, 1027, 1057, 1096, 1099, 1110, 1112, 1114, 1121, 1123, 1124, 1129, 1134, 1136, 1139, 1143, 1146, 1172, 1175, 1208, 1230, 1284, 1298, 1301], "union": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 145, 180, 181, 250, 251, 252, 290, 309, 330, 338, 341, 348, 374, 416, 469, 499, 596, 597, 694, 755, 757, 758, 759, 825, 854, 903, 923, 975, 976, 977, 979, 992, 994, 1110, 1112, 1114, 1121, 1124], "start": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 136, 137, 139, 145, 147, 168, 214, 226, 309, 319, 408, 446, 475, 485, 539, 607, 610, 611, 629, 639, 679, 810, 811, 852, 853, 854, 870, 874, 891, 893, 901, 902, 903, 937, 984, 1111, 1126, 1138, 1140, 1143, 1200, 1297, 1298, 1300], "0": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 135, 136, 137, 139, 147, 168, 185, 214, 226, 254, 262, 319, 402, 408, 428, 446, 454, 462, 475, 485, 539, 546, 607, 610, 611, 679, 746, 757, 810, 811, 852, 853, 854, 859, 861, 864, 891, 893, 901, 902, 903, 975, 976, 984, 987, 998, 1027, 1054, 1057, 1060, 1085, 1086, 1088, 1091, 1094, 1111, 1126, 1138, 1140, 1143, 1192, 1200, 1256, 1277, 1278, 1281, 1284, 1285, 1287, 1293, 1295, 1296, 1297, 1298], "print": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 151, 152, 805, 903, 980, 1073, 1074, 1075, 1076, 1077, 1078, 1085, 1146, 1192, 1200, 1218, 1230, 1298], "gene": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 177, 178, 180, 181, 194, 195, 197, 237, 269, 287, 290, 303, 309, 362, 363, 364, 471, 496, 500, 502, 503, 504, 506, 507, 510, 562, 572, 574, 576, 604, 605, 635, 676, 686, 687, 709, 789, 815, 903, 920, 1102, 1103, 1104, 1105, 1108, 1120, 1122, 1123, 1124, 1130, 1131, 1133, 1134, 1136, 1296, 1297, 1300, 1301], "inform": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 131, 135, 139, 145, 151, 152, 182, 217, 246, 330, 468, 635, 675, 696, 805, 806, 808, 855, 873, 900, 903, 909, 920, 946, 1077, 1078, 1088, 1112, 1114, 1124, 1135, 1146, 1192, 1200, 1296, 1301], "tabl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 145, 253, 296, 334, 339, 350, 351, 352, 353, 397, 398, 405, 406, 444, 464, 522, 523, 524, 525, 564, 633, 654, 673, 697, 709, 746, 762, 792, 793, 796, 841, 847, 855, 857, 863, 866, 867, 903, 909, 920, 926, 931, 938, 962, 1008, 1048, 1053, 1112, 1114, 1118, 1123, 1124, 1125, 1200, 1208, 1218, 1230, 1296, 1297, 1299, 1300], "present": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 135, 136, 137, 139, 145, 147, 168, 214, 226, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 873, 891, 893, 901, 902, 903, 977, 1085, 1111, 1126, 1138, 1140, 1297, 1298], "about": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 128, 131, 135, 139, 145, 151, 152, 320, 330, 341, 357, 468, 635, 643, 644, 645, 646, 647, 648, 650, 675, 805, 806, 900, 903, 1075, 1076, 1088, 1104, 1124, 1125, 1134, 1143, 1192, 1203, 1296, 1297, 1301], "categori": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 635, 764, 852, 855, 903, 1103, 1284, 1296, 1300, 1301], "ascii": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 253, 1011, 1208, 1230], "termin": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 980, 1088, 1298], "If": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 132, 133, 135, 139, 145, 202, 215, 253, 278, 324, 326, 330, 338, 376, 377, 380, 382, 469, 499, 596, 640, 680, 681, 746, 778, 779, 791, 821, 852, 855, 867, 869, 873, 900, 903, 920, 975, 977, 979, 984, 987, 995, 1008, 1012, 1020, 1043, 1049, 1050, 1053, 1054, 1057, 1060, 1096, 1098, 1102, 1103, 1104, 1110, 1112, 1114, 1116, 1117, 1123, 1124, 1125, 1134, 1143, 1146, 1194, 1219, 1277, 1297, 1298, 1301], "one": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 133, 134, 135, 139, 145, 169, 171, 180, 254, 278, 280, 341, 376, 377, 378, 384, 385, 386, 387, 416, 451, 452, 468, 488, 489, 490, 643, 644, 646, 647, 648, 649, 650, 673, 676, 704, 746, 793, 796, 805, 806, 825, 842, 857, 863, 866, 867, 869, 873, 887, 900, 903, 909, 920, 975, 979, 984, 995, 996, 1043, 1093, 1094, 1096, 1102, 1104, 1110, 1112, 1114, 1115, 1116, 1117, 1120, 1123, 1124, 1125, 1134, 1135, 1136, 1139, 1143, 1146, 1155, 1170, 1171, 1192, 1194, 1203, 1233, 1236, 1260, 1267, 1268, 1278, 1283, 1286, 1297, 1301], "multipl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 127, 132, 135, 139, 180, 202, 321, 322, 323, 325, 327, 328, 452, 903, 979, 1096, 1103, 1112, 1114, 1115, 1124, 1136, 1146, 1284, 1297, 1298, 1301], "each": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 132, 133, 135, 139, 145, 181, 194, 195, 202, 203, 204, 218, 219, 220, 222, 223, 231, 250, 253, 330, 332, 337, 415, 452, 468, 469, 488, 596, 629, 631, 635, 639, 676, 686, 687, 735, 806, 825, 900, 903, 909, 920, 968, 985, 992, 996, 1043, 1057, 1096, 1103, 1124, 1125, 1143, 1146, 1155, 1200, 1203, 1284, 1288, 1297, 1298, 1300, 1301], "proceed": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139], "next": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 440, 791, 972, 1123, 1124, 1125, 1298], "onc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 169, 964, 1068, 1124, 1136, 1143, 1297, 1298], "you": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 203, 440, 488, 489, 490, 680, 681, 855, 867, 903, 909, 1068, 1069, 1072, 1078, 1083, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1124, 1134, 1143, 1146, 1260, 1296, 1299, 1301], "hit": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139], "goe": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 1298], "through": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 252, 887, 903, 1200, 1297, 1298], "level": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 132, 133, 135, 139, 143, 145, 319, 321, 322, 323, 325, 327, 328, 384, 385, 386, 387, 629, 681, 752, 764, 780, 855, 873, 880, 881, 882, 883, 900, 903, 909, 958, 968, 980, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1094, 1096, 1102, 1103, 1104, 1124, 1139, 1168, 1297, 1298, 1301], "primari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 817, 893, 903, 1124, 1134, 1297, 1298], "arg": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 135, 145, 169, 171, 172, 174, 175, 178, 179, 180, 181, 187, 193, 194, 195, 199, 201, 202, 203, 204, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 242, 251, 275, 276, 278, 290, 310, 311, 312, 320, 330, 331, 332, 333, 334, 335, 338, 339, 341, 405, 406, 409, 467, 469, 496, 499, 500, 502, 503, 504, 506, 507, 510, 596, 597, 636, 640, 641, 681, 686, 687, 700, 733, 734, 737, 746, 752, 755, 758, 759, 778, 779, 805, 807, 825, 842, 852, 855, 893, 909, 972, 981, 996, 1001, 1009, 1020, 1042, 1043, 1063, 1096, 1098, 1099, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1134, 1136, 1139, 1192, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252], "select": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 135, 139, 145, 203, 855, 903, 996, 1069, 1102, 1115, 1160, 1296, 1301], "doesn": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 903, 989, 1124, 1134, 1297, 1298], "t": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 253, 488, 489, 490, 762, 900, 903, 989, 1017, 1020, 1058, 1070, 1071, 1074, 1075, 1086, 1123, 1124, 1134, 1297, 1298, 1299, 1301], "have": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 177, 378, 755, 758, 855, 867, 903, 909, 920, 954, 955, 984, 1043, 1072, 1078, 1083, 1102, 1120, 1123, 1124, 1143, 1146, 1155, 1277, 1278, 1283, 1286, 1297, 1298, 1300, 1301], "string": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 217, 251, 252, 253, 278, 341, 362, 630, 700, 729, 805, 807, 852, 869, 903, 920, 978, 981, 983, 999, 1000, 1003, 1004, 1005, 1008, 1011, 1023, 1025, 1026, 1029, 1041, 1045, 1052, 1053, 1062, 1068, 1085, 1088, 1102, 1114, 1123, 1124, 1129, 1143, 1146, 1150, 1153, 1158, 1192, 1194, 1208, 1236, 1298], "consid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 139, 145, 411, 821, 887, 900, 903, 909, 931, 962, 1102, 1298], "tupl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 127, 133, 135, 136, 137, 139, 145, 147, 168, 169, 170, 174, 175, 177, 180, 181, 195, 204, 212, 214, 215, 216, 218, 219, 221, 222, 224, 226, 229, 230, 234, 235, 239, 240, 242, 243, 244, 246, 247, 250, 278, 286, 287, 303, 319, 330, 331, 332, 333, 335, 337, 338, 341, 350, 352, 357, 370, 371, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 408, 414, 415, 446, 462, 466, 468, 475, 485, 499, 514, 527, 539, 546, 594, 596, 597, 601, 602, 607, 608, 610, 611, 631, 633, 636, 640, 673, 679, 681, 694, 729, 735, 746, 752, 754, 755, 757, 758, 759, 762, 780, 806, 810, 811, 841, 842, 844, 847, 853, 855, 869, 872, 873, 891, 900, 901, 902, 903, 920, 984, 987, 989, 995, 996, 1001, 1027, 1063, 1068, 1085, 1102, 1104, 1110, 1112, 1114, 1116, 1117, 1121, 1124, 1125, 1126, 1129, 1138, 1139, 1140, 1143, 1157, 1172, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1275, 1277, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289, 1298], "valu": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 127, 133, 135, 136, 137, 139, 145, 147, 168, 169, 171, 172, 178, 180, 184, 193, 201, 210, 211, 212, 214, 217, 226, 233, 234, 235, 239, 241, 252, 253, 278, 309, 319, 334, 339, 350, 359, 360, 364, 370, 371, 372, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 405, 406, 408, 414, 446, 466, 467, 469, 475, 485, 499, 527, 539, 546, 596, 607, 610, 611, 629, 630, 631, 635, 639, 640, 645, 676, 679, 681, 686, 687, 700, 755, 758, 759, 760, 762, 774, 780, 807, 808, 810, 811, 836, 852, 853, 854, 855, 867, 869, 880, 881, 882, 883, 891, 893, 900, 901, 902, 903, 909, 920, 978, 979, 984, 985, 986, 989, 992, 994, 996, 997, 1001, 1007, 1009, 1011, 1012, 1020, 1021, 1029, 1043, 1044, 1051, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1088, 1096, 1098, 1099, 1103, 1104, 1110, 1111, 1112, 1114, 1116, 1117, 1120, 1121, 1124, 1125, 1126, 1134, 1136, 1138, 1140, 1143, 1174, 1203, 1265, 1267, 1268, 1284, 1287, 1298, 1301], "In": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 145, 307, 376, 377, 378, 488, 489, 490, 673, 676, 681, 762, 900, 903, 920, 968, 1009, 1068, 1094, 1112, 1114, 1124, 1134, 1136, 1143, 1146, 1184, 1297, 1298], "former": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 852, 867, 903, 909, 1298, 1300], "case": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 233, 234, 235, 452, 681, 852, 855, 900, 903, 909, 956, 986, 1009, 1069, 1094, 1103, 1110, 1112, 1114, 1121, 1123, 1124, 1134, 1135, 1136, 1143, 1146, 1297, 1298, 1301], "combin": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 131, 139, 321, 322, 323, 325, 327, 328, 488, 755, 758, 903, 979, 1155, 1157, 1297, 1298, 1301], "latter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 315, 630, 867, 903, 909, 1009, 1124, 1298], "limit": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 180, 309, 433, 452, 488, 489, 490, 755, 758, 759, 852, 855, 900, 903, 1298], "ar": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 126, 127, 131, 132, 133, 135, 139, 145, 169, 171, 172, 180, 193, 201, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 253, 280, 290, 303, 307, 324, 326, 330, 331, 368, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 389, 405, 406, 416, 451, 459, 467, 469, 488, 489, 490, 496, 500, 502, 503, 504, 506, 507, 510, 546, 596, 629, 630, 631, 676, 680, 681, 686, 687, 700, 704, 730, 733, 734, 735, 746, 759, 780, 794, 807, 842, 852, 855, 857, 863, 866, 873, 900, 903, 914, 916, 920, 951, 954, 955, 956, 972, 982, 984, 986, 987, 995, 996, 1043, 1044, 1057, 1068, 1095, 1096, 1099, 1102, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1124, 1125, 1134, 1136, 1143, 1146, 1155, 1160, 1165, 1166, 1192, 1264, 1265, 1266, 1267, 1268, 1269, 1274, 1284, 1296, 1297, 1299, 1300, 1301], "suppos": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1088], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 122, 127, 128, 132, 135, 139, 145, 169, 181, 182, 184, 187, 201, 203, 204, 321, 322, 323, 325, 327, 328, 334, 339, 405, 406, 409, 433, 452, 597, 680, 681, 696, 700, 704, 755, 758, 759, 795, 852, 855, 857, 863, 866, 867, 879, 900, 903, 920, 922, 927, 946, 949, 951, 954, 972, 975, 1009, 1013, 1017, 1030, 1033, 1058, 1068, 1074, 1078, 1083, 1085, 1096, 1098, 1102, 1103, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1127, 1134, 1135, 1136, 1139, 1146, 1168, 1192, 1257, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1274, 1275, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289, 1292, 1297, 1298, 1301], "e": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 253, 330, 331, 332, 333, 334, 335, 365, 394, 486, 488, 697, 704, 795, 825, 855, 868, 873, 887, 900, 903, 909, 920, 980, 982, 984, 996, 998, 1002, 1003, 1004, 1102, 1104, 1114, 1123, 1124, 1130, 1131, 1143, 1146, 1155, 1171, 1203, 1260, 1270, 1272, 1275, 1277, 1297, 1298, 1300, 1301], "g": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 253, 365, 394, 486, 488, 697, 795, 825, 855, 873, 900, 903, 909, 980, 982, 996, 1002, 1057, 1102, 1114, 1123, 1130, 1131, 1146, 1171, 1203, 1277, 1297, 1298, 1300, 1301], "500": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 341, 380, 382, 451, 452, 1298], "250": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "skip": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1255], "everyth": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 452, 1124, 1134, 1298], "befor": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 378, 903, 946, 1088, 1146, 1284, 1298], "250th": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "pass": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 252, 794, 852, 867, 903, 981, 996, 1009, 1094, 1123, 1124, 1143, 1200, 1208, 1230, 1298], "util": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 704, 887, 1296, 1297, 1300], "info": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 903, 930, 946, 961, 983, 1192, 1200, 1296, 1301], "complex_infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "default": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 135, 139, 145, 203, 278, 290, 309, 330, 376, 377, 378, 452, 596, 597, 791, 825, 855, 900, 903, 909, 920, 946, 958, 964, 979, 997, 1000, 1002, 1007, 1027, 1029, 1045, 1057, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1086, 1096, 1098, 1102, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1124, 1134, 1136, 1143, 1146, 1172, 1175, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1275, 1284, 1297, 1298, 1301], "databas": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 118, 119, 120, 122, 127, 128, 131, 132, 133, 135, 139, 145, 151, 155, 192, 194, 195, 197, 201, 202, 203, 204, 215, 216, 217, 218, 219, 220, 221, 222, 223, 245, 247, 256, 257, 261, 269, 320, 321, 322, 323, 325, 327, 328, 330, 332, 357, 404, 409, 416, 469, 471, 480, 488, 489, 490, 499, 546, 562, 585, 594, 601, 602, 635, 636, 642, 645, 696, 776, 778, 779, 780, 791, 811, 855, 869, 897, 898, 903, 909, 920, 922, 952, 954, 955, 956, 1068, 1106, 1107, 1180, 1194, 1296, 1300, 1301], "exist": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 127, 135, 139, 145, 278, 585, 791, 900, 903, 909, 972, 973, 989, 1001, 1012, 1068, 1069, 1073, 1085, 1094, 1106, 1110, 1112, 1114, 1118, 1121, 1124, 1128, 1155, 1298], "gener": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 128, 132, 135, 139, 234, 250, 253, 254, 322, 323, 328, 666, 828, 855, 873, 889, 903, 930, 931, 946, 961, 962, 1000, 1008, 1053, 1143, 1298, 1300, 1301], "demand": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 903, 909, 964, 1110, 1112, 1114, 1121, 1298], "accord": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 471, 764, 879, 900, 903, 909, 916, 920, 989, 1027, 1057, 1085, 1143, 1260, 1278, 1283, 1284, 1286, 1288, 1298], "": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 135, 139, 145, 278, 309, 330, 499, 596, 762, 855, 867, 869, 873, 893, 900, 903, 909, 975, 976, 985, 994, 1013, 1016, 1017, 1029, 1030, 1033, 1034, 1037, 1058, 1078, 1085, 1123, 1124, 1297, 1298, 1300], "current": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 135, 145, 152, 341, 378, 880, 881, 882, 883, 900, 903, 906, 909, 1085, 1088, 1096, 1098, 1106, 1123, 1146, 1257, 1297, 1298, 1301], "valid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 175, 242, 444, 576, 697, 880, 881, 882, 883, 900, 903, 1098, 1124], "won": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 488, 489, 490, 903, 1020, 1071, 1074, 1075, 1086, 1124, 1298], "iter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 133, 145, 757, 825, 828, 873, 903, 982, 996, 997, 998, 1001, 1006, 1029, 1037, 1040, 1043, 1054, 1057, 1060, 1063, 1088, 1104, 1110, 1112, 1114, 1121, 1124, 1146, 1148, 1150, 1153, 1157, 1158, 1170, 1171, 1298], "yield": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 135, 181, 229, 234, 377, 488, 489, 490, 601, 602, 729, 730, 817, 903, 996, 1022, 1150, 1153, 1157, 1158, 1172, 1298], "coverag": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 903, 958, 1301], "other": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 128, 132, 135, 139, 145, 252, 378, 381, 416, 639, 640, 641, 676, 855, 857, 863, 866, 869, 900, 903, 920, 951, 975, 978, 985, 995, 996, 998, 1002, 1011, 1013, 1017, 1030, 1033, 1057, 1058, 1068, 1085, 1096, 1104, 1124, 1143, 1146, 1155, 1172, 1180, 1284, 1297, 1301], "calcul": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 459, 903], "proport": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1277, 1284], "least": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 900, 903, 977, 1298], "arbitrari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 251, 903, 909, 977, 1298, 1301], "curation_effort": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 872, 903, 1298], "count": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 135, 136, 137, 139, 145, 147, 168, 214, 226, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 903, 988, 1013, 1016, 1017, 1034, 1111, 1126, 1138, 1140], "pair": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 127, 135, 139, 145, 278, 462, 488, 514, 585, 638, 639, 641, 780, 817, 873, 900, 903, 920, 1007, 1027, 1068, 1096, 1110, 1112, 1114, 1116, 1298, 1301], "get_nam": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1102, 1104, 1298], "consist": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 145, 854, 903, 1088, 1297, 1298], "uniform": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 1001], "might": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 126, 135, 139, 488, 489, 490, 643, 644, 646, 647, 648, 650, 855, 903, 920, 1022, 1124, 1146, 1155, 1298, 1301], "more": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 132, 135, 139, 145, 169, 172, 174, 175, 180, 181, 259, 278, 341, 376, 381, 806, 808, 825, 842, 900, 903, 923, 979, 996, 1102, 1110, 1112, 1114, 1120, 1121, 1124, 1134, 1135, 1136, 1139, 1143, 1146, 1155, 1192, 1203, 1233, 1264, 1265, 1266, 1267, 1268, 1269, 1297, 1298, 1300, 1301], "exampl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 131, 145, 381, 879, 958, 975, 976, 982, 986, 989, 998, 1039, 1043, 1054, 1057, 1060, 1062, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1102, 1146, 1155, 1192, 1296, 1297, 1298], "cell_typ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 539], "expression_level": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "score": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 261, 309, 475, 594, 755, 758, 759, 762, 903], "static": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 867, 903, 920, 1091, 1124, 1192], "get_reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "use_complex": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "fals": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 126, 127, 128, 132, 133, 135, 139, 145, 149, 178, 180, 181, 201, 202, 204, 231, 239, 254, 259, 271, 290, 317, 321, 322, 323, 325, 327, 328, 333, 335, 338, 341, 368, 373, 375, 378, 402, 451, 462, 490, 499, 537, 576, 596, 619, 636, 649, 681, 684, 697, 709, 710, 746, 783, 794, 795, 819, 820, 825, 852, 858, 861, 864, 872, 877, 890, 897, 900, 903, 905, 909, 920, 927, 946, 964, 984, 1008, 1020, 1034, 1039, 1043, 1051, 1068, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1088, 1102, 1104, 1114, 1123, 1124, 1134, 1135, 1136, 1143, 1146, 1155, 1175, 1277, 1278, 1281, 1284, 1286, 1287, 1289, 1290, 1298], "9606": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 122, 126, 135, 145, 165, 166, 169, 174, 175, 177, 178, 179, 180, 191, 201, 204, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 233, 234, 235, 259, 261, 262, 267, 282, 283, 284, 292, 293, 299, 300, 306, 320, 321, 324, 326, 327, 350, 351, 353, 359, 360, 367, 368, 376, 377, 378, 379, 389, 457, 462, 467, 476, 529, 530, 531, 537, 546, 548, 549, 550, 551, 552, 564, 565, 566, 567, 568, 569, 570, 581, 599, 601, 640, 641, 656, 668, 670, 672, 676, 686, 687, 694, 727, 728, 733, 734, 739, 740, 741, 742, 744, 745, 746, 749, 755, 757, 758, 759, 770, 782, 783, 787, 812, 813, 814, 816, 817, 818, 819, 820, 821, 825, 827, 830, 831, 834, 837, 838, 857, 858, 861, 866, 867, 869, 870, 874, 875, 877, 889, 903, 909, 1102, 1103, 1105, 1106, 1107, 1108, 1110, 1116, 1117, 1120, 1121, 1133, 1155, 1170, 1171, 1173, 1175, 1298], "swissprot_onli": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1113, 1143], "true": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 126, 127, 133, 135, 139, 145, 157, 174, 175, 178, 180, 202, 203, 212, 256, 290, 306, 321, 327, 341, 394, 402, 406, 419, 420, 421, 451, 452, 467, 499, 537, 576, 636, 640, 656, 667, 668, 671, 689, 690, 704, 717, 725, 727, 728, 730, 741, 746, 755, 758, 766, 767, 768, 782, 824, 825, 826, 827, 830, 831, 834, 837, 838, 852, 855, 861, 897, 900, 903, 909, 920, 931, 937, 962, 983, 984, 987, 995, 996, 1008, 1020, 1024, 1039, 1047, 1051, 1068, 1069, 1070, 1072, 1074, 1076, 1078, 1080, 1083, 1085, 1088, 1102, 1104, 1106, 1107, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1123, 1124, 1134, 1135, 1136, 1143, 1146, 1155, 1184, 1277, 1278, 1284, 1287, 1289, 1292, 1298], "retriev": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 135, 139, 145, 158, 171, 177, 179, 180, 197, 202, 210, 211, 212, 230, 233, 235, 239, 240, 241, 242, 243, 244, 246, 247, 256, 264, 265, 269, 286, 287, 303, 309, 321, 322, 323, 325, 327, 328, 332, 335, 338, 341, 359, 360, 362, 363, 364, 365, 378, 398, 473, 486, 488, 490, 549, 551, 552, 562, 572, 574, 576, 594, 608, 635, 642, 643, 644, 645, 646, 647, 648, 650, 815, 825, 828, 867, 900, 903, 909, 912, 1010, 1096, 1102, 1106, 1124, 1143, 1194, 1219, 1298], "which": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 118, 126, 127, 128, 134, 135, 139, 145, 239, 242, 280, 309, 330, 376, 381, 488, 629, 675, 704, 755, 758, 842, 872, 900, 903, 914, 916, 920, 923, 927, 946, 951, 975, 976, 977, 979, 982, 989, 996, 1011, 1013, 1017, 1027, 1030, 1033, 1057, 1058, 1071, 1072, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1091, 1102, 1104, 1118, 1124, 1125, 1128, 1143, 1146, 1155, 1160, 1165, 1166, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1284, 1296, 1297, 1300, 1301], "potenti": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 946, 1124, 1298], "typic": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 909, 972, 1124, 1134, 1136, 1297, 1298], "proteom": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 128, 903, 1112, 1124, 1298], "organ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 131, 145, 168, 169, 170, 172, 174, 175, 177, 178, 179, 180, 191, 201, 203, 204, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 259, 261, 262, 267, 282, 283, 284, 292, 293, 299, 300, 306, 320, 321, 324, 326, 327, 338, 350, 351, 353, 357, 359, 360, 367, 368, 373, 374, 375, 376, 377, 378, 379, 389, 394, 402, 405, 406, 457, 462, 476, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 530, 531, 537, 546, 548, 549, 550, 551, 552, 564, 565, 566, 567, 568, 569, 570, 581, 594, 599, 601, 630, 640, 641, 656, 657, 666, 667, 674, 676, 686, 687, 694, 727, 728, 733, 734, 739, 740, 741, 742, 744, 745, 746, 749, 760, 770, 782, 783, 795, 812, 813, 814, 816, 817, 818, 819, 820, 821, 825, 827, 830, 831, 834, 837, 838, 867, 869, 890, 903, 909, 1102, 1105, 1106, 1107, 1108, 1110, 1112, 1114, 1115, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1134, 1136, 1160, 1161, 1165, 1166, 1170, 1171, 1173, 1175, 1296, 1297, 1300, 1301], "get_subset": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 852, 1298], "subset": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 903, 955, 1292], "filter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 122, 131, 139, 145, 177, 181, 309, 903, 996, 1298], "element": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 134, 135, 139, 145, 253, 315, 409, 673, 681, 704, 709, 796, 855, 872, 900, 903, 975, 976, 977, 982, 984, 986, 989, 995, 996, 997, 998, 1001, 1002, 1013, 1016, 1017, 1029, 1030, 1033, 1034, 1043, 1049, 1050, 1054, 1057, 1058, 1060, 1102, 1110, 1112, 1114, 1116, 1117, 1124, 1146, 1284, 1298], "get_subset_bool_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "boolean": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 309, 645, 861, 900, 903, 1298], "vector": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 903], "presenc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 900, 920], "absenc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 900, 920], "simplest": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "kind": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 1124, 1125, 1133, 1298, 1301], "match": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 191, 467, 903, 1110, 1112, 1114, 1121, 1124, 1134, 1136, 1172, 1298, 1301], "possibl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 133, 135, 145, 180, 234, 359, 360, 405, 676, 700, 903, 1063, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1134, 1136, 1143, 1150, 1153, 1158, 1180, 1296, 1298], "get_valu": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1298], "exclude_non": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "call": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 132, 135, 145, 276, 380, 382, 597, 794, 795, 852, 854, 879, 889, 903, 909, 916, 920, 979, 986, 1002, 1068, 1069, 1123, 1124, 1134, 1136, 1146, 1155, 1284, 1289, 1297, 1298], "can": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 131, 132, 133, 135, 139, 145, 180, 203, 224, 444, 488, 489, 490, 597, 676, 755, 758, 759, 854, 855, 867, 869, 873, 900, 903, 914, 920, 922, 930, 954, 961, 996, 998, 1002, 1003, 1004, 1013, 1017, 1020, 1027, 1030, 1033, 1054, 1058, 1060, 1068, 1086, 1096, 1102, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1134, 1135, 1136, 1139, 1146, 1200, 1257, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289, 1292, 1297, 1298, 1299, 1300, 1301], "tell": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 280, 819, 820, 821, 903, 909, 1003, 1004, 1102, 1104, 1123, 1124, 1298, 1301], "macrophag": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 950, 1298], "epithelial_cel": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "label": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 133, 135, 139, 145, 146, 147, 168, 169, 170, 171, 172, 807, 808, 857, 863, 867, 880, 881, 882, 883, 893, 901, 902, 903, 911, 912, 914, 915, 916, 972, 1085, 1091, 1094, 1103, 1123, 1124, 1130, 1131, 1192, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1278, 1281, 1283, 1284, 1286, 1287, 1290, 1298], "same": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 132, 135, 139, 145, 376, 381, 451, 629, 796, 807, 842, 855, 857, 861, 863, 866, 869, 890, 900, 903, 977, 1110, 1112, 1114, 1121, 1123, 1124, 1134, 1136, 1146, 1155, 1298], "human": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 172, 180, 201, 202, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 304, 320, 321, 324, 326, 327, 373, 374, 375, 376, 377, 378, 389, 394, 409, 414, 415, 417, 433, 464, 490, 638, 666, 667, 674, 676, 686, 687, 728, 731, 733, 734, 746, 762, 774, 794, 795, 825, 903, 1120, 1124, 1133, 1297, 1298, 1301], "readabl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 638, 1124, 1133, 1298], "py": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 135, 139, 145, 900, 903, 909, 946, 1298], "attr": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 132, 135, 139, 145, 181, 869, 900, 903, 909, 946, 979, 1150, 1153, 1157], "infer_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "load_data": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 889], "load_protein": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "entir": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 903, 1298], "make_df": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 145, 920, 1298], "rebuild": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 909], "compil": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 169, 903, 909, 1008, 1282, 1284, 1298, 1299], "panda": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 145, 171, 172, 290, 320, 480, 636, 687, 903, 938, 983, 1143, 1296, 1297, 1300, 1301], "datafram": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 145, 171, 290, 320, 480, 636, 687, 903, 983, 1112, 1114, 1296, 1297], "frame": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 127, 139, 145, 171, 172, 290, 320, 636, 687, 872, 909, 920, 927, 938, 1110, 1112, 1114, 1116, 1121, 1296, 1297, 1300], "assign": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 120, 126, 135, 139, 145, 903, 920, 1030, 1033, 1058, 1107, 1298, 1301], "df": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 127, 139, 983, 1110, 1112, 1114, 1121, 1298], "numof_ent": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "number": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 127, 131, 135, 136, 137, 139, 145, 147, 168, 174, 175, 180, 214, 226, 253, 309, 319, 341, 408, 444, 446, 452, 459, 462, 467, 475, 485, 488, 489, 490, 539, 607, 610, 611, 643, 644, 646, 647, 648, 649, 650, 673, 676, 679, 754, 755, 780, 810, 811, 839, 852, 853, 854, 867, 873, 877, 887, 891, 893, 900, 901, 902, 903, 920, 977, 979, 985, 1003, 1013, 1016, 1017, 1042, 1085, 1088, 1102, 1104, 1111, 1114, 1124, 1126, 1134, 1136, 1138, 1139, 1140, 1146, 1168, 1192, 1194, 1226, 1278, 1283, 1284, 1286, 1288, 1297, 1298, 1301], "numof_record": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "total": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 147, 203, 341, 901, 902, 903, 988, 1088, 1146, 1267, 1268, 1284, 1289], "numof_refer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "process": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 128, 131, 139, 145, 157, 169, 174, 175, 189, 191, 210, 212, 256, 304, 309, 322, 323, 328, 394, 409, 420, 421, 436, 437, 487, 512, 519, 520, 531, 564, 668, 671, 709, 715, 727, 730, 741, 745, 746, 774, 794, 796, 817, 842, 844, 852, 855, 889, 903, 954, 972, 1054, 1060, 1068, 1102, 1123, 1124, 1143, 1146, 1155, 1297, 1300], "_process_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 889], "reload": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 105, 120, 132, 133, 135, 139, 145, 900, 903, 909, 964, 1102, 1103, 1104, 1107, 1124, 1284, 1287, 1289, 1298], "set_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 889], "look": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 139, 145, 792, 793, 796, 852, 854, 867, 889, 903, 989, 1124, 1134, 1143, 1172], "up": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 139, 145, 309, 322, 323, 328, 377, 381, 488, 489, 490, 746, 792, 793, 796, 852, 854, 889, 903, 984, 987, 989, 1098, 1123, 1124, 1134, 1139, 1146, 1168, 1170, 1171, 1172, 1192, 1278, 1283, 1284, 1286, 1298], "necessari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 307, 676, 889, 903, 909, 916, 1118, 1123, 1146, 1284, 1292, 1297, 1298], "set_reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "show": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 133, 135, 139, 145, 903, 920, 1068, 1123, 1277, 1298, 1301], "table_param": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "consol": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 452, 1068, 1072, 1085, 1296], "basic": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 152, 825, 903, 1296], "datasheet": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 362, 363, 364, 815, 1124, 1233], "subset_intersect": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "univers": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 903], "occur": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 1013, 1017, 1030, 1033, 1058], "to_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "use_field": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "v": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 290, 903, 1298], "featur": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 376, 381, 880, 881, 882, 883, 1170, 1171, 1203, 1208, 1218, 1230, 1296, 1298], "arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 180, 903, 930, 961, 1284, 1298], "huge": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 861, 903, 1124, 1143, 1298, 1299], "to_bool_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "to_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 852], "dump": [5, 100, 791, 889, 903, 909, 972, 1123, 1298], "primary_field": 5, "check_id": 5, "abstractresourc": [5, 100], "protein_sourc": [6, 1298], "complex_sourc": [6, 1298], "keep_annot": [6, 93, 94], "create_datafram": [6, 93, 94], "pickle_fil": [6, 30, 105, 126, 145, 903, 1102, 1106, 1107, 1298], "logger": [6, 30, 122, 126, 127, 145, 889, 903, 909, 916, 920, 927, 936, 946, 966, 1069, 1086, 1091, 1092, 1094, 1102, 1103, 1104, 1110, 1115, 1123, 1124, 1125, 1139, 1146, 1155, 1160, 1256], "manag": [6, 911, 1118, 1119, 1128, 1296], "accept": [6, 145, 440, 903, 920, 977, 981, 996, 1102, 1125, 1260, 1272, 1275, 1298, 1301], "convert": [6, 30, 145, 224, 254, 290, 523, 524, 525, 529, 530, 796, 903, 920, 975, 976, 995, 999, 1003, 1004, 1006, 1011, 1037, 1040, 1050, 1051, 1052, 1085, 1104, 1124, 1134, 1136, 1139, 1143, 1168, 1257, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289, 1297, 1298], "protein_sources_default": 6, "complex_sources_default": 6, "onli": [6, 30, 122, 127, 132, 133, 135, 139, 145, 169, 172, 174, 175, 201, 204, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 272, 278, 320, 321, 322, 323, 325, 327, 328, 333, 335, 341, 389, 394, 406, 459, 462, 467, 656, 697, 704, 774, 825, 855, 857, 863, 866, 900, 903, 909, 926, 954, 955, 958, 964, 975, 979, 986, 996, 1023, 1041, 1043, 1068, 1069, 1077, 1082, 1085, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1134, 1135, 1136, 1143, 1155, 1157, 1175, 1184, 1296, 1297, 1300, 1301], "construct": [6, 1068, 1123, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275], "default_field": 6, "bool": [6, 30, 127, 128, 133, 135, 139, 145, 157, 174, 175, 178, 180, 181, 201, 202, 203, 204, 212, 231, 239, 290, 309, 321, 322, 323, 325, 327, 328, 333, 335, 338, 341, 378, 394, 406, 409, 452, 462, 467, 490, 499, 596, 636, 640, 645, 649, 656, 681, 704, 746, 755, 758, 795, 825, 852, 855, 866, 867, 900, 903, 920, 946, 984, 987, 996, 1009, 1020, 1039, 1043, 1102, 1104, 1110, 1112, 1114, 1120, 1121, 1123, 1124, 1134, 1136, 1143, 1146, 1184], "whether": [6, 132, 135, 145, 157, 239, 394, 452, 704, 795, 855, 900, 903, 996, 1020, 1146, 1298], "includ": [6, 30, 135, 139, 145, 150, 157, 178, 180, 181, 184, 201, 203, 204, 212, 215, 239, 315, 324, 326, 338, 394, 596, 597, 640, 656, 758, 759, 795, 857, 863, 866, 900, 903, 920, 952, 954, 955, 956, 989, 1096, 1102, 1104, 1146, 1298, 1300, 1301], "apart": [6, 145, 278, 596, 597, 903, 1297, 1298], "upon": [6, 30, 139, 1051, 1072, 1123, 1298], "initi": [6, 36, 93, 94, 119, 120, 145, 900, 903, 937, 946, 1088, 1106, 1107, 1123, 1146, 1157, 1184, 1298, 1300], "chanc": [6, 1298], "later": [6, 30, 126, 133, 135, 139, 777, 903, 1123, 1146, 1298], "all_annot": [6, 30, 1298], "all_annotations_str": 6, "serial": [6, 96, 122, 132, 133, 135], "search": [6, 30, 139, 145, 903, 1025, 1123, 1143, 1192], "dictionari": [6, 30, 96, 122, 127, 132, 133, 135, 139, 145, 178, 180, 184, 187, 210, 233, 241, 253, 278, 330, 416, 467, 469, 473, 629, 631, 635, 638, 777, 796, 807, 825, 836, 852, 900, 903, 915, 968, 978, 979, 986, 989, 1002, 1007, 1012, 1043, 1044, 1054, 1060, 1110, 1112, 1114, 1117, 1123, 1124, 1125, 1134, 1296, 1297], "approv": [10, 903], "cancer": [10, 194, 195, 197, 269, 272, 471, 689, 690, 903, 1298], "drug": [10, 32, 122, 145, 193, 194, 195, 242, 244, 303, 330, 331, 332, 333, 335, 337, 338, 339, 495, 498, 499, 500, 501, 503, 505, 509, 903, 1124, 1192, 1298, 1300], "http": [10, 38, 181, 194, 195, 215, 216, 217, 218, 219, 220, 221, 222, 223, 233, 235, 259, 264, 265, 341, 431, 432, 433, 440, 452, 514, 562, 572, 587, 588, 594, 604, 605, 636, 645, 696, 746, 779, 780, 806, 825, 841, 1022, 1055, 1056, 1068, 1123, 1124, 1143, 1192, 1257, 1297, 1301], "www": [10, 181, 194, 195, 215, 216, 217, 218, 219, 220, 221, 222, 223, 259, 514, 562, 572, 636, 696, 806, 841, 1055, 1056, 1123, 1124, 1143, 1192, 1257, 1298], "anticancerfund": [10, 194, 195], "org": [10, 38, 181, 194, 195, 215, 216, 217, 218, 219, 220, 221, 222, 223, 259, 391, 433, 514, 562, 587, 588, 594, 636, 696, 800, 803, 825, 841, 867, 1123, 1124, 1143, 1257, 1298, 1301], "en": [10, 194, 195, 341], "cancerdrug": [10, 194, 195], "db": [10, 94, 120, 194, 195, 852, 909, 1107, 1297, 1298], "cellphonedb": [13, 950, 1296], "abbrevi": [14, 15, 43, 596, 1085, 1146], "cspa": [14, 15, 903], "cell": [23, 58, 64, 69, 171, 172, 237, 397, 398, 604, 605, 847, 855, 903, 1048, 1102, 1298, 1301], "type": [23, 58, 69, 121, 122, 127, 128, 135, 136, 145, 171, 172, 179, 180, 195, 214, 215, 216, 221, 237, 309, 331, 334, 339, 359, 360, 405, 452, 469, 594, 604, 605, 619, 635, 673, 697, 700, 718, 806, 807, 808, 855, 857, 863, 866, 867, 872, 873, 900, 903, 909, 920, 937, 975, 976, 995, 1006, 1011, 1037, 1039, 1040, 1043, 1054, 1057, 1060, 1068, 1069, 1086, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1129, 1134, 1135, 1136, 1192, 1296, 1297, 1298], "marker": [23, 58, 69, 237, 604, 605], "annot_attr": 26, "corum": [27, 28, 903, 1298, 1301], "class_definit": [30, 139, 852, 854], "exclud": [30, 126, 139, 145, 169, 172, 174, 175, 203, 275, 276, 757, 852, 903, 1298], "excludes_extra": [30, 139], "annotdb_pickle_fil": 30, "composite_resource_nam": [30, 139], "seri": [30, 135, 139, 290, 903, 1124, 1133, 1200, 1298], "definit": [30, 139, 145, 416, 794, 854, 855, 903, 909, 912, 915, 916, 946, 949, 968, 1123, 1124, 1296, 1297, 1300], "instanc": [30, 93, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 126, 127, 128, 133, 135, 139, 145, 376, 381, 792, 869, 874, 903, 911, 916, 937, 964, 1057, 1083, 1086, 1088, 1092, 1106, 1112, 1114, 1118, 1119, 1123, 1124, 1128, 1132, 1134, 1160, 1165, 1260, 1284, 1287, 1289, 1297, 1298, 1301], "intern": [30, 133, 139, 217, 224, 523, 630, 681, 777, 900, 950, 951, 952, 953, 954, 955, 956, 957, 958, 1123, 1124, 1134, 1136, 1298, 1300], "annot_format": [30, 139], "annotdef": [30, 139], "These": [30, 139, 460, 585, 630, 842, 857, 863, 866, 867, 903, 909, 920, 952, 954, 955, 956, 972, 1124, 1136, 1146, 1155, 1298, 1301], "carri": [30, 96, 139, 630, 1298], "instruct": [30, 139, 444, 903], "popul": [30, 133, 139, 855, 1298], "parent": [30, 139, 416, 700, 852, 853, 855, 1104, 1147, 1148, 1149, 1151, 1154, 1156, 1157, 1298], "respect": [30, 135, 139, 145, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 903, 1027, 1298], "while": [30, 135, 139, 145, 219, 222, 315, 416, 640, 676, 681, 900, 903, 920, 1068, 1088, 1297, 1298], "p00533": [30, 139, 143, 145, 1297, 1298, 1301], "egfr": [30, 135, 139, 145, 903, 1146, 1297, 1298, 1301], "under": [30, 96, 139, 879, 903, 930, 961, 1128, 1132, 1298], "adhes": [30, 64, 139, 143, 903], "direct": [30, 128, 135, 136, 139, 145, 519, 640, 666, 855, 861, 903, 920, 952, 956, 979, 1102, 1104, 1124, 1264, 1265, 1266, 1267, 1268, 1269], "children": [30, 139], "ad": [30, 139, 145, 903, 920, 975, 976, 984, 996, 1146, 1155, 1298], "built": [30, 139, 145, 867, 903, 909, 911, 912, 922, 946, 979, 1025, 1102, 1103, 1296, 1297], "extra": [30, 133, 139, 145, 596, 903, 920, 1124], "merg": [30, 96, 122, 126, 127, 132, 135, 139, 145, 869, 900, 903, 979, 989, 1007, 1012, 1146, 1155, 1298], "want": [30, 127, 135, 139, 145, 903, 1078, 1083, 1296, 1297, 1301], "overwrit": [30, 135, 139, 946, 1044], "modifi": [30, 135, 139, 900, 903, 983, 1075], "your": [30, 139, 903, 909, 1085, 1143, 1298, 1301], "execut": [30, 139, 903, 1146, 1284, 1298], "instanti": [30, 139, 855, 964, 1298], "empti": [30, 133, 135, 139, 145, 321, 327, 411, 681, 900, 903, 982, 997, 1029, 1039, 1049, 1050, 1124, 1297, 1298], "class_to_class_connect": [30, 139], "filter_interclass_network": [30, 139], "classes_by_ent": [30, 139], "One": [30, 122, 127, 135, 139, 145, 169, 172, 180, 181, 286, 287, 796, 825, 920, 1110, 1112, 1114, 1121, 1124, 1139, 1192, 1203], "instead": [30, 135, 139, 145, 490, 636, 900, 903, 977, 1072, 1096, 1098, 1298, 1299, 1301], "iter_class": [30, 139], "counts_by_class": [30, 139], "create_class": [30, 139], "classdef": [30, 139], "overrid": [30, 139, 857, 863, 866, 867, 909, 1096, 1098], "degree_inter_class_network": [30, 139], "annot_args_sourc": [30, 139], "annot_args_target": [30, 139], "degrees_of": [30, 139], "target": [30, 127, 128, 135, 139, 145, 155, 177, 194, 244, 290, 319, 320, 321, 322, 323, 325, 327, 328, 330, 338, 405, 406, 562, 572, 574, 576, 601, 602, 673, 676, 700, 844, 861, 876, 900, 903, 909, 924, 957, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1134, 1192, 1264, 1265, 1266, 1267, 1268, 1269, 1298, 1300, 1301], "degre": [30, 135, 139, 903, 1027], "filter_class": [30, 139], "annot_df": [30, 139], "combined_df": [30, 139], "network_arg": [30, 139], "annot_arg": [30, 139], "entities_sourc": [30, 139], "entities_target": [30, 139], "only_direct": [30, 98, 139, 145], "only_undirect": [30, 98, 139], "only_sign": [30, 98, 135, 139], "only_effect": [30, 139], "only_protein": [30, 98, 139, 462], "swap_undirect": [30, 98, 139], "undirected_orient": [30, 139], "entities_or": [30, 98, 139], "where": [30, 127, 135, 139, 145, 194, 370, 371, 372, 380, 381, 382, 384, 385, 386, 387, 469, 488, 546, 676, 780, 873, 893, 900, 903, 909, 1012, 1068, 1110, 1112, 1114, 1121, 1146, 1264, 1265, 1266, 1267, 1268, 1269, 1298, 1301], "between": [30, 139, 145, 212, 229, 505, 506, 507, 587, 594, 629, 631, 638, 639, 641, 676, 681, 755, 758, 817, 869, 900, 903, 995, 1006, 1037, 1040, 1112, 1114, 1122, 1123, 1124, 1134, 1135, 1260, 1265, 1267, 1268, 1277, 1284, 1297, 1298, 1300, 1301], "enit": [30, 139], "alreadi": [30, 135, 139, 145, 796, 903, 946, 958, 1062, 1093, 1094, 1104, 1123, 1155, 1298], "side": [30, 139, 903, 920, 1123, 1284, 1298], "connect": [30, 135, 139, 903, 1155, 1260, 1297, 1300, 1301], "note": [30, 135, 139, 180, 322, 323, 328, 546, 643, 644, 646, 647, 648, 650, 903, 975, 986, 1054, 1060, 1124, 1298, 1301], "howev": [30, 135, 139, 903, 909, 1297, 1298], "result": [30, 127, 135, 139, 145, 181, 231, 253, 309, 338, 341, 376, 377, 380, 382, 467, 640, 673, 796, 855, 903, 920, 1011, 1012, 1072, 1078, 1079, 1080, 1083, 1104, 1114, 1123, 1124, 1135, 1143, 1146, 1192, 1298], "consequ": [30, 139], "memori": [30, 139, 462, 730, 909, 983, 1124, 1125, 1139, 1146, 1168, 1170, 1171, 1297, 1298, 1300], "issu": [30, 139, 1078, 1083, 1297], "criteria": [30, 135, 145, 730, 903, 1124], "defin": [30, 36, 121, 127, 128, 134, 135, 139, 145, 629, 639, 755, 758, 759, 852, 855, 867, 869, 903, 911, 920, 922, 996, 1009, 1096, 1124, 1125, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1284, 1296, 1297, 1301], "here": [30, 96, 122, 132, 134, 135, 139, 145, 203, 290, 341, 440, 629, 645, 903, 914, 922, 996, 1009, 1088, 1123, 1124, 1143, 1155, 1260, 1297, 1298, 1301], "appli": [30, 730, 903, 909, 1079, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "undirect": [30, 135, 139, 900, 903, 920, 955, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "specif": [30, 122, 128, 135, 139, 145, 187, 234, 251, 341, 496, 500, 502, 503, 504, 506, 507, 510, 527, 852, 855, 900, 903, 909, 1085, 1180, 1297, 1298, 1301], "without": [30, 96, 97, 122, 132, 135, 139, 145, 239, 852, 900, 903, 950, 978, 982, 1002, 1057, 1296, 1301], "effect": [30, 98, 135, 136, 139, 145, 319, 520, 715, 844, 876, 900, 903, 1298], "1": [30, 123, 127, 135, 136, 137, 139, 145, 147, 168, 174, 175, 214, 226, 242, 319, 397, 398, 408, 446, 464, 475, 539, 594, 607, 610, 611, 679, 752, 810, 811, 852, 853, 854, 861, 863, 865, 870, 873, 874, 875, 877, 891, 893, 901, 902, 903, 975, 976, 977, 984, 986, 987, 989, 998, 1043, 1054, 1057, 1060, 1088, 1111, 1114, 1124, 1126, 1134, 1136, 1138, 1140, 1143, 1172, 1192, 1256, 1277, 1296, 1298, 1301], "partner": [30, 135, 139, 145, 408, 488, 903, 920, 1298, 1301], "small": [30, 122, 139, 222, 223, 735, 909, 1146, 1256, 1264, 1265, 1266, 1267, 1268, 1269, 1297, 1300], "molecul": [30, 64, 122, 135, 139, 145, 222, 223, 243, 331, 359, 360, 735, 903, 909, 920, 1146, 1297, 1301], "mutual": [30, 135, 499, 900, 903], "ignor": [30, 132, 133, 135, 139, 145, 278, 893, 903, 1063, 1124, 1135], "make": [30, 126, 139, 903, 909, 975, 1049, 1050, 1076, 1082, 1083, 1124, 1134, 1136, 1298, 1301], "sure": [30, 139, 903, 909, 1049, 1050], "orient": [30, 139, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "partenr": [30, 139], "get_class": [30, 139], "its": [30, 121, 135, 139, 145, 218, 278, 332, 365, 377, 433, 639, 681, 842, 903, 916, 972, 973, 1029, 1054, 1057, 1060, 1075, 1076, 1102, 1104, 1105, 1108, 1124, 1128, 1134, 1136, 1146, 1184, 1190, 1272, 1274, 1275, 1298, 1300], "content": [30, 96, 122, 132, 135, 139, 259, 357, 480, 696, 746, 855, 903, 909, 946, 954, 1008, 1048, 1053, 1068, 1096, 1146, 1297, 1299, 1300], "annotop": [30, 139], "oper": [30, 131, 139, 854, 855, 903, 977, 1016, 1033, 1034, 1102, 1298], "over": [30, 128, 139, 828, 903, 1157, 1170, 1171, 1300], "get_df": [30, 139, 1110, 1298], "doe": [30, 93, 119, 135, 139, 145, 307, 411, 452, 791, 842, 869, 903, 972, 975, 1001, 1033, 1054, 1060, 1072, 1077, 1082, 1085, 1104, 1106, 1118, 1124, 1125, 1128, 1134, 1146, 1284, 1297, 1298], "yet": [30, 93, 119, 126, 139, 145, 499, 903, 909, 989, 1106, 1118, 1124, 1298, 1301], "get_interclass_network_df": [30, 139], "interclass": [30, 139], "otherwis": [30, 122, 132, 133, 135, 139, 145, 377, 467, 469, 596, 629, 852, 900, 903, 981, 984, 987, 996, 999, 1008, 1009, 1010, 1026, 1044, 1049, 1050, 1052, 1053, 1124, 1298], "network_df": [30, 139, 909], "get_par": [30, 139], "As": [30, 139, 321, 327, 903, 1074, 1075, 1155, 1298, 1301], "uniqu": [30, 126, 135, 139, 145, 147, 872, 900, 901, 902, 903, 920, 975, 979, 986, 1016, 1017, 1033, 1034, 1043, 1044, 1054, 1057, 1058, 1060, 1063, 1146, 1298, 1301], "determin": [30, 135, 139, 900, 903, 909, 1027, 1057, 1124], "get_resourc": [30, 135, 139, 145], "For": [30, 36, 127, 128, 135, 139, 145, 171, 178, 180, 253, 321, 322, 323, 325, 327, 328, 597, 702, 807, 808, 819, 820, 825, 855, 867, 879, 887, 903, 916, 972, 985, 988, 992, 994, 1013, 1016, 1017, 1030, 1033, 1034, 1042, 1058, 1102, 1103, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1124, 1130, 1131, 1133, 1139, 1143, 1146, 1155, 1180, 1183, 1184, 1190, 1192, 1297, 1298, 1301], "belong": [30, 135, 139, 145, 869, 903, 1013, 1017, 1030, 1033, 1058, 1092, 1104, 1118, 1298], "composit": [30, 139, 855, 1298, 1301], "first": [30, 123, 127, 135, 136, 137, 139, 145, 147, 168, 214, 226, 278, 319, 330, 408, 446, 475, 485, 539, 594, 607, 610, 611, 629, 638, 639, 641, 679, 681, 810, 811, 852, 853, 854, 866, 891, 893, 900, 901, 902, 903, 964, 980, 984, 986, 989, 996, 1023, 1029, 1057, 1062, 1110, 1111, 1112, 1114, 1116, 1117, 1123, 1124, 1126, 1134, 1136, 1138, 1140, 1143, 1146, 1175, 1194, 1236, 1297, 1298, 1300], "alphabet": [30, 135, 139, 900, 903, 1155, 1298], "order": [30, 126, 135, 139, 145, 900, 903, 920, 975, 1054, 1055, 1056, 1057, 1060, 1062, 1146, 1155, 1170, 1171, 1277, 1284, 1287, 1289, 1298, 1301], "given": [30, 135, 139, 145, 309, 444, 459, 640, 676, 873, 900, 903, 979, 986, 989, 1002, 1011, 1027, 1037, 1057, 1102, 1124, 1135, 1143, 1160, 1165, 1170, 1171, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1292, 1298], "full_nam": [30, 879, 1298], "populate_class": [30, 139], "updat": [30, 96, 122, 132, 135, 139, 145, 307, 376, 381, 900, 903, 946, 1088, 1096, 1284, 1287, 1289, 1298, 1300, 1301], "classif": [30, 38, 139, 446], "populate_scor": [30, 139], "consensu": [30, 135, 139, 900, 1122, 1298], "process_annot": [30, 139], "quality_check_t": [30, 139], "path": [30, 139, 145, 199, 278, 334, 737, 791, 903, 909, 915, 938, 946, 972, 973, 989, 1008, 1053, 1085, 1086, 1123, 1146, 1297, 1298], "fmt": [30, 139], "tsv": [30, 139, 927, 929, 960, 1053], "only_swissprot": [30, 139, 406, 903, 1110, 1112, 1114, 1116, 1117, 1120], "top": [30, 139, 780, 897, 1284, 1287, 1289, 1298], "export": [30, 139, 677, 903, 909, 938, 1123, 1208, 1230, 1296, 1297, 1300], "format": [30, 128, 139, 145, 158, 169, 184, 211, 290, 668, 671, 704, 728, 729, 731, 839, 903, 930, 978, 980, 1085, 1088, 1124, 1180, 1208, 1230, 1257, 1292, 1300, 1301], "qualiti": [30, 139, 903, 1301], "check": [30, 135, 139, 181, 433, 839, 879, 880, 881, 882, 883, 900, 903, 909, 996, 1005, 1039, 1124, 1160, 1208, 1230, 1297, 1298, 1301], "purpos": [30, 139, 879, 903, 926, 1298], "row": [30, 127, 139, 171, 172, 290, 872, 903, 909, 920, 1110, 1112, 1114, 1121, 1298, 1301], "file": [30, 139, 145, 150, 157, 182, 183, 187, 191, 199, 234, 251, 252, 253, 254, 278, 286, 287, 322, 323, 328, 330, 334, 377, 404, 409, 522, 531, 636, 640, 668, 670, 671, 672, 677, 700, 727, 728, 731, 737, 741, 791, 842, 903, 909, 915, 920, 932, 946, 963, 972, 1008, 1053, 1057, 1068, 1069, 1071, 1072, 1085, 1086, 1095, 1096, 1123, 1124, 1127, 1143, 1146, 1155, 1174, 1278, 1279, 1280, 1282, 1283, 1284, 1286, 1287, 1289, 1296, 1297, 1300], "latex": [30, 139, 903, 1008, 1208, 1230, 1282], "register_network": [30, 139, 1298], "dataset": [30, 139, 169, 170, 171, 172, 181, 194, 202, 203, 211, 234, 259, 436, 437, 674, 675, 746, 842, 903, 909, 924, 951, 958, 1296, 1297], "afterward": [30, 139], "discard": [30, 139, 145, 795, 903, 1124], "futur": [30, 139, 680, 681, 869, 903, 1298, 1301], "address": [30, 139, 330, 331, 332, 333, 334, 335, 1143, 1298], "regist": [30, 139, 330, 331, 332, 333, 334, 335, 440, 903, 1143], "resources_in_categori": [30, 139], "contribut": [30, 139, 1297], "set_interclass_network_df": [30, 139], "whole": [30, 139, 903, 1298], "inter": [30, 139, 909, 1296, 1297], "keep": [30, 122, 128, 139, 174, 175, 462, 596, 640, 697, 704, 903, 996, 1057, 1124, 1125, 1143, 1194, 1225, 1297, 1298], "subsequ": [30, 127, 139, 989, 1297, 1298], "faster": [30, 139, 903, 1123, 1297, 1298], "update_par": [30, 139], "cytokin": [31, 91, 289, 290], "perturb": [31, 91, 289], "signatur": [31, 51, 72, 91, 289, 290, 686, 687], "druggabl": [32, 302, 304, 903], "go_annot": [36, 37, 1103], "gocustomannot": 36, "go": [36, 466, 469, 903, 984, 1078, 1297, 1298, 1300], "intercell_annot": [36, 139, 855, 1298], "intercell_categori": 36, "get_annot": [36, 1102, 1103], "correspond": [36, 135, 145, 178, 332, 702, 776, 778, 880, 881, 882, 883, 900, 903, 920, 923, 1096, 1099, 1103, 1120, 1124, 1130, 1139, 1168, 1298], "ontologi": [36, 37, 381, 414, 415, 416, 417, 683, 863, 903, 1102, 1103, 1104, 1105, 1108, 1127, 1296, 1297, 1300], "term": [36, 368, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 415, 416, 417, 433, 440, 466, 469, 597, 903, 1102, 1103, 1104, 1298], "express": [36, 86, 88, 169, 170, 171, 172, 289, 321, 322, 323, 325, 327, 328, 644, 649, 757, 855, 903, 1102, 1103, 1143, 1297, 1298, 1301], "process_categori": [36, 1103], "translat": [36, 127, 135, 334, 339, 350, 351, 353, 405, 406, 505, 506, 507, 523, 673, 676, 677, 700, 704, 735, 807, 867, 868, 900, 903, 1103, 1110, 1112, 1114, 1116, 1117, 1121, 1123, 1124, 1125, 1128, 1134, 1135, 1136, 1171, 1192, 1284, 1296, 1300, 1301], "ac": [36, 259, 639, 641, 779, 780, 806, 1103, 1124, 1134, 1192, 1203, 1297, 1298], "role": [37, 139, 143, 215, 216, 218, 221, 233, 539, 855, 909, 1296, 1297], "intercellular": [37, 139, 143, 855, 1296, 1300], "commun": [37, 139, 143, 855, 903, 909, 946, 1296, 1297, 1300], "gpcr": 38, "load_sourc": [39, 57, 73], "ligandreceptor": [39, 57, 73], "hpmr": [43, 950, 1298], "famili": [47, 85, 409, 446, 488, 489, 490, 746, 903, 1155, 1298], "pathwai": [54, 55, 67, 72, 78, 79, 145, 202, 203, 272, 287, 485, 487, 497, 501, 504, 508, 509, 510, 588, 686, 687, 729, 748, 903, 950, 956, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1297, 1298, 1301], "kegg": [54, 55, 202, 203, 321, 327, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 903, 958, 1298], "via": [55, 132, 133, 135, 145, 890, 891, 892, 893], "pathwaycommon": [55, 1298, 1300], "kinas": [56, 420, 512, 524, 656, 903, 1298, 1301], "com": [56, 512, 572, 574, 1022, 1055, 1056, 1068, 1143, 1297, 1298], "panglaodb": [58, 1298], "ligand_col": 59, "receptor_col": 59, "ligand_id_typ": 59, "receptor_id_typ": 59, "record_processor_method": 59, "record_extra_field": 59, "record_default": 59, "extra_fields_method": 59, "literatur": [60, 131, 132, 135, 145, 321, 322, 323, 325, 327, 328, 436, 437, 438, 537, 562, 572, 574, 585, 587, 588, 601, 670, 903, 920, 923, 950, 955, 956, 1296, 1301], "extern": [60, 330, 469, 537, 1298], "predict": [60, 256, 319, 321, 322, 323, 325, 327, 328, 452, 537, 762, 794, 795, 903], "cam": 64, "10": [64, 147, 259, 309, 319, 350, 351, 352, 353, 464, 488, 489, 490, 514, 696, 841, 847, 849, 852, 901, 902, 903, 1022, 1110, 1124, 1143, 1160, 1256, 1277, 1281, 1285, 1287, 1293, 1296, 1298, 1301], "4137": 64, "cin": 64, "s341": 64, "netpath": [67, 903, 952, 1298], "phosphatas": [71, 654, 1298], "chen": [71, 654], "et": [71, 83, 350, 351, 352, 353, 464, 514, 654, 696, 841, 847, 855, 1143, 1298], "al": [71, 83, 350, 351, 352, 353, 464, 514, 654, 696, 841, 847, 855, 1143, 1298], "scienc": [71, 654, 1297], "signal": [71, 139, 189, 654, 855, 903, 1296, 1301], "2017": [71, 437, 654], "s1": [71, 654], "respons": [72, 597, 645, 686, 687, 1297, 1298], "transcriptom": [72, 686, 687], "saezlab": [72, 321, 322, 323, 325, 327, 328, 686, 687, 903, 1297], "signalink": [77, 78, 903, 1298, 1301], "signor": [79, 903, 950, 958, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1298, 1301], "topolog": [82, 89], "domain": [82, 89, 127, 315, 452, 459, 529, 530, 531, 639, 764, 778, 779, 796, 842, 868, 872, 903, 1114, 1170, 1171, 1298, 1301], "transmembran": [82, 89, 226, 903, 1298, 1301], "segment": [82, 89, 1143, 1298], "transcript": [83, 135, 145, 155, 171, 172, 178, 180, 181, 490, 774, 858, 903, 953, 958, 1124, 1134, 1136, 1297, 1301], "factor": [83, 145, 774, 903, 1298, 1301], "tf": [83, 155, 202, 203, 319, 320, 321, 322, 323, 325, 327, 328, 601, 602, 774, 789, 903, 909, 924, 1298, 1300, 1301], "censu": [83, 269, 774, 903], "vaqueriza": [83, 774], "2009": [83, 774, 1298], "tissu": [86, 88, 171, 172, 903, 1143, 1298, 1301], "subcellular": [87, 710, 903], "local": [87, 157, 215, 216, 218, 221, 522, 531, 741, 842, 930, 932, 961, 963, 1002, 1085, 1123, 1297, 1298, 1300, 1301], "exocarta": [90, 903], "cytosig": [91, 1298], "dedic": [96, 1298], "json": [96, 122, 132, 133, 135, 251, 252, 341, 645, 915, 946, 1143, 1298], "full": [96, 122, 126, 132, 135, 178, 259, 330, 596, 597, 746, 807, 841, 909, 1085, 1143, 1267, 1268, 1296, 1297, 1300], "whitespac": [96, 122, 132, 135], "line": [96, 122, 132, 135, 171, 172, 253, 321, 322, 323, 325, 327, 328, 903, 920, 980, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "break": [96, 122, 132, 135, 452, 1277], "update_attr": [96, 122, 132, 135, 903], "store": [96, 122, 132, 135, 869, 873, 900, 903, 946, 964, 1086, 1115, 1119, 1139, 1143, 1146, 1168, 1192, 1297, 1298, 1300], "ident": [96, 122, 132, 135, 377, 842, 946, 1298], "share": [96, 122, 132, 135, 145, 147, 309, 855, 879, 901, 902, 1298, 1300], "common": [96, 122, 132, 135, 184, 903, 1180, 1200, 1296], "combine_attr": [96, 122, 132, 135, 903], "new": [96, 122, 128, 132, 135, 145, 249, 900, 903, 909, 946, 958, 989, 1086, 1093, 1094, 1124, 1132, 1155, 1298, 1300, 1301], "three": [96, 122, 132, 135, 631, 903, 909, 1260], "wai": [96, 122, 132, 133, 135, 145, 278, 381, 383, 639, 640, 641, 807, 857, 863, 866, 903, 909, 920, 979, 1001, 1096, 1099, 1123, 1146, 1155, 1298], "keyword": [96, 122, 132, 135, 903, 977, 996, 1002, 1194, 1225, 1260, 1298], "work": [97, 307, 341, 676, 903, 933, 946, 949, 979, 985, 1124, 1134, 1298, 1301], "import": [97, 145, 376, 377, 381, 746, 903, 909, 958, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1218, 1297, 1298], "main": [97, 126, 132, 135, 145, 183, 933, 979, 1096, 1255, 1278, 1283, 1284, 1286, 1287, 1289, 1297, 1298, 1301], "data_model": [98, 135, 145, 861, 892, 893], "interaction_typ": [98, 132, 133, 135, 145, 610, 861, 892, 893], "source_ent": 98, "target_ent": 98, "remove_loop": [98, 145], "intera": [100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 217, 224, 523, 529, 630, 681, 777, 903, 1114, 1298], "abstractcomplexresourc": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "mani": [118, 416, 488, 489, 490, 903, 1068, 1124, 1134, 1136, 1297, 1298, 1300, 1301], "just": [118, 145, 857, 863, 866, 903, 968, 1150, 1153, 1158, 1296], "like": [118, 135, 145, 251, 253, 643, 644, 646, 647, 648, 649, 650, 855, 867, 903, 968, 1148, 1150, 1153, 1158, 1297, 1298], "all_uniprot": [118, 365, 1102, 1298], "taxon": [121, 122, 123, 135, 145, 357, 673, 836, 903, 1110, 1112, 1124, 1180, 1298], "id_typ": [122, 123, 127, 135, 334, 339, 405, 451, 452, 807, 864, 867, 870, 873, 874, 875, 877, 903, 1110, 1112, 1114, 1116, 1117, 1120, 1123, 1124, 1125, 1126, 1133, 1134, 1135, 1136, 1150, 1153, 1158, 1160, 1161, 1163, 1165, 1166, 1192, 1298], "attributehandl": [122, 132, 135, 1149, 1150, 1151, 1156, 1157], "lncrna": [122, 145, 903, 909, 1124], "non": [122, 128, 145, 585, 903, 922, 977, 1104, 1124, 1134, 1136, 1298], "metabolit": [122, 145, 1298, 1300], "compound": [122, 145, 486, 527, 903, 1122, 1192, 1300], "nonetyp": [122, 132, 135, 145, 697, 946, 1096], "addit": [122, 127, 145, 307, 324, 326, 452, 596, 597, 903, 920, 1068, 1102, 1114, 1278, 1283, 1286, 1298, 1301], "classmethod": [122, 145, 855, 880, 881, 882, 883, 915, 920, 1068, 1085, 1124], "count_entity_typ": 122, "filter_entity_typ": [122, 855], "ones": [122, 135, 145, 596, 597, 629, 903, 984, 1104, 1139, 1168, 1298], "occurr": [123, 136, 137, 147, 168, 214, 226, 261, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 903, 1111, 1126, 1138, 1140], "alia": [123, 136, 137, 147, 168, 214, 226, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 1111, 1126, 1138, 1140, 1259, 1261, 1262], "2": [123, 136, 145, 147, 168, 214, 226, 253, 319, 368, 408, 446, 475, 488, 539, 546, 607, 610, 611, 635, 679, 709, 751, 752, 810, 811, 852, 853, 891, 893, 901, 902, 903, 920, 975, 976, 977, 979, 984, 986, 987, 998, 1043, 1054, 1057, 1060, 1111, 1126, 1138, 1140, 1143, 1260, 1272, 1275, 1277, 1281, 1296], "index": [123, 136, 137, 147, 168, 214, 226, 233, 235, 290, 309, 319, 408, 446, 475, 485, 539, 576, 604, 605, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 903, 996, 1001, 1006, 1037, 1040, 1063, 1111, 1126, 1138, 1140, 1298], "stop": [123, 136, 137, 147, 168, 214, 226, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 1071, 1075, 1111, 1126, 1138, 1140, 1298], "9223372036854775807": [123, 136, 137, 147, 168, 214, 226, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 1111, 1126, 1138, 1140], "rais": [123, 136, 137, 147, 168, 214, 226, 278, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 1044, 1111, 1126, 1138, 1140], "valueerror": [123, 136, 137, 147, 168, 214, 226, 319, 408, 446, 475, 485, 539, 607, 610, 611, 679, 810, 811, 852, 853, 854, 891, 893, 901, 902, 1111, 1126, 1138, 1140], "3": [123, 136, 145, 147, 214, 226, 253, 317, 319, 391, 408, 446, 475, 488, 539, 607, 610, 679, 810, 811, 852, 893, 901, 902, 903, 931, 962, 976, 986, 996, 1043, 1111, 1138, 1140, 1255, 1277, 1281, 1296, 1297, 1298], "input_param": [126, 127, 128], "map_by_homology_from": [126, 127, 903], "trace": [126, 127, 128, 903, 1146], "homology_only_swissprot": [126, 127, 903], "ptm_homology_strict": [126, 127, 903], "nonhuman_direct_lookup": [126, 128, 903], "inputarg": [126, 127, 128, 903], "doc": [126, 135, 145, 1208, 1230, 1296, 1300], "written": [126, 903, 1085, 1086, 1143, 1298], "assign_to_network": 126, "pa": [126, 145, 903, 920, 958, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1298], "enzym": [126, 127, 128, 132, 133, 292, 293, 475, 872, 903, 909, 923, 946, 1296, 1297, 1300], "substrat": [126, 127, 128, 292, 293, 420, 475, 524, 656, 872, 903, 909, 923, 946, 1296, 1297, 1300], "edg": [126, 135, 145, 519, 520, 900, 903, 920, 1260, 1288, 1296], "legaci": [126, 145, 825, 1296], "build_list": 126, "request": [126, 135, 181, 341, 350, 351, 353, 452, 596, 900, 903, 1068, 1069, 1098, 1123, 1208, 1218, 1230, 1298, 1301], "redund": [126, 135, 903, 1104, 1298], "organis": 126, "effici": [126, 1146, 1298], "thei": [126, 131, 135, 139, 467, 746, 854, 900, 903, 909, 920, 922, 995, 996, 1124, 1155, 1297, 1298, 1300], "agre": [126, 1298], "except": [126, 127, 135, 145, 900, 903, 1062, 1110, 1112, 1114, 1121, 1301], "isoform": [126, 127, 673, 870, 872, 874, 875, 877, 903, 1114, 1115, 1172, 1173, 1175, 1194, 1227, 1251, 1252, 1298, 1301], "id_type_enzym": [127, 128, 890, 1298], "id_type_substr": [127, 128, 890], "ptmhomologi": 127, "enzymesubstrateprocessor": 127, "unifi": [127, 903], "homologi": [127, 177, 202, 203, 903, 1296, 1301], "enzymesubstratehomologi": 127, "differ": [127, 135, 854, 867, 869, 903, 914, 968, 975, 976, 1122, 1123, 1124, 1134, 1146, 1297, 1298, 1300, 1301], "chosen": 127, "mous": [127, 172, 201, 202, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 324, 326, 389, 676, 686, 687, 733, 734, 746, 903, 1296, 1297, 1298], "rat": [127, 172, 676, 746, 903, 1296], "To": [127, 680, 681, 777, 867, 903, 1143, 1298, 1301], "get": [127, 187, 376, 378, 381, 444, 867, 903, 911, 1068, 1096, 1104, 1143, 1146, 1296, 1298, 1301], "themselv": 127, "both": [127, 135, 145, 215, 376, 377, 378, 640, 758, 821, 825, 842, 900, 903, 911, 995, 1012, 1068, 1123, 1297, 1298, 1301], "whatmor": 127, "enzymesubstrateaggreg": [127, 903, 1298], "swissprot": [127, 379, 406, 640, 814, 816, 818, 819, 820, 821, 825, 836, 866, 867, 903, 1112, 1114, 1120, 1123, 1124, 1127, 1134, 1297, 1298], "trembl": [127, 819, 820, 821, 825, 867, 903, 1123, 1124, 1127, 1134, 1297, 1298], "those": [127, 704, 900, 903, 989, 996, 1102, 1112, 1114, 1124, 1155, 1233, 1298], "homolog": [127, 903, 1110, 1112, 1114, 1120, 1301], "ptm": [127, 128, 132, 133, 315, 420, 673, 675, 745, 872, 876, 903, 951, 952, 1114, 1298, 1300, 1301], "phosphosit": [127, 128, 696, 903, 1114, 1298, 1300, 1301], "do": [127, 145, 309, 585, 796, 903, 989, 1077, 1080, 1082, 1124, 1284, 1296, 1301], "residu": [127, 280, 444, 459, 673, 676, 681, 783, 868, 872, 873, 875, 903, 1114, 1139, 1141, 1172, 1194, 1226, 1236, 1298], "offset": [127, 341, 444, 459, 460, 629, 903, 1085, 1114, 1138, 1139, 1172, 1298], "sequenc": [127, 128, 145, 444, 459, 629, 676, 681, 873, 903, 975, 1054, 1057, 1060, 1115, 1139, 1170, 1171, 1172, 1173, 1174, 1175, 1194, 1226, 1296], "see": [127, 135, 145, 171, 178, 202, 259, 321, 322, 323, 325, 327, 328, 697, 794, 806, 807, 808, 825, 855, 903, 986, 996, 1043, 1057, 1078, 1085, 1102, 1110, 1112, 1114, 1116, 1117, 1123, 1124, 1134, 1135, 1136, 1192, 1257, 1260, 1272, 1274, 1275, 1297, 1298, 1301], "further": [127, 151, 278, 459, 488, 795, 852, 903, 909, 920, 1139, 1143, 1146, 1168, 1296, 1298, 1301], "asdict": [127, 1112, 1114], "homologen": [127, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1297, 1298, 1300, 1301], "ensembl": [127, 177, 178, 180, 181, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1124, 1127, 1134, 1136, 1297, 1298], "ensembl_hc": [127, 1110, 1111, 1112, 1114, 1116, 1117, 1120, 1121, 1298], "ensembl_typ": [127, 1110, 1111, 1112, 1114, 1116, 1117, 1120, 1121, 1298], "liter": [127, 135, 145, 239, 469, 594, 755, 758, 759, 842, 903, 909, 1110, 1112, 1114, 1121, 1124], "one2on": [127, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1298], "one2mani": [127, 1110, 1112, 1114, 1116, 1117, 1120, 1121], "many2mani": [127, 1110, 1112, 1114, 1116, 1117, 1120, 1121], "ortholog": [127, 594, 648, 649, 676, 903, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1297, 1298], "lookup": [127, 128, 596, 597, 903, 1110, 1112, 1114, 1116, 1117, 1118, 1120, 1121], "high": [127, 145, 203, 436, 437, 855, 887, 903, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1298], "confid": [127, 135, 145, 203, 321, 322, 323, 325, 327, 328, 436, 437, 752, 755, 758, 759, 903, 958, 968, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1298, 1301], "orthologi": [127, 405, 406, 673, 676, 903, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1300], "relat": [127, 177, 239, 286, 335, 357, 377, 380, 382, 469, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 594, 903, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1146, 1298, 1301], "By": [127, 135, 145, 203, 488, 489, 490, 791, 903, 920, 946, 1077, 1082, 1102, 1104, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1143, 1298, 1301], "relationship": [127, 131, 132, 133, 272, 338, 381, 383, 415, 594, 608, 872, 903, 1110, 1112, 1114, 1116, 1117, 1120, 1121, 1296, 1297], "second": [127, 135, 145, 330, 452, 594, 629, 638, 639, 641, 681, 780, 900, 903, 986, 996, 1085, 1110, 1112, 1114, 1116, 1117, 1123, 1124, 1125, 1146, 1298], "assum": [127, 253, 278, 869, 900, 903, 982, 1044, 1110, 1112, 1114, 1116, 1117, 1121], "complet": [127, 320, 1110, 1112, 1114, 1116, 1117, 1123, 1184, 1297, 1298, 1300], "map": [127, 128, 133, 178, 180, 416, 417, 444, 473, 564, 629, 631, 638, 639, 640, 641, 681, 776, 778, 779, 817, 857, 863, 866, 867, 903, 1045, 1110, 1112, 1114, 1116, 1117, 1139, 1168, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1297, 1298, 1300], "get_mapp": [127, 1110, 1112, 1114, 1116, 1117, 1298], "mapping_t": [127, 1110, 1112, 1114, 1116, 1117, 1124, 1298], "two": [127, 132, 135, 145, 278, 315, 330, 409, 594, 629, 631, 842, 855, 900, 903, 920, 981, 986, 1006, 1027, 1037, 1040, 1110, 1112, 1114, 1116, 1124, 1136, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1297, 1298], "column": [127, 145, 171, 172, 191, 253, 290, 697, 762, 903, 920, 1008, 1048, 1053, 1110, 1112, 1114, 1116, 1121, 1278, 1283, 1286, 1297, 1298, 1301], "load_homologen": [127, 1112, 1114], "obtain": [127, 128, 135, 405, 406, 444, 748, 778, 779, 794, 867, 887, 900, 903, 1112, 1114], "refseq": [127, 405, 406, 635, 1112, 1114, 1124, 1134, 1136], "entrez": [127, 135, 309, 405, 406, 1112, 1114, 1123, 1124, 1134, 1136, 1298], "ptm_orthologi": [127, 1114], "phosphoryl": [127, 667, 673, 674, 1114, 1298], "site": [127, 280, 667, 673, 674, 675, 676, 677, 842, 903, 1114, 1171, 1298, 1300], "phosphositeplu": [127, 667, 673, 674, 675, 676, 903, 1114], "follow": [127, 135, 286, 287, 317, 673, 900, 903, 1011, 1022, 1068, 1114, 1297, 1298], "6": [127, 136, 147, 214, 226, 319, 446, 462, 475, 488, 673, 679, 811, 842, 852, 901, 902, 1114, 1281, 1289, 1296, 1298], "letter": [127, 135, 376, 377, 378, 384, 385, 386, 387, 673, 903, 1062, 1114, 1146, 1194, 1236, 1298], "code": [127, 178, 376, 377, 378, 384, 385, 386, 387, 673, 808, 903, 909, 922, 1085, 1114, 1124, 1134, 1136, 1272, 1274, 1275, 1298, 1300], "modif": [127, 184, 673, 868, 872, 1114, 1155, 1171, 1298], "set_inputarg": [127, 128], "x": [127, 145, 903, 1057, 1114, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1277, 1278, 1284, 1287, 1289], "return_str": [127, 1114], "anyth": [127, 903, 1020, 1039, 1071, 1074, 1104, 1114, 1124, 1260, 1272, 1275, 1298], "amino": [127, 629, 780, 1114], "acid": [127, 629, 780, 1114, 1146], "offest": [127, 1114], "p00533_s231": [127, 1114], "domainmotif": [127, 523, 529, 903, 1114, 1298], "typ": [127, 873, 875, 903, 1114, 1298], "translate_df": [127, 1110, 1112, 1114], "col": [127, 253, 1110, 1112, 1114, 1121, 1255, 1284, 1298], "It": [127, 133, 135, 145, 869, 903, 909, 923, 972, 982, 1068, 1069, 1095, 1096, 1110, 1112, 1114, 1121, 1123, 1124, 1125, 1134, 1135, 1257, 1297, 1298, 1301], "last": [127, 145, 893, 989, 1022, 1041, 1110, 1112, 1114, 1121, 1124, 1134, 1146, 1298], "bewar": [127, 1110, 1112, 1114, 1121], "layout": [127, 903, 1110, 1112, 1114, 1121, 1256, 1260, 1272, 1274, 1275, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "could": [127, 681, 903, 1110, 1112, 1114, 1121, 1124, 1136, 1298], "omit": [127, 145, 903, 1110, 1112, 1114, 1121, 1146], "translate_sit": [127, 1114], "re": [127, 145, 782, 903, 1025, 1114], "source_taxon": [127, 1114], "allow_mixed_organ": 128, "organisms_support": [128, 890], "sequencecontain": [128, 1114, 1298], "than": [128, 145, 174, 175, 903, 920, 979, 1022, 1123, 1124, 1125, 1297, 1298, 1301], "ambigu": [128, 135, 903, 1124, 1135, 1298], "mismatch": 128, "mapper": [128, 903, 1128, 1132, 1136, 1298], "speci": [128, 405, 406, 676, 794, 795, 903, 1298, 1300], "forward": [128, 903, 920], "support": [131, 132, 133, 135, 145, 201, 204, 233, 234, 235, 324, 326, 376, 381, 389, 459, 686, 687, 869, 900, 903, 1297, 1298, 1300], "hold": [131, 635, 903, 1143], "avail": [131, 170, 171, 172, 178, 179, 182, 184, 194, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 278, 309, 320, 321, 327, 334, 339, 596, 597, 636, 668, 670, 671, 672, 733, 734, 746, 825, 842, 852, 867, 900, 903, 909, 979, 1085, 1096, 1124, 1134, 1136, 1143, 1192, 1297, 1298, 1301], "annot": [132, 133, 135, 139, 169, 193, 197, 201, 215, 216, 221, 231, 233, 264, 269, 289, 302, 331, 332, 350, 368, 373, 375, 376, 377, 378, 381, 414, 466, 467, 471, 512, 710, 733, 748, 774, 852, 854, 855, 869, 903, 909, 1102, 1103, 1107, 1108, 1143, 1296, 1297, 1300], "etc": [132, 133, 145, 903, 1297, 1298, 1300, 1301], "part": [132, 194, 203, 239, 321, 327, 451, 759, 903, 946, 954, 1023, 1041, 1095, 1124, 1277, 1298, 1300, 1301], "resourceattribut": [132, 890, 892], "deriv": [132, 1264, 1274, 1298, 1301], "prefer": [132, 135, 376, 377, 378, 381, 700, 903, 911, 1124, 1133, 1134, 1297, 1298], "has_interaction_typ": [132, 133], "depend": [132, 135, 180, 900, 903, 909, 1016, 1033, 1034, 1298, 1300], "comprehens": [133, 145, 321, 322, 323, 325, 327, 328, 903, 1143, 1297, 1298, 1300, 1301], "certain": [133, 135, 145, 594, 903, 1068, 1069, 1096, 1143, 1296], "ha": [133, 135, 145, 202, 203, 307, 376, 381, 527, 629, 869, 900, 903, 909, 946, 958, 1027, 1068, 1104, 1123, 1124, 1125, 1128, 1143, 1146, 1297, 1298, 1300, 1301], "item": [133, 145, 341, 903, 972, 996, 1043, 1088, 1298], "dict_item": 133, "networkresourcekei": 133, "dict_kei": [133, 1298], "serialize_attr": 133, "top_key_prefix": 133, "properti": [133, 145, 869, 893, 903, 1123, 1125, 1194, 1203, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1284, 1298], "simple_dict": 133, "we": [134, 135, 444, 755, 758, 900, 903, 920, 1112, 1114, 1124, 1155, 1260, 1272, 1275, 1297, 1298, 1299, 1301], "rich": [134, 1297, 1298], "api": [134, 309, 370, 372, 377, 380, 382, 384, 386, 825, 867, 903, 1143, 1297, 1300, 1301], "larg": [134, 139, 439, 440, 488, 489, 490, 730, 903, 952, 1068, 1069, 1143, 1146, 1297, 1298, 1300, 1301], "reli": [134, 903, 1298], "b": [135, 145, 321, 322, 323, 325, 327, 328, 762, 900, 903, 920, 930, 958, 982, 986, 989, 998, 1006, 1037, 1038, 1040, 1043, 1045, 1054, 1057, 1060, 1085, 1123, 1155, 1298], "id_type_a": [135, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 1298], "id_type_b": [135, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 1298], "entity_type_a": [135, 861], "entity_type_b": [135, 861], "taxon_a": [135, 317, 861], "taxon_b": [135, 317, 861], "regul": [135, 145, 155, 764, 900, 903, 1301], "post": [135, 145, 868, 1068, 1171], "evid": [135, 145, 309, 321, 322, 323, 325, 327, 328, 607, 635, 697, 755, 758, 872, 874, 875, 903, 1298, 1300], "detail": [135, 145, 320, 324, 326, 330, 341, 468, 635, 755, 806, 825, 842, 855, 868, 903, 996, 1124, 1134, 1135, 1297, 1298], "henc": [135, 411, 909, 1123, 1298, 1300, 1301], "becom": 135, "add_evid": 135, "direction": [135, 145, 900, 903, 920], "self": [135, 900, 903, 1002, 1039, 1143, 1298], "dir": [135, 900, 903, 1298], "networkresourc": [135, 145, 968, 1298], "separ": [135, 253, 488, 859, 861, 864, 893, 903, 920, 968, 1023, 1026, 1041, 1053, 1124, 1136, 1155, 1298, 1300], "Or": [135, 145, 900, 989, 1006, 1011, 1027, 1037, 1040, 1057, 1298, 1301], "causal": [135, 1296, 1301], "stimul": [135, 757, 903, 1298], "stimulatori": [135, 903, 1298], "inhibit": [135, 757, 900, 903, 1298], "inhibitori": [135, 900, 903, 1298], "unknown": [135, 307, 861, 864, 875, 903, 920, 1298], "neutral": 135, "been": [135, 145, 307, 376, 378, 381, 869, 903, 946, 1072, 1123, 1124, 1125, 1146, 1297, 1298, 1300, 1301], "add_sign": 135, "sign": [135, 139, 145, 861, 900, 903, 920, 956], "resource_nam": [135, 145, 852], "ppi": [135, 211, 451, 452, 892, 903, 909, 1297, 1298], "posit": [135, 145, 639, 900, 903, 1088, 1139, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "positive_sourc": [135, 900], "neg": [135, 145, 317, 585, 900, 903, 1020, 1298], "negative_sourc": [135, 900], "accordingli": [135, 900, 1284], "node": [135, 145, 191, 900, 903, 920, 1102, 1104, 1105, 1108, 1260], "specifi": [135, 145, 795, 900, 903, 989, 1000, 1002, 1027, 1265, 1272, 1274, 1275], "wa": [135, 531, 842, 900, 903, 968, 982, 1297, 1298], "complex_identifiers_by_data_model": [135, 145], "involv": [135, 280], "mai": [135, 145, 903, 1085, 1146, 1298], "sound": 135, "so": [135, 145, 444, 488, 489, 490, 796, 903, 920, 984, 987, 1071, 1077, 1079, 1082, 1124, 1146, 1157, 1278, 1279, 1280, 1283, 1286, 1287, 1289, 1297, 1298], "small_molecul": [135, 145, 1124, 1298], "return_typ": 135, "altern": [135, 145, 452, 488, 996, 1096, 1099, 1103, 1124, 1134, 1136, 1297, 1298, 1301], "complex_identifiers_by_interaction_typ": [135, 145], "complex_identifiers_by_interaction_type_and_data_model": [135, 145], "complex_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "complex_identifiers_by_refer": [135, 145], "complex_identifiers_by_resourc": [135, 145], "complex_labels_by_data_model": [135, 145], "complex_labels_by_interaction_typ": [135, 145], "complex_labels_by_interaction_type_and_data_model": [135, 145], "complex_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "complex_labels_by_refer": [135, 145], "complex_labels_by_resourc": [135, 145], "complexes_by_data_model": [135, 145], "complexes_by_interaction_typ": [135, 145], "complexes_by_interaction_type_and_data_model": [135, 145], "complexes_by_interaction_type_and_data_model_and_resourc": [135, 145], "complexes_by_refer": [135, 145], "complexes_by_resourc": [135, 145], "only_interaction_typ": 135, "only_primari": 135, "by_refer": 135, "by_reference_resource_pair": 135, "along": [135, 900, 903, 954, 1298], "major": [135, 676, 900, 1297, 1300, 1301], "structur": [135, 337, 459, 469, 629, 631, 681, 778, 779, 868, 900, 903, 1096, 1139, 1146, 1192, 1272, 1274, 1275, 1296, 1297, 1300], "un": [135, 900], "consensus_edg": [135, 900, 1298], "count_complex_identifi": [135, 145], "count_complex_label": [135, 145], "count_complex": [135, 145], "count_data_model": [135, 145], "model": [135, 145, 178, 180, 182, 183, 184, 187, 1120], "count_degrees_direct": [135, 145], "concern": 135, "incom": [135, 145], "activ": [135, 145, 239, 280, 333, 335, 757, 900, 903, 923, 950, 1155, 1301], "around": [135, 145, 330, 639, 640, 641, 1027, 1068, 1088, 1125, 1296, 1297], "mode": [135, 145, 873, 900, 903, 1298], "IN": [135, 145, 903], "out": [135, 145, 903, 979, 1008, 1049, 1050, 1053, 1143, 1277, 1297, 1298], "outgo": [135, 145], "count_degrees_directed_in": [135, 145], "count_degrees_directed_out": [135, 145], "count_degrees_neg": [135, 145], "count_degrees_negative_in": [135, 145], "count_degrees_negative_out": [135, 145], "count_degrees_non_direct": [135, 145], "count_degrees_posit": [135, 145], "count_degrees_positive_in": [135, 145], "count_degrees_positive_out": [135, 145], "count_degrees_sign": [135, 145], "count_degrees_signed_in": [135, 145], "count_degrees_signed_out": [135, 145], "count_degrees_undirect": [135, 145], "count_ent": [135, 145], "count_identifi": [135, 145], "count_interaction_typ": [135, 145], "count_interact": [135, 145], "nonttyp": [135, 145], "unless": [135, 145, 903, 911, 1298], "count_interactions_undirect": [135, 145], "activity_flow": [135, 1298], "secondari": [135, 817, 842, 893, 1124, 1297, 1298], "source_entity_typ": 135, "target_entity_typ": 135, "count_interactions_0": [135, 145], "being": [135, 145, 184, 752, 903, 989, 1272, 1274, 1275], "awar": [135, 903, 1298], "count_interactions_direct": [135, 145], "get_interact": [135, 145], "count_interactions_mutu": [135, 145], "explicit": [135, 278, 903, 1124, 1136], "count_interactions_neg": [135, 145], "count_interactions_non_direct": [135, 145], "count_interactions_posit": [135, 145], "count_interactions_sign": [135, 145], "count_label": [135, 145], "count_lncrna_identifi": [135, 145], "count_lncrna_label": [135, 145], "count_lncrna": [135, 145], "count_mirna_identifi": [135, 145], "count_mirna_label": [135, 145], "count_mirna": [135, 145], "count_protein_identifi": [135, 145], "count_protein_label": [135, 145], "count_protein": [135, 145], "count_refer": [135, 145], "count_resource_nam": [135, 145], "count_resource_names_via": [135, 145], "count_resourc": [135, 145], "count_resources_via": [135, 145], "count_small_molecule_identifi": [135, 145], "count_small_molecule_label": [135, 145], "count_small_molecul": [135, 145], "data_models_by_data_model": [135, 145], "data_models_by_interaction_typ": [135, 145], "data_models_by_interaction_type_and_data_model": [135, 145], "data_models_by_interaction_type_and_data_model_and_resourc": [135, 145], "data_models_by_refer": [135, 145], "data_models_by_resourc": [135, 145], "degrees_directed_by_data_model": [135, 145], "degrees_directed_by_interaction_typ": [135, 145], "degrees_directed_by_interaction_type_and_data_model": [135, 145], "degrees_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_by_refer": [135, 145], "degrees_directed_by_resourc": [135, 145], "degrees_directed_in_by_data_model": [135, 145], "degrees_directed_in_by_interaction_typ": [135, 145], "degrees_directed_in_by_interaction_type_and_data_model": [135, 145], "degrees_directed_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_in_by_refer": [135, 145], "degrees_directed_in_by_resourc": [135, 145], "degrees_directed_out_by_data_model": [135, 145], "degrees_directed_out_by_interaction_typ": [135, 145], "degrees_directed_out_by_interaction_type_and_data_model": [135, 145], "degrees_directed_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_out_by_refer": [135, 145], "degrees_directed_out_by_resourc": [135, 145], "degrees_negative_by_data_model": [135, 145], "degrees_negative_by_interaction_typ": [135, 145], "degrees_negative_by_interaction_type_and_data_model": [135, 145], "degrees_negative_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_by_refer": [135, 145], "degrees_negative_by_resourc": [135, 145], "degrees_negative_in_by_data_model": [135, 145], "degrees_negative_in_by_interaction_typ": [135, 145], "degrees_negative_in_by_interaction_type_and_data_model": [135, 145], "degrees_negative_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_in_by_refer": [135, 145], "degrees_negative_in_by_resourc": [135, 145], "degrees_negative_out_by_data_model": [135, 145], "degrees_negative_out_by_interaction_typ": [135, 145], "degrees_negative_out_by_interaction_type_and_data_model": [135, 145], "degrees_negative_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_out_by_refer": [135, 145], "degrees_negative_out_by_resourc": [135, 145], "degrees_non_directed_by_data_model": [135, 145], "degrees_non_directed_by_interaction_typ": [135, 145], "degrees_non_directed_by_interaction_type_and_data_model": [135, 145], "degrees_non_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_non_directed_by_refer": [135, 145], "degrees_non_directed_by_resourc": [135, 145], "degrees_positive_by_data_model": [135, 145], "degrees_positive_by_interaction_typ": [135, 145], "degrees_positive_by_interaction_type_and_data_model": [135, 145], "degrees_positive_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_by_refer": [135, 145], "degrees_positive_by_resourc": [135, 145], "degrees_positive_in_by_data_model": [135, 145], "degrees_positive_in_by_interaction_typ": [135, 145], "degrees_positive_in_by_interaction_type_and_data_model": [135, 145], "degrees_positive_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_in_by_refer": [135, 145], "degrees_positive_in_by_resourc": [135, 145], "degrees_positive_out_by_data_model": [135, 145], "degrees_positive_out_by_interaction_typ": [135, 145], "degrees_positive_out_by_interaction_type_and_data_model": [135, 145], "degrees_positive_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_out_by_refer": [135, 145], "degrees_positive_out_by_resourc": [135, 145], "degrees_signed_by_data_model": [135, 145], "degrees_signed_by_interaction_typ": [135, 145], "degrees_signed_by_interaction_type_and_data_model": [135, 145], "degrees_signed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_by_refer": [135, 145], "degrees_signed_by_resourc": [135, 145], "degrees_signed_in_by_data_model": [135, 145], "degrees_signed_in_by_interaction_typ": [135, 145], "degrees_signed_in_by_interaction_type_and_data_model": [135, 145], "degrees_signed_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_in_by_refer": [135, 145], "degrees_signed_in_by_resourc": [135, 145], "degrees_signed_out_by_data_model": [135, 145], "degrees_signed_out_by_interaction_typ": [135, 145], "degrees_signed_out_by_interaction_type_and_data_model": [135, 145], "degrees_signed_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_out_by_refer": [135, 145], "degrees_signed_out_by_resourc": [135, 145], "degrees_undirected_by_data_model": [135, 145], "degrees_undirected_by_interaction_typ": [135, 145], "degrees_undirected_by_interaction_type_and_data_model": [135, 145], "degrees_undirected_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_undirected_by_refer": [135, 145], "degrees_undirected_by_resourc": [135, 145], "direction_kei": 135, "dorothea_level": [135, 145, 1301], "c": [135, 321, 327, 368, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 733, 734, 903, 958, 982, 986, 998, 1038, 1043, 1057, 1085, 1105, 1108, 1155, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "d": [135, 321, 327, 903, 958, 989, 998, 1043, 1044, 1057, 1085, 1155, 1298], "dorothea": [135, 145, 903, 968, 1300, 1301], "due": [135, 1124, 1297, 1298], "natur": [135, 572, 1143], "symbol": [135, 145, 309, 362, 363, 364, 635, 676, 709, 815, 857, 863, 866, 903, 920, 1124, 1130, 1131, 1133, 1134, 1136, 1194, 1236, 1297, 1298, 1301], "take": [135, 180, 643, 644, 646, 647, 648, 650, 903, 920, 1023, 1041, 1054, 1060, 1123, 1124, 1134, 1143, 1260, 1297, 1298], "highest": [135, 376, 381, 752, 1104, 1301], "drop": [135, 903, 1085, 1298], "rest": [135, 278, 341, 370, 372, 377, 380, 382, 384, 386, 1298, 1301], "five": [135, 416, 903, 1124, 1134, 1136, 1297], "entities_by_data_model": [135, 145], "entities_by_interaction_typ": [135, 145], "entities_by_interaction_type_and_data_model": [135, 145], "entities_by_interaction_type_and_data_model_and_resourc": [135, 145], "entities_by_refer": [135, 145], "entities_by_resourc": [135, 145, 903], "evaluate_evid": 135, "this_direct": 135, "evalu": [135, 903, 1102], "generate_df_record": 135, "by_sourc": [135, 145, 903, 909, 1155], "with_refer": [135, 145, 903], "becaus": [135, 224, 231, 643, 644, 646, 647, 648, 649, 650, 903, 951, 954, 1155, 1157, 1298, 1301], "need": [135, 239, 440, 444, 459, 796, 903, 1069, 1124, 1134, 1143, 1146, 1296, 1298, 1301], "group": [135, 145, 272, 309, 334, 855, 903, 1013, 1017, 1030, 1033, 1058, 1143, 1200, 1256, 1284, 1297, 1298, 1300], "most": [135, 184, 194, 376, 381, 746, 828, 903, 920, 956, 1074, 1125, 1218, 1297, 1298], "applic": [135, 900, 903, 1297, 1298], "refrenc": [135, 903], "still": [135, 903, 1124, 1134, 1136, 1297, 1298], "rare": [135, 903, 1124, 1134, 1136], "increas": [135, 139, 903, 1298], "size": [135, 139, 341, 452, 746, 903, 1022, 1069, 1143, 1146, 1256, 1287, 1288, 1298], "significantli": [135, 903], "get_attr": [135, 903], "extract": [135, 183, 211, 251, 296, 341, 420, 421, 489, 630, 727, 730, 903, 1001, 1023, 1041, 1068, 1069, 1143, 1146, 1298], "get_complex_identifi": [135, 145], "get_complex_label": [135, 145], "get_complex": [135, 145], "get_data_model": [135, 145], "get_degre": 135, "get_degrees_direct": [135, 145], "get_degrees_directed_in": [135, 145], "get_degrees_directed_out": [135, 145], "get_degrees_neg": [135, 145], "get_degrees_negative_in": [135, 145], "get_degrees_negative_out": [135, 145], "get_degrees_non_direct": [135, 145], "get_degrees_posit": [135, 145], "get_degrees_positive_in": [135, 145], "get_degrees_positive_out": [135, 145], "get_degrees_sign": [135, 145], "get_degrees_signed_in": [135, 145], "get_degrees_signed_out": [135, 145], "get_degrees_undirect": [135, 145], "get_direct": [135, 900, 903, 1298], "state": [135, 145, 197, 900, 903, 1146, 1298], "src": [135, 900, 903, 1300], "tgt": [135, 900], "get_ent": [135, 145], "get_identifi": [135, 145], "get_interaction_typ": [135, 145, 1298], "get_interactions_0": [135, 145], "get_interactions_direct": [135, 145], "get_interactions_mutu": [135, 145], "get_interactions_neg": [135, 145], "get_interactions_non_direct": [135, 145], "get_interactions_non_directed_0": [135, 145], "sort": [135, 900, 903, 1278, 1284, 1298, 1300], "insid": [135, 1124], "get_interactions_posit": [135, 145, 1298], "get_interactions_sign": [135, 145], "get_interactions_undirect": [135, 145], "matter": [135, 145, 968, 1124, 1297, 1298], "get_interactions_undirected_0": [135, 145], "get_label": [135, 145], "get_lncrna_identifi": [135, 145], "get_lncrna_label": [135, 145], "get_lncrna": [135, 145], "get_mirna_identifi": [135, 145], "get_mirna_label": [135, 145], "get_mirna": [135, 145], "get_protein_identifi": [135, 145], "get_protein_label": [135, 145], "get_protein": [135, 145, 1143], "get_refer": [135, 145, 1298], "get_resource_nam": [135, 145, 1298], "get_resource_names_via": [135, 145], "get_resources_via": [135, 145], "get_sign": [135, 900, 1298], "diret": [135, 900], "th": [135, 900], "denot": [135, 900, 903], "get_small_molecule_identifi": [135, 145], "get_small_molecule_label": [135, 145], "get_small_molecul": [135, 145], "has_sign": [135, 900], "identifiers_by_data_model": [135, 145], "identifiers_by_interaction_typ": [135, 145], "identifiers_by_interaction_type_and_data_model": [135, 145], "identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "identifiers_by_refer": [135, 145], "identifiers_by_resourc": [135, 145], "interaction_types_by_data_model": [135, 145], "interaction_types_by_interaction_typ": [135, 145], "interaction_types_by_interaction_type_and_data_model": [135, 145], "interaction_types_by_interaction_type_and_data_model_and_resourc": [135, 145], "interaction_types_by_refer": [135, 145], "interaction_types_by_resourc": [135, 145], "interactions_0_by_data_model": [135, 145], "interactions_0_by_interaction_typ": [135, 145], "interactions_0_by_interaction_type_and_data_model": [135, 145], "interactions_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_0_by_refer": [135, 145], "interactions_0_by_resourc": [135, 145], "interactions_by_data_model": [135, 145], "interactions_by_interaction_typ": [135, 145], "interactions_by_interaction_type_and_data_model": [135, 145], "interactions_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_by_refer": [135, 145], "interactions_by_resourc": [135, 145], "interactions_directed_by_data_model": [135, 145], "interactions_directed_by_interaction_typ": [135, 145], "interactions_directed_by_interaction_type_and_data_model": [135, 145], "interactions_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_directed_by_refer": [135, 145], "interactions_directed_by_resourc": [135, 145, 903], "interactions_mutual_by_data_model": [135, 145], "interactions_mutual_by_interaction_typ": [135, 145], "interactions_mutual_by_interaction_type_and_data_model": [135, 145], "interactions_mutual_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_mutual_by_refer": [135, 145], "interactions_mutual_by_resourc": [135, 145, 903], "interactions_negative_by_data_model": [135, 145], "interactions_negative_by_interaction_typ": [135, 145], "interactions_negative_by_interaction_type_and_data_model": [135, 145], "interactions_negative_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_negative_by_refer": [135, 145], "interactions_negative_by_resourc": [135, 145], "interactions_non_directed_0_by_data_model": [135, 145], "interactions_non_directed_0_by_interaction_typ": [135, 145], "interactions_non_directed_0_by_interaction_type_and_data_model": [135, 145], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_non_directed_0_by_refer": [135, 145], "interactions_non_directed_0_by_resourc": [135, 145], "interactions_non_directed_by_data_model": [135, 145], "interactions_non_directed_by_interaction_typ": [135, 145], "interactions_non_directed_by_interaction_type_and_data_model": [135, 145], "interactions_non_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_non_directed_by_refer": [135, 145], "interactions_non_directed_by_resourc": [135, 145], "interactions_positive_by_data_model": [135, 145], "interactions_positive_by_interaction_typ": [135, 145], "interactions_positive_by_interaction_type_and_data_model": [135, 145], "interactions_positive_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_positive_by_refer": [135, 145], "interactions_positive_by_resourc": [135, 145], "interactions_signed_by_data_model": [135, 145], "interactions_signed_by_interaction_typ": [135, 145], "interactions_signed_by_interaction_type_and_data_model": [135, 145], "interactions_signed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_signed_by_refer": [135, 145], "interactions_signed_by_resourc": [135, 145, 903], "interactions_undirected_0_by_data_model": [135, 145], "interactions_undirected_0_by_interaction_typ": [135, 145], "interactions_undirected_0_by_interaction_type_and_data_model": [135, 145], "interactions_undirected_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_undirected_0_by_refer": [135, 145], "interactions_undirected_0_by_resourc": [135, 145], "interactions_undirected_by_data_model": [135, 145], "interactions_undirected_by_interaction_typ": [135, 145], "interactions_undirected_by_interaction_type_and_data_model": [135, 145], "interactions_undirected_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_undirected_by_refer": [135, 145], "interactions_undirected_by_resourc": [135, 145, 903], "is_direct": [135, 861, 900, 1298], "is_directed_by_resourc": [135, 900], "is_inhibit": [135, 900, 1298], "is_loop": 135, "loop": [135, 145, 903, 1264, 1265, 1266, 1267, 1268, 1269], "endpoint": [135, 145], "is_mutu": [135, 900], "is_mutual_by_resourc": [135, 900], "is_stimul": [135, 900], "activatori": [135, 900], "iter_evid": 135, "iter_match_evid": 135, "labels_by_data_model": [135, 145], "labels_by_interaction_typ": [135, 145], "labels_by_interaction_type_and_data_model": [135, 145], "labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "labels_by_refer": [135, 145], "labels_by_resourc": [135, 145], "lncrna_identifiers_by_data_model": [135, 145], "lncrna_identifiers_by_interaction_typ": [135, 145], "lncrna_identifiers_by_interaction_type_and_data_model": [135, 145], "lncrna_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrna_identifiers_by_refer": [135, 145], "lncrna_identifiers_by_resourc": [135, 145], "lncrna_labels_by_data_model": [135, 145], "lncrna_labels_by_interaction_typ": [135, 145], "lncrna_labels_by_interaction_type_and_data_model": [135, 145], "lncrna_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrna_labels_by_refer": [135, 145], "lncrna_labels_by_resourc": [135, 145], "lncrnas_by_data_model": [135, 145], "lncrnas_by_interaction_typ": [135, 145], "lncrnas_by_interaction_type_and_data_model": [135, 145], "lncrnas_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrnas_by_refer": [135, 145], "lncrnas_by_resourc": [135, 145], "majority_dir": [135, 900], "equal": [135, 900, 995, 996, 1284], "majority_sign": [135, 900], "straight": [135, 900, 903, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "revers": [135, 900, 903, 1124, 1298], "mean": [135, 145, 180, 459, 488, 746, 873, 890, 900, 903, 972, 1124, 1125, 1133, 1135, 1143, 1277, 1298], "anoth": [135, 900, 903, 1102, 1120, 1192, 1297, 1298, 1301], "mirna_identifiers_by_data_model": [135, 145], "mirna_identifiers_by_interaction_typ": [135, 145], "mirna_identifiers_by_interaction_type_and_data_model": [135, 145], "mirna_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirna_identifiers_by_refer": [135, 145], "mirna_identifiers_by_resourc": [135, 145], "mirna_labels_by_data_model": [135, 145], "mirna_labels_by_interaction_typ": [135, 145], "mirna_labels_by_interaction_type_and_data_model": [135, 145], "mirna_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirna_labels_by_refer": [135, 145], "mirna_labels_by_resourc": [135, 145], "mirnas_by_data_model": [135, 145], "mirnas_by_interaction_typ": [135, 145], "mirnas_by_interaction_type_and_data_model": [135, 145], "mirnas_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirnas_by_refer": [135, 145], "mirnas_by_resourc": [135, 145], "negative_a_b": 135, "a_b": 135, "negative_b_a": 135, "b_a": 135, "negative_resources_a_b": 135, "negative_resources_b_a": 135, "negative_revers": [135, 900], "negative_straight": [135, 900], "positive_a_b": 135, "positive_b_a": 135, "positive_resources_a_b": 135, "positive_resources_b_a": 135, "positive_revers": [135, 900], "positive_straight": [135, 900], "protein_identifiers_by_data_model": [135, 145], "protein_identifiers_by_interaction_typ": [135, 145], "protein_identifiers_by_interaction_type_and_data_model": [135, 145], "protein_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "protein_identifiers_by_refer": [135, 145], "protein_identifiers_by_resourc": [135, 145], "protein_labels_by_data_model": [135, 145], "protein_labels_by_interaction_typ": [135, 145], "protein_labels_by_interaction_type_and_data_model": [135, 145], "protein_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "protein_labels_by_refer": [135, 145], "protein_labels_by_resourc": [135, 145], "proteins_by_data_model": [135, 145], "proteins_by_interaction_typ": [135, 145], "proteins_by_interaction_type_and_data_model": [135, 145], "proteins_by_interaction_type_and_data_model_and_resourc": [135, 145], "proteins_by_refer": [135, 145], "proteins_by_resourc": [135, 145], "references_by_data_model": [135, 145], "references_by_interaction_typ": [135, 145], "references_by_interaction_type_and_data_model": [135, 145], "references_by_interaction_type_and_data_model_and_resourc": [135, 145], "references_by_refer": [135, 145], "references_by_resourc": [135, 145, 903, 1298], "resource_names_by_data_model": [135, 145], "resource_names_by_interaction_typ": [135, 145], "resource_names_by_interaction_type_and_data_model": [135, 145], "resource_names_by_interaction_type_and_data_model_and_resourc": [135, 145], "resource_names_by_refer": [135, 145], "resource_names_by_resourc": [135, 145], "resource_names_via_by_data_model": [135, 145], "resource_names_via_by_interaction_typ": [135, 145], "resource_names_via_by_interaction_type_and_data_model": [135, 145], "resource_names_via_by_interaction_type_and_data_model_and_resourc": [135, 145], "resource_names_via_by_refer": [135, 145], "resource_names_via_by_resourc": [135, 145], "resources_a_b": 135, "resources_b_a": 135, "resources_by_data_model": [135, 145], "resources_by_interaction_typ": [135, 145], "resources_by_interaction_type_and_data_model": [135, 145], "resources_by_interaction_type_and_data_model_and_resourc": [135, 145], "resources_by_refer": [135, 145], "resources_by_resourc": [135, 145], "resources_undirect": 135, "resources_via_by_data_model": [135, 145], "resources_via_by_interaction_typ": [135, 145], "resources_via_by_interaction_type_and_data_model": [135, 145], "resources_via_by_interaction_type_and_data_model_and_resourc": [135, 145], "resources_via_by_refer": [135, 145], "resources_via_by_resourc": [135, 145], "small_molecule_identifiers_by_data_model": [135, 145], "small_molecule_identifiers_by_interaction_typ": [135, 145], "small_molecule_identifiers_by_interaction_type_and_data_model": [135, 145], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecule_identifiers_by_refer": [135, 145], "small_molecule_identifiers_by_resourc": [135, 145], "small_molecule_labels_by_data_model": [135, 145], "small_molecule_labels_by_interaction_typ": [135, 145], "small_molecule_labels_by_interaction_type_and_data_model": [135, 145], "small_molecule_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecule_labels_by_refer": [135, 145], "small_molecule_labels_by_resourc": [135, 145], "small_molecules_by_data_model": [135, 145], "small_molecules_by_interaction_typ": [135, 145], "small_molecules_by_interaction_type_and_data_model": [135, 145], "small_molecules_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecules_by_refer": [135, 145], "small_molecules_by_resourc": [135, 145], "bidirect": [135, 900], "sources_revers": [135, 900], "sources_straight": [135, 900], "sources_undirect": [135, 900], "src_by_resourc": 135, "found": [135, 139, 145, 900, 903, 1124, 1134, 1136, 1139, 1298], "invalid": [135, 900, 1298], "tgt_by_resourc": 135, "new_attr": 135, "abl": [135, 145, 169, 1068, 1297, 1298], "chang": [135, 307, 855, 1045, 1062, 1071, 1074, 1088, 1124, 1297, 1298], "1956": [135, 1298], "copi": [135, 231, 855, 890, 900, 903, 978, 982, 989, 1002, 1057, 1297, 1298], "unset_dir": [135, 900], "remov": [135, 139, 145, 253, 304, 367, 368, 379, 855, 900, 903, 909, 946, 978, 982, 1002, 1026, 1057, 1104, 1123, 1124, 1125, 1139, 1146, 1168, 1170, 1171, 1298, 1300], "unset_direct": [135, 900], "unset_interaction_typ": 135, "unset_sign": [135, 900], "positive_attribut": [135, 900], "must": [135, 145, 239, 900, 903, 909, 1011, 1203, 1260, 1298, 1301], "which_direct": [135, 900], "which_dir": [135, 900], "which_sign": [135, 900], "id_a": [136, 145, 610, 873, 900, 903, 1298], "id_b": [136, 145, 610, 873, 900, 903, 1298], "type_a": [136, 1298], "type_b": [136, 1298], "dmodel": [136, 1298], "4": [136, 145, 147, 203, 214, 226, 319, 408, 446, 475, 607, 679, 752, 811, 852, 893, 901, 902, 903, 975, 976, 1140, 1255, 1260, 1272, 1275, 1284, 1287, 1296, 1298, 1301], "7": [136, 147, 191, 262, 317, 319, 475, 679, 811, 852, 901, 902, 1287, 1296, 1297, 1298, 1301], "5": [136, 147, 214, 226, 319, 397, 398, 446, 464, 475, 679, 811, 852, 901, 902, 903, 976, 1000, 1057, 1091, 1124, 1134, 1146, 1255, 1281, 1283, 1287, 1296, 1297, 1298], "9": [136, 147, 152, 319, 841, 852, 901, 902, 1277, 1281, 1285, 1289, 1296, 1297, 1298], "8": [136, 147, 319, 464, 475, 852, 901, 902, 903, 931, 962, 1068, 1069, 1286, 1287, 1296, 1297, 1298], "entity_a": [137, 145], "entity_b": [137, 145], "cellphonedb_categori": 139, "baccin_categori": 139, "hpmr_categori": 139, "surfaceome_categori": 139, "gpcrdb_categori": 139, "icellnet_categori": 139, "customannot": [139, 852, 854, 855, 1298], "transmitter_receiv": 139, "only_gener": 139, "only_composit": 139, "only_funct": 139, "exclude_intracellular": 139, "On": 139, "transmitt": [139, 852, 855, 1298, 1301], "receiv": [139, 852, 855, 1298, 1301], "allow": [139, 145, 239, 903, 984, 1298], "resource_specif": [139, 852, 855, 1298, 1301], "locat": [139, 278, 710, 855, 903, 1125, 1297, 1298, 1300, 1301], "often": [139, 488, 489, 490, 920, 1125, 1297, 1298], "relev": [139, 145, 182, 183, 1298], "intracellular": 139, "o14976": 143, "o15231": 143, "o43294": 143, "o60711": 143, "o60759": 143, "p07332": 143, "p29965": 143, "p35221": 143, "p35222": 143, "p50552": 143, "p56945": 143, "q02297": 143, "q03001": 143, "q13153": 143, "q13895": 143, "q14451": 143, "q14511": 143, "q14943": 143, "q14952": 143, "q14953": 143, "q155q3": 143, "q15654": 143, "q5jra6": 143, "q5t4b2": 143, "q7l5y9": 143, "q7z4i7": 143, "q86tp1": 143, "q8ivt2": 143, "q8izw8": 143, "q8n264": 143, "q8n743": 143, "q8nhk3": 143, "q8wx93": 143, "q92502": 143, "q96ac1": 143, "q96if1": 143, "q96qb1": 143, "q99689": 143, "q9h792": 143, "q9hbi0": 143, "q9hbi1": 143, "q9nq75": 143, "q9ubt7": 143, "q9ugi8": 143, "q9ugp4": 143, "q9ui47": 143, "q9uqb3": 143, "cell_surface_enzym": 143, "o00391": 143, "p04843": 143, "p08842": 143, "p09958": 143, "p11117": 143, "p19021": 143, "p40126": 143, "p52961": 143, "q13444": 143, "q15125": 143, "q8tcj2": 143, "q8wud6": 143, "q96jj7": 143, "q9nph5": 143, "q9uk23": 143, "q9ukf2": 143, "cell_surface_ligand": 143, "p0dpd6": 143, "ligand": [143, 201, 202, 203, 204, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 229, 230, 233, 235, 264, 265, 351, 394, 409, 446, 514, 647, 649, 709, 733, 735, 903, 1301], "o00220": 143, "o00300": 143, "o00468": 143, "o00587": 143, "o00592": 143, "o14594": 143, "o14649": 143, "o14672": 143, "o15031": 143, "o15197": 143, "o15496": 143, "o43157": 143, "o43184": 143, "o43278": 143, "o43852": 143, "o43914": 143, "o60462": 143, "o60469": 143, "o60486": 143, "o60494": 143, "o75051": 143, "o75077": 143, "o75330": 143, "o75508": 143, "o75509": 143, "o75534": 143, "o75596": 143, "o94887": 143, "o95084": 143, "o95236": 143, "o95274": 143, "o95428": 143, "o95467": 143, "o95711": 143, "o95754": 143, "p00451": 143, "p00488": 143, "p00734": 143, "p00740": 143, "p00742": 143, "p00748": 143, "p00749": 143, "p00750": 143, "p00797": 143, "p00813": 143, "p00995": 143, "p01008": 143, "p01009": 143, "p01023": 143, "p01024": 143, "p01031": 143, "p01033": 143, "p01112": 143, "p01589": 143, "p02452": [143, 1298], "p02458": [143, 1298], "p02461": [143, 1298], "p02462": [143, 1298], "p02654": 143, "p02671": 143, "p02675": 143, "p02679": 143, "p02741": 143, "p02745": 143, "p02746": 143, "p02751": 143, "p02753": 143, "p02765": 143, "p02768": 143, "p02788": 143, "p03951": 143, "p03956": 143, "p03973": 143, "p04003": 143, "p04070": 143, "p04196": 143, "p04278": 143, "p04626": 143, "p04899": 143, "p05067": 143, "p05106": 143, "p05107": 143, "p05121": 143, "p05155": 143, "p05543": 143, "p05556": 143, "p05997": 143, "p06454": 143, "p06734": 143, "p06756": [143, 1298], "p06858": 143, "p07093": 143, "p07225": 143, "p07237": 143, "p07288": 143, "p07602": 143, "p07900": 143, "p08034": 143, "p08069": 143, "p08123": 143, "p08174": 143, "p08236": 143, "p08253": 143, "p08514": 143, "p08571": 143, "p08572": [143, 1298], "p08575": 143, "p08582": 143, "p08603": 143, "p08670": 143, "p08709": 143, "p08861": 143, "p08865": 143, "p09211": 143, "p09237": 143, "p09417": 143, "p09429": 143, "p0c0l4": 143, "p0c7t3": 143, "p0cg37": 143, "p0dmv8": 143, "p0dp23": [143, 1298], "p0dp24": [143, 1298], "p0dp25": [143, 1298], "p10144": 143, "p10153": 143, "p10586": 143, "p10646": 143, "p11150": 143, "p11226": 143, "p11229": 143, "p11362": [143, 1298], "p11912": 143, "p12107": 143, "p12109": 143, "p12110": 143, "p12821": 143, "p12830": 143, "p13385": 143, "p13591": 143, "p13612": 143, "p13637": 143, "p13688": 143, "p14416": [143, 1298], "p14618": 143, "p14625": 143, "p14778": 143, "p14780": 143, "p15151": 143, "p15531": 143, "p15907": 143, "p16035": 143, "p16070": 143, "p16109": 143, "p16473": 143, "p16520": 143, "p16671": 143, "p17302": 143, "p17752": 143, "p17948": 143, "p18564": 143, "p19113": 143, "p19823": 143, "p19835": 143, "p20062": 143, "p20273": 143, "p20292": 143, "p20309": 143, "p20849": 143, "p20908": 143, "p20916": 143, "p21462": 143, "p21709": 143, "p21802": 143, "p21810": 143, "p21815": 143, "p21860": 143, "p21917": 143, "p21941": 143, "p21980": 143, "p22392": 143, "p22692": 143, "p22897": 143, "p23471": 143, "p23515": 143, "p25063": 143, "p25090": 143, "p25940": 143, "p25942": 143, "p26012": 143, "p26441": 143, "p26842": 143, "p27658": 143, "p28335": 143, "p28907": 143, "p28908": 143, "p29317": 143, "p29322": 143, "p29323": 143, "p29400": 143, "p30530": 143, "p30533": 143, "p30542": 143, "p30874": 143, "p31025": 143, "p31785": 143, "p35212": 143, "p35354": 143, "p35475": 143, "p35555": 143, "p35613": 143, "p35625": 143, "p36383": 143, "p36897": 143, "p36941": 143, "p39019": 143, "p39060": 143, "p39900": 143, "p41143": 143, "p41594": 143, "p42081": 143, "p42127": 143, "p43121": 143, "p43405": 143, "p43489": 143, "p43490": 143, "p45452": 143, "p48039": 143, "p48651": 143, "p49768": 143, "p49913": 143, "p50052": 143, "p51654": 143, "p52945": 143, "p53420": 143, "p54577": 143, "p54753": 143, "p54756": 143, "p54760": 143, "p54762": 143, "p54764": 143, "p55058": 143, "p55789": 143, "p56159": 143, "p61626": 143, "p61769": 143, "p62987": 143, "p63092": 143, "p78310": 143, "p78324": 143, "p78536": 143, "p80188": 143, "p80303": 143, "p84077": 143, "p84996": 143, "p98160": 143, "p98164": 143, "q01469": 143, "q01955": 143, "q02094": 143, "q02388": 143, "q02817": 143, "q04721": 143, "q05707": 143, "q07326": 143, "q07954": 143, "q08334": 143, "q08722": 143, "q08828": 143, "q10588": 143, "q12913": 143, "q12918": 143, "q12933": 143, "q13158": 143, "q13241": 143, "q13255": [143, 1298], "q13352": 143, "q13361": 143, "q13442": 143, "q13443": 143, "q13477": 143, "q13936": [143, 1298], "q14031": 143, "q14050": 143, "q14055": 143, "q14118": 143, "q14242": 143, "q14766": 143, "q15165": 143, "q15223": 143, "q15262": 143, "q15303": 143, "q15375": 143, "q15762": 143, "q16613": 143, "q2mv58": 143, "q2vpa4": 143, "q4vx76": 143, "q5jwf2": 143, "q5sr53": 143, "q5t442": 143, "q5t5a4": 143, "q6nw40": 143, "q6uww8": 143, "q6uwx4": 143, "q6v0i7": 143, "q7z6a9": 143, "q86ur5": 143, "q8iwl1": 143, "q8izj3": 143, "q8izl2": 143, "q8n2x6": 143, "q8n474": 143, "q8nfk1": 143, "q8nft8": 143, "q8ngh5": 143, "q8ngh8": 143, "q8nhj6": 143, "q8nhp8": 143, "q8tax7": 143, "q8wtv0": 143, "q8wwy8": 143, "q8wz79": 143, "q92819": 143, "q92854": 143, "q92896": 143, "q92956": 143, "q96a49": 143, "q96cg8": 143, "q96da0": 143, "q96fe5": 143, "q99259": 143, "q99466": 143, "q99965": 143, "q9bq66": 143, "q9bs26": 143, "q9bx66": 143, "q9bzr6": 143, "q9bzw8": 143, "q9bzz2": 143, "q9c0c4": 143, "q9h2a7": 143, "q9h2e6": 143, "q9h3s1": 143, "q9h9h4": 143, "q9hcm2": 143, "q9nqc3": 143, "q9nr96": 143, "q9nrv9": 143, "q9nsg2": 143, "q9ntn9": 143, "q9nup9": 143, "q9nv23": 143, "q9nwz3": 143, "q9nx52": 143, "q9nzc2": 143, "q9nzr2": 143, "q9uby5": [143, 1298], "q9uhg3": 143, "q9uiw2": 143, "q9uju6": 143, "q9ukq2": 143, "q9ulp9": 143, "q9um47": 143, "q9uq26": 143, "q9xrx5": 143, "q9y215": 143, "q9y2i2": 143, "q9y4d7": 143, "q9y566": 143, "q9y5u5": 143, "q9y624": 143, "q9y625": 143, "q9y6n7": 143, "receptor": [143, 145, 201, 202, 203, 204, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 229, 230, 233, 235, 264, 265, 351, 408, 409, 446, 514, 709, 733, 735, 903, 1301], "a6nfa1": 143, "b2ruy7": 143, "b4ds77": 143, "o00170": 143, "o00548": 143, "o00555": 143, "o14493": 143, "o14638": 143, "o14788": 143, "o14795": 143, "o15162": 143, "o15374": 143, "o15551": 143, "o15554": 143, "o43525": 143, "o43813": 143, "o43866": 143, "o43921": 143, "o60291": 143, "o60359": 143, "o75078": 143, "o75106": 143, "o75144": 143, "o75575": 143, "o75923": 143, "o94772": 143, "o94779": 143, "o94856": 143, "o95196": 143, "o95259": 143, "o95477": 143, "o95727": 143, "o95897": 143, "o95967": 143, "o95994": 143, "o95998": 143, "p00747": 143, "p01133": 143, "p01303": [143, 1298], "p01889": 143, "p01903": 143, "p01906": 143, "p01909": 143, "p01911": 143, "p01920": 143, "p02649": 143, "p04004": 143, "p04439": 143, "p05026": 143, "p05156": 143, "p05187": 143, "p05231": 143, "p05362": 143, "p05538": 143, "p07942": 143, "p09326": 143, "p09917": 143, "p09923": 143, "p10321": 143, "p10589": 143, "p11168": 143, "p13056": 143, "p13569": 143, "p13598": 143, "p13765": 143, "p15514": 143, "p15813": 143, "p16422": [143, 1298], "p16581": 143, "p17693": 143, "p17813": 143, "p18433": 143, "p19256": 143, "p19801": 143, "p20827": 143, "p21246": 143, "p21589": 143, "p21926": 143, "p22001": 143, "p22460": 143, "p22736": 143, "p23276": 143, "p23510": 143, "p24043": 143, "p25098": 143, "p25189": 143, "p26038": 143, "p27701": 143, "p27824": 143, "p28906": 143, "p29016": 143, "p29033": 143, "p29460": 143, "p29972": 143, "p30301": 143, "p30511": 143, "p31431": 143, "p31749": [143, 1298], "p31997": 143, "p32004": 143, "p32942": 143, "p32970": 143, "p32971": 143, "p35499": 143, "p36021": 143, "p36269": 143, "p41235": 143, "p48050": 143, "p48509": 143, "p48552": 143, "p50591": 143, "p51787": 143, "p51828": 143, "p52797": 143, "p52798": 143, "p52799": 143, "p52803": 143, "p54709": 143, "p54750": 143, "p54851": 143, "p55157": 143, "p55160": 143, "p55268": 143, "p56705": 143, "p57057": 143, "p57087": 143, "p57739": 143, "p58401": 143, "p61160": 143, "p62079": 143, "p62955": 143, "p78504": 143, "p78509": 143, "p78562": 143, "p79483": 143, "p84022": 143, "p84157": 143, "p98172": 143, "q00994": 143, "q01064": 143, "q02108": 143, "q02153": 143, "q02246": 143, "q02413": 143, "q02641": 143, "q02846": 143, "q03135": [143, 1298], "q04724": 143, "q05940": 143, "q06643": 143, "q07075": 143, "q08380": 143, "q08am6": 143, "q12809": 143, "q12884": 143, "q13061": 143, "q13114": 143, "q13275": 143, "q13445": 143, "q13520": 143, "q13740": 143, "q13822": 143, "q14123": 143, "q14126": 143, "q14213": 143, "q14524": 143, "q14541": 143, "q14563": 143, "q14773": 143, "q14956": 143, "q14982": 143, "q14994": 143, "q14995": 143, "q15628": 143, "q15758": 143, "q15768": 143, "q15842": 143, "q15848": 143, "q16342": 143, "q16363": 143, "q16572": 143, "q16625": 143, "q16853": 143, "q19t08": 143, "q29983": 143, "q2tal6": 143, "q30201": 143, "q401n2": 143, "q496h8": 143, "q4vcs5": 143, "q4w5p6": 143, "q5dx21": 143, "q5tat6": 143, "q5vu97": 143, "q5vy80": 143, "q5zpr3": 143, "q6nyc1": 143, "q6piz9": 143, "q6q4g3": 143, "q6rw13": 143, "q6uw88": 143, "q6uwv6": 143, "q6uxb3": 143, "q6uxi9": 143, "q7l0j3": 143, "q7z7d3": 143, "q86uf1": 143, "q86uk0": 143, "q8iu54": 143, "q8iu80": 143, "q8iuk5": 143, "q8iwv2": 143, "q8izv2": 143, "q8izy2": 143, "q8n126": 143, "q8n2g4": 143, "q8ncm2": 143, "q8ncs7": 143, "q8nec5": 143, "q8nfp4": 143, "q8nfy4": 143, "q8nfz3": 143, "q8ng11": 143, "q8taz6": 143, "q8tcy5": 143, "q8td07": 143, "q8tdm5": 143, "q8wum9": 143, "q8wwa0": 143, "q8wwx8": 143, "q8wxs5": 143, "q92570": 143, "q92673": 143, "q92753": 143, "q92913": 143, "q92954": 143, "q96ap7": 143, "q96b86": 143, "q96dz9": 143, "q96jb6": 143, "q96jk4": 143, "q96jq0": 143, "q96l42": 143, "q96pb7": 143, "q96qt4": 143, "q96s97": 143, "q96sn7": [143, 1298], "q99075": 143, "q99523": 143, "q99712": 143, "q99784": 143, "q9bqq7": 143, "q9brk0": 143, "q9buf7": 143, "q9bx67": 143, "q9bxj0": 143, "q9by67": 143, "q9bye2": 143, "q9bzm4": 143, "q9gzm7": 143, "q9h0r3": 143, "q9h221": 143, "q9h222": 143, "q9h4b8": 143, "q9h7v2": 143, "q9np59": 143, "q9nqs3": 143, "q9nr61": 143, "q9nr82": 143, "q9nrq2": 143, "q9nsa2": 143, "q9ny72": 143, "q9ny84": 143, "q9nyj7": 143, "q9nyz4": 143, "q9nz08": 143, "q9nz53": 143, "q9nzq7": 143, "q9nzv8": 143, "q9p0k1": 143, "q9p0l9": 143, "q9p232": 143, "q9p2k9": 143, "q9p2u7": 143, "q9ubh0": 143, "q9ubn1": 143, "q9ubx5": 143, "q9uef7": 143, "q9uf02": 143, "q9ugm3": 143, "q9uhc9": 143, "q9uir0": 143, "q9ujz1": 143, "q9ukr5": 143, "q9ukv5": 143, "q9uky0": 143, "q9ul54": 143, "q9ulb1": 143, "q9uld8": 143, "q9ulh0": 143, "q9ult6": 143, "q9umd9": 143, "q9umf0": 143, "q9ung2": 143, "q9upu3": 143, "q9uq05": 143, "q9uqd0": 143, "q9y219": 143, "q9y286": 143, "q9y2j0": 143, "q9y3r0": 143, "q9y466": 143, "q9y4c0": 143, "q9y5r2": 143, "q9y5y6": 143, "q9y5y9": 143, "q9y698": 143, "q9y6y9": 143, "higher": [143, 145, 643, 644, 646, 647, 648, 649, 650, 903, 1148, 1297, 1298], "df_by_sourc": 145, "df_with_refer": 145, "df_column": 145, "df_dtype": 145, "allow_loop": [145, 861], "compon": [145, 150, 218, 224, 700, 869, 903, 1124, 1134, 1136, 1298, 1301], "when": [145, 903, 922, 954, 986, 1085, 1123, 1124, 1134, 1136, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1297, 1298], "restrict": [145, 169, 172, 278, 331, 594, 825, 1298], "activated_bi": 145, "entitylist": 145, "add_interact": 145, "readi": [145, 1298], "stand": [145, 1297], "usual": [145, 1298], "add_nod": 145, "nodes_by_label": 145, "noth": [145, 869, 1072], "collect_complex_identifi": 145, "complex_identifi": 145, "collect_complex_label": 145, "complex_label": 145, "collect_complex": 145, "collect_curation_effort": 145, "collect_data_model": 145, "collect_degrees_direct": 145, "degrees_direct": 145, "collect_degrees_directed_in": 145, "degrees_directed_in": 145, "collect_degrees_directed_out": 145, "degrees_directed_out": 145, "collect_degrees_neg": 145, "degrees_neg": 145, "collect_degrees_negative_in": 145, "degrees_negative_in": 145, "collect_degrees_negative_out": 145, "degrees_negative_out": 145, "collect_degrees_non_direct": 145, "degrees_non_direct": 145, "collect_degrees_posit": 145, "degrees_posit": 145, "collect_degrees_positive_in": 145, "degrees_positive_in": 145, "collect_degrees_positive_out": 145, "degrees_positive_out": 145, "collect_degrees_sign": 145, "degrees_sign": 145, "collect_degrees_signed_in": 145, "degrees_signed_in": 145, "collect_degrees_signed_out": 145, "degrees_signed_out": 145, "collect_degrees_undirect": 145, "degrees_undirect": 145, "collect_ent": 145, "collect_evid": 145, "collect_identifi": 145, "collect_interaction_typ": 145, "collect_interact": 145, "collect_interactions_0": 145, "interactions_0": 145, "collect_interactions_direct": 145, "interactions_direct": [145, 903], "collect_interactions_mutu": 145, "interactions_mutu": [145, 903], "collect_interactions_neg": 145, "interactions_neg": 145, "collect_interactions_non_direct": 145, "interactions_non_direct": 145, "collect_interactions_non_directed_0": 145, "interactions_non_directed_0": 145, "collect_interactions_posit": 145, "interactions_posit": 145, "collect_interactions_sign": 145, "interactions_sign": [145, 903], "collect_interactions_undirect": 145, "interactions_undirect": [145, 903], "collect_interactions_undirected_0": 145, "interactions_undirected_0": 145, "collect_label": 145, "collect_lncrna_identifi": 145, "lncrna_identifi": 145, "collect_lncrna_label": 145, "lncrna_label": 145, "collect_lncrna": 145, "collect_mirna_identifi": 145, "mirna_identifi": 145, "collect_mirna_label": 145, "mirna_label": 145, "collect_mirna": 145, "collect_protein_identifi": 145, "protein_identifi": 145, "collect_protein_label": 145, "protein_label": 145, "collect_protein": 145, "collect_refer": 145, "collect_resource_nam": 145, "collect_resource_names_via": 145, "resource_names_via": 145, "collect_resourc": 145, "collect_resources_via": 145, "resources_via": 145, "collect_small_molecule_identifi": 145, "small_molecule_identifi": 145, "collect_small_molecule_label": 145, "small_molecule_label": 145, "collect_small_molecul": 145, "immut": 145, "constructor": [145, 1260, 1272, 1275], "count_activated_bi": 145, "pleas": [145, 322, 323, 328, 433, 452, 680, 681, 903, 1102, 1297, 1298], "count_activ": 145, "bytes_or_buff": 145, "encod": [145, 253, 903, 981, 1011, 1068, 1069, 1298, 1301], "error": [145, 643, 644, 646, 647, 648, 649, 650, 981, 1044, 1297, 1301], "expos": [145, 1146, 1297], "buffer": [145, 253], "decod": 145, "handler": [145, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083], "__str__": 145, "repr": 145, "sy": 145, "getdefaultencod": 145, "strict": [145, 667, 704, 794, 795, 903, 954, 1114, 1124, 1134, 1135, 1136, 1298], "count_complex_identifiers_by_data_model": 145, "count_complex_identifiers_by_interaction_typ": 145, "count_complex_identifiers_by_interaction_type_and_data_model": 145, "count_complex_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_complex_identifiers_by_refer": 145, "count_complex_identifiers_by_resourc": 145, "count_complex_labels_by_data_model": 145, "count_complex_labels_by_interaction_typ": 145, "count_complex_labels_by_interaction_type_and_data_model": 145, "count_complex_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_complex_labels_by_refer": 145, "count_complex_labels_by_resourc": 145, "count_complexes_by_data_model": 145, "count_complexes_by_interaction_typ": 145, "count_complexes_by_interaction_type_and_data_model": 145, "count_complexes_by_interaction_type_and_data_model_and_resourc": 145, "count_complexes_by_refer": 145, "count_complexes_by_resourc": 145, "count_curation_effort": 145, "count_curation_effort_by_data_model": 145, "count_curation_effort_by_interaction_typ": 145, "count_curation_effort_by_interaction_type_and_data_model": 145, "count_curation_effort_by_interaction_type_and_data_model_and_resourc": 145, "count_curation_effort_by_refer": 145, "count_curation_effort_by_resourc": 145, "count_data_models_by_data_model": 145, "count_data_models_by_interaction_typ": 145, "count_data_models_by_interaction_type_and_data_model": 145, "count_data_models_by_interaction_type_and_data_model_and_resourc": 145, "count_data_models_by_refer": 145, "count_data_models_by_resourc": 145, "count_degrees_directed_by_data_model": 145, "count_degrees_directed_by_interaction_typ": 145, "count_degrees_directed_by_interaction_type_and_data_model": 145, "count_degrees_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_by_refer": 145, "count_degrees_directed_by_resourc": 145, "count_degrees_directed_in_by_data_model": 145, "count_degrees_directed_in_by_interaction_typ": 145, "count_degrees_directed_in_by_interaction_type_and_data_model": 145, "count_degrees_directed_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_in_by_refer": 145, "count_degrees_directed_in_by_resourc": 145, "count_degrees_directed_out_by_data_model": 145, "count_degrees_directed_out_by_interaction_typ": 145, "count_degrees_directed_out_by_interaction_type_and_data_model": 145, "count_degrees_directed_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_out_by_refer": 145, "count_degrees_directed_out_by_resourc": 145, "count_degrees_negative_by_data_model": 145, "count_degrees_negative_by_interaction_typ": 145, "count_degrees_negative_by_interaction_type_and_data_model": 145, "count_degrees_negative_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_by_refer": 145, "count_degrees_negative_by_resourc": 145, "count_degrees_negative_in_by_data_model": 145, "count_degrees_negative_in_by_interaction_typ": 145, "count_degrees_negative_in_by_interaction_type_and_data_model": 145, "count_degrees_negative_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_in_by_refer": 145, "count_degrees_negative_in_by_resourc": 145, "count_degrees_negative_out_by_data_model": 145, "count_degrees_negative_out_by_interaction_typ": 145, "count_degrees_negative_out_by_interaction_type_and_data_model": 145, "count_degrees_negative_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_out_by_refer": 145, "count_degrees_negative_out_by_resourc": 145, "count_degrees_non_directed_by_data_model": 145, "count_degrees_non_directed_by_interaction_typ": 145, "count_degrees_non_directed_by_interaction_type_and_data_model": 145, "count_degrees_non_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_non_directed_by_refer": 145, "count_degrees_non_directed_by_resourc": 145, "count_degrees_positive_by_data_model": 145, "count_degrees_positive_by_interaction_typ": 145, "count_degrees_positive_by_interaction_type_and_data_model": 145, "count_degrees_positive_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_by_refer": 145, "count_degrees_positive_by_resourc": 145, "count_degrees_positive_in_by_data_model": 145, "count_degrees_positive_in_by_interaction_typ": 145, "count_degrees_positive_in_by_interaction_type_and_data_model": 145, "count_degrees_positive_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_in_by_refer": 145, "count_degrees_positive_in_by_resourc": 145, "count_degrees_positive_out_by_data_model": 145, "count_degrees_positive_out_by_interaction_typ": 145, "count_degrees_positive_out_by_interaction_type_and_data_model": 145, "count_degrees_positive_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_out_by_refer": 145, "count_degrees_positive_out_by_resourc": 145, "count_degrees_signed_by_data_model": 145, "count_degrees_signed_by_interaction_typ": 145, "count_degrees_signed_by_interaction_type_and_data_model": 145, "count_degrees_signed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_by_refer": 145, "count_degrees_signed_by_resourc": 145, "count_degrees_signed_in_by_data_model": 145, "count_degrees_signed_in_by_interaction_typ": 145, "count_degrees_signed_in_by_interaction_type_and_data_model": 145, "count_degrees_signed_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_in_by_refer": 145, "count_degrees_signed_in_by_resourc": 145, "count_degrees_signed_out_by_data_model": 145, "count_degrees_signed_out_by_interaction_typ": 145, "count_degrees_signed_out_by_interaction_type_and_data_model": 145, "count_degrees_signed_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_out_by_refer": 145, "count_degrees_signed_out_by_resourc": 145, "count_degrees_undirected_by_data_model": 145, "count_degrees_undirected_by_interaction_typ": 145, "count_degrees_undirected_by_interaction_type_and_data_model": 145, "count_degrees_undirected_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_undirected_by_refer": 145, "count_degrees_undirected_by_resourc": 145, "count_entities_by_data_model": 145, "count_entities_by_interaction_typ": 145, "count_entities_by_interaction_type_and_data_model": 145, "count_entities_by_interaction_type_and_data_model_and_resourc": 145, "count_entities_by_refer": 145, "count_entities_by_resourc": 145, "count_evid": 145, "count_evidences_by_data_model": 145, "count_evidences_by_interaction_typ": 145, "count_evidences_by_interaction_type_and_data_model": 145, "count_evidences_by_interaction_type_and_data_model_and_resourc": 145, "count_evidences_by_refer": 145, "count_evidences_by_resourc": 145, "count_identifiers_by_data_model": 145, "count_identifiers_by_interaction_typ": 145, "count_identifiers_by_interaction_type_and_data_model": 145, "count_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_identifiers_by_refer": 145, "count_identifiers_by_resourc": 145, "count_interaction_types_by_data_model": 145, "count_interaction_types_by_interaction_typ": 145, "count_interaction_types_by_interaction_type_and_data_model": 145, "count_interaction_types_by_interaction_type_and_data_model_and_resourc": 145, "count_interaction_types_by_refer": 145, "count_interaction_types_by_resourc": 145, "count_interactions_0_by_data_model": 145, "count_interactions_0_by_interaction_typ": 145, "count_interactions_0_by_interaction_type_and_data_model": 145, "count_interactions_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_0_by_refer": 145, "count_interactions_0_by_resourc": 145, "count_interactions_by_data_model": 145, "count_interactions_by_interaction_typ": 145, "count_interactions_by_interaction_type_and_data_model": 145, "count_interactions_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_by_refer": 145, "count_interactions_by_resourc": 145, "count_interactions_directed_by_data_model": 145, "count_interactions_directed_by_interaction_typ": 145, "count_interactions_directed_by_interaction_type_and_data_model": 145, "count_interactions_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_directed_by_refer": 145, "count_interactions_directed_by_resourc": 145, "count_interactions_mutual_by_data_model": 145, "count_interactions_mutual_by_interaction_typ": 145, "count_interactions_mutual_by_interaction_type_and_data_model": 145, "count_interactions_mutual_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_mutual_by_refer": 145, "count_interactions_mutual_by_resourc": 145, "count_interactions_negative_by_data_model": 145, "count_interactions_negative_by_interaction_typ": 145, "count_interactions_negative_by_interaction_type_and_data_model": 145, "count_interactions_negative_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_negative_by_refer": 145, "count_interactions_negative_by_resourc": 145, "count_interactions_non_directed_0": 145, "count_interactions_non_directed_0_by_data_model": 145, "count_interactions_non_directed_0_by_interaction_typ": 145, "count_interactions_non_directed_0_by_interaction_type_and_data_model": 145, "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_non_directed_0_by_refer": 145, "count_interactions_non_directed_0_by_resourc": 145, "count_interactions_non_directed_by_data_model": 145, "count_interactions_non_directed_by_interaction_typ": 145, "count_interactions_non_directed_by_interaction_type_and_data_model": 145, "count_interactions_non_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_non_directed_by_refer": 145, "count_interactions_non_directed_by_resourc": 145, "count_interactions_positive_by_data_model": 145, "count_interactions_positive_by_interaction_typ": 145, "count_interactions_positive_by_interaction_type_and_data_model": 145, "count_interactions_positive_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_positive_by_refer": 145, "count_interactions_positive_by_resourc": 145, "count_interactions_signed_by_data_model": 145, "count_interactions_signed_by_interaction_typ": 145, "count_interactions_signed_by_interaction_type_and_data_model": 145, "count_interactions_signed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_signed_by_refer": 145, "count_interactions_signed_by_resourc": 145, "count_interactions_undirected_0": 145, "count_interactions_undirected_0_by_data_model": 145, "count_interactions_undirected_0_by_interaction_typ": 145, "count_interactions_undirected_0_by_interaction_type_and_data_model": 145, "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_undirected_0_by_refer": 145, "count_interactions_undirected_0_by_resourc": 145, "count_interactions_undirected_by_data_model": 145, "count_interactions_undirected_by_interaction_typ": 145, "count_interactions_undirected_by_interaction_type_and_data_model": 145, "count_interactions_undirected_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_undirected_by_refer": 145, "count_interactions_undirected_by_resourc": 145, "count_labels_by_data_model": 145, "count_labels_by_interaction_typ": 145, "count_labels_by_interaction_type_and_data_model": 145, "count_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_labels_by_refer": 145, "count_labels_by_resourc": 145, "count_lncrna_identifiers_by_data_model": 145, "count_lncrna_identifiers_by_interaction_typ": 145, "count_lncrna_identifiers_by_interaction_type_and_data_model": 145, "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrna_identifiers_by_refer": 145, "count_lncrna_identifiers_by_resourc": 145, "count_lncrna_labels_by_data_model": 145, "count_lncrna_labels_by_interaction_typ": 145, "count_lncrna_labels_by_interaction_type_and_data_model": 145, "count_lncrna_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrna_labels_by_refer": 145, "count_lncrna_labels_by_resourc": 145, "count_lncrnas_by_data_model": 145, "count_lncrnas_by_interaction_typ": 145, "count_lncrnas_by_interaction_type_and_data_model": 145, "count_lncrnas_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrnas_by_refer": 145, "count_lncrnas_by_resourc": 145, "count_mirna_identifiers_by_data_model": 145, "count_mirna_identifiers_by_interaction_typ": 145, "count_mirna_identifiers_by_interaction_type_and_data_model": 145, "count_mirna_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_mirna_identifiers_by_refer": 145, "count_mirna_identifiers_by_resourc": 145, "count_mirna_labels_by_data_model": 145, "count_mirna_labels_by_interaction_typ": 145, "count_mirna_labels_by_interaction_type_and_data_model": 145, "count_mirna_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_mirna_labels_by_refer": 145, "count_mirna_labels_by_resourc": 145, "count_mirnas_by_data_model": 145, "count_mirnas_by_interaction_typ": 145, "count_mirnas_by_interaction_type_and_data_model": 145, "count_mirnas_by_interaction_type_and_data_model_and_resourc": 145, "count_mirnas_by_refer": 145, "count_mirnas_by_resourc": 145, "count_partn": 145, "count_post_transcriptionally_activated_bi": 145, "count_post_transcriptionally_activ": 145, "count_post_transcriptionally_regulated_bi": 145, "count_post_transcriptionally_regul": 145, "count_post_transcriptionally_suppressed_bi": 145, "count_post_transcriptionally_suppress": 145, "count_post_translationally_activated_bi": 145, "count_post_translationally_activ": 145, "count_post_translationally_regulated_bi": 145, "count_post_translationally_regul": 145, "count_post_translationally_suppressed_bi": 145, "count_post_translationally_suppress": 145, "count_protein_identifiers_by_data_model": 145, "count_protein_identifiers_by_interaction_typ": 145, "count_protein_identifiers_by_interaction_type_and_data_model": 145, "count_protein_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_protein_identifiers_by_refer": 145, "count_protein_identifiers_by_resourc": 145, "count_protein_labels_by_data_model": 145, "count_protein_labels_by_interaction_typ": 145, "count_protein_labels_by_interaction_type_and_data_model": 145, "count_protein_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_protein_labels_by_refer": 145, "count_protein_labels_by_resourc": 145, "count_proteins_by_data_model": 145, "count_proteins_by_interaction_typ": 145, "count_proteins_by_interaction_type_and_data_model": 145, "count_proteins_by_interaction_type_and_data_model_and_resourc": 145, "count_proteins_by_refer": 145, "count_proteins_by_resourc": 145, "count_references_by_data_model": 145, "count_references_by_interaction_typ": 145, "count_references_by_interaction_type_and_data_model": 145, "count_references_by_interaction_type_and_data_model_and_resourc": 145, "count_references_by_refer": 145, "count_references_by_resourc": 145, "count_regulated_bi": 145, "count_regul": 145, "count_resource_names_by_data_model": 145, "count_resource_names_by_interaction_typ": 145, "count_resource_names_by_interaction_type_and_data_model": 145, "count_resource_names_by_interaction_type_and_data_model_and_resourc": 145, "count_resource_names_by_refer": 145, "count_resource_names_by_resourc": 145, "count_resource_names_via_by_data_model": 145, "count_resource_names_via_by_interaction_typ": 145, "count_resource_names_via_by_interaction_type_and_data_model": 145, "count_resource_names_via_by_interaction_type_and_data_model_and_resourc": 145, "count_resource_names_via_by_refer": 145, "count_resource_names_via_by_resourc": 145, "count_resources_by_data_model": 145, "count_resources_by_interaction_typ": 145, "count_resources_by_interaction_type_and_data_model": 145, "count_resources_by_interaction_type_and_data_model_and_resourc": 145, "count_resources_by_refer": 145, "count_resources_by_resourc": 145, "count_resources_via_by_data_model": 145, "count_resources_via_by_interaction_typ": 145, "count_resources_via_by_interaction_type_and_data_model": 145, "count_resources_via_by_interaction_type_and_data_model_and_resourc": 145, "count_resources_via_by_refer": 145, "count_resources_via_by_resourc": 145, "count_small_molecule_identifiers_by_data_model": 145, "count_small_molecule_identifiers_by_interaction_typ": 145, "count_small_molecule_identifiers_by_interaction_type_and_data_model": 145, "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecule_identifiers_by_refer": 145, "count_small_molecule_identifiers_by_resourc": 145, "count_small_molecule_labels_by_data_model": 145, "count_small_molecule_labels_by_interaction_typ": 145, "count_small_molecule_labels_by_interaction_type_and_data_model": 145, "count_small_molecule_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecule_labels_by_refer": 145, "count_small_molecule_labels_by_resourc": 145, "count_small_molecules_by_data_model": 145, "count_small_molecules_by_interaction_typ": 145, "count_small_molecules_by_interaction_type_and_data_model": 145, "count_small_molecules_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecules_by_refer": 145, "count_small_molecules_by_resourc": 145, "count_suppressed_bi": 145, "count_suppress": 145, "count_transcriptionally_activated_bi": 145, "count_transcriptionally_activ": 145, "count_transcriptionally_regulated_bi": 145, "count_transcriptionally_regul": 145, "count_transcriptionally_suppressed_bi": 145, "count_transcriptionally_suppress": 145, "curation_effort_by_data_model": 145, "curation_effort_by_interaction_typ": 145, "curation_effort_by_interaction_type_and_data_model": 145, "curation_effort_by_interaction_type_and_data_model_and_resourc": 145, "curation_effort_by_refer": 145, "curation_effort_by_resourc": [145, 903], "direction_consist": 145, "statist": [145, 903, 1298], "total_direct": 145, "shared_direct": 145, "overlap": [145, 903, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "consistent_edg": 145, "inconsistent_edg": 145, "inconsist": 145, "total_consist": 145, "sum": [145, 1011, 1042], "total_inconsist": 145, "entity_by_id": 145, "entity_by_label": 145, "evidences_by_data_model": 145, "evidences_by_interaction_typ": 145, "evidences_by_interaction_type_and_data_model": 145, "evidences_by_interaction_type_and_data_model_and_resourc": 145, "evidences_by_refer": 145, "evidences_by_resourc": 145, "extra_direct": 145, "use_laudanna": 145, "use_str": 145, "curat": [145, 194, 309, 319, 321, 322, 323, 325, 327, 328, 346, 436, 437, 562, 572, 574, 576, 585, 587, 588, 666, 668, 670, 671, 903, 909, 923, 955, 956, 1301], "give": [145, 857, 863, 866, 873, 903, 1088, 1143, 1146, 1155, 1298], "suffici": [145, 903, 958], "find_path": 145, "end": [145, 341, 488, 489, 490, 629, 639, 870, 874, 903, 987, 1124, 1134, 1136, 1298], "maxlen": [145, 903, 1008, 1024, 1047, 1048, 1053, 1065, 1208, 1230], "minlen": 145, "silent": [145, 903, 1068, 1143, 1146, 1155], "find": [145, 585, 903, 979, 1030, 1033, 1058, 1112, 1114, 1120, 1124, 1134, 1143, 1284, 1297, 1298], "motif": [145, 315, 452, 529, 530, 531, 764, 868, 875, 903, 1171, 1298], "length": [145, 629, 635, 903, 982, 985, 1000, 1022, 1091, 1194, 1284, 1298], "subnetwork": [145, 759, 903], "opposit": [145, 903, 1124, 1298], "maximum": [145, 242, 903], "step": [145, 903, 946, 1080, 1088, 1124, 1298], "longest": [145, 903], "minimum": [145, 755, 758, 759], "indic": [145, 242, 759, 903, 1068, 1102, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1284, 1298], "progress": [145, 1068, 1146], "bar": [145, 903, 1088, 1146], "shorter": [145, 1022], "longer": [145, 321, 327, 1123, 1124, 1125, 1298], "remain": [145, 909, 1124, 1298], "motiv": 145, "let": [145, 1072, 1298], "sai": [145, 1298], "estrogen": 145, "esr1": [145, 1298], "transcription": 145, "translation": 145, "n": [145, 594, 762, 903, 977, 1298], "post_transl": [145, 861, 1298], "interest": [145, 680, 681, 867, 903, 1297, 1298, 1299], "feedback": [145, 452], "from_igraph": 145, "igraph": [145, 903, 920, 1105, 1108, 1257, 1260, 1272, 1274, 1275, 1296, 1297, 1300], "graph": [145, 381, 903, 1104, 1105, 1108, 1256, 1257, 1260, 1263, 1270, 1272, 1274, 1275, 1298, 1300], "from_pickl": 145, "pickl": [145, 409, 782, 791, 903, 909, 1123, 1127, 1296, 1297], "get_curation_effort": 145, "get_evid": 145, "get_organ": 145, "htp_interact": 145, "threshold": [145, 242, 754, 903, 1298], "50": [145, 903, 1293, 1298], "ignore_direct": 145, "throughput": [145, 174, 175, 276, 656, 887, 903, 955, 1298], "studi": [145, 887], "htp_refer": 145, "cite": [145, 174, 175], "init_network": [145, 903, 958, 1298], "reread": [145, 903], "redownload": [145, 903], "keep_raw": [145, 903], "top_cal": 145, "cache_fil": [145, 903], "first_n": 145, "among": [145, 852, 903, 1013, 1017, 1030, 1033, 1058, 1124, 1134, 1155, 1298, 1301], "recurs": [145, 903, 979, 985, 986, 1012], "after": [145, 903, 1125, 1146, 1155, 1298, 1301], "few": [145, 730, 903, 1297, 1298, 1300], "interaction_by_id": 145, "similarli": [145, 903, 975, 1298], "interaction_by_label": 145, "label_a": 145, "label_b": 145, "load_from_pickl": [145, 903], "load_resourc": [145, 903, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1298], "clean": [145, 727, 903, 978, 1139, 1168, 1298], "attach": [145, 903, 1068, 1264, 1265, 1266, 1267, 1268, 1269], "input_format": [145, 903, 950, 951, 952, 953, 954, 955, 956, 957, 958, 1123, 1124, 1134, 1136, 1297, 1298], "networkinput": [145, 903, 950, 951, 952, 953, 954, 955, 956, 957, 958, 1298], "download": [145, 169, 172, 174, 175, 180, 182, 183, 189, 191, 194, 199, 202, 203, 218, 234, 261, 280, 292, 293, 296, 302, 304, 341, 373, 375, 391, 394, 397, 404, 409, 419, 436, 437, 452, 466, 467, 468, 469, 487, 499, 512, 519, 520, 546, 564, 597, 601, 602, 633, 636, 640, 654, 656, 667, 668, 671, 674, 675, 683, 709, 728, 730, 731, 737, 746, 755, 758, 759, 760, 762, 774, 779, 780, 791, 792, 793, 795, 796, 817, 842, 844, 866, 889, 903, 1068, 1072, 1073, 1079, 1080, 1123, 1124, 1139, 1143, 1168, 1296, 1297, 1300], "moment": [145, 903, 1298], "clean_graph": [145, 903], "cach": [145, 183, 409, 451, 452, 636, 640, 668, 670, 671, 672, 728, 796, 903, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1123, 1139, 1168, 1296, 1297], "bypass": [145, 903], "similar": [145, 629, 903, 977, 995, 1037, 1192, 1288, 1297, 1298, 1301], "dtype": 145, "mirna_target": [145, 1298], "mrna": [145, 359, 360, 909, 1300, 1301], "numof_interactions_per_refer": 145, "counter": [145, 1027], "organisms_check": 145, "remove_mismatch": 145, "remove_nonspecif": 145, "scan": [145, 1298], "too": [145, 903, 1298], "discrep": 145, "zero": [145, 746, 903, 982, 1267, 1268, 1278, 1283, 1286], "return_interact": 145, "post_transcriptionally_activated_bi": 145, "post_transcriptionally_activ": 145, "post_transcriptionally_regulated_bi": 145, "post_transcriptionally_regul": 145, "post_transcriptionally_suppressed_bi": 145, "post_transcriptionally_suppress": 145, "post_translationally_activated_bi": 145, "post_translationally_activ": 145, "post_translationally_regulated_bi": 145, "post_translationally_regul": 145, "post_translationally_suppressed_bi": 145, "post_translationally_suppress": 145, "random_interact": 145, "pick": [145, 1124, 1135], "random": [145, 903, 1000, 1091, 1124, 1135, 1146, 1298], "regulated_bi": 145, "remove_interact": 145, "remove_nod": 145, "leav": 145, "remove_zero_degre": 145, "reset": [145, 909, 1096, 1124, 1125], "save_to_pickl": [145, 903, 1298], "save": [145, 791, 903, 909, 930, 932, 961, 963, 1123, 1277, 1281, 1284, 1285, 1296, 1297], "summaries_tab": [145, 903], "outfil": [145, 317, 677, 903, 920, 929, 960], "return_t": [145, 903], "label_typ": 145, "write": [145, 903, 920, 1008, 1053, 1085, 1123, 1143, 1278, 1279, 1280, 1282, 1283, 1284, 1286, 1287, 1289, 1296, 1297], "suppressed_bi": 145, "suppress": [145, 1298], "to_igraph": 145, "original_resourc": 145, "transcriptionally_activated_bi": 145, "transcriptionally_activ": 145, "transcriptionally_regulated_bi": 145, "transcriptionally_regul": 145, "transcriptionally_suppressed_bi": 145, "transcriptionally_suppress": 145, "by_resourc": [147, 901, 902], "by_categori": [147, 901, 902, 903], "percent": [147, 902, 1088], "shared_res_cat": [147, 901, 902], "unique_res_cat": [147, 901, 902], "percent_res_cat": [147, 902], "shared_cat": [147, 901, 902], "unique_cat": [147, 901, 902], "percent_cat": [147, 902], "resource_cat": [147, 901, 902], "cat_resourc": [147, 901, 902], "13": [147, 259, 319, 436, 437, 852, 902, 1296, 1298], "15": [147, 317, 902, 1057, 1298], "14": [147, 319, 439, 902, 946, 1296, 1298], "11": [147, 317, 319, 852, 901, 902, 1296, 1298], "12": [147, 319, 619, 852, 901, 902, 1057, 1085, 1281, 1284, 1286, 1296, 1298], "use_omnipath": [149, 905], "licens": [150, 151, 194, 433, 440, 903, 929, 960, 1296, 1300], "web": [150, 181, 192, 341, 705, 867, 927, 1123, 1192, 1297, 1298, 1300], "page": [150, 199, 341, 930, 946, 961, 1297, 1298, 1299, 1301], "biomart": [150, 1123, 1127, 1298], "goos": [150, 371, 376, 381, 385], "templat": [150, 1298], "configur": [150, 903, 1298], "copyright": 151, "point": [151, 585, 629, 900, 903, 946, 1003, 1027, 1297, 1298], "loglevel": [152, 903, 1085], "session": [152, 903, 920, 946, 1296, 1297], "keep_in_complex_interact": 157, "expans": [157, 746], "sif": [158, 903, 1298, 1300], "distribut": [158, 903, 1297], "offici": 158, "websit": [158, 825], "url": [168, 170, 199, 306, 341, 348, 369, 737, 879, 903, 1068, 1081, 1298, 1301], "commonli": [169, 1085], "shown": [169, 172, 178, 793, 1277, 1298], "biogps_dataset": [169, 171, 172], "profil": [170, 171], "biogpsdataset": 171, "microarrai": [171, 172, 178, 179, 180, 857, 1123, 1298], "probe": [171, 172, 178, 180, 857, 1123, 1298], "htp_limit": [174, 175], "ltp": [174, 175], "low": [174, 175, 276, 656, 903, 955], "physic": [175, 755, 758, 759], "multi": [175, 290, 869, 1298, 1300], "source_organ": 177, "target_organ": 177, "10090": [177, 389, 746, 903, 1297, 1298, 1301], "orthologu": [177, 1112, 1114], "array_typ": 178, "peptid": [178, 180, 181], "webpag": [178, 199, 296, 737, 791, 792, 793, 796, 842, 1143, 1298, 1301], "biomart_microarray_typ": 178, "vendor": 180, "minut": [180, 1085, 1297, 1298], "affi": [180, 1298], "illumina": 180, "agil": [180, 1298], "codelink": [180, 1298], "phalanx": 180, "hsapiens_gene_ensembl": 181, "servic": [181, 341, 381, 596, 597, 700, 867, 927, 1123, 1192, 1297, 1298, 1300], "martview": 181, "repositori": [182, 842, 1300], "bioservic": [182, 184, 187], "python": [182, 903, 1095, 1143, 1208, 1230, 1297, 1298, 1300, 1301], "individu": [182, 499, 1124, 1134, 1143, 1298], "pars": [182, 633, 645, 1146, 1174], "enter": 182, "model_id": [183, 187], "integr": [183, 752, 958, 1296, 1298, 1300], "fetch": [184, 702, 867, 903, 1257, 1298], "smbl": 184, "submiss": 184, "date": [184, 322, 323, 328, 377, 381, 811, 903, 1085, 1192, 1298], "author": [184, 309, 531, 680, 681], "verbos": [185, 454, 1075, 1076, 1085, 1086, 1094, 1298, 1300], "eg": 187, "descript": [187, 697, 874, 903, 909, 929, 930, 931, 932, 1088, 1194, 1219, 1298, 1300], "associ": [187, 261, 309, 686, 687, 758, 900, 903, 1260, 1272, 1274, 1275, 1298], "ma": 189, "ayan": 189, "2005": [189, 431, 1298], "scraper": 192, "cancerdrugs_db": [192, 193], "pubchem": [193, 195, 222, 527], "world": [194, 1039], "describ": [195, 204, 218, 596, 909, 914, 1192], "funciton": 197, "supp_url": 199, "article_url": 199, "supplementari": [199, 350, 351, 352, 353, 522, 696, 697, 709, 737, 841, 847, 855, 931, 962], "materi": [199, 696, 737], "journal": [199, 737, 1143], "articl": [199, 572, 931, 962, 1298], "extend": [201, 202, 203, 204, 1155, 1298], "shellycod": [201, 202, 203, 204], "core": [201, 202, 203, 204, 290, 855, 1297, 1298, 1300], "cellcall_download_al": 202, "incomprehens": [210, 211, 212, 233, 234, 235], "fall": [210, 211, 212, 233, 234, 235, 903], "back": [210, 211, 212, 233, 234, 235, 1124], "fhe": 211, "r": [211, 320, 903, 1057, 1068, 1069, 1297, 1298, 1301], "rda": 211, "raw": [211, 257, 488, 602, 667, 696, 746, 1143, 1170, 1171, 1272, 1274, 1275, 1297, 1298], "ligand_receptor": [212, 1298, 1300], "cofactor": 212, "agonist": 212, "antagonist": 212, "coreceptor": 212, "ligand_loc": 214, "receptor_loc": 214, "rna": [215, 216, 217, 218, 219, 220, 221, 222, 223, 1300], "societi": [215, 216, 217, 218, 219, 220, 221, 222, 223], "represent": [217, 1085, 1298], "cid": [222, 700], "cellinker_complexes_raw": 224, "guess": [224, 1124, 1129], "receptor_class": 226, "peripher": [226, 1298, 1301], "secret": [226, 278, 552, 1068, 1298, 1301], "secreted_class": 226, "integrin": [226, 1298], "add_complex_annot": 231, "deprec": [231, 304, 367, 368, 379, 903], "wrong": [231, 903, 1298], "tcm": [233, 235], "zju": [233, 235], "edu": [233, 235, 440, 576], "cn": [233, 235, 576, 903], "php": [233, 235, 440, 576, 1068, 1298], "filenam": [234, 903, 931, 932, 962, 963, 1068, 1070, 1146, 1256, 1292, 1298], "lr_pair": 234, "gene_info": 234, "gene2ensembl": 234, "immun": 237, "teichlab": 237, "celltypist_wiki": 237, "standard_rel": 239, "pchembl_value_non": 239, "todo": [239, 903], "pchembl": [239, 903], "standard": [239, 346, 903, 980, 1124, 1134, 1136, 1192, 1194, 1236, 1298], "standard_flag": 239, "standard_unit": 239, "why": [239, 1298], "data_validity_com": 239, "assai": [240, 903], "document": [241, 903, 1008, 1085, 1297, 1298, 1299], "convers": [241, 867, 903, 1123, 1296, 1300], "max_phase_threshold": 242, "phase": 242, "namedtupl": [242, 330], "variant": [245, 246, 247, 309, 488, 489, 490, 1297, 1298], "citat": 246, "csv": [249, 254, 322, 323, 328, 696, 697, 1298], "old": [249, 322, 323, 328, 842, 933, 946, 949, 1088, 1124, 1134, 1136, 1297, 1298], "glom": [250, 251, 341, 597], "spec": [250, 251, 341, 597, 903], "protect": 250, "coalesc": 250, "io": [251, 252, 264, 265, 341], "depth": [251, 724, 984, 987], "read": [252, 253, 254, 341, 522, 523, 524, 525, 531, 636, 645, 696, 741, 903, 946, 1069, 1072, 1079, 1080, 1123, 1127, 1143, 1192, 1296, 1297, 1300], "fileobject": 253, "sep": [253, 903, 1023, 1026, 1041, 1045, 1070, 1151], "sep2": 253, "rem": 253, "hdr": 253, "open": [253, 705, 1068, 1069, 1085, 1143, 1146, 1297, 1298], "stringio": 253, "subfield": 253, "prefix": [253, 903, 1026, 1088, 1146, 1298], "header": [253, 317, 451, 452, 859, 861, 864, 903, 920, 1068, 1070, 1174, 1218, 1298], "replac": [253, 376, 381, 811, 903, 1068, 1298], "xls_file": 254, "sheet": [254, 348], "use_openpyxl": 254, "m": [254, 594, 903, 1085, 1298], "excel": [254, 1298], "xl": 254, "return_detail": 259, "intact": [259, 276, 735, 952, 953, 1124, 1298], "ebi": [259, 596, 597, 806, 1192], "uk": [259, 806, 1192], "nar": [259, 1298], "oxfordjourn": [259, 1298], "earli": 259, "2014": [259, 432, 439, 842, 1143], "gku975": 259, "pdf": [259, 903, 1057, 1255, 1256, 1292], "cellular": [261, 909, 1296, 1297], "compart": 261, "score_threshold": [262, 402, 755, 757, 758, 759, 903], "connectomedb2020": [264, 265, 1298], "asrhou": [264, 265], "github": [264, 265, 1297, 1298], "natmi": [264, 265], "user": [269, 278, 307, 330, 331, 332, 333, 334, 335, 755, 758, 759, 903, 911, 922, 1070, 1095, 1143, 1297, 1298], "passwd": [269, 307, 330, 331, 332, 333, 334, 335, 903, 1070], "credentials_fnam": [269, 330, 331, 332, 333, 334, 335], "cosmic_credenti": 269, "driver": [269, 471, 903], "sanger": 269, "catalogu": 269, "somat": 269, "mutat": [269, 877, 903], "include_unknown_typ": 271, "consensuspathdb": [275, 276], "cpdb_interact": 276, "hprd": [276, 903, 953, 1298], "biogrid": [276, 952, 953, 1298], "phosphopoint": 276, "mint": 276, "bind": [276, 636, 755, 758, 868, 903, 1102, 1298], "from_fil": 278, "requir": [278, 730, 755, 758, 759, 839, 977, 1124, 1146, 1297, 1298], "password": [278, 330, 331, 332, 333, 334, 335, 1143], "_credenti": 278, "directori": [278, 640, 903, 909, 973, 1085, 1096, 1297, 1298, 1300], "unchang": [278, 704, 746, 981, 984, 987, 1051, 1052, 1104], "runtimeerror": 278, "catalyt": 280, "relation_typ": 286, "chemical_gen": 286, "chemical_diseas": 286, "disease_pathwai": 286, "chemical_phenotyp": 286, "gene_diseas": 286, "vocabulary_typ": 287, "vocabulari": [287, 309], "chemic": [287, 755, 1122, 1192], "diseas": [287, 309, 415, 495, 496, 497, 498, 499, 502, 508, 607, 608, 643, 649, 694, 903], "anatomi": 287, "phenotyp": [287, 309, 414, 415, 417], "compendium": 289, "experi": [289, 585, 1298], "long": [290, 1124, 1183, 1297, 1298], "matrix": [290, 546, 549, 594, 903, 1143, 1301], "wide": [290, 1298], "html": [296, 341, 362, 604, 605, 633, 796, 930, 932, 961, 963, 1143, 1208, 1230, 1298, 1301], "rescu": [297, 842], "interacton": 303, "Will": 304, "soon": [304, 367, 368, 379, 903, 1298], "genesymbol": [304, 405, 523, 903, 1124, 1130, 1131, 1134, 1136, 1203, 1297, 1298, 1301], "core_onli": 306, "direct_onli": 306, "small_scale_onli": 306, "reason": [307, 452, 903, 911, 1297, 1298], "binary_data": [307, 1068], "curl": [307, 1143, 1301], "below": [307, 986, 996, 1043, 1057, 1085, 1297, 1298], "authent": 309, "success": [309, 1123, 1124], "get_ddas_that_share_gen": 309, "p_valu": 309, "float": [309, 594, 903, 999, 1003, 1006, 1027, 1037, 1038, 1040, 1052, 1277], "diseasediseaseassoci": 309, "icd9cm": 309, "icd10": 309, "mesh": 309, "omim": 309, "efo": 309, "nci": 309, "hpo": 309, "mondo": 309, "ordo": 309, "100": [309, 643, 644, 646, 647, 648, 649, 650, 903, 1155, 1297, 1298], "els": [309, 499, 903, 1057, 1124], "uml": [309, 903], "cui": [309, 841], "dda": 309, "animal_model": 309, "befre": 309, "cgi": [309, 779, 780], "clingen": 309, "clinvar": 309, "ctd_human": 309, "ctd_mous": 309, "ctd_rat": 309, "genomics_england": 309, "gwascat": 309, "gwasdb": 309, "lhgdn": 309, "mgd": 309, "orphanet": 309, "psygenet": 309, "rgd": 309, "p": [309, 368, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 686, 687, 903, 1085, 1105, 1108, 1298], "jaccard": [309, 903, 1006], "get_ddas_that_share_vari": 309, "get_gdas_by_diseas": 309, "min_scor": 309, "max_scor": 309, "min_ei": 309, "max_ei": 309, "disease_typ": 309, "disease_class": 309, "min_dsi": 309, "max_dsi": 309, "min_dpi": 309, "max_dpi": 309, "min_pli": 309, "max_pli": 309, "genediseaseassoci": 309, "hgnc": [309, 1124, 1134, 1136, 1298], "avali": 309, "gda": 309, "min": [309, 1298], "rang": [309, 903, 1298], "max": [309, 903, 979], "c01": 309, "c04": 309, "c05": 309, "c06": 309, "c07": 309, "c08": 309, "c09": 309, "c10": 309, "c11": 309, "c12": 309, "c13": 309, "c14": 309, "c15": 309, "c16": 309, "c17": 309, "c18": 309, "c19": 309, "c20": 309, "c21": 309, "c22": 309, "c23": 309, "c24": 309, "c25": 309, "c26": 309, "f01": 309, "f02": 309, "f03": 309, "dsi": 309, "dpi": 309, "pli": 309, "get_gdas_by_gen": 309, "get_gdas_by_sourc": 309, "get_gdas_by_uniprot": 309, "get_vdas_by_diseas": 309, "variantdiseaseassoci": 309, "dbsnp": 309, "vda": 309, "get_vdas_by_gen": 309, "get_vdas_by_sourc": 309, "get_vdas_by_vari": 309, "ddi": [315, 903], "dmi": [315, 903], "none_valu": 317, "uniprot_a": 317, "uniprot_b": 317, "isoform_a": [317, 873], "isoform_b": [317, 873], "exp_method": 317, "role_a": 317, "role_b": 317, "binding_site_range_a": 317, "binding_site_range_b": 317, "domains_a": 317, "domains_b": 317, "ptm_residue_a": 317, "ptm_residue_b": 317, "ptm_type_mi_a": 317, "ptm_type_mi_b": 317, "ptm_type_a": 317, "ptm_type_b": 317, "19": [317, 1298], "ptm_res_name_a": 317, "ptm_res_name_b": 317, "mutations_a": 317, "mutations_b": 317, "23": [317, 1085, 1298], "mutation_effects_a": 317, "mutation_effects_b": 317, "domains_interpro_a": 317, "26": [317, 1298], "domains_interpro_b": 317, "28": [317, 1298], "chipseq": 319, "coexp": 319, "curated_sourc": 319, "chipseq_sourc": 319, "predicted_sourc": 319, "coexp_sourc": 319, "all_sourc": 319, "kegg_pathwai": [319, 321, 327, 903], "packag": [320, 903, 1297, 1298], "only_cur": [321, 322, 323, 325, 327, 328, 903], "confidence_pairwis": [321, 327], "regulon": [321, 327, 903, 1301], "chip": [321, 322, 323, 325, 327, 328, 903], "seq": [321, 322, 323, 325, 327, 328, 874, 875, 877, 903, 1054, 1055, 1056, 1057, 1060, 1155, 1298], "pwm": [321, 322, 323, 325, 327, 328, 903], "hocomoco": [321, 322, 323, 325, 327, 328, 903], "jaspar": [321, 322, 323, 325, 327, 328, 903], "matric": [321, 322, 323, 325, 327, 328, 903], "gtex": [321, 322, 323, 325, 327, 328, 646, 649, 903], "aracn": [321, 322, 323, 325, 327, 328, 903], "public": [321, 327, 726, 842], "version": [321, 322, 323, 327, 328, 433, 436, 437, 611, 619, 842, 903, 1184, 1297, 1298, 1300], "2018": [322, 323, 328], "dorothea_interact": [322, 323, 328], "wrapper": [330, 1068, 1088, 1098, 1125, 1143, 1292, 1298], "xml": [330, 531, 1143, 1146], "drugbank_drugs_ful": 330, "drugbank_targets_ful": 330, "mail": [330, 331, 332, 333, 334, 335, 1143], "account": [330, 331, 332, 333, 334, 335, 1298], "drugbank_external_ids_ful": 330, "statu": [331, 1068, 1088, 1146, 1298], "cross": [332, 416, 469, 1194, 1204, 1225], "pharma_act": [333, 335], "pharmacolog": [333, 335], "target_id_typ": [334, 339, 684, 807, 867, 1123, 1124, 1125, 1126, 1134, 1135, 1136, 1298], "ca": [334, 339], "inchikei": [334, 339], "inchi": [334, 339, 527, 700, 1192], "smile": [334, 339, 527, 700, 1192], "formula": 334, "kegg_compound": 334, "kegg_drug": 334, "pubchem_compound": 334, "pubchem_subst": 334, "chebi": [334, 505, 527, 1298], "chembl": [334, 527, 903, 1192, 1298, 1300], "pharmgkb": 334, "het": 334, "login": 334, "credenti": [334, 903], "central": [337, 338, 339, 946, 1298], "comment": [338, 1298], "retain": 338, "inn": 339, "q": [341, 694, 903], "pagin": [341, 1298], "page_length": 341, "size_param": 341, "page_param": 341, "by_pag": 341, "page_field": 341, "total_field": 341, "totalpag": 341, "record_nam": 341, "append": [341, 903, 920, 975, 976], "until": [341, 903, 984, 1298, 1299], "per": [341, 758, 759, 903, 980, 1143], "readthedoc": 341, "latest": [341, 404, 1298], "tutori": [341, 1297, 1298], "downlod": 346, "manual": [346, 955, 956, 1085, 1298], "gold": 346, "init_url": [348, 1068], "s11": [350, 351, 352, 353], "1016": [350, 351, 352, 353, 847], "j": [350, 351, 352, 353, 847], "isci": [350, 351, 352, 353], "2019": [350, 351, 352, 353, 696, 903, 1298], "026": [350, 351, 352, 353], "sheikh": [350, 351, 352, 353], "metadata": [357, 887], "bs4": [363, 729, 792, 796], "beautifulsoup": [363, 729, 792], "summari": [364, 903, 909, 1284, 1300], "text": [364, 696, 903, 1048, 1065, 1085, 1298], "module_nam": 365, "method_nam": 365, "go_id": 367, "slim": 368, "names_onli": 368, "aspect": [368, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 852, 855, 903, 1102, 1104, 1105, 1108, 1298, 1301], "f": [368, 370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 903, 998, 1057, 1064, 1105, 1108], "quickgo": [368, 370, 372, 377, 380, 381, 382, 384, 386], "ancestor": [370, 371, 372, 383, 1102, 1104], "cellular_compon": [370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387], "molecular_funct": [370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387], "biological_process": [370, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387], "amigo": [371, 376, 378, 381, 385, 387], "evidence_cod": [373, 375], "goa": [373, 375, 377, 1298], "recent": [376, 377, 381, 828, 1124, 1297, 1298], "go_annotations_solr": 376, "mysql": [376, 381, 903, 1300], "sinc": [376, 381, 975, 1298], "dec": [376, 381], "2016": [376, 381, 903], "unfortun": [376, 381, 1298], "ceas": [376, 381], "flexibl": [376, 381, 1298], "perform": [376, 381, 451, 452, 903, 986, 1068, 1079, 1080, 1122, 1298], "solr": [376, 378, 381, 387], "far": [376, 381], "is_a": 377, "part_of": 377, "go_annotations_goa": 377, "contrari": 377, "super": 377, "slow": [377, 1068, 1298], "now": [378, 531, 1088, 1143, 1298], "implement": [378, 499, 777, 869, 914, 937, 1088, 1124, 1136, 1143, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1274, 1275, 1300, 1301], "ye": [379, 867], "quickgo_download_s": [380, 382], "descend": [380, 381, 382, 383, 903, 1102, 1104], "go_terms_solr": [380, 382], "go_descendants_quickgo": 381, "unabl": 381, "nice": [381, 1298], "desc": [383, 1277, 1278, 1284, 1287, 1289], "turn": [383, 1072, 1073, 1074], "swap": [383, 1043, 1044, 1045, 1124], "upper": [384, 385, 386, 387, 681, 1277, 1283], "lower": [384, 385, 386, 387, 681, 903, 1146, 1277, 1283, 1298], "graph_attr": 391, "vertex_attr": [391, 903], "edge_attr": [391, 903], "endogen": 394, "process_interact": 394, "process_complex": 394, "guid": [394, 1297, 1298], "pharmacologi": 394, "supplement": [397, 398], "s3": [397, 398, 762], "2012": [397, 398, 522, 903], "150": [397, 398, 1297, 1298], "1068": [397, 398], "1081": [397, 398], "75": 402, "only_human": [402, 927], "only_sourc": [402, 920], "only_method": 402, "releas": [404, 1296, 1298], "pointer": [404, 1068, 1069], "gi": [405, 1124, 1134, 1136], "partner_rol": 408, "unambigu": [408, 411, 1155, 1298], "use_cach": [409, 410, 411, 412], "plasma": [409, 903, 1298, 1301], "membran": [409, 551, 903, 1298, 1301], "receptom": 409, "intermedi": [409, 636, 903, 1124, 1298], "unmaintain": [411, 1124, 1134, 1136], "probabl": [411, 903, 1074, 1298], "never": [411, 1298], "tree": [416, 1298, 1300], "synonym": [416, 700, 793, 869, 1180, 1298], "def": [416, 998, 1057, 1298], "xref": [416, 649, 650], "in_vivo": [419, 420, 421], "min_confid": [428, 751, 752], "rual": 431, "nlm": [431, 432], "nih": [431, 432, 642, 645, 704], "gov": [431, 432, 645], "16189514": 431, "rolland": [432, 439], "25416956": 432, "unbias": [433, 439, 440, 1298], "interactom": [433, 439, 440, 1298], "iii": [433, 440, 1298], "hi": [433, 439, 440], "unpublish": 433, "condit": [433, 954, 996, 1009, 1298], "carefulli": 433, "baderlab": 433, "lit": [436, 437], "bm": [436, 437], "2013": 436, "ccsb": [436, 437], "luck": 438, "2020": [438, 847, 855, 946], "ii": [439, 1298], "scale": [439, 440, 880, 881, 882, 883, 1272, 1274, 1275, 1298], "screen": [439, 440, 1298], "fname": [440, 862, 903, 1085, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1298], "preliminari": 440, "vidal": [440, 1298], "lab": [440, 519, 520, 842, 844, 1297, 1298], "dfci": 440, "harvard": 440, "h_sapien": 440, "dload_trk": 440, "interaction3d": 444, "chain": [444, 459, 629, 639, 680, 776, 778, 870, 1138, 1139, 1141, 1298], "pdb": [444, 459, 460, 639, 681, 778, 780, 871, 872, 873, 903, 1168, 1298, 1301], "stuctur": 444, "pfam": [444, 870, 903], "subfamili": [446, 1298], "uniprotkb_ac": [451, 452], "mydomain": [451, 452], "hmm": [451, 452], "maxwait": [451, 452], "180": [451, 452, 1295], "part_siz": [451, 452], "get_ielm_hug": 451, "chunk": 452, "retri": [452, 1068], "failur": [452, 1051, 1296], "reduc": [452, 1054, 1057, 1060], "suppli": [452, 529, 530, 903, 952, 1146], "what": [452, 903, 1078, 1124, 1125, 1298, 1301], "understand": [452, 1298], "detect": [452, 795, 903], "wait": 452, "time": [452, 467, 791, 903, 1085, 1123, 1124, 1125, 1297, 1298], "again": [452, 946, 1072, 1155, 1264, 1265, 1266, 1267, 1268, 1269, 1297, 1298], "send": [452, 1257], "understood": [460, 1260], "miscor": 462, "complex_expans": 462, "only_id": 462, "smaller": [462, 1301], "footprint": 462, "takada": 464, "2007": [464, 841], "1186": 464, "gb": [464, 1297, 1298], "215": [464, 1298], "entri": [466, 467, 468, 469, 486, 978, 982, 1057, 1298], "page_s": 467, "200": [467, 1085, 1283], "review": [467, 825, 827, 830, 831, 834, 837, 838, 867, 1120, 1124, 1298], "tax_id": 467, "uniprotkb": [467, 684, 1298], "db_type": 469, "enzyme_isoform": [475, 1298], "substrate_isoform": [475, 1298], "ptm_type": [475, 1298], "resaa": [475, 1298], "resnum": [475, 1138, 1139, 1298], "dbget": 486, "interfac": [486, 681, 867, 868, 900, 903, 1118, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289, 1297, 1298], "jp": 486, "bin": [486, 1281], "www_bget": 486, "max_entity_vari": [488, 489, 490], "medicu": [488, 489, 490, 958], "nest": [488, 489, 490, 903, 1096], "flatten": [488, 998, 1104], "Then": [488, 1072, 1124, 1134, 1146, 1298], "largest": [488, 489, 490, 1143], "hundr": [488, 489, 490, 1143, 1298], "combinatiori": [488, 489, 490], "regulatori": [490, 675, 676, 677, 953, 1300], "join": [499, 1007], "asynchron": 499, "togeth": [499, 867, 1298], "kirouac": 514, "2010": 514, "embopress": [514, 841], "doi": [514, 702, 704, 841], "1038": [514, 841], "msb": 514, "71": 514, "signalingflow": 519, "signalingdirect": 520, "li": 522, "get_li2012": [523, 524, 525], "brand": [527, 903], "compani": 527, "load_lmpid": [529, 530, 903], "lmpid_data_pubmed_ref": 531, "redistribut": [531, 879, 1298, 1300], "matrisomedb": [546, 903], "extracellular": [546, 549, 855, 1298, 1301], "subclass": [546, 762, 1298], "ecm": [549, 1298, 1301], "cdd201287": 572, "c1": [574, 1298], "accurasci": 574, "strong": [576, 911, 1298], "experiment": [576, 903, 1298], "cuhk": 576, "mirtarbase_2019": 576, "best": [585, 903, 979], "our": [585, 1296, 1297], "knowledg": [585, 696], "paper": [585, 1298, 1301], "test": [585, 900, 903, 1009, 1068, 1300], "outcom": [585, 1009], "autophagi": 587, "autophagyregul": 587, "nrf2": [588, 950, 1298], "nrf2ome": [588, 1298], "organism_a": 594, "organism_b": 594, "rel_typ": 594, "pairwis": 594, "genom": [594, 1124, 1134, 1136], "omabrows": 594, "home": [594, 779, 780, 946, 949, 1298], "genome_id_a": 594, "genome_id_b": 594, "resembl": 594, "metric": [594, 903, 1192], "full_config": 596, "config": 596, "ol": 597, "listof_ontologi": 597, "simpli": [597, 903, 1123, 1298], "section": [597, 903, 1022, 1143, 1194, 1219, 1298], "se": [604, 605], "disease_id": 607, "pathogen_taxid": 607, "pathogen": [607, 608, 1300], "pc_label": 611, "by_interact": 619, "integ": [629, 807, 880, 881, 882, 883, 1004, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1284, 1298], "previou": 629, "constitut": [630, 1155], "stoichiometri": [630, 724, 869, 1298], "analysi": [631, 903, 1298, 1300], "resolut": [631, 764, 903], "num": [635, 999, 1003, 1004, 1052], "special": [635, 903, 979, 1298, 1300], "_ref": 635, "phosphoprotein": [636, 1298], "inner": [639, 903, 984, 989, 992], "keepfil": 640, "neither": [640, 704, 1298], "chunk_siz": [643, 644, 646, 647, 648, 649, 650], "half": [643, 644, 646, 647, 648, 650, 1298], "hour": [643, 644, 646, 647, 648, 650, 1085, 1298], "batch": [643, 644, 646, 647, 648, 649, 650, 867], "better": [643, 644, 646, 647, 648, 649, 650, 920, 1146, 1298, 1300, 1301], "stai": [643, 644, 646, 647, 648, 649, 650], "caus": [643, 644, 646, 647, 648, 649, 650], "timeout": [643, 644, 646, 647, 648, 649, 650, 1068], "variabl": [645, 900, 903, 1002, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1298], "graphql": 645, "ltp_onli": 656, "homo": [657, 825, 903, 1298], "sapien": [657, 825, 903, 1298], "htp": [666, 668, 671, 672, 903], "biopax": [668, 671, 727, 730, 1146, 1155, 1297, 1300], "disrupt": 675, "induc": [675, 1298], "vast": [676, 1068, 1298], "close": [676, 1068, 1085, 1143, 1146, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1298], "enough": [676, 1298], "safe": [676, 1146], "align": [676, 1264, 1265, 1266, 1267, 1268, 1269, 1278, 1283, 1286], "regsit": 677, "tabular": [677, 903, 1008, 1298, 1301], "uniprot_1": 679, "chain_1": 679, "residue_1": 679, "seqnum_1": 679, "uniprot_2": 679, "chain_2": 679, "residue_2": 679, "seqnum_2": 679, "bond": [680, 873], "refactor": [680, 681], "contact": [680, 681, 778, 779, 780, 1296], "return_unmap": 681, "unmap": [681, 903], "normal": [681, 689, 690, 696, 855, 903, 1118, 1143, 1277, 1281, 1285, 1297], "uniprot_isoform": 684, "weight": [686, 687, 1194, 1298], "pathologi": [689, 690, 903], "sourcetyp": 694, "mix": [694, 1298, 1301], "consequencetyp": 694, "feature_field": 694, "dictread": 696, "bachman": 696, "assembl": 696, "phosphoproteom": 696, "mine": 696, "biorxiv": 696, "1101": 696, "822668v3": 696, "only_evid": 697, "only_literatur": 697, "ftp": [700, 1068, 1298], "simpler": 700, "lowercas": [700, 1298], "iupac": 700, "sid": 700, "idlist": [702, 704, 706, 707], "pmc": [702, 704], "compli": 704, "attempt": [704, 793, 903, 964, 979, 1051, 1124, 1134, 1139, 1168, 1297, 1298], "manuscript": [704, 1300], "browser": [705, 1298, 1301], "put": [709, 766, 767, 768], "ramilowski": [709, 710], "2015": [709, 710, 1298], "long_not": 710, "acsn": [715, 956], "protein_name_typ": [716, 727], "mandatory_ref": [717, 725], "elem": 719, "cref": 724, "entity_uniprot": [724, 726], "complexvari": [724, 1155, 1157], "control": [725, 964, 1148, 1260, 1298, 1300], "biopax_fil": 727, "binari": [727, 730, 903, 920, 954, 1068], "reactom": [728, 729, 730, 731, 1146], "sbml": [728, 729, 731], "representationa": 729, "pathwaya": 729, "cachefil": [730, 791, 887], "ask": [730, 1298], "veri": [730, 1297, 1298, 1301], "stringent": 730, "free": [730, 1139, 1143, 1146, 1168, 1170, 1171, 1297, 1298, 1300], "approx": [730, 1298], "2g": 730, "jonetjakobsson": [733, 734, 735], "fruitfli": [733, 734], "zebrafish": [733, 734], "chicken": [733, 734], "elegan": [733, 734], "xenopu": [733, 734], "tropicali": [733, 734], "yeast": [733, 734], "anoli": [733, 734], "carolinensi": [733, 734], "left": [735, 1124, 1156, 1278, 1283, 1286], "exclude_secondari": 741, "signalink3": [741, 903, 950, 1298, 1301], "raw_record": 746, "expand_famili": 746, "uniroma2": [746, 1298], "split": [746, 1023, 1041, 1057, 1300], "10116": [746, 903, 1301], "expand": [746, 987, 1148, 1150, 1153, 1155, 1157, 1158], "span": [752, 1298], "highest_confid": [755, 758, 759], "high_confid": [755, 758, 759], "medium_confid": [755, 758, 759], "low_confid": [755, 758, 759], "physical_interaction_scor": [755, 758], "link": 755, "subscor": [755, 758, 759], "interactor": [755, 796], "pre": [755, 758, 759, 1296], "channel": [758, 759, 1298, 1301], "output": [758, 903, 920, 980, 1192, 1298], "form": [758, 1068], "tax": [760, 867, 903], "scientif": [760, 1180, 1296], "surfac": [762, 903, 1102, 1257, 1298], "switch": 764, "elm": [764, 874, 951], "classifi": [764, 1298, 1301], "mechan": [764, 1298], "only_class": 774, "known": [774, 867, 903, 1298, 1301], "3d": [776, 778, 779, 903, 1298], "pdb_uniprot": 778, "threedcomplex_chain": 778, "automat": [778, 779, 857, 863, 866, 903, 1118, 1297, 1298, 1300], "pdb_chain": 778, "3dcomplex": [779, 780, 903], "shmoo": [779, 780], "weizmann": [779, 780], "il": [779, 780], "elevi": [779, 780], "3dcomplexv6": [779, 780], "threedcomplex_contact": 779, "ddi_flat": [782, 783], "dmi_flat": 784, "intract": 789, "soup": 792, "trip_get_uniprot": 792, "syn": [793, 1298], "exclude_method": [794, 795], "specul": [794, 795], "trip_process": 794, "dadio": 795, "take_a_trip": 795, "provcess": 795, "bait": 795, "tab": [796, 903, 920, 1053], "intr": 796, "trp_uniprot": 796, "tag": [796, 1146, 1298], "fill": [796, 903, 914], "twice": 796, "trp": 796, "numer": [805, 808, 903, 979, 1192, 1298], "ucqueri": [806, 1192], "listsourc": [806, 1192], "unichem_sourc": 807, "unichem_info": 808, "ncbi_id": [810, 1298], "latin": [810, 1183, 1184, 1298], "english": [810, 1180, 1298], "latin_synonym": [810, 1298], "entry_vers": [811, 1298], "sequence_vers": [811, 1298], "entry_nam": [811, 1298], "replaced_bi": [811, 1298], "archiv": [815, 1068, 1069, 1124, 1146], "delet": [815, 903, 909, 1071, 1072, 1094, 1124, 1146, 1297, 1298, 1300], "confirm": [824, 826], "client": [825, 1192, 1297, 1298], "plain": [825, 1298], "_uniprot_field": 825, "help": [825, 1123, 1124, 1296], "uniprotkb_column_nam": 825, "cover": [825, 903, 920, 1298], "ke": 825, "histori": [828, 1296], "oldest": [828, 1297], "fit": [839, 1124, 1298], "msb4100200": 841, "researchg": 842, "humansignalingnetwork": [842, 844], "publish": [842, 1298], "jan": 842, "edwin": 842, "omnipath": [842, 855, 903, 952, 954, 955, 956, 1296, 1300, 1301], "research": [842, 1298], "gate": 842, "wang_interact": 842, "s4": 847, "07": [847, 1298], "025": 847, "wojtowicz": 847, "1111": 849, "nya": 849, "12776": 849, "25988664": 849, "scope": [852, 855, 1002, 1298, 1301], "avoid": [852, 855, 1062, 1077, 1082, 1264, 1265, 1266, 1267, 1268, 1269, 1297, 1298], "enabl": [852, 855, 879, 1143], "annotdefbas": 852, "op": [854, 1016, 1033, 1034, 1035, 1297, 1298], "annotopbas": 854, "intersect": [854, 855, 903, 977, 1148, 1154, 1255], "behav": [855, 1298], "s10": 855, "turei": 855, "prep": 855, "actual": [855, 972, 1260, 1284, 1298, 1299], "annot_composite_database_nam": 855, "entit": 855, "cell_surfac": 855, "itself": [855, 903, 1010, 1082, 1083, 1298], "isdisjoint": 855, "null": [855, 903, 1298], "mappinginput": [857, 858, 859, 862, 863, 865, 866, 867, 1123], "pro_id_type_a": [857, 863], "pro": [857, 863, 1127], "pro_id_type_b": [857, 863], "abov": [857, 863, 866, 887, 903, 909, 1086, 1297, 1298, 1301], "biomart_id_type_a": 858, "biomart_id_type_b": 858, "input_": 859, "col_a": 859, "col_b": 859, "type_": 860, "resource_id_type_a": [860, 1298], "resource_id_type_b": [860, 1298], "id_col_a": [861, 1298], "id_col_b": [861, 1298], "extra_edge_attr": [861, 903, 920], "extra_node_attrs_a": 861, "extra_node_attrs_b": 861, "positive_filt": 861, "negative_filt": 861, "mark_sourc": 861, "mark_target": 861, "curl_arg": 861, "must_have_refer": 861, "unique_field": 861, "expand_complex": [861, 1124, 1134, 1135, 1136], "only_default_organ": 861, "vertex": [861, 903, 920, 1105, 1108, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "particular": [861, 879, 909, 1013, 1017, 1030, 1033, 1058, 1298], "vertic": [861, 903, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1274, 1275, 1298], "consortium": [863, 1298], "id_col": 864, "extra_attr": [864, 890], "uniprot_id_type_a": 866, "uniprot_id_type_b": 866, "upload": [866, 1123], "webservic": [866, 926, 930, 961, 1296], "would": [867, 1298, 1299], "directli": [867, 893, 903, 909, 1123, 1124, 1125, 1146, 1257, 1296, 1297, 1301], "programmat": [867, 1298], "slightli": 867, "capabl": [867, 975, 976], "resource_id_typ": 867, "handl": [868, 900, 903, 920, 975, 976, 1068, 1124, 1125, 1180, 1297, 1298], "short": [868, 903, 1184, 1298, 1301], "stoichiometr": 869, "coeffici": [869, 1040], "repetit": 869, "impli": 869, "kept": [869, 903, 1057, 1124, 1298], "compat": [869, 879, 1284, 1300], "add_attr": 869, "domain_id_typ": 870, "domain_a": 871, "domain_b": 871, "ref": [871, 876, 903], "contact_residu": 871, "get_lin": 872, "resources_only_primari": 872, "intend": [872, 1298], "enzyme_genesymbol": [872, 1298], "substrate_genesymbol": [872, 1298], "residue_typ": [872, 1298], "residue_offset": [872, 1298], "css": 873, "stab_en": 873, "solv_en": 873, "area": [873, 1260], "add_residu": 873, "res_a": 873, "res_b": 873, "undefin": [873, 1298], "124": [873, 1288, 1298], "serin": 873, "hbond": 873, "sbridg": 873, "ssbond": 873, "covbond": 873, "bond_typ": 873, "get_bond": 873, "throught": 873, "numof_residu": 873, "bound": [873, 1260, 1272, 1274, 1275, 1298], "regex": 874, "motif_nam": 874, "prob": 874, "attrib": 879, "academ": [879, 1298], "alik": 879, "licensefeatur": [880, 882, 883], "check_level": [880, 881, 882, 883], "int_to_level": [880, 881, 882, 883], "nearest": [880, 881, 882, 883], "ordin": [880, 881, 882, 883], "level_to_int": [880, 881, 882, 883], "to_int": [880, 881, 882, 883], "pp": [887, 1278, 1279, 1283, 1286, 1288], "htp_threshold": [887, 903, 1278, 1286], "20": [887, 1278, 1286, 1293, 1298], "data_attr_nam": 889, "evidence_typ": [890, 892, 894], "resource_attr": 890, "get_via": 890, "come": [890, 903, 1124, 1136, 1297, 1298, 1301], "data_typ": [891, 893, 894], "networkresourcekeybas": 893, "underscor": 893, "came": 893, "clearer": [900, 903], "much": [900, 903, 1123, 1297, 1298, 1300, 1301], "versatil": [900, 903, 1208, 1230, 1297, 1298, 1300], "don": [900, 903, 1017, 1058, 1124, 1134, 1297, 1298, 1299, 1301], "recommend": [900, 903, 1124, 1135, 1298], "contian": [900, 903], "check_nod": 900, "check_param": 900, "di": [900, 903], "declar": 900, "get_dir": [900, 1298], "negative_sources_revers": 900, "negative_sources_straight": 900, "positive_sources_revers": 900, "positive_sources_straight": 900, "set_dir": 900, "set_direct": 900, "set_sign": 900, "src_by_sourc": 900, "tgt_by_sourc": 900, "unnam": 903, "cache_dir": [903, 1068], "outdir": 903, "At": [903, 1096, 1298], "offer": [903, 1298, 1300], "migrat": [903, 1298], "solut": 903, "theori": 903, "librari": [903, 1085, 1298], "taxonom": 903, "default_name_typ": 903, "mirbas": [903, 1127, 1298], "project": [903, 1257], "messag": [903, 980, 1072, 1075, 1076, 1085, 1086, 1146, 1296, 1301], "log": [903, 1092, 1296, 1297, 1300], "adjlist": 903, "adjac": 903, "update_adjlist": 903, "chembl_mysql": 903, "read_data_fil": 903, "db_dict": 903, "outer": [903, 984, 992], "whose": [903, 982, 986], "dgraph": [903, 1298], "disclaim": [903, 1298], "dlabdct": 903, "dnoddct": 903, "dnodind": 903, "dnodlab": 903, "dnodnam": 903, "edgeattr": 903, "exp": 903, "exp_prod": 903, "product": [903, 1120, 1298], "edges_express": 903, "exp_sampl": 903, "proteomicsdb": 903, "get_proteomicsdb": 903, "failed_edg": 903, "fail": [903, 920, 1124], "sublist": 903, "goannot": [903, 1103, 1298], "gsea": 903, "msigdb": 903, "has_cat": 903, "flow": [903, 923, 950, 1301], "reaction": [903, 954, 1157, 1298, 1301], "rnum": 903, "enum": 903, "snum": 903, "htref": 903, "labdct": 903, "receptor_list": 903, "rec": 903, "druggability_list": 903, "dgb": 903, "kinases_list": 903, "kin": 903, "tfs_list": 903, "disease_genes_list": 903, "signaling_proteins_list": 903, "sig": 903, "proteome_list": 903, "cancer_drivers_list": 903, "cdv": 903, "mutation_sampl": 903, "mysql_conf": 903, "negatom": 903, "apply_neg": 903, "noddct": 903, "nodind": 903, "nodlab": 903, "nodnam": 903, "palett": [903, 1256, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1277, 1281, 1285], "hexadecim": 903, "color": [903, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1284, 1286, 1287, 1289], "plot": [903, 1260, 1263, 1296, 1300], "pathway_typ": 903, "raw_data": 903, "alphanumer": [903, 1000, 1091], "charact": [903, 980, 1068, 1091, 1124, 1134, 1136, 1298], "session_nam": 903, "abc12": 903, "sourcenetedg": 903, "sourcenetnod": 903, "u_pfam": 903, "uniprot_map": 903, "map_item": 903, "vertexattr": 903, "donwload": 903, "acsn_effect": 903, "add_geneset": 903, "geneset": 903, "add_grouped_eattr": 903, "add_grouped_set_eattr": 903, "add_list_eattr": 903, "add_set_eattr": 903, "affect": [903, 1298], "all_between": 903, "ab": [903, 958, 975], "ba": 903, "all_neighbour": 903, "neighbour": 903, "apply_list": 903, "node_or_edg": 903, "previous": [903, 1123, 1143], "load_list": 903, "data_format": [903, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1298, 1300], "basic_stat": 903, "caption": 903, "latex_hdr": [903, 931, 962], "fontsiz": [903, 931, 962], "font": [903, 931, 962, 1292], "helveticaneueltstd": [903, 931, 962], "ltcn": [903, 931, 962], "header_format": 903, "row_ord": 903, "use_cat": 903, "pdflatex": 903, "stat": [903, 1298], "tex": [903, 931, 962, 1282], "basic_stats_intergroup": 903, "groupa": 903, "groupb": 903, "intogen_fil": 903, "cosmic": 903, "intogen": 903, "cancer_gene_census_list": 903, "organisms_allow": 903, "collapse_by_nam": 903, "collaps": [903, 984], "lst": [903, 975, 982, 998, 1022, 1192, 1298], "num_method": [903, 979], "concaten": [903, 979, 984], "greater": [903, 979], "merge_dict": [903, 979], "complex_comembership_network": 903, "havugimana": 903, "complexport": [903, 1298], "compleat": [903, 1298], "complexes_in_network": 903, "csourc": 903, "compounds_from_chembl": 903, "crit": 903, "andor": 903, "assay_typ": 903, "relationship_typ": 903, "h": [903, 1085, 1192, 1298], "multi_queri": 903, "chebl_mysql": 903, "loadth": 903, "get_sub": 903, "critic": 903, "search_attr_or": 903, "search_attr_and": 903, "adm": 903, "physicochem": 903, "toxic": 903, "u": [903, 1257, 1297, 1298], "unassign": 903, "Not": [903, 920, 1055, 1056, 1143, 1284, 1298], "compounds_target": 903, "copy_edg": 903, "move": [903, 1088, 1300], "count_sol": 903, "collection_method": 903, "add_tot": 903, "add_perc": 903, "add_cat_tot": 903, "comput": [903, 1006, 1011, 1037, 1040, 1298], "against": [903, 1009, 1298, 1301], "curation_stat": 903, "curation_tab": 903, "header_s": 903, "normals": 903, "curators_work": 903, "estim": 903, "how": [903, 1124, 1134, 1296, 1297], "year": [903, 1085], "took": 903, "achiev": 903, "amount": [903, 1068, 1298], "databases_similar": 903, "simpson": [903, 1037], "sorensen": [903, 1040], "third": [903, 1298], "degree_dist": 903, "compris": 903, "pwnet": 903, "session_id": 903, "degdist": 903, "delete_by_organ": 903, "delete_by_sourc": 903, "vertexattrstodel": 903, "edgeattrstodel": 903, "delete_unknown": 903, "delete_unmap": 903, "dgenesymbol": 903, "dg": 903, "dgss": 903, "dneighbor": 903, "dp": 903, "get_nod": 903, "dprotein": 903, "duniprot": 903, "dup": 903, "dv": 903, "edge_exist": 903, "sensit": [903, 1297], "edge_loc": 903, "topn": 903, "edge_nam": 903, "edges_3d": 903, "get_instruct": 903, "i3d": 903, "get_i3d": 903, "edges_between": 903, "group1": 903, "group2": 903, "even": [903, 946, 1043, 1073, 1155, 1298, 1300, 1301], "func": 903, "lambda": [903, 1287], "everi": [903, 1146, 1298, 1300], "edges_in_complex": 903, "in_complex": 903, "edges_ptm": 903, "edgeseq_invers": 903, "export_dot": 903, "edges_filt": 903, "nodes_filt": 903, "edge_sourc": 903, "dir_sourc": 903, "return_object": 903, "save_dot": 903, "save_graph": 903, "prog": 903, "neato": 903, "hide": 903, "auto_edg": 903, "hide_nod": 903, "pygraphviz": 903, "agraph": 903, "requesr": 903, "dot": [903, 1184], "graphic": [903, 1287], "extens": [903, 1057, 1143], "graphviz": 903, "algorithm": [903, 1272, 1274, 1275], "agrapg": 903, "draw": [903, 1257, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1274, 1275, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "style": [903, 1260, 1263, 1300, 1301], "resource_categori": 903, "constant": [903, 1088, 1264, 1265, 1266, 1267, 1268, 1269], "callback": [903, 1124], "edge_penwidth": 903, "vertex_shap": 903, "graph_label": 903, "_name": 903, "miss": [903, 1025, 1298], "edge_arrowhead": 903, "vertex_fillcolor": 903, "rubric": 903, "net": [903, 1257, 1298], "pfile": 903, "arn": [903, 950, 1298], "tgf": [903, 1298], "slk_pathwai": 903, "tgf_slk": 903, "main_titl": 903, "beta": [903, 1298], "label_font": 903, "med": 903, "export_edgelist": 903, "edge_attribut": 903, "stream": 903, "export_graphml": 903, "graphml": 903, "netrowk": [903, 920], "export_ptms_tab": 903, "nama": 903, "export_sif": 903, "simpl": [903, 989, 996, 1009, 1155, 1297, 1298, 1301], "export_struct_tab": 903, "export_tab": 903, "extra_node_attr": [903, 920], "unique_pair": [903, 920], "_a": [903, 920], "_b": [903, 920], "suffix": [903, 920, 1045], "find_all_path": 903, "becau": 903, "get_all_shortest_path": 903, "shortest": 903, "neighbor": [903, 1298], "find_all_paths2": 903, "psize": 903, "find_complex": 903, "dna": [903, 1124, 1134, 1136], "polymeras": 903, "pol": 903, "first_neighbour": 903, "fisher_enrich": 903, "enrich": 903, "fisher": 903, "exact": [903, 1301], "conting": 903, "scipi": 903, "fisher_exact": 903, "prior": 903, "odd": 903, "ratio": 903, "extrem": 903, "observ": [903, 1298], "hypothesi": 903, "geneset_enrich": 903, "geneset_id": 903, "alpha": [903, 1265, 1267, 1268, 1281, 1287, 1298], "05": [903, 1298], "correction_method": 903, "hommel": 903, "cfisher": 903, "genesymbol_label": 903, "remap_al": 903, "recreat": 903, "anew": 903, "were": [903, 1298], "lnum": 903, "conv_edg": 903, "ret": 903, "place": [903, 1298], "anywai": 903, "get_dirs_sign": 903, "get_edg": [903, 1298], "get_eid": 903, "vertec": 903, "get_funct": 903, "fun": 903, "get_giant": 903, "giant": 903, "get_go": 903, "get_max": 903, "attrlist": 903, "get_network": 903, "subgraph": [903, 1104], "get_node_d": 903, "get_node_pair": 903, "get_nodes_d": 903, "get_pathwai": 903, "get_taxon": 903, "tax_dict": 903, "go_annotate_graph": 903, "go_enrich": 903, "gs_affected_bi": 903, "gs_affect": 903, "gs_edg": 903, "gs_in_direct": 903, "gs_in_undirect": 903, "gs_inhibited_bi": 903, "gs_inhibit": 903, "gs_neighborhood": 903, "gs_neighbor": 903, "gs_stimulated_bi": [903, 1298], "gs_stimul": [903, 1298], "gss": [903, 1298], "guide2pharma": [903, 950, 1298], "having_attr": 903, "having_eattr": 903, "having_ptm": 903, "having_vattr": 903, "homology_transl": 903, "htp_stat": 903, "in_direct": 903, "in_undirect": 903, "ypath": 903, "init_complex_attr": 903, "init_edge_attr": 903, "init_gsea": 903, "lazi": 903, "save_network": 903, "default_network": 903, "init_vertex_attr": 903, "interactions_al": 903, "distinguish": [903, 1146, 1297], "interactions_inhibitori": 903, "interactions_inhibitory_by_resourc": 903, "interactions_stimulatori": 903, "interactions_stimulatory_by_resourc": 903, "intergroup_shortest_path": 903, "intogen_cancer_drivers_list": 903, "iter_edg": 903, "iter_interact": 903, "all_undirect": 903, "behaviour": [903, 1071, 1074, 1075, 1079, 1124, 1134, 1136, 1298], "jaccard_edg": 903, "10k": 903, "binom": 903, "49995000": 903, "jaccard_meta": 903, "jedg": 903, "kegg_direct": 903, "kinase_stat": 903, "idx": 903, "label_by_go": 903, "go_term": 903, "label_edg": 903, "label_vertic": 903, "laudanna_direct": [903, 955], "laudanna_effect": [903, 955], "licenc": 903, "list_resourc": 903, "load_3dcomplex": 903, "load_3did_ddi": 903, "load_3did_ddi2": 903, "load_3did_dmi": 903, "load_3did_interfac": 903, "load_all_pathwai": 903, "load_compleat": 903, "load_complexport": 903, "load_comppi": 903, "load_corum": 903, "load_dbptm": 903, "non_match": 903, "load_ddi": 903, "domaindomain": 903, "threedcomplex": 903, "threedcomplex_ddi": 903, "domino": [903, 951], "domino_ddi": 903, "load_depod_dmi": 903, "load_disgenet": 903, "full_data": 903, "disgenet": 903, "ulm": 903, "medic": 903, "languag": [903, 1180, 1297, 1298], "system": [903, 1068, 1122, 1297, 1298], "wish": 903, "snp": 903, "load_dmi": 903, "pfam_region": 903, "load_mimp_dmi": 903, "load_pnetworks_dmi": 903, "load_domino_dmi": 903, "load_pepcyb": 903, "load_psite_reg": 903, "load_psite_pho": 903, "load_ielm": 903, "load_phosphoelm": 903, "load_elm": 903, "load_dorothea": 903, "load_exocarta_attr": 903, "load_sampl": 903, "load_ref": 903, "exocarts_exosom": 903, "exosom": 903, "exocarta_sampl": 903, "exocarta_ref": 903, "sampl": [903, 1143], "load_express": 903, "shortcut": [903, 1298], "load_go": 903, "load_havugimana": 903, "load_hpa": 903, "summarize_pathologi": 903, "medium": 903, "na_valu": 903, "atla": [903, 1298, 1301], "load_hprd_ptm": 903, "load_interfac": 903, "load_li2012_ptm": 903, "load_ligand_receptor_network": 903, "lig_rec_resourc": 903, "inference_from_go": 903, "keep_undirect": 903, "keep_rec_rec": 903, "keep_lig_lig": 903, "load_matrisome_attr": 903, "matrisome_class": 903, "matrisome_subclass": 903, "matrisome_not": 903, "load_membranome_attr": 903, "membranom": 903, "helix": [903, 1298], "load_mut": 903, "gdsc_datadir": 903, "mutation_fil": 903, "load_neg": 903, "load_old_omnipath": 903, "kinase_substrate_extra": 903, "remove_htp": 903, "keep_direct": 903, "min_refs_undirect": 903, "august": 903, "furthermor": [903, 1298], "load_omnipath": [903, 1298], "ligand_receptor_extra": 903, "pathway_extra": 903, "old_omnipath_resourc": 903, "regardless": 903, "load_pathwai": 903, "sirnor_pathwai": 903, "param": [903, 909, 920, 937, 1068, 1096, 1098, 1123, 1143, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275], "_pathwai": 903, "load_pdb": 903, "rai": 903, "nmr": 903, "load_pfam": 903, "load_pfam2": 903, "region": [903, 1172, 1298], "load_pfam3": 903, "dom": 903, "load_phospho_dmi": 903, "return_raw": 903, "load_pisa": 903, "load_ptm": 903, "load_ptms2": 903, "force_load": 903, "enz_sub": [903, 909, 1297, 1298, 1301], "newli": 903, "introduc": 903, "phosphoelm": [903, 1298], "dbptm": [903, 951, 1298], "phosphonetwork": [903, 1298, 1301], "li2012": [903, 1298], "mimp": [903, 1298], "translateion": 903, "guarante": [903, 1298], "trueli": 903, "appropri": [903, 1085, 1115, 1146, 1297, 1298], "nonhuman": 903, "whereev": 903, "besid": [903, 1297, 1298], "ptmprocessor": 903, "ptmaggreg": [903, 1298], "load_signor_ptm": 903, "load_surfaceome_attr": 903, "surfaceom": [903, 1298], "surfaceome_scor": 903, "surfaceome_class": 903, "surfaceome_subclass": 903, "load_tfregulon": 903, "load_vesiclepedia_attr": 903, "load_vesicle_typ": 903, "vesiclepedia": 903, "vesiclepedia_in_vesicl": 903, "vesiclepedia_sampl": 903, "vesiclepedia_ref": 903, "vesiclepedia_vesicl": 903, "vesicl": 903, "lookup_cach": 903, "int_cach": 903, "edges_cach": 903, "folder": 903, "loop_edg": 903, "mean_reference_per_interact": 903, "mean_reference_per_interaction_by_resourc": 903, "merge_list": 903, "and_or": [903, 996], "pypat": 903, "_": [903, 909, 1045, 1068], "logic": [903, 1102], "perfom": 903, "merge_nod": 903, "lowest": [903, 1086, 1102, 1104], "mimp_direct": 903, "mutated_edg": 903, "compar": [903, 986], "mark": [903, 1184], "underli": [903, 1208, 1230], "name_edgelist": 903, "names2vid": 903, "negative_report": 903, "report": [903, 1298], "retun": 903, "neighborhood": [903, 1298], "neighbourhood_network": 903, "center": [903, 1027, 1284, 1287, 1289], "network_by_go": 903, "node_categori": 903, "network_sourc": 903, "extracel": 903, "0005576": [903, 1102, 1298], "0070062": [903, 1102], "plasmamem": 903, "0005887": [903, 1102], "definint": 903, "foo": 903, "foo__bar": 903, "network_filt": 903, "aim": [903, 946, 1297, 1298], "cut": [903, 1277], "lose": 903, "less": [903, 923, 1124, 1134, 1136, 1298], "hairbal": 903, "usabl": [903, 1298], "network_stat": 903, "averag": [903, 1143, 1298], "diamet": 903, "transit": 903, "cohes": 903, "new_edg": 903, "add_edg": 903, "new_nod": 903, "add_vertic": 903, "node_exist": 903, "numof_directed_edg": 903, "numof_edg": 903, "numof_reference_interaction_pair": 903, "numof_references_by_resourc": 903, "numof_undirected_edg": 903, "orthology_transl": 903, "pathway_attribut": 903, "pathway_memb": 903, "pathway_nam": 903, "pathway_similar": 903, "sorensen_pathwai": 903, "sim": 903, "pw": 903, "pathways_t": 903, "genes_pathwai": 903, "pw_sourc": 903, "phosphonetworks_direct": 903, "phosphopoint_direct": 903, "phosphorylation_direct": 903, "phosphorylation_sign": 903, "phosphosite_direct": 903, "prdb_tissue_expr": 903, "prdb": 903, "group_funct": 903, "process_direct": 903, "dirs_onli": 903, "process_dmi": 903, "protein_edg": 903, "random_walk_with_return": 903, "niter": 903, "1000": [903, 1298], "walk": 903, "rwr": 903, "affin": 903, "restart": 903, "atg4b": [903, 1301], "rainbowpalett": 903, "round": 903, "99": [903, 1298], "vertex_color": [903, 1256, 1298], "random_walk_with_return2": 903, "read_from_cach": 903, "subfold": 903, "read_list_fil": 903, "readlist": 903, "Such": [903, 1298], "outlin": 903, "reference_edge_ratio": 903, "reference_hist": 903, "final": [903, 1298], "hist": 903, "remove_undirect": 903, "min_ref": 903, "run_batch": 903, "tocal": 903, "pcikl": 903, "save_sess": 903, "obj": [903, 920, 996, 1001, 1005, 1009, 1028, 1063], "cannot": 903, "second_neighbour": 903, "with_first": 903, "wit_first": 903, "select_by_go": 903, "select_by_go_expr": 903, "select_by_go_al": 903, "go_expr": 903, "preced": [903, 1102], "parenthes": [903, 1102, 1298], "separate_by_categori": 903, "set_boolean_vattr": 903, "vid": 903, "negat": [903, 996], "set_categori": [903, 1284], "cat": 903, "well": [903, 1208, 1230, 1297, 1298], "coerc": [903, 998], "refs_by_cat": 903, "set_chembl_mysql": 903, "titl": [903, 1008, 1048, 1053, 1194, 1278, 1281, 1283, 1284, 1286, 1287, 1289], "config_fil": 903, "ini": 903, "mysql_config": 903, "set_disease_gen": 903, "set_drugg": 903, "set_drugtarget": 903, "dtg": 903, "set_kinas": 903, "set_plasma_membrane_proteins_cspa": 903, "cpsa": 903, "set_plasma_membrane_proteins_cspa_surfaceom": 903, "surf": 903, "set_plasma_membrane_proteins_surfaceom": 903, "ish": 903, "set_receptor": 903, "set_signaling_protein": 903, "set_tf": 903, "set_transcription_factor": 903, "shortest_path_dist": 903, "susbet": 903, "whithin": 903, "taken": [903, 1264, 1265, 1266, 1267, 1268, 1269], "get_shortest_path": 903, "oppos": 903, "metabol": [903, 1298], "signor_pathwai": 903, "similarity_group": 903, "small_plot": 903, "pwlist": 903, "__": 903, "patwhai": 903, "source_diagram": 903, "outf": [903, 1068, 1255], "source_network": 903, "embl": [903, 1124, 1134, 1136, 1298], "helvetica": [903, 1277, 1281, 1285, 1290], "neue": [903, 1277, 1281, 1285, 1290], "linotyp": 903, "light": 903, "source_similar": 903, "source_stat": 903, "sources_hist": 903, "source_num": 903, "sources_overlap": 903, "diagon": 903, "sources_venn_data": 903, "return_data": 903, "keep_collect": 903, "straight_between": 903, "string_effect": 903, "sum_in_complex": 903, "edges_in_comlex": 903, "table_latex": 903, "sum_row": 903, "sum_label": 903, "sum_col": 903, "third_source_direct": 903, "use_string_effect": 903, "use_laudanna_data": 903, "tissue_network": 903, "transcription_factor": 903, "uniq_node_list": 903, "uniq_ptm": 903, "up_affected_bi": 903, "up_affect": 903, "up_edg": 903, "up_in_direct": 903, "up_in_undirect": 903, "up_inhibited_bi": 903, "up_inhibit": 903, "up_neighborhood": 903, "up_neighbor": 903, "up_stimulated_bi": 903, "up_stimul": 903, "mainli": 903, "correspod": 903, "weren": 903, "update_cat": 903, "update_db_dict": 903, "update_pathway_typ": 903, "update_pathwai": 903, "update_sourc": 903, "update_summari": 903, "summar": [903, 1298], "update_vertex_sourc": 903, "update_vindex": 903, "update_vnam": 903, "fast": [903, 1298], "vertex_pathwai": 903, "vsg": 903, "vsup": 903, "wang_effect": 903, "write_t": 903, "tbl": [903, 1008, 1024, 1046, 1047, 1048, 1053], "colnam": 903, "rownam": [903, 1070], "logfil": [906, 1085, 1298], "build_dataset": 909, "compile_t": 909, "quantit": [909, 1296], "dataset_depend": 909, "define_dataset": 909, "intercel": [909, 1296, 1297, 1300, 1301], "builder": [909, 1297], "get_db": [909, 1297, 1298], "ensure_dataset": 909, "force_reload": 909, "force_rebuild": 909, "availab": 909, "ensure_dir": 909, "figur": [909, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1300], "ensure_modul": 909, "foreach_dataset": 909, "get_args_cur": 909, "get_args_lncrna_mrna": 909, "get_args_mirna_mrna": 909, "get_args_small_molecul": 909, "get_args_tf_mirna": 909, "get_args_tf_target": 909, "get_build_arg": 909, "get_param": 909, "load_dataset": 909, "aggreg": 909, "network_df_by_sourc": 909, "pickle_exist": 909, "pickle_path": 909, "reload_modul": 909, "remove_al": 909, "elsewher": 909, "remove_db": 909, "set_network": 909, "table_path": 909, "app": [911, 1296, 1297], "from_dict": 915, "dct": [915, 978, 984, 987, 991, 992, 1010], "from_json": 915, "class_and_param": 916, "default_vertex_attr_processor": 920, "default_edge_attr_processor": 920, "add_extra_field": 920, "dr": 920, "generic_attr_processor": 920, "proc": 920, "wrap": [920, 1024, 1047, 1048, 1085], "processor": [920, 1170, 1171, 1297], "know": [920, 1072, 1298], "expect": 920, "try": [920, 1124, 1134, 1136, 1297, 1298], "typeerror": 920, "get_head": 920, "sources_t": 920, "write_tab": 920, "auxiliari": 922, "prepar": 922, "own": [922, 1298, 1300], "standalon": [926, 1297, 1298], "build_dir": 927, "outfile_interact": 927, "omnipath_webservice_interact": 927, "outfile_enz_sub": 927, "omnipath_webservice_enz_sub": 927, "outfile_complex": 927, "omnipath_webservice_complex": 927, "outfile_annot": 927, "omnipath_webservice_annot": 927, "outfile_intercel": 927, "omnipath_webservice_intercel": 927, "network_dataset": 927, "write_html": [930, 961], "52": [931, 962, 1298], "baseserv": [934, 938], "twistedwebresourc": 936, "port": [937, 1070], "serverclass": 937, "tableserv": 937, "webserv": [937, 1301], "listen": 937, "input_fil": 938, "only_t": 938, "exclude_t": 938, "websrvtab": [938, 1300], "resource_info_path": 946, "runner": [946, 949], "use_package_path": 946, "01": [946, 1085, 1298], "develop": [946, 1297], "server": [946, 1297, 1298, 1300, 1301], "02": [946, 1298], "inherit": [946, 1298], "forc": [946, 1088, 1298], "remove_old": 946, "adhesom": [950, 1298], "baccin2019": [950, 1298], "ca1": [950, 1298], "cellchatdb": [950, 1298], "cellink": [950, 1298], "celltalkdb": [950, 1298], "connectomedb": [950, 1298], "death": [950, 1298], "icellnet": [950, 1298], "lrdb": [950, 1298], "pdz": [950, 1298], "ramilowski2015": [950, 1298], "scconnect": [950, 1298], "spike": [950, 1298, 1301], "talklr": [950, 1298], "trip": [950, 1298], "depod": [951, 1298], "hprd_p": 951, "iptmnet": [951, 1298], "kea": [951, 1298], "lmpid": 951, "phelm": 951, "psite": 951, "lack": 951, "alz": 952, "ccmap": [952, 953], "dip": [952, 953], "innatedb": [952, 953], "lit17": 952, "matrixdb": [952, 953, 1298], "mppi": [952, 953], "nci_pid": 954, "signalink2": 954, "minor": [954, 1146], "oreganno_old": 957, "encode_dist": 958, "encode_prox": 958, "htri": 958, "oreganno": 958, "pazar": 958, "tfregulon": 958, "license_dir": 966, "No": [968, 1298], "quicker": 972, "cachedir": 973, "ensur": [973, 1062, 1297, 1298], "toadd": [975, 976], "ommit": 975, "necessarili": 975, "preserv": [975, 1054, 1055, 1056, 1057, 1060, 1082, 1083, 1298], "uniq_list": [975, 1060], "cd": [975, 1124, 1134, 1136], "ef": 975, "st": 976, "equival": [977, 1085, 1298], "cast": [978, 996, 1020], "80": [980, 1298], "plu": [980, 1002], "indent": 980, "byte": [981, 1068, 1143], "elemenst": 982, "deep": [983, 1298], "usag": [983, 1125, 1146, 1192], "front": [984, 987, 1085], "expand_tuple_kei": 984, "outermost": 984, "toward": [984, 1298], "innermost": 984, "dict_of_set": [985, 990, 994], "__len__": 985, "d1": [986, 993, 1007, 1012, 1298], "d2": [986, 993, 1007, 1012], "comparison": 986, "chop": 987, "dict_of_count": 988, "percentag": 988, "subdict": 989, "leaf": [989, 1104], "heurist": 989, "AND": [996, 1102, 1143, 1298, 1301], "met": 996, "OR": [996, 1102, 1298], "meet": 996, "eq": [996, 1009], "foobar": 996, "lsit": 998, "Its": [998, 1272, 1274, 1275, 1298], "abc": 998, "numpi": 999, "nan": [999, 1298], "pypath_no_valu": 1001, "loc_dict": 1002, "_from": 1007, "colformat": 1008, "lineno": [1008, 1024, 1047], "doc_templ": 1008, "booktab": 1008, "latex_compil": 1008, "latex_execut": 1008, "xelatex": 1008, "latex_engin": 1008, "ordereddict": [1008, 1048, 1053, 1203, 1298], "hash": [1011, 1123, 1298], "by_group": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1030, 1031, 1032, 1033, 1034, 1035, 1058, 1059, 1061], "thing": [1013, 1017, 1030, 1033, 1058, 1124], "stackoverflow": [1022, 1068], "3744502": 1022, "854988": [1022, 1068], "width": [1024, 1047, 1048, 1065, 1208, 1230, 1255, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1288, 1289], "tablefmt": [1024, 1047, 1208, 1230], "fancy_grid": [1024, 1047, 1208, 1230], "pattern": [1025, 1298], "conveni": [1025, 1148, 1298], "angl": [1027, 1295], "dimension": 1027, "space": [1027, 1123, 1298], "clockwis": 1027, "coordin": [1027, 1272, 1274, 1275, 1298], "rel": 1027, "explanatori": 1039, "anyht": 1039, "123": [1039, 1298], "hello": 1039, "dice": 1040, "force_set": 1043, "interchang": [1043, 1044], "hashabl": 1044, "duplic": 1044, "truncat": [1048, 1297, 1298], "var": [1049, 1050], "val": 1051, "aba": [1054, 1060], "peterb": [1055, 1056], "plog": [1055, 1056], "uniqifi": [1055, 1056], "benchmark": [1055, 1056], "idfun": 1057, "repeat": [1057, 1298], "behavior": 1057, "abracadabra": 1057, "32": [1057, 1296, 1298], "42": [1057, 1298], "png": [1057, 1298], "txt": 1057, "uppercas": 1062, "word": 1062, "unhash": 1063, "req_head": [1068, 1298], "debug": [1068, 1077, 1078, 1083], "compr": [1068, 1069], "files_need": [1068, 1069], "connect_timeout": 1068, "ignore_content_length": 1068, "init_fun": 1068, "get_jsessionid": 1068, "init_use_cach": 1068, "default_mod": [1068, 1069], "override_post": 1068, "init_head": 1068, "return_head": 1068, "compress": [1068, 1069, 1146], "write_cach": [1068, 1123], "force_quot": 1068, "sftp_user": 1068, "sftp_passwd": 1068, "sftp_passwd_fil": 1068, "sftp_port": 1068, "22": [1068, 1070, 1298, 1301], "sftp_host": 1068, "sftp_ask": 1068, "setup": [1068, 1080, 1096, 1298], "bypass_url_encod": 1068, "empty_attempt_again": 1068, "keep_fail": 1068, "alpn": 1068, "http2": 1068, "fileopen": [1068, 1146], "pycurl": [1068, 1298], "cooki": 1068, "multipart": 1068, "quot": 1068, "redirect": 1068, "gzip": [1068, 1069], "tar": [1068, 1069, 1146], "gz": [1068, 1069, 1146], "zip": [1068, 1069, 1146], "construct_binary_data": 1068, "is_quot": 1068, "question": [1068, 1297], "1637762": 1068, "open_tgz": [1068, 1069], "replace_forbidden": 1068, "repl": 1068, "forbidden": 1068, "slash": 1068, "unix": 1068, "window": 1068, "environ": [1068, 1298], "set_binary_data": 1068, "transmit": 1068, "url_fix": 1068, "charset": 1068, "utf": [1068, 1069], "121017": 1068, "file_param": 1069, "_open": 1069, "set_fileobj": 1069, "bz2": 1069, "multifil": 1069, "examin": 1069, "host": [1070, 1298, 1300], "_global_context_off": [1071, 1073, 1075, 1077, 1079, 1082], "context": [1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1096, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1275, 1277, 1281, 1285, 1298], "behind": [1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1298], "scene": [1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1298], "cachedel": [1071, 1072], "_global_context_on": [1072, 1074, 1076, 1078, 1080, 1083], "dryrun": [1072, 1079, 1080], "off": [1073, 1088], "cache_on": 1073, "cacheprint": [1075, 1076], "restor": [1077, 1079, 1082, 1096], "cache_debug_off": 1077, "cache_debug_on": 1078, "cache_dryrun_off": 1079, "cache_dryrun_on": 1080, "lastcurl": [1082, 1083, 1298], "cache_preserve_off": 1082, "cache_preserve_on": 1083, "console_level": [1085, 1298], "logdir": [1085, 1086], "max_width": 1085, "close_logfil": 1085, "msg": [1085, 1088, 1298], "flush": 1085, "get_logdir": 1085, "dirnam": 1085, "label_messag": 1085, "decid": [1085, 1298], "open_logfil": 1085, "strftime": 1085, "localtim": 1085, "y": [1085, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1277, 1278, 1283, 1284, 1286, 1287, 1289, 1298], "centuri": 1085, "decim": 1085, "month": 1085, "dai": [1085, 1143, 1298], "31": [1085, 1296, 1298], "24": [1085, 1255, 1298], "clock": 1085, "00": [1085, 1298], "59": [1085, 1298], "61": [1085, 1298], "z": 1085, "zone": 1085, "utc": 1085, "weekdai": 1085, "am": 1085, "pm": 1085, "platform": [1085, 1297], "timestamp": 1085, "timestamp_messag": 1085, "directoti": 1086, "interv": 1088, "done": 1088, "init": 1088, "unit": 1088, "had": 1088, "my": [1088, 1297], "progressbar": 1088, "great": [1088, 1298], "tqdm": 1088, "oldprogress": 1088, "get_desc": 1088, "someth": [1088, 1297, 1298], "within": [1088, 1096, 1260, 1272, 1275, 1297, 1298, 1301], "life": 1088, "stage": [1088, 1298], "task": [1088, 1284], "init_tqdm": 1088, "set_don": 1088, "set_statu": 1088, "set_tot": 1088, "busi": 1088, "desir": [1088, 1264, 1265, 1266, 1267, 1268, 1269], "finish": [1088, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1289, 1298], "destroi": 1088, "log_verbos": [1091, 1094], "gen_session_id": 1091, "start_logg": 1091, "remaind": 1095, "gather": 1095, "yaml": [1095, 1096], "_dict": [1096, 1097, 1099], "temporarili": 1096, "alter": [1096, 1298], "exit": 1096, "get_default": 1096, "reset_al": 1096, "use_pickle_cach": [1102, 1106, 1107], "geneontologi": [1102, 1298], "expr_names_to_term": 1102, "expr": 1102, "get_annot_ancestor": 1102, "get_annots_ancestor": 1102, "get_term": [1102, 1104], "has_any_term": 1102, "has_term": 1102, "i_select_by_term": 1102, "return_uniprot": 1102, "select_by_expr": 1102, "select_by_al": 1102, "hormon": [1102, 1298], "0009897": 1102, "select_by_expr_term": 1102, "select_by_nam": 1102, "select_by_term": 1102, "all_from_aspect": 1104, "aspect_from_nam": 1104, "get_all_ancestor": 1104, "include_se": 1104, "get_all_descend": [1104, 1298], "get_aspect": 1104, "is_leaf": 1104, "is_nam": 1104, "is_root": 1104, "root": [1104, 1298, 1300], "is_term": 1104, "names_to_term": 1104, "names_to_terms_aspect": 1104, "namess": 1104, "set_of": 1104, "terms_nam": 1104, "to_term": 1104, "set_of_nam": 1104, "set_of_term": 1104, "subgraph_nod": 1104, "terms_to_nam": 1104, "terms_to_names_aspect": 1104, "cleanup_period": [1110, 1124, 1146, 1160], "lifetim": [1110, 1123, 1124, 1125, 1160], "300": [1110, 1123, 1124, 1125, 1160], "get_dict": [1110, 1298], "tha": [1110, 1117], "source_id": [1110, 1120], "orthologbas": 1111, "homologu": [1112, 1114], "preload_prot": 1113, "proteinhomologi": 1114, "preload_seq": [1115, 1298], "unload": [1118, 1125, 1170, 1171, 1298], "namespac": 1119, "popular": [1120, 1297], "advis": 1120, "almost": [1120, 1298, 1300], "load_a_to_b": 1123, "load_b_to_a": 1123, "mappingt": [1123, 1124, 1298], "coupl": [1123, 1143], "child": [1123, 1298], "mandatori": [1123, 1300, 1301], "identif": 1123, "entrez_protein": 1123, "entrez_mirna": 1123, "preiod": [1123, 1124, 1125], "cleanup": [1123, 1124, 1125], "id_type_sid": 1123, "mapping_table_a_to_b": 1123, "mapping_table_b_to_a": 1123, "read_cach": 1123, "read_mapping_arrai": 1123, "read_mapping_biomart": 1123, "read_mapping_fil": 1123, "read_mapping_unichem": 1123, "unichem": [1123, 1298, 1300], "read_mapping_uniprot": 1123, "programmatic_access": 1123, "read_mapping_uniprot_list": 1123, "set_uniprot_spac": 1123, "setup_cach": 1123, "md5": 1123, "tables_load": 1123, "translate_deleted_uniprot": 1124, "keep_invalid_uniprot": 1124, "trembl_swissprot_by_genesymbol": 1124, "period": 1124, "unus": 1124, "forev": 1124, "obsolet": 1124, "chain_map": [1124, 1298], "by_id_typ": [1124, 1298], "via_id_typ": 1124, "map_nam": [1124, 1135, 1297, 1298], "create_revers": 1124, "get_table_kei": 1124, "unambig": [1124, 1125, 1135], "guess_typ": 1124, "tri": [1124, 1129, 1264, 1265, 1266, 1267, 1268, 1269], "has_mapping_t": 1124, "expiri": [1124, 1125], "timer": 1124, "load_genesymbol5": 1124, "load_map": [1124, 1139], "mapread": [1124, 1298], "load_uniprot_stat": 1124, "uniprot_cleanup": [1124, 1134, 1135, 1136, 1298], "care": [1124, 1125, 1134, 1298], "ideal": [1124, 1134], "think": [1124, 1134, 1298], "predefin": [1124, 1134, 1297, 1298], "couldn": [1124, 1134], "refseqp": [1124, 1134, 1136, 1298], "np_": [1124, 1134, 1136], "xp_": [1124, 1134, 1136], "ensp": [1124, 1134, 1136], "enst": [1124, 1134, 1136], "ensg": [1124, 1134, 1136], "ddbj": [1124, 1134, 1136], "genebank": [1124, 1134, 1136], "embl_id": [1124, 1134, 1136], "And": [1124, 1134, 1136, 1298, 1301], "encount": [1124, 1134, 1136, 1297], "map_name0": [1124, 1298], "mostli": [1124, 1135], "loss": [1124, 1135], "seamlessli": [1124, 1136], "loader": [1124, 1171], "only_uniprot_ac": 1124, "accession_numb": 1124, "other_organism_uniprot": 1124, "primary_uniprot": 1124, "remove_expir": 1124, "ago": 1124, "remove_kei": 1124, "remove_t": 1124, "reverse_kei": 1124, "reverse_map": 1124, "whenev": 1124, "translate_deleted_uniprot_by_genesymbol": 1124, "trembl_swissprot": 1124, "correct": [1124, 1284, 1289], "counterpart": [1124, 1301], "valid_uniprot": [1124, 1298], "which_tabl": 1124, "get_kei": 1125, "pri": 1127, "sec": 1127, "uploadlist": [1127, 1298], "label_id_typ": [1130, 1131], "get_residu": 1139, "pdb_start": 1140, "pdb_end": 1140, "uniprot_start": 1140, "uniprot_end": 1140, "usernam": 1143, "output_format": 1143, "feel": [1143, 1297, 1298], "wilhelm": 1143, "v509": 1143, "n7502": 1143, "nature13319": 1143, "descritpion": 1143, "visit": 1143, "admin": [1143, 1298], "get_express": 1143, "tissue_averag": 1143, "unnorm": 1143, "disk": [1143, 1298], "get_piec": 1143, "20480": 1143, "delimit": 1143, "mb": [1143, 1297, 1298], "curli": 1143, "brace": 1143, "tissue_id": 1143, "calculation_method": 1143, "no_isoform": 1143, "get_tissu": 1143, "pandas_matrix": 1143, "shold": 1143, "tissues_x_protein": 1143, "800": 1146, "file_from_arch": 1146, "easili": [1146, 1298, 1301], "lxml": 1146, "etre": 1146, "iterpars": 1146, "minim": 1146, "me": 1146, "thod": 1146, "arbit": 1146, "rari": 1146, "parser": 1146, "id42": 1146, "akt1": [1146, 1298], "ffjh2": 1146, "tr9gy": 1146, "sometim": [1146, 1297, 1298, 1300, 1301], "bp": 1146, "nucleic": 1146, "But": [1146, 1297, 1298], "mo": 1146, "dific": 1146, "ternal": 1146, "dure": 1146, "risk": 1146, "homo_sapien": 1146, "owl": 1146, "biopax_s": 1146, "uncompress": 1146, "cleanup_hook": 1146, "close_biopax": 1146, "temporari": 1146, "init_etre": 1146, "open_biopax": 1146, "workflow": [1146, 1284, 1289, 1300], "set_progress": 1146, "entityset": [1147, 1148, 1150, 1153, 1154, 1158], "itermemb": 1148, "reactionsid": 1148, "er": 1149, "ed": 1149, "With": [1150, 1153, 1158, 1297], "protein_id": 1153, "default_id_typ": 1155, "max_complex_combin": 1155, "max_reaction_combin": 1155, "gen_cvari": 1155, "in_same_compon": 1155, "merge_complex": 1155, "this_round": 1155, "biopaxread": [1155, 1300], "subcomplex": 1155, "rcomplex": 1155, "merge_cvari": 1155, "fact": [1155, 1298], "variat": 1155, "right": 1156, "left_attr": 1156, "right_attr": 1156, "proteinfamili": 1157, "ref_id": 1158, "is_not": 1160, "iterdb": [1170, 1171], "iterprotein": [1170, 1171], "canon": [1172, 1194, 1226, 1236, 1251], "findal": [1172, 1298], "fragment": [1172, 1298], "fasta": 1174, "taxon_id": [1177, 1178, 1179, 1180], "codenam": 1180, "long_nam": 1183, "shorten": [1183, 1184], "genu": [1184, 1298], "taxon_nam": [1185, 1186, 1187, 1188, 1189], "connectivity_search": 1192, "id_list": 1192, "cheminformat": 1192, "widesearchinfo": 1192, "inchikey2anyth": 1192, "smiles2chembl": 1192, "uniprot_id": [1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252], "info_sect": 1194, "availebl": [1194, 1219], "keywords_with_xref": 1194, "capit": [1194, 1236], "dalton": [1194, 1251], "fileobj": [1200, 1218, 1230, 1298], "print_featur": [1200, 1298], "table_format": 1200, "uniprotprotein": [1203, 1233], "40": [1208, 1293, 1298], "tabul": [1208, 1230], "astanin": [1208, 1230], "xsize": 1255, "cairotest": 1255, "1024": [1255, 1288], "height": [1255, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1288, 1289], "bgcol": 1255, "embl_gray125": 1255, "interscol": 1255, "ysize": 1255, "ycol": 1255, "margin": [1255, 1256, 1288, 1298], "mincircl": 1255, "cellpad": 1255, "graphix_dir": 1256, "graphix_format": 1256, "title_text": 1256, "title_font_famili": 1256, "title_font_s": 1256, "title_color": 1256, "646567": 1256, "fruchterman_reingold": [1256, 1288], "layout_param": [1256, 1288], "vertex_label": 1256, "vertex_s": [1256, 1298], "vertex_label_s": [1256, 1298], "degree_label_s": 1256, "edge_width": [1256, 1298], "6ea945": 1256, "vertex_label_color": [1256, 1298], "007b7f": [1256, 1277, 1284], "vertex_alpha": 1256, "aa": [1256, 1298], "vertex_frame_color": 1256, "ffffff00": 1256, "vertex_frame_width": [1256, 1298], "edge_label": 1256, "edge_label_s": 1256, "edge_label_color": 1256, "edge_curv": 1256, "edge_color": [1256, 1298], "818284": 1256, "edge_alpha": 1256, "autocurv": 1256, "vertex_label_font": 1256, "san": 1256, "serif": 1256, "edge_label_font": 1256, "edge_arrow_s": 1256, "edge_arrow_width": 1256, "bbox": [1256, 1260, 1272, 1275], "dimens": [1256, 1287], "1280": 1256, "routin": [1257, 1270], "cairo": [1257, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1275, 1298], "l": [1257, 1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1298], "defaultgraphdraw": [1257, 1272, 1274, 1275], "ubigraph": 1257, "displai": [1257, 1298], "ubigraphdraw": 1257, "ubietylab": 1257, "cytoscap": [1257, 1297, 1298], "cytoscaperpc": 1257, "plugin": 1257, "gforg": 1257, "nbic": 1257, "nl": 1257, "cytoscapegraphdraw": 1257, "abstractcairographdraw": [1259, 1260, 1261, 1262], "vertex_drawer_factori": 1260, "edge_drawer_factori": 1260, "label_drawer_factori": 1260, "visualis": 1260, "2d": 1260, "plane": 1260, "curv": 1260, "invok": 1260, "__plot__": 1260, "drawer": [1260, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1274, 1275], "boundingbox": [1260, 1272, 1275], "box": [1260, 1272, 1274, 1275], "factori": 1260, "abstractcairovertexdraw": [1260, 1275], "defaultvertexdraw": 1260, "abstractedgedraw": [1260, 1265, 1266, 1269], "drawn": [1260, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1274, 1275], "arrowedgedraw": 1260, "textdraw": 1260, "abstract": [1264, 1272, 1274], "concret": [1264, 1274], "draw_directed_edg": [1264, 1265, 1266, 1267, 1268, 1269], "src_vertex": [1264, 1265, 1266, 1267, 1268, 1269], "dest_vertex": [1264, 1265, 1266, 1267, 1268, 1269], "draw_loop_edg": [1264, 1265, 1266, 1267, 1268, 1269], "circl": [1264, 1265, 1266, 1267, 1268, 1269], "draw_undirected_edg": [1264, 1265, 1266, 1267, 1268, 1269], "get_label_posit": [1264, 1265, 1266, 1267, 1268, 1269], "midpoint": [1264, 1265, 1266, 1267, 1268, 1269], "horizont": [1264, 1265, 1266, 1267, 1268, 1269], "textalign": [1264, 1265, 1266, 1267, 1268, 1269], "alpha_at_src": 1265, "alpha_at_dest": 1265, "vari": 1265, "destin": [1265, 1267, 1268, 1269], "arrow": 1266, "alphavaryingedgedraw": [1267, 1268], "opac": [1267, 1268], "transpar": [1267, 1268], "interpol": [1267, 1268], "taper": 1269, "wider": 1269, "narrow": 1269, "abstractvertexdraw": 1272, "abstractcairodraw": 1272, "canva": 1272, "visual_vertex": [1272, 1274, 1275], "coord": [1272, 1274, 1275], "visualvertexbuild": [1272, 1274, 1275], "abstractdraw": 1274, "font_famili": [1277, 1281, 1285], "lt": [1277, 1281, 1285, 1290, 1298], "std": [1277, 1281, 1285, 1290], "font_styl": [1277, 1281, 1285], "font_weight": [1277, 1281, 1285], "font_vari": [1277, 1281, 1285], "font_stretch": [1277, 1281, 1285], "xlab": [1277, 1281, 1284, 1287, 1289, 1290], "ylab": [1277, 1278, 1281, 1284, 1287, 1289, 1290], "axis_lab_s": [1277, 1281, 1285, 1287], "lab_angl": [1277, 1281, 1284, 1287, 1289], "90": [1277, 1281, 1284, 1287, 1289, 1295, 1298], "lab_siz": [1277, 1281, 1285], "legend": [1277, 1284, 1287, 1289], "fin": [1277, 1284, 1287], "y_break": 1277, "rc": [1277, 1281, 1284, 1285, 1287, 1298], "poster": [1277, 1281, 1285], "do_plot": [1277, 1284], "axi": [1277, 1278, 1283, 1284, 1286, 1298], "hidden": 1277, "30": [1277, 1287, 1293, 1298], "60": [1277, 1293, 1298], "middl": 1277, "77aadd": 1278, "xlim": [1278, 1281, 1287], "uniform_xlim": 1278, "uniform_ylim": [1278, 1284], "full_range_x": 1278, "ylog": [1278, 1284, 1287], "hoffset": 1278, "woffset": 1278, "axis_lab_font": [1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "ticklabel_font": [1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "small_ticklabel_font": 1278, "title_font": [1278, 1283, 1284, 1286, 1287, 1289], "bar_arg": [1278, 1284, 1286, 1289], "xmin": 1278, "tight": [1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "init_fig": [1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "matplotlib": [1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289, 1292], "set_figs": [1278, 1279, 1280, 1283, 1284, 1286, 1287, 1289], "figsiz": [1278, 1279, 1280, 1281, 1283, 1284, 1286, 1287, 1289], "set_grid": [1278, 1283, 1284, 1286], "grid": [1278, 1283, 1284, 1286], "subplot": [1278, 1283, 1284, 1286], "set_titl": [1278, 1283, 1284, 1286, 1287, 1289], "earliest": [1279, 1286], "legend_font": [1279, 1284, 1286, 1287, 1289], "4477aa": 1280, "nbin": 1281, "x_log": 1281, "y_log": 1281, "tone": 1281, "legend_s": 1281, "kde_bas": 1281, "kde_perc": 1281, "run_latex": 1282, "run": [1282, 1297, 1298, 1301], "write_tex": 1282, "markup": 1282, "htdata": 1283, "cat_nam": 1284, "cat_ordr": 1284, "title_halign": [1284, 1287, 1289], "title_valign": [1284, 1287, 1289], "y2": 1284, "color2": 1284, "ylim": [1284, 1287], "group_label": 1284, "summary_nam": 1284, "legloc": [1284, 1287], "maketitl": 1284, "barplot": 1284, "by_plot": 1284, "ticklabel": 1284, "make_plot": 1284, "plots_ord": 1284, "post_plot": 1284, "pre_plot": 1284, "set_color": 1284, "colseri": 1284, "88ccee": 1286, "hcolor": 1286, "all_color": 1286, "44aa99": 1286, "all_nam": 1286, "curation_plot": 1286, "114477": 1287, "xlog": 1287, "xtickscal": 1287, "ytickscal": 1287, "legscal": 1287, "confi": 1287, "annot_font": 1287, "min_siz": 1287, "max_siz": 1287, "log_siz": 1287, "size_sc": 1287, "legtitl": 1287, "legstrip": 1287, "color_label": 1287, "size_to_valu": 1287, "value_to_s": 1287, "values_to_s": 1287, "transform": 1287, "layout_method": 1288, "sizes_edg": 1288, "fontfamili": 1290, "textcol": 1290, "black": 1290, "violin": 1290, "bbox1": [1291, 1294], "bbox2": [1291, 1294], "fix": [1292, 1297, 1298, 1300], "bug": [1292, 1298], "6714": 1292, "postscript": 1292, "compact": 1292, "embed": 1292, "opentyp": 1292, "backend": [1292, 1300], "dist": 1293, "70": [1293, 1298], "135": [1295, 1298], "270": 1295, "315": 1295, "welcom": [1296, 1298], "pypath": [1296, 1300, 1301], "instal": 1296, "faq": 1296, "impressum": 1296, "explor": 1296, "74": 1296, "93": 1296, "110": [1296, 1298], "upcom": 1296, "navig": 1296, "book": [1296, 1297], "introduct": 1296, "sanit": 1296, "overview": 1296, "disabl": 1296, "bel": [1296, 1297, 1300], "quickli": 1296, "plai": 1296, "omnipathr": [1297, 1298], "yourself": 1297, "peopl": [1297, 1298], "satisfi": 1297, "realli": [1297, 1298], "fresh": [1297, 1298], "pypi": [1297, 1298], "pip": 1297, "git": 1297, "experienc": 1297, "biologi": [1297, 1298], "biolog": [1297, 1298], "overal": [1297, 1298], "downlad": 1297, "alon": 1297, "begin": 1297, "fundament": [1297, 1298], "design": [1297, 1298], "principl": 1297, "todai": 1297, "easi": [1297, 1298], "prone": 1297, "interrupt": 1297, "problemat": 1297, "possibli": [1297, 1298], "offlin": 1297, "script": [1297, 1298], "varieti": [1297, 1298, 1301], "q01279": [1297, 1298], "pyproject": 1297, "toml": 1297, "privat": 1297, "omnipathdb": [1297, 1298, 1301], "gmail": 1297, "saez": 1297, "d\u00e9ne": 1297, "t\u00fcrei": 1297, "sebastian": 1297, "lobentanz": 1297, "ahmet": 1297, "rifaioglu": 1297, "hu": [1297, 1298], "pi": 1297, "tunca": 1297, "do\u011fan": 1297, "melih": 1297, "darcan": 1297, "erva": 1297, "ulusoi": 1297, "\u00f6mer": 1297, "kaan": 1297, "vural": 1297, "tennur": 1297, "k\u0131l\u0131\u00e7": 1297, "elif": 1297, "\u00e7evrim": 1297, "b\u00fcnyamin": 1297, "\u015fen": 1297, "atabei": 1297, "\u00fcnl\u00fc": 1297, "olga": 1297, "ivanova": 1297, "nicol\u00e0": 1297, "palacio": 1297, "past": 1297, "maintain": [1297, 1298], "francesco": 1297, "ceccarelli": 1297, "attila": 1297, "g\u00e1bor": 1297, "alberto": 1297, "valdeoliva": 1297, "michael": 1297, "klein": 1297, "fabian": 1297, "bird": 1297, "ey": 1297, "view": 1297, "16": 1298, "17": 1298, "18": 1298, "21": 1298, "bioconductor": 1298, "enjoi": 1298, "unlimit": 1298, "tour": 1298, "hesit": 1298, "__version__": 1298, "0m": 1298, "06": 1298, "2022": 1298, "03": 1298, "39": 1298, "easiest": 1298, "quick": 1298, "34": 1298, "27": 1298, "databasemanag": 1298, "0x602fb851cd90": 1298, "gt": 1298, "tf_target": [1298, 1301], "tf_mirna": 1298, "mirna_mrna": 1298, "lncrna_mrna": 1298, "cu": 1298, "83": 1298, "7980": 1298, "35551": 1298, "1m": 1298, "55": 1298, "18558": 1298, "94358": 1298, "tft": 1298, "2m": 1298, "72": 1298, "54": 1298, "18986": 1298, "326708": 1298, "mi": 1298, "1264": 1298, "3288": 1298, "tmi": 1298, "41": 1298, "1032": 1298, "4960": 1298, "lnc": 1298, "33": 1298, "243": 1298, "217": 1298, "alloster": 1298, "smol": 1298, "94": 1298, "57": 1298, "1980": 1298, "3147": 1298, "41426": 1298, "co": 1298, "28173": 1298, "quit": 1298, "43": 1298, "36": 1298, "5490653": 1298, "50872": 1298, "68": 1298, "heavi": 1298, "ic": 1298, "37": 1298, "301527": 1298, "48570": 1298, "biomed": 1298, "troublesom": 1298, "broken": 1298, "daili": 1298, "signor_interact": 1298, "_interact": 1298, "_enz_sub": 1298, "_complex": 1298, "_annot": 1298, "fulli": 1298, "postfix": 1298, "_raw": 1298, "_map": 1298, "bring": 1298, "though": [1298, 1301], "arbitrarili": 1298, "straightforward": 1298, "outsid": 1298, "signor_complex": 1298, "complexaggreg": 1298, "p23511_p25208_q13952": 1298, "nfy": 1298, "p68104_p85299_q6r327_q8tb45_q9bvc4": 1298, "mtorc2": 1298, "p42345_q8n122_q8tb45_q96b36_q9bvc4": 1298, "mtorc1": 1298, "p63208_q13616_q9y297": 1298, "scf": 1298, "betatrcp": 1298, "q09472_q92793": 1298, "cbp": 1298, "p300": 1298, "q09472_q92793_q92831": 1298, "pcaf": 1298, "q13485_q15796": 1298, "smad2": [1298, 1301], "smad4": 1298, "p84022_q13485": 1298, "smad3": 1298, "p05412_q13485": 1298, "jun": 1298, "q15796_q9hau4": 1298, "smurf2": 1298, "o15105_q01094_q13547": 1298, "smad7": 1298, "hdac1": 1298, "e2f": 1298, "p19838_q04206": 1298, "nfkb": 1298, "p65": 1298, "p50": 1298, "o14920_o15111": 1298, "ik": 1298, "17699": 1298, "signorinteract": 1298, "o15530": 1298, "source_isoform": 1298, "target_isoform": 1298, "source_typ": 1298, "target_typ": 1298, "10455013": 1298, "ptm_residu": 1298, "ser396": 1298, "ptm_motif": 1298, "sssssshslsasdtg": 1298, "q9nq66": 1298, "18035": 1298, "smallmolecul": 1298, "quantiti": 1298, "23880553": 1298, "catalysi": 1298, "p62136": 1298, "o15169": 1298, "down": 1298, "dephosphoryl": 1298, "17318175": 1298, "ser77": 1298, "yepegsasptppylk": 1298, "sou": 1298, "3285": 1298, "signor_enzyme_substr": 1298, "easier": 1298, "58": 1298, "396": 1298, "389": 1298, "403": 1298, "77": 1298, "84": 1298, "signor_pathway_annot": 1298, "practic": 1298, "o14733": 1298, "48": 1298, "signorpathwai": 1298, "tnf": 1298, "toll": 1298, "haven": 1298, "mention": 1298, "four": 1298, "signor_protein_famili": 1298, "pf2": 1298, "53": 1298, "q9hbw0": 1298, "q92633": 1298, "dozen": [1298, 1301], "sooner": 1298, "happen": 1298, "accid": 1298, "especi": [1298, 1300], "cache_delete_on": 1298, "depod_enzyme_substr": 1298, "cache_off": 1298, "cache_print_on": 1298, "dry_run_on": 1298, "debug_on": 1298, "curl_connect_timeout": 1298, "establish": 1298, "curl_extended_timeout": 1298, "exception": 1298, "curl_retri": 1298, "curl_timeout": 1298, "360": 1298, "stack": 1298, "investig": 1298, "difficult": 1298, "preserve_on": 1298, "depod_curl": 1298, "0x6947386dc8b0": 1298, "bioss": 1298, "uni": 1298, "freiburg": 1298, "de": 1298, "depod_201405_human_phosphatas": 1298, "mitab": 1298, "_io": 1298, "textiowrapp": 1298, "dene": 1298, "6a711369ecf9dcff8c5ed88996685b54": 1298, "iso": 1298, "8859": 1298, "okai": 1298, "wether": 1298, "successfulli": 1298, "night": 1298, "transient": 1298, "disappear": 1298, "perman": 1298, "mayb": 1298, "parti": 1298, "lot": [1298, 1300], "09": 1298, "notebook": 1298, "pypath_log": 1298, "s3e92": 1298, "535b06d53a59e75bb693369bc5fdc556": 1298, "112963": 1298, "verifi": 1298, "certif": 1298, "expir": 1298, "softwar": 1298, "encrypt": 1298, "trust": 1298, "reach": [1298, 1299], "global": 1298, "program": 1298, "correctli": 1298, "duti": 1298, "procedur": 1298, "97": 1298, "cipher": 1298, "libcurl": 1298, "anaconda": 1298, "java": 1298, "mozilla": 1298, "firefox": 1298, "seriou": 1298, "get_control": 1298, "45": 1298, "resourcecontrol": 1298, "0x6cc25e25dcf0": 1298, "cc": 1298, "BY": 1298, "sa": 1298, "commerci": 1298, "profit": 1298, "47": 1298, "49": 1298, "yearusedreleas": 1298, "2011": 1298, "bioinformat": 1298, "25": [1298, 1301], "690": 1298, "d321": 1298, "suppl_1": 1298, "d235": 1298, "univ": 1298, "lyon1": 1298, "fr": 1298, "omictool": 1298, "tool": 1298, "19147664": 1298, "20852260": 1298, "25378329": 1298, "mammalia": 1298, "swiss": 1298, "prot": 1298, "bairoch": 1298, "repor": 1298, "4479": 1298, "197": 1298, "collect_enzyme_substr": 1298, "08": 1298, "29": 1298, "enzymesubstrateresourc": 1298, "protmapp": 1298, "202": 1298, "51": 1298, "phosphoelm_enzyme_substr": 1298, "larger": 1298, "netr": 1298, "concept": 1298, "deathdomain": 1298, "pdzbase": 1298, "1864": 1298, "6833": 1298, "25607": 1298, "enzyme_substr": 1298, "04": 1298, "38": 1298, "7979": 1298, "35550": 1298, "44": 1298, "8002": 1298, "35748": 1298, "older": 1298, "mentin": 1298, "focu": 1298, "pathway_noref": 1298, "pathway_al": 1298, "ptm_noref": 1298, "ptm_all": 1298, "interaction_misc": 1298, "constraint": 1298, "transcription_onebyon": 1298, "lncrna_protein": 1298, "reaction_misc": 1298, "small_molecule_protein": 1298, "warn": 1298, "trpc1": 1298, "kcnma1": 1298, "ppp3ca": 1298, "calm2": 1298, "calm3": 1298, "calm1": 1298, "casp1": 1298, "casp4": 1298, "cacna1c": 1298, "cav1": 1298, "ev": 1298, "118492": 1298, "sync": 1298, "facilit": 1298, "p48995": 1298, "q12791": 1298, "q08209": 1298, "p29466": 1298, "p49662": 1298, "p56539": 1298, "cav3": 1298, "q14247": 1298, "cttn": 1298, "drd2": 1298, "p11532": 1298, "dmd": 1298, "fgfr1": 1298, "q02790": 1298, "fkbp4": 1298, "q86ym7": 1298, "homer1": 1298, "q9nsc5": 1298, "homer3": 1298, "q99750": 1298, "mdfi": 1298, "q14571": 1298, "itpr2": 1298, "q14573": 1298, "itpr3": 1298, "p29966": 1298, "marck": 1298, "grm1": 1298, "p20591": 1298, "mx1": 1298, "p62166": 1298, "ncs1": 1298, "q96d31": 1298, "orai1": 1298, "orai2": 1298, "q9brq5": 1298, "orai3": 1298, "p11171": 1298, "epb41": 1298, "p61586": 1298, "rhoa": 1298, "q9y225": 1298, "rnf24": 1298, "p21817": 1298, "ryr1": 1298, "p16615": 1298, "atp2a2": 1298, "q93084": 1298, "atp2a3": 1298, "p60880": 1298, "snap25": 1298, "q13586": 1298, "sti": 1298, "30573": 1298, "egf": 1298, "fantom5": 1298, "cellsign": 1298, "ia": 1298, "10085134": 1298, "10209155": 1298, "10788520": 1298, "12093292": 1298, "12297050": 1298, "12620237": 1298, "12648462": 1298, "15620700": 1298, "16274239": 1298, "17145710": 1298, "19531499": 1298, "20458382": 1298, "21071413": 1298, "23331499": 1298, "3494473": 1298, "6289330": 1298, "8639530": 1298, "exactli": [1298, 1301], "35": 1298, "get_": 1298, "_by_": 1298, "44033": 1298, "q14289": 1298, "q9ulz3": 1298, "44034": 1298, "p54646": 1298, "q9y2i7": 1298, "44035": 1298, "q9bxm7": 1298, "q9y2n7": 1298, "44036": 1298, "p49137": 1298, "q9y385": 1298, "44037": 1298, "q9uhc7": 1298, "p04637": 1298, "44038": 1298, "gabarapl3": 1298, "q9by60": 1298, "id_from_label": 1298, "o75385": 1298, "ulk1": [1298, 1301], "id_from_label0": 1298, "certainli": 1298, "q15796": 1298, "q62432": 1298, "8408": 1298, "46": 1298, "autumn": 1298, "uniprotmap": 1298, "outdat": 1298, "inputs_format": 1298, "uniprotlistmap": 1298, "biomartmap": 1298, "arraymap": 1298, "promap": 1298, "unichemmap": 1298, "filemap": 1298, "fly": 1298, "dispatch": 1298, "mappingtabledefinit": 1298, "input_class": 1298, "geneid": 1298, "input_cl": 1298, "22169": 1298, "clear": 1298, "eas": 1298, "ac_queri": 1298, "ac_map": 1298, "biomart_map": 1298, "pro_map": 1298, "array_map": 1298, "idtyp": 1298, "medchemexpress": 1298, "actor": 1298, "affymetrix": 1298, "alzforum": 1298, "alzforum_mut": 1298, "araport": 1298, "bindingdb": 1298, "brenda": 1298, "carotenoiddb": 1298, "cgnc": 1298, "chemicalbook": 1298, "clinicaltri": 1298, "comptox": 1298, "dailym": 1298, "dailymed_old": 1298, "6649": 1298, "human_mouse_genesymbol": 1298, "micos13": 1298, "fat4": 1298, "rars2": 1298, "zfp36l2": 1298, "lamc1": 1298, "24843": 1298, "krtap4": 1298, "gm40460": 1298, "24844": 1298, "gm45618": 1298, "24845": 1298, "gm4559": 1298, "24846": 1298, "igkv1or2": 1298, "108": 1298, "igkv20": 1298, "101": 1298, "24847": 1298, "fpgt": 1298, "tnni3k": 1298, "22266": 1298, "everywher": 1298, "deal": 1298, "hsapien": 1298, "ensmebl": 1298, "hsa": 1298, "ensure_ncbi_tax_id": 1298, "ensure_latin_nam": 1298, "cow": 1298, "bo": 1298, "tauru": 1298, "ensure_common_nam": 1298, "erithacu": 1298, "rubecula": 1298, "european": 1298, "robin": 1298, "uniprot_taxid": 1298, "p53104": 1298, "saccharomyc": 1298, "cerevisia": 1298, "divers": 1298, "essenti": 1298, "harbor": 1298, "littl": 1298, "119": 1298, "iuniprot": 1298, "len": 1298, "all_swissprot": 1298, "all_trembl": 1298, "3m": 1298, "86440": 1298, "17131": 1298, "69300": 1298, "a0a8d0h0c2": 1298, "inde": 1298, "125": 1298, "is_uniprot": 1298, "122": 1298, "is_swissprot": 1298, "126": 1298, "protein_datasheet": 1298, "egfr_human": 1298, "1210": 1298, "o00688": 1298, "o00732": 1298, "p06268": 1298, "q14225": 1298, "q68gs5": 1298, "q92795": 1298, "q9bzs2": 1298, "q9gzx1": 1298, "q9h2c9": 1298, "q9h3c9": 1298, "q9umd7": 1298, "q9umd8": 1298, "q9umg5": 1298, "dt": 1298, "jul": 1298, "1986": 1298, "nov": 1298, "1997": 1298, "oct": 1298, "283": 1298, "recnam": 1298, "epiderm": 1298, "growth": 1298, "eco": 1298, "0000305": 1298, "ec": 1298, "altnam": 1298, "proto": 1298, "oncogen": 1298, "erbb": 1298, "tyrosin": 1298, "flag": 1298, "precursor": 1298, "gn": 1298, "0000312": 1298, "3236": 1298, "erbb1": 1298, "her1": 1298, "o": 1298, "oc": 1298, "eukaryota": 1298, "metazoa": 1298, "chordata": 1298, "craniata": 1298, "vertebrata": 1298, "euteleostomi": 1298, "eutheria": 1298, "euarchontoglir": 1298, "primat": 1298, "haplorrhini": 1298, "catarrhini": 1298, "hominida": 1298, "ox": 1298, "ncbi_taxid": 1298, "rn": 1298, "rp": 1298, "nucleotid": 1298, "58080": 1298, "131": 1298, "egfr_histori": 1298, "uniprot_histori": 1298, "uniprotrecordhistori": 1298, "2022_04": 1298, "282": 1298, "2022_03": 1298, "281": 1298, "2022_02": 1298, "280": 1298, "2022_01": 1298, "279": 1298, "2021_04": 1298, "2021": 1298, "278": 1298, "50933": 1298, "132": 1298, "uniprot_recent_vers": 1298, "133": 1298, "uniprot_history_recent_datasheet": 1298, "deploi": 1298, "uniprot_data": 1298, "situat": 1298, "uniprot_preprocess": 1298, "clutter": 1298, "p63120": 1298, "peptidas": 1298, "a2": 1298, "herv": 1298, "k": 1298, "hml": 1298, "q96ec8": 1298, "yip1": 1298, "q6zms4": 1298, "krueppel": 1298, "c2h2": 1298, "zinc": 1298, "finger": 1298, "q8n8l2": 1298, "q3mis6": 1298, "q86uk7": 1298, "znf598": 1298, "q6p280": 1298, "q969w1": 1298, "dhhc": 1298, "palmitoyltransferas": 1298, "o14978": 1298, "q15937": 1298, "q9p2j8": 1298, "q8iuh4": 1298, "akr": 1298, "zdhhc17": 1298, "q9y2d9": 1298, "q14588": 1298, "q6xr72": 1298, "cation": 1298, "diffus": 1298, "cdf": 1298, "transport": 1298, "tc": 1298, "slc30a": 1298, "p58557": 1298, "endoribonucleas": 1298, "ybei": 1298, "q9y5a9": 1298, "ythdf": 1298, "ythdf2": 1298, "q8n9l1": 1298, "501768": 1298, "cleaner": 1298, "imperfect": 1298, "job": 1298, "badli": 1298, "strip": 1298, "136": 1298, "uniprot_taxonomi": 1298, "p00521": 1298, "abelson": 1298, "murin": 1298, "leukemia": 1298, "viru": 1298, "p03333": 1298, "h8zm73": 1298, "abi": 1298, "balsamea": 1298, "balsam": 1298, "fir": 1298, "pinu": 1298, "h8zm71": 1298, "q9mv51": 1298, "firma": 1298, "momi": 1298, "o81086": 1298, "grandi": 1298, "grand": 1298, "o24474": 1298, "o24475": 1298, "o64404": 1298, "o64405": 1298, "q948z0": 1298, "q9m7d1": 1298, "q9m7d0": 1298, "o22340": 1298, "q9m7c9": 1298, "q5k3v1": 1298, "homolepi": 1298, "nikko": 1298, "p21715": 1298, "abrothrix": 1298, "jelskii": 1298, "akodon": 1298, "jelski": 1298, "altiplano": 1298, "p11140": 1298, "abru": 1298, "56985": 1298, "139": 1298, "uniprot_ncbi_taxids_2": 1298, "648330": 1298, "aed": 1298, "albopictu": 1298, "densoviru": 1298, "isol": 1298, "boublik": 1298, "1994": 1298, "aaldnv": 1298, "10804": 1298, "adeno": 1298, "aav": 1298, "648242": 1298, "srivastava": 1298, "1982": 1298, "118452": 1298, "abacion": 1298, "magnum": 1298, "milliped": 1298, "72259": 1298, "abaei": 1298, "nicipp": 1298, "sleepi": 1298, "orang": 1298, "butterfli": 1298, "eurema": 1298, "102642": 1298, "abax": 1298, "parallelepipedu": 1298, "ground": 1298, "beetl": 1298, "392897": 1298, "abalist": 1298, "stellari": 1298, "starri": 1298, "triggerfish": 1298, "balist": 1298, "75332": 1298, "abbottina": 1298, "rivulari": 1298, "chines": 1298, "gudgeon": 1298, "gobio": 1298, "515833": 1298, "abdopu": 1298, "aculeatu": 1298, "engl": 1298, "118050": 1298, "140": 1298, "uniprot_loc": 1298, "uniprotloc": 1298, "golgi": 1298, "apparatu": 1298, "nucleu": 1298, "q15916": 1298, "endoplasm": 1298, "reticulum": 1298, "q66k41": 1298, "q8nd82": 1298, "q9np64": 1298, "nucleolu": 1298, "143466": 1298, "141": 1298, "uniprot_keyword": 1298, "uniprotkeyword": 1298, "aspartyl": 1298, "proteas": 1298, "autocatalyt": 1298, "cleavag": 1298, "erv": 1298, "hydrolas": 1298, "ribosom": 1298, "frameshift": 1298, "transpos": 1298, "acetyl": [1298, 1301], "splice": 1298, "metal": 1298, "unipro": 1298, "445111": 1298, "142": 1298, "uniprot_famili": 1298, "uniprotfamili": 1298, "77892": 1298, "143": 1298, "uniprot_tissu": 1298, "uniprottissu": 1298, "brain": 1298, "colon": 1298, "heart": 1298, "kidnei": 1298, "leukocyt": 1298, "liver": 1298, "lung": 1298, "ovari": 1298, "pancrea": 1298, "placenta": 1298, "prostat": 1298, "skelet": 1298, "muscl": [1298, 1301], "intestin": 1298, "spleen": 1298, "testi": 1298, "318790": 1298, "144": 1298, "uniprot_topologi": 1298, "uniprottopologi": 1298, "topologi": [1298, 1301], "cytoplasm": 1298, "137": 1298, "146": 1298, "206": 1298, "212": 1298, "lumen": 1298, "106": 1298, "115": 1298, "168": 1298, "184": 1298, "234": 1298, "236": 1298, "85": 1298, "105": 1298, "116": 1298, "147": 1298, "167": 1298, "185": 1298, "205": 1298, "213": 1298, "233": 1298, "138": 1298, "198": 1298, "288": 1298, "377": 1298, "220": 1298, "544230": 1298, "bulk": 1298, "153": 1298, "q14457": 1298, "becn1": 1298, "154": 1298, "156": 1298, "subcellular_loc": 1298, "112631": 1298, "1050": 1298, "cytosol": 1298, "preautophagosom": 1298, "starvat": 1298, "puncat": 1298, "sequest": 1298, "portion": 1298, "autophagosom": 1298, "mepgrggtetvgkfefsrkdlighgafavvfkgrhrekhdlevavkcinkknlaksqtllgkeikilkelkhenivalydfqemansvylvmeycnggdladylhamrtlsedtirlflqqiagamrllhskgiihrdlkpqnillsnpagrranpnsirvkiadfgfarylqsnmmaatlcgspmymapevimsqhydgkadlwsigtivyqcltgkapfqasspqdlrlfyeknktlvptipretsaplrqlllallqrnhkdrmdfdeffhhpfldaspsvrksppvpvpsypssgsgssssssstshlasppslgemqqlqktlaspadtagflhssrdsggskdsscdtddfvmvpaqfpgdlvaeapsakpppdslmcsgsslvasagleshgrtpspsppcssspspsgragpfsssrcgasvpipvptqvqnyqriernlqsptqfqtprssairrsgstsplgfaraspsppahaehggvlarkmslgggrpytpspqvgtiperpgwsgtpspqgaemrggrsprpgssapehsprtsglgcrlhsapnlsdlhvvrpklpkpptdplgavfsppqasppqpshglqscrnlrgspklpdflqrnplppilgsptkavpsfdfpktpssqnllallarqgvvmtpprnrtlpdlsevgpfhgqplgpglrpgedpkgpfgrsfstsrltdlllkaafgtqapdpgsteslqek": 1298, "1329": 1298, "ineffici": 1298, "hand": 1298, "158": 1298, "134277": 1298, "51896": 1298, "450": 1298, "159": 1298, "There": 1298, "character": 1298, "160": 1298, "function_o": 1298, "subcellula": 1298, "r_genecard": 1298, "r_locat": 1298, "alternativ": 1298, "20254": 1298, "exploit": 1298, "162": 1298, "q9uq28": 1298, "8m": 1298, "81": 1298, "acquir": 1298, "mtor": [1298, 1301], "s473": 1298, "sparser": 1298, "t450": 1298, "t308": 1298, "closer": 1298, "e_ptm": 1298, "473": 1298, "14761976": 1298, "15047712": 1298, "15364915": 1298, "15718470": 1298, "15899889": 1298, "16221682": 1298, "17013611": 1298, "19844585": 1298, "20333297": 1298, "20489726": 1298, "21157483": 1298, "21592956": 1298, "23006971": 1298, "8978681": 1298, "9736715": 1298, "dabas": 1298, "p63104": 1298, "ywhaz": 1298, "hprd_mimp": 1298, "11956222": 1298, "12861023": 1298, "phosphosite_mimp": 1298, "phosp": 1298, "15071501": 1298, "p45983": 1298, "mapk8": 1298, "phosph": 1298, "15696159": 1298, "p06493": 1298, "cdk1": 1298, "712": 1298, "rea": 1298, "15525677": 1298, "18220": 1298, "2171679": 1298, "41421": 1298, "p29597": 1298, "tyk2": 1298, "p51692": 1298, "stat5b": 1298, "699": 1298, "10830280": 1298, "11751923": 1298, "12411494": 1298, "41422": 1298, "q06418": 1298, "tyro3": 1298, "p19174": 1298, "plcg1": 1298, "771": 1298, "12601080": 1298, "15144186": 1298, "15592455": 1298, "41423": 1298, "q9h4a3": 1298, "wnk1": 1298, "q8tax0": 1298, "osr1": 1298, "18270262": 1298, "41424": 1298, "q96j92": 1298, "wnk4": 1298, "335": 1298, "15883153": 1298, "41425": 1298, "q9nyl2": 1298, "map3k20": 1298, "q92903": 1298, "cds1": 1298, "10973490": 1298, "ve": 1298, "power": 1298, "believ": 1298, "ever": 1298, "topic": 1298, "186": 1298, "seqc": 1298, "get_seq": 1298, "get_region": 1298, "tfiirclqwt": 1298, "187": 1298, "human_proteom": 1298, "swissprot_seq": 1298, "0x689900d45cc0": 1298, "0x689908ea8f70": 1298, "0x689908eaa4a0": 1298, "0x6899223538b0": 1298, "0x689922353c70": 1298, "o60384": 1298, "0x689922350730": 1298, "0x689922353310": 1298, "0x689922353760": 1298, "0x689922353190": 1298, "0x689922350d90": 1298, "0x689922353220": 1298, "p61129": 1298, "0x689922353370": 1298, "0x6899223534f0": 1298, "0x689922350c70": 1298, "0x689922351450": 1298, "0x689922353910": 1298, "0x6899223502b0": 1298, "p98182": 1298, "0x689922350280": 1298, "0x68992235": 1298, "53045": 1298, "191": 1298, "ygct": 1298, "seqlookup": 1298, "625": 1298, "annotationt": 1298, "3788067": 1298, "51636": 1298, "78": 1298, "cpad": 1298, "2308": 1298, "1358": 1298, "regulator_typ": 1298, "effect_on_pathwai": 1298, "effect_on_canc": 1298, "effect_on_cancer_outcom": 1298, "pathway_categori": 1298, "acut": 1298, "lymphoblast": 1298, "myeloid": 1298, "aml": 1298, "basal": 1298, "carcinoma": 1298, "bladder": 1298, "breast": 1298, "cervic": 1298, "cholangiocarcinoma": 1298, "choriocarcinoma": 1298, "chronic": 1298, "lymphocyt": 1298, "cll": 1298, "cml": 1298, "colorect": 1298, "endometri": 1298, "esophag": 1298, "ew": 1298, "sarcoma": 1298, "gallbladd": 1298, "gastric": 1298, "glioma": 1298, "hepatocellular": 1298, "hodgkin": 1298, "lymphoma": 1298, "infantil": 1298, "hemangioma": 1298, "laryng": 1298, "malign": 1298, "melanoma": 1298, "pleural": 1298, "mesothelioma": 1298, "mantl": 1298, "myeloma": 1298, "nasopharyng": 1298, "neuroblastoma": 1298, "oral": 1298, "osteosarcoma": 1298, "ovarian": 1298, "pancreat": 1298, "pituitari": 1298, "adenoma": 1298, "renal": 1298, "squamou": 1298, "synovi": 1298, "testicular": 1298, "thyroid": 1298, "a6ndv4": 1298, "o14745": 1298, "o14862": 1298, "o15169_p25054": 1298, "o94813": 1298, "o94953": 1298, "p06733": 1298, "glucos": 1298, "p11166": 1298, "p25054": 1298, "p40261": 1298, "p49327": 1298, "p54687": 1298, "pten": 1298, "p60484": 1298, "q01973": 1298, "q12888": 1298, "q13620": 1298, "q96cx2": 1298, "q99558": 1298, "mimat0000069": 1298, "mimat0000089": 1298, "mimat0000093": 1298, "mimat0000262": 1298, "mimat0000274": 1298, "mimat0000422": 1298, "mimat0000427": 1298, "mimat0000437": 1298, "mimat0000449": 1298, "mimat0000455": 1298, "mimat0000460": 1298, "mimat0000461": 1298, "mimat0000617": 1298, "mimat0003266": 1298, "mimat0003320": 1298, "o75473": 1298, "o75888": 1298, "o76041": 1298, "p13631": 1298, "p22676": 1298, "p25791": 1298, "p546": 1298, "1279": 1298, "celltypist": 1298, "927": 1298, "62": 1298, "cellcellinteract": 1298, "5544": 1298, "8479": 1298, "4813": 1298, "lambert2018": 1298, "3281": 1298, "3277": 1298, "cancersea": 1298, "2515": 1298, "1992": 1298, "phobiu": 1298, "35382": 1298, "go_intercel": 1298, "48799": 1298, "18377": 1298, "18127": 1298, "15903": 1298, "3558": 1298, "matrisom": 1298, "1514": 1298, "hpa_secretom": 1298, "3568": 1298, "1748": 1298, "1695": 1298, "annotati": 1298, "5842": 1298, "exempl": 1298, "mainclass": 1298, "subsubclass": 1298, "collagen": 1298, "glycoprotein": 1298, "affili": 1298, "proteoglycan": 1298, "56": 1298, "a6nmz7": 1298, "a8tx70": 1298, "b4dz39": 1298, "homotrim": 1298, "ht_dm_cluster278": 1298, "p02452_p02462_p08572_p29400_p53420_q01955_q02388_q14031_q17rw2_q8nfw1": 1298, "trimer": 1298, "p02452_p08123": 1298, "xi": 1298, "p02458_p12107_p13942": 1298, "p02458_p20908_p25067": 1298, "p02458_p20908_p25067_p29400": 1298, "p02458_p25067_p29400": 1298, "iv": 1298, "p02462_p08572": 1298, "p05997_p12107": 1298, "p05997_p12107_p20908": 1298, "p05997_p20908": 1298, "p05997_p20908_p25940": 1298, "p12109_p12110": 1298, "3072": 1298, "membership": 1298, "signalinkpathwai": 1298, "keggpathwai": 1298, "netpathpathwai": 1298, "28745": 1298, "6762": 1298, "jak": 1298, "actin": 1298, "cytoskeleton": 1298, "oxytocin": 1298, "phospholipas": 1298, "inhibitor": 1298, "resist": 1298, "papillomaviru": 1298, "infect": 1298, "carbon": 1298, "endocytosi": 1298, "cholin": 1298, "parathyroid": 1298, "synthesi": 1298, "2540": 1298, "record_id": [1298, 1301], "q16181": 1298, "sept7": 1298, "upregul": 1298, "14396": 1298, "p30990": 1298, "nt": 1298, "2306": 1298, "14397": 1298, "2307": 1298, "14398": 1298, "erk": 1298, "14399": 1298, "14400": 1298, "14401": 1298, "convent": 1298, "tidyvers": 1298, "tidyr": [1298, 1301], "pivot_wid": 1298, "unintuit": 1298, "index_col": 1298, "set_index": 1298, "unstack": 1298, "droplevel": 1298, "reset_index": 1298, "mimat0000431": 1298, "mir": 1298, "tumor": 1298, "invas": 1298, "adam10": 1298, "mediat": 1298, "notch1": [1298, 1301], "notch": 1298, "mimat0005886": 1298, "1297": 1298, "prolifer": 1298, "aeg1": 1298, "wnt": 1298, "q9up65": 1298, "pla2g4c": 1298, "chemotaxi": 1298, "downregul": 1298, "akt": 1298, "pi3k": 1298, "q92600": 1298, "cnot9": 1298, "2303": 1298, "epcam": 1298, "2304": 1298, "q9y6y0": 1298, "ivns1abp": 1298, "2305": 1298, "kctd12": 1298, "catenin": 1298, "anyon": 1298, "intercellannot": 1298, "310033": 1298, "43617": 1298, "annot_combined_class": 1298, "revis": 1298, "annotdefkei": 1298, "annotationgroup": 1298, "5150": 1298, "5760": 1298, "7041": 1298, "transmembrane_predict": 1298, "6444": 1298, "transmembrane_phobiu": 1298, "almen2009": 1298, "2072": 1298, "transmembrane_sosui": 1298, "1663": 1298, "tran": 1298, "143945": 1298, "gaba_receptor": 1298, "gaba": 1298, "a8mpy1": 1298, "gabra1": 1298, "gabrb2": 1298, "gabrd": 1298, "o14764_p14867_p47870": 1298, "delta": 1298, "o14764_p28472_p48169": 1298, "o14764_p28472_q16445": 1298, "o14764_p47870_p48169": 1298, "o14764_p47870_q16445": 1298, "gabbr1": 1298, "gabbr2": 1298, "o75899_q9ubs5": 1298, "p14867": 1298, "gamma": 1298, "p14867_p18507_p28472": 1298, "gabrg2": 1298, "p14867_p18507_p47870": 1298, "p18507_p28472_p31644": 1298, "p18507_p28472_p34903": 1298, "p18507_p28472_p47869": 1298, "p18507_p28472_q16445": 1298, "p18507_q8n1c3": 1298, "1368": 1298, "counts_df": 1298, "consensus_scor": 1298, "plasma_membrane_transmembran": 1298, "plasma_membrane_peripher": 1298, "n_uniprot": 1298, "1120": 1298, "parin_adhesion_regul": 1298, "intracellular_intercellular_rel": 1298, "1121": 1298, "plakophilin_adhesion_regul": 1298, "1122": 1298, "actin_regulation_adhesom": 1298, "1123": 1298, "adhesion_cytoskeleton_adaptor": 1298, "118": 1298, "1124": 1298, "291": 1298, "1125": 1298, "q96jp9": 1298, "cdhr1": 1298, "q9p126": 1298, "clec1b": 1298, "q13585": 1298, "gpr50": 1298, "q8n9i0": 1298, "syt2": 1298, "o43614": 1298, "hcrtr2": 1298, "a6njy1": 1298, "slc9b1p1": 1298, "q5ri15": 1298, "cox20": 1298, "q13948": 1298, "cux1": 1298, "q8ngk4": 1298, "or52k1": 1298, "q8iys2": 1298, "kiaa2013": 1298, "neurotensin": 1298, "recom": 1298, "79": 1298, "o95665": 1298, "ntsr2": 1298, "410": 1298, "45385": 1298, "neurotensi": 1298, "tr": 1298, "idecapepti": 1298, "disulfid": 1298, "7598": 1298, "0x689946b55570": 1298, "82": 1298, "0x68991cdc9b40": 1298, "NOT": 1298, "p21333": 1298, "p80108": 1298, "p62258": 1298, "q9nrx4": 1298, "p54710": 1298, "q8ner1": 1298, "0001507": 1298, "0001527": 1298, "0003351": 1298, "0003355": 1298, "0005201": 1298, "0005577": 1298, "0005582": 1298, "0005583": 1298, "0005584": 1298, "0005585": 1298, "0005586": 1298, "0005587": 1298, "0005588": 1298, "0005590": 1298, "0005591": 1298, "0005592": 1298, "0005595": 1298, "0005596": 1298, "0005599": 1298, "0005601": 1298, "0005602": 1298, "0005604": 1298, "0005606": 1298, "0005607": 1298, "0005608": 1298, "0005609": 1298, "0005610": 1298, "0005611": 1298, "0005612": 1298, "0005614": 1298, "0005615": 1298, "0005616": 1298, "0006858": 1298, "0006859": 1298, "0006860": 1298, "0009519": 1298, "0010367": 1298, "0016914": 1298, "0016942": 1298, "0020003": 1298, "0020004": 1298, "0020005": 1298, "0020006": 1298, "0030020": 1298, "0030021": 1298, "0030023": 1298, "0030197": 1298, "0030345": 1298, "0030934": 1298, "0030935": 1298, "0030938": 1298, "0031012": 1298, "0031395": 1298, "0032311": 1298, "0032579": 1298, "0033165": 1298, "0033166": 1298, "0034358": 1298, "0034359": 1298, "0034360": 1298, "0034361": 1298, "0034362": 1298, "0034363": 1298, "0034364": 1298, "0034365": 1298, "00343": 1298, "3104": 1298, "homomultim": 1298, "update_index": 1298, "91": 1298, "p42345": [1298, 1301], "o00141_o15530_o75879_p23443_p34931_p42345_q6r327_q8n122_q9bpz7_q9bvc4_q9h672": 1298, "o00141_o15530_p07900_p23443_p31749_p31751_p42345_p78527_q05513_q05655_q6r327_q8n122_q9bpz7_q9bvc4": 1298, "o00141_o15530_p0cg47_p0cg48_p23443_p42345_q15118_q6r327_q8n122_q96br1_q9bpz7_q9bvc4": 1298, "o00141_o15530_p23443_p42345_q15118_q6r327_q8n122_q96br1_q96j02_q9bpz7_q9bvc4": 1298, "o00141_o75879_p0cg48_p23443_p34931_p42345_p62753_q6r327_q8n122_q9bpz7_q9bvc4_q9ny26": 1298, "o00141_p0cg48_p23443_p36894_p42345_p62942_p68106_q15427_q6r327_q8n122_q9bpz7_q9bvc4": 1298, "o00141_p0cg48_p23443_p42345_p46781_p62753_q6r327_q8n122_q96kq7_q9bpz7_q9bvc4_q9ny26": 1298, "o00141_p0cg48_p23443_p42345_p62753_p62942_q6r327_q8n122_q9bpz7_q9bvc4_q9ny26": 1298, "o00141_p0cg48_p23443_p42345_p62753_q15172_q6r327_q8iw41_q9bpz7_q9bvc4_q9h672": 1298, "o00141_p0cg48_p23443_p42345_p62753_q6r327_q70z35_q8n122_q8tcu6_q9bpz7": 1298, "5348": 1298, "despit": [1298, 1300], "98": 1298, "q92793": 1298, "q09472": 1298, "components_genesymbol": 1298, "nfya_nfyb_nfyc": 1298, "15243141": 1298, "14755292": 1298, "9372932": 1298, "4478": 1298, "hc1449": 1298, "deptor_eef1a1_mlst8_prr5_rictor": 1298, "c2": 1298, "akt1s1_deptor_mlst8_mtor_rptor": 1298, "c3": 1298, "btrc_cul1_skp1": 1298, "9990852": 1298, "c5": 1298, "227": 1298, "hc757": 1298, "crebbp_ep300": 1298, "c6": 1298, "28168": 1298, "npnt": 1298, "q5szk8_q6uxi9_q86xx4": 1298, "fras1_frem2_npnt": 1298, "28169": 1298, "nrp1_nrp2": 1298, "o14786_o60462_q9y4d7": 1298, "nrp1_nrp2_plxnd1": 1298, "28170": 1298, "nrp2_plxna2": 1298, "o60462_o75051": 1298, "28171": 1298, "nrp2_plxna4": 1298, "o60462_q9hcm2": 1298, "28172": 1298, "ptch2_smo": 1298, "q99835_q9y6c5": 1298, "good": 1298, "myannot": 1298, "complexdb": 1298, "mycomplex": 1298, "char": 1298, "xxxxx": 1298, "grow": 1298, "ten": 1298, "thousand": 1298, "l0n17": 1298, "annoi": 1298, "educ": 1298, "credit": 1298, "gnu": 1298, "104": 1298, "prioriti": 1298, "107": 1298, "si": 1298, "download_complex": 1298, "d7b8673e83e43a01c533f9de5a2b04b9": 1298, "1046": 1298, "creation": 1298, "builtin": 1298, "shell": 1298, "dev": 1298, "devnul": 1298, "notic": 1298, "109": 1298, "greet": 1298, "childoflogg": 1298, "say_someth": 1298, "_log": 1298, "anywher": 1298, "111": 1298, "_logger": 1298, "mylogg": 1298, "strai": 1298, "flood": 1298, "112": 1298, "hasn": 1298, "thoroughli": 1298, "scai": 1298, "fraunhof": 1298, "captur": 1298, "belgraph": 1298, "bel_graph": 1298, "export_relationship": 1298, "omnipath_pathwai": 1298, "fp": 1298, "bel_str": 1298, "333": 1298, "network_expand_complex": 1298, "interaction_input": 1298, "singnalink": 1298, "interaction_datafram": 1298, "protein_datafram": 1298, "1h": 1298, "advantag": 1298, "worri": 1298, "network1": 1298, "entreza": 1298, "entrezb": 1298, "1950": 1298, "5290": 1298, "207": 1298, "2932": 1298, "network2": 1298, "pik3ca": 1298, "sos1": 1298, "rac1": 1298, "map3k1": 1298, "hra": 1298, "gsk3b": 1298, "iinput_format": 1298, "input1": 1298, "readset": 1298, "egf1": 1298, "input2": 1298, "egf2": 1298, "ecount": 1298, "vcount": 1298, "3241": 1298, "p17252": 1298, "q15139": 1298, "contradict": 1298, "rid": 1298, "helper": 1298, "plural": 1298, "atg16l2": 1298, "_namedvertexseq": 1298, "bit": 1298, "contraintuit": 1298, "affected_bi": 1298, "similari": 1298, "inhibited_bi": 1298, "gs_": 1298, "up_": 1298, "indirect": 1298, "rapidli": 1298, "atg3": [1298, 1301], "map1lc3b": [1298, 1301], "sqstm1": [1298, 1301], "refs_by_sourc": 1298, "abil": 1298, "egf_network": 1298, "777777": 1298, "97be73": 1298, "ffffff": 1298, "ipython": 1298, "visibl": 1298, "inlin": 1298, "120": 1298, "imag": 1298, "click": 1299, "changelog": 1300, "improv": 1300, "remot": 1300, "partial": 1300, "pyreact": 1300, "rule": [1300, 1301], "mysql_connect": 1300, "python3": 1300, "dataio": 1300, "docstr": 1300, "focus": 1300, "rewritten": 1300, "workaround": 1300, "terribl": 1300, "reflist": 1300, "becam": 1300, "paremet": 1300, "reorgan": 1300, "redesign": 1300, "yml": 1300, "neo4j": 1300, "biocyph": 1300, "dlmanag": 1300, "protocol": 1301, "wget": 1301, "whatev": 1301, "recogn": 1301, "pathwayextra": 1301, "optimum": 1301, "kinaseextra": 1301, "ligrecextra": 1301, "mirnatarget": 1301, "interacion": 1301, "rodent": 1301, "omic": 1301, "arget": 1301, "source_target": 1301, "atg7": 1301, "map1lc3a": 1301, "map1lc3c": 1301, "q9h0r8": 1301, "gabarap": 1301, "gabarapl2": 1301, "appear": 1301, "fyn": 1301, "ubiquitin": 1301, "ens_sub": 1301, "phosphosite_noref": 1301, "000": 1301, "hearth": 1301, "dplyr": 1301, "signalink_pathwai": 1301, "bmp7": 1301, "hpa_tissu": 1301, "funtion": 1301, "ion": 1301, "interleukin": 1301, "deliv": 1301, "atg4a": 1301, "bmp8b": 1301, "intuit": 1301, "repli": 1301}, "objects": {"": [[0, 0, 0, "-", "pypath"]], "pypath": [[1, 0, 0, "-", "core"], [150, 0, 0, "-", "data"], [151, 3, 1, "", "disclaimer"], [152, 3, 1, "", "info"], [153, 0, 0, "-", "inputs"], [850, 0, 0, "-", "internals"], [895, 0, 0, "-", "legacy"], [906, 3, 1, "", "log"], [907, 0, 0, "-", "omnipath"], [944, 0, 0, "-", "resources"], [970, 0, 0, "-", "share"], [1100, 0, 0, "-", "utils"], [1253, 0, 0, "-", "visual"]], "pypath.core": [[2, 0, 0, "-", "annot"], [95, 0, 0, "-", "attrs"], [97, 0, 0, "-", "common"], [99, 0, 0, "-", "complex"], [121, 0, 0, "-", "entity"], [125, 0, 0, "-", "enz_sub"], [131, 0, 0, "-", "evidence"], [134, 0, 0, "-", "interaction"], [138, 0, 0, "-", "intercell"], [142, 0, 0, "-", "intercell_annot"], [144, 0, 0, "-", "network"]], "pypath.core.annot": [[3, 1, 1, "", "Adhesome"], [4, 1, 1, "", "Almen2009"], [5, 1, 1, "", "AnnotationBase"], [6, 1, 1, "", "AnnotationTable"], [7, 1, 1, "", "Baccin2019"], [8, 1, 1, "", "Biogps"], [9, 1, 1, "", "CancerGeneCensus"], [10, 1, 1, "", "Cancerdrugsdb"], [11, 1, 1, "", "Cancersea"], [12, 1, 1, "", "CellPhoneDB"], [13, 1, 1, "", "CellPhoneDBComplex"], [14, 1, 1, "", "CellSurfaceProteinAtlas"], [15, 1, 1, "", "CellSurfaceProteinAtlasCellType"], [16, 1, 1, "", "Cellcall"], [17, 1, 1, "", "Cellcellinteractions"], [18, 1, 1, "", "Cellchatdb"], [19, 1, 1, "", "CellchatdbComplex"], [20, 1, 1, "", "Cellinker"], [21, 1, 1, "", "CellinkerComplex"], [22, 1, 1, "", "Celltalkdb"], [23, 1, 1, "", "Celltypist"], [24, 1, 1, "", "Comppi"], [25, 1, 1, "", "Connectomedb"], [26, 1, 1, "", "Corum"], [27, 1, 1, "", "CorumFuncat"], [28, 1, 1, "", "CorumGO"], [29, 1, 1, "", "Cpad"], [30, 1, 1, "", "CustomAnnotation"], [31, 1, 1, "", "Cytosig"], [32, 1, 1, "", "Dgidb"], [33, 1, 1, "", "Disgenet"], [34, 1, 1, "", "Embrace"], [35, 1, 1, "", "Exocarta"], [36, 1, 1, "", "GOCustomIntercell"], [37, 1, 1, "", "GOIntercell"], [38, 1, 1, "", "Gpcrdb"], [39, 1, 1, "", "GuideToPharmacology"], [40, 1, 1, "", "HPO"], [41, 1, 1, "", "Hgnc"], [42, 1, 1, "", "HpmrComplex"], [43, 1, 1, "", "HumanPlasmaMembraneReceptome"], [44, 1, 1, "", "HumanProteinAtlas"], [45, 1, 1, "", "HumanProteinAtlasSecretome"], [46, 1, 1, "", "HumanProteinAtlasSubcellular"], [47, 1, 1, "", "Humancellmap"], [48, 1, 1, "", "Icellnet"], [49, 1, 1, "", "IcellnetComplex"], [50, 1, 1, "", "Integrins"], [51, 1, 1, "", "InterPro"], [52, 1, 1, "", "Intogen"], [53, 1, 1, "", "Italk"], [54, 1, 1, "", "KeggPathways"], [55, 1, 1, "", "KeggPathwaysPC"], [56, 1, 1, "", "Kinasedotcom"], [57, 1, 1, "", "Kirouac2010"], [58, 1, 1, "", "Lambert2018"], [59, 1, 1, "", "LigandReceptor"], [60, 1, 1, "", "Locate"], [61, 1, 1, "", "Lrdb"], [62, 1, 1, "", "Matrisome"], [63, 1, 1, "", "Matrixdb"], [64, 1, 1, "", "Mcam"], [65, 1, 1, "", "Membranome"], [66, 1, 1, "", "Msigdb"], [67, 1, 1, "", "NetpathPathways"], [68, 1, 1, "", "Opm"], [69, 1, 1, "", "Panglaodb"], [70, 1, 1, "", "Phobius"], [71, 1, 1, "", "Phosphatome"], [72, 1, 1, "", "Progeny"], [73, 1, 1, "", "Ramilowski2015"], [74, 1, 1, "", "Ramilowski2015Location"], [75, 1, 1, "", "Scconnect"], [76, 1, 1, "", "ScconnectComplex"], [77, 1, 1, "", "SignalinkFunctions"], [78, 1, 1, "", "SignalinkPathways"], [79, 1, 1, "", "SignorPathways"], [80, 1, 1, "", "Surfaceome"], [81, 1, 1, "", "Talklr"], [82, 1, 1, "", "Tcdb"], [83, 1, 1, "", "Tfcensus"], [84, 1, 1, "", "Topdb"], [85, 1, 1, "", "UniprotFamilies"], [86, 1, 1, "", "UniprotKeywords"], [87, 1, 1, "", "UniprotLocations"], [88, 1, 1, "", "UniprotTissues"], [89, 1, 1, "", "UniprotTopologies"], [90, 1, 1, "", "Vesiclepedia"], [91, 1, 1, "", "Wang"], [92, 1, 1, "", "Zhong2015"], [93, 3, 1, "", "get_db"], [94, 3, 1, "", "init_db"]], "pypath.core.annot.Adhesome": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "add_complexes_by_inference"], [3, 2, 1, "", "all_complexes"], [3, 2, 1, "", "all_entities"], [3, 2, 1, "", "all_mirnas"], [3, 2, 1, "", "all_proteins"], [3, 2, 1, "", "all_refs"], [3, 2, 1, "", "annotate_complex"], [3, 2, 1, "", "browse"], [3, 2, 1, "", "complex_inference"], [3, 2, 1, "", "coverage"], [3, 2, 1, "", "curation_effort"], [3, 2, 1, "", "get_names"], [3, 2, 1, "", "get_reference_set"], [3, 2, 1, "", "get_subset"], [3, 2, 1, "", "get_subset_bool_array"], [3, 2, 1, "", "get_values"], [3, 2, 1, "", "labels"], [3, 2, 1, "", "load"], [3, 2, 1, "", "load_data"], [3, 2, 1, "", "load_proteins"], [3, 2, 1, "", "make_df"], [3, 2, 1, "", "numof_entities"], [3, 2, 1, "", "numof_records"], [3, 2, 1, "", "numof_references"], [3, 2, 1, "", "process"], [3, 2, 1, "", "reload"], [3, 2, 1, "", "select"], [3, 2, 1, "", "set_method"], [3, 2, 1, "", "set_reference_set"], [3, 2, 1, "", "show"], [3, 2, 1, "", "subset_intersection"], [3, 2, 1, "", "to_array"], [3, 2, 1, "", "to_bool_array"], [3, 2, 1, "", "to_set"]], "pypath.core.annot.Almen2009": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "add_complexes_by_inference"], [4, 2, 1, "", "all_complexes"], [4, 2, 1, "", "all_entities"], [4, 2, 1, "", "all_mirnas"], [4, 2, 1, "", "all_proteins"], [4, 2, 1, "", "all_refs"], [4, 2, 1, "", "annotate_complex"], [4, 2, 1, "", "browse"], [4, 2, 1, "", "complex_inference"], [4, 2, 1, "", "coverage"], [4, 2, 1, "", "curation_effort"], [4, 2, 1, "", "get_names"], [4, 2, 1, "", "get_reference_set"], [4, 2, 1, "", "get_subset"], [4, 2, 1, "", "get_subset_bool_array"], [4, 2, 1, "", "get_values"], [4, 2, 1, "", "labels"], [4, 2, 1, "", "load"], [4, 2, 1, "", "load_data"], [4, 2, 1, "", "load_proteins"], [4, 2, 1, "", "make_df"], [4, 2, 1, "", "numof_entities"], [4, 2, 1, "", "numof_records"], [4, 2, 1, "", "numof_references"], [4, 2, 1, "", "process"], [4, 2, 1, "", "reload"], [4, 2, 1, "", "select"], [4, 2, 1, "", "set_method"], [4, 2, 1, "", "set_reference_set"], [4, 2, 1, "", "show"], [4, 2, 1, "", "subset_intersection"], [4, 2, 1, "", "to_array"], [4, 2, 1, "", "to_bool_array"], [4, 2, 1, "", "to_set"]], "pypath.core.annot.AnnotationBase": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "add_complexes_by_inference"], [5, 2, 1, "", "all_complexes"], [5, 2, 1, "", "all_entities"], [5, 2, 1, "", "all_mirnas"], [5, 2, 1, "", "all_proteins"], [5, 2, 1, "", "all_refs"], [5, 2, 1, "", "annotate_complex"], [5, 2, 1, "", "browse"], [5, 2, 1, "", "complex_inference"], [5, 2, 1, "", "coverage"], [5, 2, 1, "", "curation_effort"], [5, 2, 1, "", "get_names"], [5, 2, 1, "", "get_reference_set"], [5, 2, 1, "", "get_subset"], [5, 2, 1, "", "get_subset_bool_array"], [5, 2, 1, "", "get_values"], [5, 2, 1, "", "labels"], [5, 2, 1, "", "load"], [5, 2, 1, "", "load_data"], [5, 2, 1, "", "load_proteins"], [5, 2, 1, "", "make_df"], [5, 2, 1, "", "numof_entities"], [5, 2, 1, "", "numof_records"], [5, 2, 1, "", "numof_references"], [5, 2, 1, "", "process"], [5, 2, 1, "", "reload"], [5, 2, 1, "", "select"], [5, 2, 1, "", "set_method"], [5, 2, 1, "", "set_reference_set"], [5, 2, 1, "", "show"], [5, 2, 1, "", "subset_intersection"], [5, 2, 1, "", "to_array"], [5, 2, 1, "", "to_bool_array"], [5, 2, 1, "", "to_set"]], "pypath.core.annot.AnnotationTable": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "all_annotations"], [6, 2, 1, "", "all_annotations_str"], [6, 2, 1, "", "reload"], [6, 2, 1, "", "search"]], "pypath.core.annot.Baccin2019": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "add_complexes_by_inference"], [7, 2, 1, "", "all_complexes"], [7, 2, 1, "", "all_entities"], [7, 2, 1, "", "all_mirnas"], [7, 2, 1, "", "all_proteins"], [7, 2, 1, "", "all_refs"], [7, 2, 1, "", "annotate_complex"], [7, 2, 1, "", "browse"], [7, 2, 1, "", "complex_inference"], [7, 2, 1, "", "coverage"], [7, 2, 1, "", "curation_effort"], [7, 2, 1, "", "get_names"], [7, 2, 1, "", "get_reference_set"], [7, 2, 1, "", "get_subset"], [7, 2, 1, "", "get_subset_bool_array"], [7, 2, 1, "", "get_values"], [7, 2, 1, "", "labels"], [7, 2, 1, "", "load"], [7, 2, 1, "", "load_data"], [7, 2, 1, "", "load_proteins"], [7, 2, 1, "", "make_df"], [7, 2, 1, "", "numof_entities"], [7, 2, 1, "", "numof_records"], [7, 2, 1, "", "numof_references"], [7, 2, 1, "", "process"], [7, 2, 1, "", "reload"], [7, 2, 1, "", "select"], [7, 2, 1, "", "set_method"], [7, 2, 1, "", "set_reference_set"], [7, 2, 1, "", "show"], [7, 2, 1, "", "subset_intersection"], [7, 2, 1, "", "to_array"], [7, 2, 1, "", "to_bool_array"], [7, 2, 1, "", "to_set"]], "pypath.core.annot.Biogps": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "add_complexes_by_inference"], [8, 2, 1, "", "all_complexes"], [8, 2, 1, "", "all_entities"], [8, 2, 1, "", "all_mirnas"], [8, 2, 1, "", "all_proteins"], [8, 2, 1, "", "all_refs"], [8, 2, 1, "", "annotate_complex"], [8, 2, 1, "", "browse"], [8, 2, 1, "", "complex_inference"], [8, 2, 1, "", "coverage"], [8, 2, 1, "", "curation_effort"], [8, 2, 1, "", "get_names"], [8, 2, 1, "", "get_reference_set"], [8, 2, 1, "", "get_subset"], [8, 2, 1, "", "get_subset_bool_array"], [8, 2, 1, "", "get_values"], [8, 2, 1, "", "labels"], [8, 2, 1, "", "load"], [8, 2, 1, "", "load_data"], [8, 2, 1, "", "load_proteins"], [8, 2, 1, "", "make_df"], [8, 2, 1, "", "numof_entities"], [8, 2, 1, "", "numof_records"], [8, 2, 1, "", "numof_references"], [8, 2, 1, "", "process"], [8, 2, 1, "", "reload"], [8, 2, 1, "", "select"], [8, 2, 1, "", "set_method"], [8, 2, 1, "", "set_reference_set"], [8, 2, 1, "", "show"], [8, 2, 1, "", "subset_intersection"], [8, 2, 1, "", "to_array"], [8, 2, 1, "", "to_bool_array"], [8, 2, 1, "", "to_set"]], "pypath.core.annot.CancerGeneCensus": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "add_complexes_by_inference"], [9, 2, 1, "", "all_complexes"], [9, 2, 1, "", "all_entities"], [9, 2, 1, "", "all_mirnas"], [9, 2, 1, "", "all_proteins"], [9, 2, 1, "", "all_refs"], [9, 2, 1, "", "annotate_complex"], [9, 2, 1, "", "browse"], [9, 2, 1, "", "complex_inference"], [9, 2, 1, "", "coverage"], [9, 2, 1, "", "curation_effort"], [9, 2, 1, "", "get_names"], [9, 2, 1, "", "get_reference_set"], [9, 2, 1, "", "get_subset"], [9, 2, 1, "", "get_subset_bool_array"], [9, 2, 1, "", "get_values"], [9, 2, 1, "", "labels"], [9, 2, 1, "", "load"], [9, 2, 1, "", "load_data"], [9, 2, 1, "", "load_proteins"], [9, 2, 1, "", "make_df"], [9, 2, 1, "", "numof_entities"], [9, 2, 1, "", "numof_records"], [9, 2, 1, "", "numof_references"], [9, 2, 1, "", "process"], [9, 2, 1, "", "reload"], [9, 2, 1, "", "select"], [9, 2, 1, "", "set_method"], [9, 2, 1, "", "set_reference_set"], [9, 2, 1, "", "show"], [9, 2, 1, "", "subset_intersection"], [9, 2, 1, "", "to_array"], [9, 2, 1, "", "to_bool_array"], [9, 2, 1, "", "to_set"]], "pypath.core.annot.Cancerdrugsdb": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "add_complexes_by_inference"], [10, 2, 1, "", "all_complexes"], [10, 2, 1, "", "all_entities"], [10, 2, 1, "", "all_mirnas"], [10, 2, 1, "", "all_proteins"], [10, 2, 1, "", "all_refs"], [10, 2, 1, "", "annotate_complex"], [10, 2, 1, "", "browse"], [10, 2, 1, "", "complex_inference"], [10, 2, 1, "", "coverage"], [10, 2, 1, "", "curation_effort"], [10, 2, 1, "", "get_names"], [10, 2, 1, "", "get_reference_set"], [10, 2, 1, "", "get_subset"], [10, 2, 1, "", "get_subset_bool_array"], [10, 2, 1, "", "get_values"], [10, 2, 1, "", "labels"], [10, 2, 1, "", "load"], [10, 2, 1, "", "load_data"], [10, 2, 1, "", "load_proteins"], [10, 2, 1, "", "make_df"], [10, 2, 1, "", "numof_entities"], [10, 2, 1, "", "numof_records"], [10, 2, 1, "", "numof_references"], [10, 2, 1, "", "process"], [10, 2, 1, "", "reload"], [10, 2, 1, "", "select"], [10, 2, 1, "", "set_method"], [10, 2, 1, "", "set_reference_set"], [10, 2, 1, "", "show"], [10, 2, 1, "", "subset_intersection"], [10, 2, 1, "", "to_array"], [10, 2, 1, "", "to_bool_array"], [10, 2, 1, "", "to_set"]], "pypath.core.annot.Cancersea": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "add_complexes_by_inference"], [11, 2, 1, "", "all_complexes"], [11, 2, 1, "", "all_entities"], [11, 2, 1, "", "all_mirnas"], [11, 2, 1, "", "all_proteins"], [11, 2, 1, "", "all_refs"], [11, 2, 1, "", "annotate_complex"], [11, 2, 1, "", "browse"], [11, 2, 1, "", "complex_inference"], [11, 2, 1, "", "coverage"], [11, 2, 1, "", "curation_effort"], [11, 2, 1, "", "get_names"], [11, 2, 1, "", "get_reference_set"], [11, 2, 1, "", "get_subset"], [11, 2, 1, "", "get_subset_bool_array"], [11, 2, 1, "", "get_values"], [11, 2, 1, "", "labels"], [11, 2, 1, "", "load"], [11, 2, 1, "", "load_data"], [11, 2, 1, "", "load_proteins"], [11, 2, 1, "", "make_df"], [11, 2, 1, "", "numof_entities"], [11, 2, 1, "", "numof_records"], [11, 2, 1, "", "numof_references"], [11, 2, 1, "", "process"], [11, 2, 1, "", "reload"], [11, 2, 1, "", "select"], [11, 2, 1, "", "set_method"], [11, 2, 1, "", "set_reference_set"], [11, 2, 1, "", "show"], [11, 2, 1, "", "subset_intersection"], [11, 2, 1, "", "to_array"], [11, 2, 1, "", "to_bool_array"], [11, 2, 1, "", "to_set"]], "pypath.core.annot.CellPhoneDB": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "add_complexes_by_inference"], [12, 2, 1, "", "all_complexes"], [12, 2, 1, "", "all_entities"], [12, 2, 1, "", "all_mirnas"], [12, 2, 1, "", "all_proteins"], [12, 2, 1, "", "all_refs"], [12, 2, 1, "", "annotate_complex"], [12, 2, 1, "", "browse"], [12, 2, 1, "", "complex_inference"], [12, 2, 1, "", "coverage"], [12, 2, 1, "", "curation_effort"], [12, 2, 1, "", "get_names"], [12, 2, 1, "", "get_reference_set"], [12, 2, 1, "", "get_subset"], [12, 2, 1, "", "get_subset_bool_array"], [12, 2, 1, "", "get_values"], [12, 2, 1, "", "labels"], [12, 2, 1, "", "load"], [12, 2, 1, "", "load_data"], [12, 2, 1, "", "load_proteins"], [12, 2, 1, "", "make_df"], [12, 2, 1, "", "numof_entities"], [12, 2, 1, "", "numof_records"], [12, 2, 1, "", "numof_references"], [12, 2, 1, "", "process"], [12, 2, 1, "", "reload"], [12, 2, 1, "", "select"], [12, 2, 1, "", "set_method"], [12, 2, 1, "", "set_reference_set"], [12, 2, 1, "", "show"], [12, 2, 1, "", "subset_intersection"], [12, 2, 1, "", "to_array"], [12, 2, 1, "", "to_bool_array"], [12, 2, 1, "", "to_set"]], "pypath.core.annot.CellPhoneDBComplex": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "add_complexes_by_inference"], [13, 2, 1, "", "all_complexes"], [13, 2, 1, "", "all_entities"], [13, 2, 1, "", "all_mirnas"], [13, 2, 1, "", "all_proteins"], [13, 2, 1, "", "all_refs"], [13, 2, 1, "", "annotate_complex"], [13, 2, 1, "", "browse"], [13, 2, 1, "", "complex_inference"], [13, 2, 1, "", "coverage"], [13, 2, 1, "", "curation_effort"], [13, 2, 1, "", "get_names"], [13, 2, 1, "", "get_reference_set"], [13, 2, 1, "", "get_subset"], [13, 2, 1, "", "get_subset_bool_array"], [13, 2, 1, "", "get_values"], [13, 2, 1, "", "labels"], [13, 2, 1, "", "load"], [13, 2, 1, "", "load_data"], [13, 2, 1, "", "load_proteins"], [13, 2, 1, "", "make_df"], [13, 2, 1, "", "numof_entities"], [13, 2, 1, "", "numof_records"], [13, 2, 1, "", "numof_references"], [13, 2, 1, "", "process"], [13, 2, 1, "", "reload"], [13, 2, 1, "", "select"], [13, 2, 1, "", "set_method"], [13, 2, 1, "", "set_reference_set"], [13, 2, 1, "", "show"], [13, 2, 1, "", "subset_intersection"], [13, 2, 1, "", "to_array"], [13, 2, 1, "", "to_bool_array"], [13, 2, 1, "", "to_set"]], "pypath.core.annot.CellSurfaceProteinAtlas": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "add_complexes_by_inference"], [14, 2, 1, "", "all_complexes"], [14, 2, 1, "", "all_entities"], [14, 2, 1, "", "all_mirnas"], [14, 2, 1, "", "all_proteins"], [14, 2, 1, "", "all_refs"], [14, 2, 1, "", "annotate_complex"], [14, 2, 1, "", "browse"], [14, 2, 1, "", "complex_inference"], [14, 2, 1, "", "coverage"], [14, 2, 1, "", "curation_effort"], [14, 2, 1, "", "get_names"], [14, 2, 1, "", "get_reference_set"], [14, 2, 1, "", "get_subset"], [14, 2, 1, "", "get_subset_bool_array"], [14, 2, 1, "", "get_values"], [14, 2, 1, "", "labels"], [14, 2, 1, "", "load"], [14, 2, 1, "", "load_data"], [14, 2, 1, "", "load_proteins"], [14, 2, 1, "", "make_df"], [14, 2, 1, "", "numof_entities"], [14, 2, 1, "", "numof_records"], [14, 2, 1, "", "numof_references"], [14, 2, 1, "", "process"], [14, 2, 1, "", "reload"], [14, 2, 1, "", "select"], [14, 2, 1, "", "set_method"], [14, 2, 1, "", "set_reference_set"], [14, 2, 1, "", "show"], [14, 2, 1, "", "subset_intersection"], [14, 2, 1, "", "to_array"], [14, 2, 1, "", "to_bool_array"], [14, 2, 1, "", "to_set"]], "pypath.core.annot.CellSurfaceProteinAtlasCellType": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "add_complexes_by_inference"], [15, 2, 1, "", "all_complexes"], [15, 2, 1, "", "all_entities"], [15, 2, 1, "", "all_mirnas"], [15, 2, 1, "", "all_proteins"], [15, 2, 1, "", "all_refs"], [15, 2, 1, "", "annotate_complex"], [15, 2, 1, "", "browse"], [15, 2, 1, "", "complex_inference"], [15, 2, 1, "", "coverage"], [15, 2, 1, "", "curation_effort"], [15, 2, 1, "", "get_names"], [15, 2, 1, "", "get_reference_set"], [15, 2, 1, "", "get_subset"], [15, 2, 1, "", "get_subset_bool_array"], [15, 2, 1, "", "get_values"], [15, 2, 1, "", "labels"], [15, 2, 1, "", "load"], [15, 2, 1, "", "load_data"], [15, 2, 1, "", "load_proteins"], [15, 2, 1, "", "make_df"], [15, 2, 1, "", "numof_entities"], [15, 2, 1, "", "numof_records"], [15, 2, 1, "", "numof_references"], [15, 2, 1, "", "process"], [15, 2, 1, "", "reload"], [15, 2, 1, "", "select"], [15, 2, 1, "", "set_method"], [15, 2, 1, "", "set_reference_set"], [15, 2, 1, "", "show"], [15, 2, 1, "", "subset_intersection"], [15, 2, 1, "", "to_array"], [15, 2, 1, "", "to_bool_array"], [15, 2, 1, "", "to_set"]], "pypath.core.annot.Cellcall": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "add_complexes_by_inference"], [16, 2, 1, "", "all_complexes"], [16, 2, 1, "", "all_entities"], [16, 2, 1, "", "all_mirnas"], [16, 2, 1, "", "all_proteins"], [16, 2, 1, "", "all_refs"], [16, 2, 1, "", "annotate_complex"], [16, 2, 1, "", "browse"], [16, 2, 1, "", "complex_inference"], [16, 2, 1, "", "coverage"], [16, 2, 1, "", "curation_effort"], [16, 2, 1, "", "get_names"], [16, 2, 1, "", "get_reference_set"], [16, 2, 1, "", "get_subset"], [16, 2, 1, "", "get_subset_bool_array"], [16, 2, 1, "", "get_values"], [16, 2, 1, "", "labels"], [16, 2, 1, "", "load"], [16, 2, 1, "", "load_data"], [16, 2, 1, "", "load_proteins"], [16, 2, 1, "", "make_df"], [16, 2, 1, "", "numof_entities"], [16, 2, 1, "", "numof_records"], [16, 2, 1, "", "numof_references"], [16, 2, 1, "", "process"], [16, 2, 1, "", "reload"], [16, 2, 1, "", "select"], [16, 2, 1, "", "set_method"], [16, 2, 1, "", "set_reference_set"], [16, 2, 1, "", "show"], [16, 2, 1, "", "subset_intersection"], [16, 2, 1, "", "to_array"], [16, 2, 1, "", "to_bool_array"], [16, 2, 1, "", "to_set"]], "pypath.core.annot.Cellcellinteractions": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "add_complexes_by_inference"], [17, 2, 1, "", "all_complexes"], [17, 2, 1, "", "all_entities"], [17, 2, 1, "", "all_mirnas"], [17, 2, 1, "", "all_proteins"], [17, 2, 1, "", "all_refs"], [17, 2, 1, "", "annotate_complex"], [17, 2, 1, "", "browse"], [17, 2, 1, "", "complex_inference"], [17, 2, 1, "", "coverage"], [17, 2, 1, "", "curation_effort"], [17, 2, 1, "", "get_names"], [17, 2, 1, "", "get_reference_set"], [17, 2, 1, "", "get_subset"], [17, 2, 1, "", "get_subset_bool_array"], [17, 2, 1, "", "get_values"], [17, 2, 1, "", "labels"], [17, 2, 1, "", "load"], [17, 2, 1, "", "load_data"], [17, 2, 1, "", "load_proteins"], [17, 2, 1, "", "make_df"], [17, 2, 1, "", "numof_entities"], [17, 2, 1, "", "numof_records"], [17, 2, 1, "", "numof_references"], [17, 2, 1, "", "process"], [17, 2, 1, "", "reload"], [17, 2, 1, "", "select"], [17, 2, 1, "", "set_method"], [17, 2, 1, "", "set_reference_set"], [17, 2, 1, "", "show"], [17, 2, 1, "", "subset_intersection"], [17, 2, 1, "", "to_array"], [17, 2, 1, "", "to_bool_array"], [17, 2, 1, "", "to_set"]], "pypath.core.annot.Cellchatdb": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "add_complexes_by_inference"], [18, 2, 1, "", "all_complexes"], [18, 2, 1, "", "all_entities"], [18, 2, 1, "", "all_mirnas"], [18, 2, 1, "", "all_proteins"], [18, 2, 1, "", "all_refs"], [18, 2, 1, "", "annotate_complex"], [18, 2, 1, "", "browse"], [18, 2, 1, "", "complex_inference"], [18, 2, 1, "", "coverage"], [18, 2, 1, "", "curation_effort"], [18, 2, 1, "", "get_names"], [18, 2, 1, "", "get_reference_set"], [18, 2, 1, "", "get_subset"], [18, 2, 1, "", "get_subset_bool_array"], [18, 2, 1, "", "get_values"], [18, 2, 1, "", "labels"], [18, 2, 1, "", "load"], [18, 2, 1, "", "load_data"], [18, 2, 1, "", "load_proteins"], [18, 2, 1, "", "make_df"], [18, 2, 1, "", "numof_entities"], [18, 2, 1, "", "numof_records"], [18, 2, 1, "", "numof_references"], [18, 2, 1, "", "process"], [18, 2, 1, "", "reload"], [18, 2, 1, "", "select"], [18, 2, 1, "", "set_method"], [18, 2, 1, "", "set_reference_set"], [18, 2, 1, "", "show"], [18, 2, 1, "", "subset_intersection"], [18, 2, 1, "", "to_array"], [18, 2, 1, "", "to_bool_array"], [18, 2, 1, "", "to_set"]], "pypath.core.annot.CellchatdbComplex": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "add_complexes_by_inference"], [19, 2, 1, "", "all_complexes"], [19, 2, 1, "", "all_entities"], [19, 2, 1, "", "all_mirnas"], [19, 2, 1, "", "all_proteins"], [19, 2, 1, "", "all_refs"], [19, 2, 1, "", "annotate_complex"], [19, 2, 1, "", "browse"], [19, 2, 1, "", "complex_inference"], [19, 2, 1, "", "coverage"], [19, 2, 1, "", "curation_effort"], [19, 2, 1, "", "get_names"], [19, 2, 1, "", "get_reference_set"], [19, 2, 1, "", "get_subset"], [19, 2, 1, "", "get_subset_bool_array"], [19, 2, 1, "", "get_values"], [19, 2, 1, "", "labels"], [19, 2, 1, "", "load"], [19, 2, 1, "", "load_data"], [19, 2, 1, "", "load_proteins"], [19, 2, 1, "", "make_df"], [19, 2, 1, "", "numof_entities"], [19, 2, 1, "", "numof_records"], [19, 2, 1, "", "numof_references"], [19, 2, 1, "", "process"], [19, 2, 1, "", "reload"], [19, 2, 1, "", "select"], [19, 2, 1, "", "set_method"], [19, 2, 1, "", "set_reference_set"], [19, 2, 1, "", "show"], [19, 2, 1, "", "subset_intersection"], [19, 2, 1, "", "to_array"], [19, 2, 1, "", "to_bool_array"], [19, 2, 1, "", "to_set"]], "pypath.core.annot.Cellinker": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "add_complexes_by_inference"], [20, 2, 1, "", "all_complexes"], [20, 2, 1, "", "all_entities"], [20, 2, 1, "", "all_mirnas"], [20, 2, 1, "", "all_proteins"], [20, 2, 1, "", "all_refs"], [20, 2, 1, "", "annotate_complex"], [20, 2, 1, "", "browse"], [20, 2, 1, "", "complex_inference"], [20, 2, 1, "", "coverage"], [20, 2, 1, "", "curation_effort"], [20, 2, 1, "", "get_names"], [20, 2, 1, "", "get_reference_set"], [20, 2, 1, "", "get_subset"], [20, 2, 1, "", "get_subset_bool_array"], [20, 2, 1, "", "get_values"], [20, 2, 1, "", "labels"], [20, 2, 1, "", "load"], [20, 2, 1, "", "load_data"], [20, 2, 1, "", "load_proteins"], [20, 2, 1, "", "make_df"], [20, 2, 1, "", "numof_entities"], [20, 2, 1, "", "numof_records"], [20, 2, 1, "", "numof_references"], [20, 2, 1, "", "process"], [20, 2, 1, "", "reload"], [20, 2, 1, "", "select"], [20, 2, 1, "", "set_method"], [20, 2, 1, "", "set_reference_set"], [20, 2, 1, "", "show"], [20, 2, 1, "", "subset_intersection"], [20, 2, 1, "", "to_array"], [20, 2, 1, "", "to_bool_array"], [20, 2, 1, "", "to_set"]], "pypath.core.annot.CellinkerComplex": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "add_complexes_by_inference"], [21, 2, 1, "", "all_complexes"], [21, 2, 1, "", "all_entities"], [21, 2, 1, "", "all_mirnas"], [21, 2, 1, "", "all_proteins"], [21, 2, 1, "", "all_refs"], [21, 2, 1, "", "annotate_complex"], [21, 2, 1, "", "browse"], [21, 2, 1, "", "complex_inference"], [21, 2, 1, "", "coverage"], [21, 2, 1, "", "curation_effort"], [21, 2, 1, "", "get_names"], [21, 2, 1, "", "get_reference_set"], [21, 2, 1, "", "get_subset"], [21, 2, 1, "", "get_subset_bool_array"], [21, 2, 1, "", "get_values"], [21, 2, 1, "", "labels"], [21, 2, 1, "", "load"], [21, 2, 1, "", "load_data"], [21, 2, 1, "", "load_proteins"], [21, 2, 1, "", "make_df"], [21, 2, 1, "", "numof_entities"], [21, 2, 1, "", "numof_records"], [21, 2, 1, "", "numof_references"], [21, 2, 1, "", "process"], [21, 2, 1, "", "reload"], [21, 2, 1, "", "select"], [21, 2, 1, "", "set_method"], [21, 2, 1, "", "set_reference_set"], [21, 2, 1, "", "show"], [21, 2, 1, "", "subset_intersection"], [21, 2, 1, "", "to_array"], [21, 2, 1, "", "to_bool_array"], [21, 2, 1, "", "to_set"]], "pypath.core.annot.Celltalkdb": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "add_complexes_by_inference"], [22, 2, 1, "", "all_complexes"], [22, 2, 1, "", "all_entities"], [22, 2, 1, "", "all_mirnas"], [22, 2, 1, "", "all_proteins"], [22, 2, 1, "", "all_refs"], [22, 2, 1, "", "annotate_complex"], [22, 2, 1, "", "browse"], [22, 2, 1, "", "complex_inference"], [22, 2, 1, "", "coverage"], [22, 2, 1, "", "curation_effort"], [22, 2, 1, "", "get_names"], [22, 2, 1, "", "get_reference_set"], [22, 2, 1, "", "get_subset"], [22, 2, 1, "", "get_subset_bool_array"], [22, 2, 1, "", "get_values"], [22, 2, 1, "", "labels"], [22, 2, 1, "", "load"], [22, 2, 1, "", "load_data"], [22, 2, 1, "", "load_proteins"], [22, 2, 1, "", "make_df"], [22, 2, 1, "", "numof_entities"], [22, 2, 1, "", "numof_records"], [22, 2, 1, "", "numof_references"], [22, 2, 1, "", "process"], [22, 2, 1, "", "reload"], [22, 2, 1, "", "select"], [22, 2, 1, "", "set_method"], [22, 2, 1, "", "set_reference_set"], [22, 2, 1, "", "show"], [22, 2, 1, "", "subset_intersection"], [22, 2, 1, "", "to_array"], [22, 2, 1, "", "to_bool_array"], [22, 2, 1, "", "to_set"]], "pypath.core.annot.Celltypist": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "add_complexes_by_inference"], [23, 2, 1, "", "all_complexes"], [23, 2, 1, "", "all_entities"], [23, 2, 1, "", "all_mirnas"], [23, 2, 1, "", "all_proteins"], [23, 2, 1, "", "all_refs"], [23, 2, 1, "", "annotate_complex"], [23, 2, 1, "", "browse"], [23, 2, 1, "", "complex_inference"], [23, 2, 1, "", "coverage"], [23, 2, 1, "", "curation_effort"], [23, 2, 1, "", "get_names"], [23, 2, 1, "", "get_reference_set"], [23, 2, 1, "", "get_subset"], [23, 2, 1, "", "get_subset_bool_array"], [23, 2, 1, "", "get_values"], [23, 2, 1, "", "labels"], [23, 2, 1, "", "load"], [23, 2, 1, "", "load_data"], [23, 2, 1, "", "load_proteins"], [23, 2, 1, "", "make_df"], [23, 2, 1, "", "numof_entities"], [23, 2, 1, "", "numof_records"], [23, 2, 1, "", "numof_references"], [23, 2, 1, "", "process"], [23, 2, 1, "", "reload"], [23, 2, 1, "", "select"], [23, 2, 1, "", "set_method"], [23, 2, 1, "", "set_reference_set"], [23, 2, 1, "", "show"], [23, 2, 1, "", "subset_intersection"], [23, 2, 1, "", "to_array"], [23, 2, 1, "", "to_bool_array"], [23, 2, 1, "", "to_set"]], "pypath.core.annot.Comppi": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "add_complexes_by_inference"], [24, 2, 1, "", "all_complexes"], [24, 2, 1, "", "all_entities"], [24, 2, 1, "", "all_mirnas"], [24, 2, 1, "", "all_proteins"], [24, 2, 1, "", "all_refs"], [24, 2, 1, "", "annotate_complex"], [24, 2, 1, "", "browse"], [24, 2, 1, "", "complex_inference"], [24, 2, 1, "", "coverage"], [24, 2, 1, "", "curation_effort"], [24, 2, 1, "", "get_names"], [24, 2, 1, "", "get_reference_set"], [24, 2, 1, "", "get_subset"], [24, 2, 1, "", "get_subset_bool_array"], [24, 2, 1, "", "get_values"], [24, 2, 1, "", "labels"], [24, 2, 1, "", "load"], [24, 2, 1, "", "load_data"], [24, 2, 1, "", "load_proteins"], [24, 2, 1, "", "make_df"], [24, 2, 1, "", "numof_entities"], [24, 2, 1, "", "numof_records"], [24, 2, 1, "", "numof_references"], [24, 2, 1, "", "process"], [24, 2, 1, "", "reload"], [24, 2, 1, "", "select"], [24, 2, 1, "", "set_method"], [24, 2, 1, "", "set_reference_set"], [24, 2, 1, "", "show"], [24, 2, 1, "", "subset_intersection"], [24, 2, 1, "", "to_array"], [24, 2, 1, "", "to_bool_array"], [24, 2, 1, "", "to_set"]], "pypath.core.annot.Connectomedb": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "add_complexes_by_inference"], [25, 2, 1, "", "all_complexes"], [25, 2, 1, "", "all_entities"], [25, 2, 1, "", "all_mirnas"], [25, 2, 1, "", "all_proteins"], [25, 2, 1, "", "all_refs"], [25, 2, 1, "", "annotate_complex"], [25, 2, 1, "", "browse"], [25, 2, 1, "", "complex_inference"], [25, 2, 1, "", "coverage"], [25, 2, 1, "", "curation_effort"], [25, 2, 1, "", "get_names"], [25, 2, 1, "", "get_reference_set"], [25, 2, 1, "", "get_subset"], [25, 2, 1, "", "get_subset_bool_array"], [25, 2, 1, "", "get_values"], [25, 2, 1, "", "labels"], [25, 2, 1, "", "load"], [25, 2, 1, "", "load_data"], [25, 2, 1, "", "load_proteins"], [25, 2, 1, "", "make_df"], [25, 2, 1, "", "numof_entities"], [25, 2, 1, "", "numof_records"], [25, 2, 1, "", "numof_references"], [25, 2, 1, "", "process"], [25, 2, 1, "", "reload"], [25, 2, 1, "", "select"], [25, 2, 1, "", "set_method"], [25, 2, 1, "", "set_reference_set"], [25, 2, 1, "", "show"], [25, 2, 1, "", "subset_intersection"], [25, 2, 1, "", "to_array"], [25, 2, 1, "", "to_bool_array"], [25, 2, 1, "", "to_set"]], "pypath.core.annot.Corum": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "add_complexes_by_inference"], [26, 2, 1, "", "all_complexes"], [26, 2, 1, "", "all_entities"], [26, 2, 1, "", "all_mirnas"], [26, 2, 1, "", "all_proteins"], [26, 2, 1, "", "all_refs"], [26, 2, 1, "", "annotate_complex"], [26, 2, 1, "", "browse"], [26, 2, 1, "", "complex_inference"], [26, 2, 1, "", "coverage"], [26, 2, 1, "", "curation_effort"], [26, 2, 1, "", "get_names"], [26, 2, 1, "", "get_reference_set"], [26, 2, 1, "", "get_subset"], [26, 2, 1, "", "get_subset_bool_array"], [26, 2, 1, "", "get_values"], [26, 2, 1, "", "labels"], [26, 2, 1, "", "load"], [26, 2, 1, "", "load_data"], [26, 2, 1, "", "load_proteins"], [26, 2, 1, "", "make_df"], [26, 2, 1, "", "numof_entities"], [26, 2, 1, "", "numof_records"], [26, 2, 1, "", "numof_references"], [26, 2, 1, "", "process"], [26, 2, 1, "", "reload"], [26, 2, 1, "", "select"], [26, 2, 1, "", "set_method"], [26, 2, 1, "", "set_reference_set"], [26, 2, 1, "", "show"], [26, 2, 1, "", "subset_intersection"], [26, 2, 1, "", "to_array"], [26, 2, 1, "", "to_bool_array"], [26, 2, 1, "", "to_set"]], "pypath.core.annot.CorumFuncat": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "add_complexes_by_inference"], [27, 2, 1, "", "all_complexes"], [27, 2, 1, "", "all_entities"], [27, 2, 1, "", "all_mirnas"], [27, 2, 1, "", "all_proteins"], [27, 2, 1, "", "all_refs"], [27, 2, 1, "", "annotate_complex"], [27, 2, 1, "", "browse"], [27, 2, 1, "", "complex_inference"], [27, 2, 1, "", "coverage"], [27, 2, 1, "", "curation_effort"], [27, 2, 1, "", "get_names"], [27, 2, 1, "", "get_reference_set"], [27, 2, 1, "", "get_subset"], [27, 2, 1, "", "get_subset_bool_array"], [27, 2, 1, "", "get_values"], [27, 2, 1, "", "labels"], [27, 2, 1, "", "load"], [27, 2, 1, "", "load_data"], [27, 2, 1, "", "load_proteins"], [27, 2, 1, "", "make_df"], [27, 2, 1, "", "numof_entities"], [27, 2, 1, "", "numof_records"], [27, 2, 1, "", "numof_references"], [27, 2, 1, "", "process"], [27, 2, 1, "", "reload"], [27, 2, 1, "", "select"], [27, 2, 1, "", "set_method"], [27, 2, 1, "", "set_reference_set"], [27, 2, 1, "", "show"], [27, 2, 1, "", "subset_intersection"], [27, 2, 1, "", "to_array"], [27, 2, 1, "", "to_bool_array"], [27, 2, 1, "", "to_set"]], "pypath.core.annot.CorumGO": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "add_complexes_by_inference"], [28, 2, 1, "", "all_complexes"], [28, 2, 1, "", "all_entities"], [28, 2, 1, "", "all_mirnas"], [28, 2, 1, "", "all_proteins"], [28, 2, 1, "", "all_refs"], [28, 2, 1, "", "annotate_complex"], [28, 2, 1, "", "browse"], [28, 2, 1, "", "complex_inference"], [28, 2, 1, "", "coverage"], [28, 2, 1, "", "curation_effort"], [28, 2, 1, "", "get_names"], [28, 2, 1, "", "get_reference_set"], [28, 2, 1, "", "get_subset"], [28, 2, 1, "", "get_subset_bool_array"], [28, 2, 1, "", "get_values"], [28, 2, 1, "", "labels"], [28, 2, 1, "", "load"], [28, 2, 1, "", "load_data"], [28, 2, 1, "", "load_proteins"], [28, 2, 1, "", "make_df"], [28, 2, 1, "", "numof_entities"], [28, 2, 1, "", "numof_records"], [28, 2, 1, "", "numof_references"], [28, 2, 1, "", "process"], [28, 2, 1, "", "reload"], [28, 2, 1, "", "select"], [28, 2, 1, "", "set_method"], [28, 2, 1, "", "set_reference_set"], [28, 2, 1, "", "show"], [28, 2, 1, "", "subset_intersection"], [28, 2, 1, "", "to_array"], [28, 2, 1, "", "to_bool_array"], [28, 2, 1, "", "to_set"]], "pypath.core.annot.Cpad": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "add_complexes_by_inference"], [29, 2, 1, "", "all_complexes"], [29, 2, 1, "", "all_entities"], [29, 2, 1, "", "all_mirnas"], [29, 2, 1, "", "all_proteins"], [29, 2, 1, "", "all_refs"], [29, 2, 1, "", "annotate_complex"], [29, 2, 1, "", "browse"], [29, 2, 1, "", "complex_inference"], [29, 2, 1, "", "coverage"], [29, 2, 1, "", "curation_effort"], [29, 2, 1, "", "get_names"], [29, 2, 1, "", "get_reference_set"], [29, 2, 1, "", "get_subset"], [29, 2, 1, "", "get_subset_bool_array"], [29, 2, 1, "", "get_values"], [29, 2, 1, "", "labels"], [29, 2, 1, "", "load"], [29, 2, 1, "", "load_data"], [29, 2, 1, "", "load_proteins"], [29, 2, 1, "", "make_df"], [29, 2, 1, "", "numof_entities"], [29, 2, 1, "", "numof_records"], [29, 2, 1, "", "numof_references"], [29, 2, 1, "", "process"], [29, 2, 1, "", "reload"], [29, 2, 1, "", "select"], [29, 2, 1, "", "set_method"], [29, 2, 1, "", "set_reference_set"], [29, 2, 1, "", "show"], [29, 2, 1, "", "subset_intersection"], [29, 2, 1, "", "to_array"], [29, 2, 1, "", "to_bool_array"], [29, 2, 1, "", "to_set"]], "pypath.core.annot.CustomAnnotation": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "browse"], [30, 2, 1, "", "class_to_class_connections"], [30, 2, 1, "", "classes_by_entity"], [30, 2, 1, "", "counts"], [30, 2, 1, "", "counts_by_class"], [30, 2, 1, "", "create_class"], [30, 2, 1, "", "degree_inter_class_network"], [30, 2, 1, "", "filter"], [30, 2, 1, "", "filter_classes"], [30, 2, 1, "", "filter_interclass_network"], [30, 2, 1, "", "get_class"], [30, 2, 1, "", "get_df"], [30, 2, 1, "", "get_interclass_network_df"], [30, 2, 1, "", "get_parents"], [30, 2, 1, "", "get_resource"], [30, 2, 1, "", "get_resources"], [30, 2, 1, "", "labels"], [30, 2, 1, "", "make_df"], [30, 2, 1, "", "network_df"], [30, 2, 1, "", "populate_classes"], [30, 2, 1, "", "populate_scores"], [30, 2, 1, "", "process_annot"], [30, 2, 1, "", "quality_check_table"], [30, 2, 1, "", "register_network"], [30, 2, 1, "", "reload"], [30, 2, 1, "", "resources_in_category"], [30, 2, 1, "", "select"], [30, 2, 1, "", "set_interclass_network_df"], [30, 2, 1, "", "show"], [30, 2, 1, "", "update_parents"]], "pypath.core.annot.Cytosig": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "add_complexes_by_inference"], [31, 2, 1, "", "all_complexes"], [31, 2, 1, "", "all_entities"], [31, 2, 1, "", "all_mirnas"], [31, 2, 1, "", "all_proteins"], [31, 2, 1, "", "all_refs"], [31, 2, 1, "", "annotate_complex"], [31, 2, 1, "", "browse"], [31, 2, 1, "", "complex_inference"], [31, 2, 1, "", "coverage"], [31, 2, 1, "", "curation_effort"], [31, 2, 1, "", "get_names"], [31, 2, 1, "", "get_reference_set"], [31, 2, 1, "", "get_subset"], [31, 2, 1, "", "get_subset_bool_array"], [31, 2, 1, "", "get_values"], [31, 2, 1, "", "labels"], [31, 2, 1, "", "load"], [31, 2, 1, "", "load_data"], [31, 2, 1, "", "load_proteins"], [31, 2, 1, "", "make_df"], [31, 2, 1, "", "numof_entities"], [31, 2, 1, "", "numof_records"], [31, 2, 1, "", "numof_references"], [31, 2, 1, "", "process"], [31, 2, 1, "", "reload"], [31, 2, 1, "", "select"], [31, 2, 1, "", "set_method"], [31, 2, 1, "", "set_reference_set"], [31, 2, 1, "", "show"], [31, 2, 1, "", "subset_intersection"], [31, 2, 1, "", "to_array"], [31, 2, 1, "", "to_bool_array"], [31, 2, 1, "", "to_set"]], "pypath.core.annot.Dgidb": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "add_complexes_by_inference"], [32, 2, 1, "", "all_complexes"], [32, 2, 1, "", "all_entities"], [32, 2, 1, "", "all_mirnas"], [32, 2, 1, "", "all_proteins"], [32, 2, 1, "", "all_refs"], [32, 2, 1, "", "annotate_complex"], [32, 2, 1, "", "browse"], [32, 2, 1, "", "complex_inference"], [32, 2, 1, "", "coverage"], [32, 2, 1, "", "curation_effort"], [32, 2, 1, "", "get_names"], [32, 2, 1, "", "get_reference_set"], [32, 2, 1, "", "get_subset"], [32, 2, 1, "", "get_subset_bool_array"], [32, 2, 1, "", "get_values"], [32, 2, 1, "", "labels"], [32, 2, 1, "", "load"], [32, 2, 1, "", "load_data"], [32, 2, 1, "", "load_proteins"], [32, 2, 1, "", "make_df"], [32, 2, 1, "", "numof_entities"], [32, 2, 1, "", "numof_records"], [32, 2, 1, "", "numof_references"], [32, 2, 1, "", "process"], [32, 2, 1, "", "reload"], [32, 2, 1, "", "select"], [32, 2, 1, "", "set_method"], [32, 2, 1, "", "set_reference_set"], [32, 2, 1, "", "show"], [32, 2, 1, "", "subset_intersection"], [32, 2, 1, "", "to_array"], [32, 2, 1, "", "to_bool_array"], [32, 2, 1, "", "to_set"]], "pypath.core.annot.Disgenet": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "add_complexes_by_inference"], [33, 2, 1, "", "all_complexes"], [33, 2, 1, "", "all_entities"], [33, 2, 1, "", "all_mirnas"], [33, 2, 1, "", "all_proteins"], [33, 2, 1, "", "all_refs"], [33, 2, 1, "", "annotate_complex"], [33, 2, 1, "", "browse"], [33, 2, 1, "", "complex_inference"], [33, 2, 1, "", "coverage"], [33, 2, 1, "", "curation_effort"], [33, 2, 1, "", "get_names"], [33, 2, 1, "", "get_reference_set"], [33, 2, 1, "", "get_subset"], [33, 2, 1, "", "get_subset_bool_array"], [33, 2, 1, "", "get_values"], [33, 2, 1, "", "labels"], [33, 2, 1, "", "load"], [33, 2, 1, "", "load_data"], [33, 2, 1, "", "load_proteins"], [33, 2, 1, "", "make_df"], [33, 2, 1, "", "numof_entities"], [33, 2, 1, "", "numof_records"], [33, 2, 1, "", "numof_references"], [33, 2, 1, "", "process"], [33, 2, 1, "", "reload"], [33, 2, 1, "", "select"], [33, 2, 1, "", "set_method"], [33, 2, 1, "", "set_reference_set"], [33, 2, 1, "", "show"], [33, 2, 1, "", "subset_intersection"], [33, 2, 1, "", "to_array"], [33, 2, 1, "", "to_bool_array"], [33, 2, 1, "", "to_set"]], "pypath.core.annot.Embrace": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "add_complexes_by_inference"], [34, 2, 1, "", "all_complexes"], [34, 2, 1, "", "all_entities"], [34, 2, 1, "", "all_mirnas"], [34, 2, 1, "", "all_proteins"], [34, 2, 1, "", "all_refs"], [34, 2, 1, "", "annotate_complex"], [34, 2, 1, "", "browse"], [34, 2, 1, "", "complex_inference"], [34, 2, 1, "", "coverage"], [34, 2, 1, "", "curation_effort"], [34, 2, 1, "", "get_names"], [34, 2, 1, "", "get_reference_set"], [34, 2, 1, "", "get_subset"], [34, 2, 1, "", "get_subset_bool_array"], [34, 2, 1, "", "get_values"], [34, 2, 1, "", "labels"], [34, 2, 1, "", "load"], [34, 2, 1, "", "load_data"], [34, 2, 1, "", "load_proteins"], [34, 2, 1, "", "make_df"], [34, 2, 1, "", "numof_entities"], [34, 2, 1, "", "numof_records"], [34, 2, 1, "", "numof_references"], [34, 2, 1, "", "process"], [34, 2, 1, "", "reload"], [34, 2, 1, "", "select"], [34, 2, 1, "", "set_method"], [34, 2, 1, "", "set_reference_set"], [34, 2, 1, "", "show"], [34, 2, 1, "", "subset_intersection"], [34, 2, 1, "", "to_array"], [34, 2, 1, "", "to_bool_array"], [34, 2, 1, "", "to_set"]], "pypath.core.annot.Exocarta": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "add_complexes_by_inference"], [35, 2, 1, "", "all_complexes"], [35, 2, 1, "", "all_entities"], [35, 2, 1, "", "all_mirnas"], [35, 2, 1, "", "all_proteins"], [35, 2, 1, "", "all_refs"], [35, 2, 1, "", "annotate_complex"], [35, 2, 1, "", "browse"], [35, 2, 1, "", "complex_inference"], [35, 2, 1, "", "coverage"], [35, 2, 1, "", "curation_effort"], [35, 2, 1, "", "get_names"], [35, 2, 1, "", "get_reference_set"], [35, 2, 1, "", "get_subset"], [35, 2, 1, "", "get_subset_bool_array"], [35, 2, 1, "", "get_values"], [35, 2, 1, "", "labels"], [35, 2, 1, "", "load"], [35, 2, 1, "", "load_data"], [35, 2, 1, "", "load_proteins"], [35, 2, 1, "", "make_df"], [35, 2, 1, "", "numof_entities"], [35, 2, 1, "", "numof_records"], [35, 2, 1, "", "numof_references"], [35, 2, 1, "", "process"], [35, 2, 1, "", "reload"], [35, 2, 1, "", "select"], [35, 2, 1, "", "set_method"], [35, 2, 1, "", "set_reference_set"], [35, 2, 1, "", "show"], [35, 2, 1, "", "subset_intersection"], [35, 2, 1, "", "to_array"], [35, 2, 1, "", "to_bool_array"], [35, 2, 1, "", "to_set"]], "pypath.core.annot.GOCustomIntercell": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "get_annotation"], [36, 2, 1, "", "get_annotations"], [36, 2, 1, "", "process_categories"], [36, 2, 1, "", "reload"]], "pypath.core.annot.GOIntercell": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "add_complexes_by_inference"], [37, 2, 1, "", "all_complexes"], [37, 2, 1, "", "all_entities"], [37, 2, 1, "", "all_mirnas"], [37, 2, 1, "", "all_proteins"], [37, 2, 1, "", "all_refs"], [37, 2, 1, "", "annotate_complex"], [37, 2, 1, "", "browse"], [37, 2, 1, "", "complex_inference"], [37, 2, 1, "", "coverage"], [37, 2, 1, "", "curation_effort"], [37, 2, 1, "", "get_names"], [37, 2, 1, "", "get_reference_set"], [37, 2, 1, "", "get_subset"], [37, 2, 1, "", "get_subset_bool_array"], [37, 2, 1, "", "get_values"], [37, 2, 1, "", "labels"], [37, 2, 1, "", "load"], [37, 2, 1, "", "load_data"], [37, 2, 1, "", "load_proteins"], [37, 2, 1, "", "make_df"], [37, 2, 1, "", "numof_entities"], [37, 2, 1, "", "numof_records"], [37, 2, 1, "", "numof_references"], [37, 2, 1, "", "process"], [37, 2, 1, "", "reload"], [37, 2, 1, "", "select"], [37, 2, 1, "", "set_method"], [37, 2, 1, "", "set_reference_set"], [37, 2, 1, "", "show"], [37, 2, 1, "", "subset_intersection"], [37, 2, 1, "", "to_array"], [37, 2, 1, "", "to_bool_array"], [37, 2, 1, "", "to_set"]], "pypath.core.annot.Gpcrdb": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "add_complexes_by_inference"], [38, 2, 1, "", "all_complexes"], [38, 2, 1, "", "all_entities"], [38, 2, 1, "", "all_mirnas"], [38, 2, 1, "", "all_proteins"], [38, 2, 1, "", "all_refs"], [38, 2, 1, "", "annotate_complex"], [38, 2, 1, "", "browse"], [38, 2, 1, "", "complex_inference"], [38, 2, 1, "", "coverage"], [38, 2, 1, "", "curation_effort"], [38, 2, 1, "", "get_names"], [38, 2, 1, "", "get_reference_set"], [38, 2, 1, "", "get_subset"], [38, 2, 1, "", "get_subset_bool_array"], [38, 2, 1, "", "get_values"], [38, 2, 1, "", "labels"], [38, 2, 1, "", "load"], [38, 2, 1, "", "load_data"], [38, 2, 1, "", "load_proteins"], [38, 2, 1, "", "make_df"], [38, 2, 1, "", "numof_entities"], [38, 2, 1, "", "numof_records"], [38, 2, 1, "", "numof_references"], [38, 2, 1, "", "process"], [38, 2, 1, "", "reload"], [38, 2, 1, "", "select"], [38, 2, 1, "", "set_method"], [38, 2, 1, "", "set_reference_set"], [38, 2, 1, "", "show"], [38, 2, 1, "", "subset_intersection"], [38, 2, 1, "", "to_array"], [38, 2, 1, "", "to_bool_array"], [38, 2, 1, "", "to_set"]], "pypath.core.annot.GuideToPharmacology": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "add_complexes_by_inference"], [39, 2, 1, "", "all_complexes"], [39, 2, 1, "", "all_entities"], [39, 2, 1, "", "all_mirnas"], [39, 2, 1, "", "all_proteins"], [39, 2, 1, "", "all_refs"], [39, 2, 1, "", "annotate_complex"], [39, 2, 1, "", "browse"], [39, 2, 1, "", "complex_inference"], [39, 2, 1, "", "coverage"], [39, 2, 1, "", "curation_effort"], [39, 2, 1, "", "get_names"], [39, 2, 1, "", "get_reference_set"], [39, 2, 1, "", "get_subset"], [39, 2, 1, "", "get_subset_bool_array"], [39, 2, 1, "", "get_values"], [39, 2, 1, "", "labels"], [39, 2, 1, "", "load"], [39, 2, 1, "", "load_data"], [39, 2, 1, "", "load_proteins"], [39, 2, 1, "", "make_df"], [39, 2, 1, "", "numof_entities"], [39, 2, 1, "", "numof_records"], [39, 2, 1, "", "numof_references"], [39, 2, 1, "", "process"], [39, 2, 1, "", "reload"], [39, 2, 1, "", "select"], [39, 2, 1, "", "set_method"], [39, 2, 1, "", "set_reference_set"], [39, 2, 1, "", "show"], [39, 2, 1, "", "subset_intersection"], [39, 2, 1, "", "to_array"], [39, 2, 1, "", "to_bool_array"], [39, 2, 1, "", "to_set"]], "pypath.core.annot.HPO": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "add_complexes_by_inference"], [40, 2, 1, "", "all_complexes"], [40, 2, 1, "", "all_entities"], [40, 2, 1, "", "all_mirnas"], [40, 2, 1, "", "all_proteins"], [40, 2, 1, "", "all_refs"], [40, 2, 1, "", "annotate_complex"], [40, 2, 1, "", "browse"], [40, 2, 1, "", "complex_inference"], [40, 2, 1, "", "coverage"], [40, 2, 1, "", "curation_effort"], [40, 2, 1, "", "get_names"], [40, 2, 1, "", "get_reference_set"], [40, 2, 1, "", "get_subset"], [40, 2, 1, "", "get_subset_bool_array"], [40, 2, 1, "", "get_values"], [40, 2, 1, "", "labels"], [40, 2, 1, "", "load"], [40, 2, 1, "", "load_data"], [40, 2, 1, "", "load_proteins"], [40, 2, 1, "", "make_df"], [40, 2, 1, "", "numof_entities"], [40, 2, 1, "", "numof_records"], [40, 2, 1, "", "numof_references"], [40, 2, 1, "", "process"], [40, 2, 1, "", "reload"], [40, 2, 1, "", "select"], [40, 2, 1, "", "set_method"], [40, 2, 1, "", "set_reference_set"], [40, 2, 1, "", "show"], [40, 2, 1, "", "subset_intersection"], [40, 2, 1, "", "to_array"], [40, 2, 1, "", "to_bool_array"], [40, 2, 1, "", "to_set"]], "pypath.core.annot.Hgnc": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "add_complexes_by_inference"], [41, 2, 1, "", "all_complexes"], [41, 2, 1, "", "all_entities"], [41, 2, 1, "", "all_mirnas"], [41, 2, 1, "", "all_proteins"], [41, 2, 1, "", "all_refs"], [41, 2, 1, "", "annotate_complex"], [41, 2, 1, "", "browse"], [41, 2, 1, "", "complex_inference"], [41, 2, 1, "", "coverage"], [41, 2, 1, "", "curation_effort"], [41, 2, 1, "", "get_names"], [41, 2, 1, "", "get_reference_set"], [41, 2, 1, "", "get_subset"], [41, 2, 1, "", "get_subset_bool_array"], [41, 2, 1, "", "get_values"], [41, 2, 1, "", "labels"], [41, 2, 1, "", "load"], [41, 2, 1, "", "load_data"], [41, 2, 1, "", "load_proteins"], [41, 2, 1, "", "make_df"], [41, 2, 1, "", "numof_entities"], [41, 2, 1, "", "numof_records"], [41, 2, 1, "", "numof_references"], [41, 2, 1, "", "process"], [41, 2, 1, "", "reload"], [41, 2, 1, "", "select"], [41, 2, 1, "", "set_method"], [41, 2, 1, "", "set_reference_set"], [41, 2, 1, "", "show"], [41, 2, 1, "", "subset_intersection"], [41, 2, 1, "", "to_array"], [41, 2, 1, "", "to_bool_array"], [41, 2, 1, "", "to_set"]], "pypath.core.annot.HpmrComplex": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "add_complexes_by_inference"], [42, 2, 1, "", "all_complexes"], [42, 2, 1, "", "all_entities"], [42, 2, 1, "", "all_mirnas"], [42, 2, 1, "", "all_proteins"], [42, 2, 1, "", "all_refs"], [42, 2, 1, "", "annotate_complex"], [42, 2, 1, "", "browse"], [42, 2, 1, "", "complex_inference"], [42, 2, 1, "", "coverage"], [42, 2, 1, "", "curation_effort"], [42, 2, 1, "", "get_names"], [42, 2, 1, "", "get_reference_set"], [42, 2, 1, "", "get_subset"], [42, 2, 1, "", "get_subset_bool_array"], [42, 2, 1, "", "get_values"], [42, 2, 1, "", "labels"], [42, 2, 1, "", "load"], [42, 2, 1, "", "load_data"], [42, 2, 1, "", "load_proteins"], [42, 2, 1, "", "make_df"], [42, 2, 1, "", "numof_entities"], [42, 2, 1, "", "numof_records"], [42, 2, 1, "", "numof_references"], [42, 2, 1, "", "process"], [42, 2, 1, "", "reload"], [42, 2, 1, "", "select"], [42, 2, 1, "", "set_method"], [42, 2, 1, "", "set_reference_set"], [42, 2, 1, "", "show"], [42, 2, 1, "", "subset_intersection"], [42, 2, 1, "", "to_array"], [42, 2, 1, "", "to_bool_array"], [42, 2, 1, "", "to_set"]], "pypath.core.annot.HumanPlasmaMembraneReceptome": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "add_complexes_by_inference"], [43, 2, 1, "", "all_complexes"], [43, 2, 1, "", "all_entities"], [43, 2, 1, "", "all_mirnas"], [43, 2, 1, "", "all_proteins"], [43, 2, 1, "", "all_refs"], [43, 2, 1, "", "annotate_complex"], [43, 2, 1, "", "browse"], [43, 2, 1, "", "complex_inference"], [43, 2, 1, "", "coverage"], [43, 2, 1, "", "curation_effort"], [43, 2, 1, "", "get_names"], [43, 2, 1, "", "get_reference_set"], [43, 2, 1, "", "get_subset"], [43, 2, 1, "", "get_subset_bool_array"], [43, 2, 1, "", "get_values"], [43, 2, 1, "", "labels"], [43, 2, 1, "", "load"], [43, 2, 1, "", "load_data"], [43, 2, 1, "", "load_proteins"], [43, 2, 1, "", "make_df"], [43, 2, 1, "", "numof_entities"], [43, 2, 1, "", "numof_records"], [43, 2, 1, "", "numof_references"], [43, 2, 1, "", "process"], [43, 2, 1, "", "reload"], [43, 2, 1, "", "select"], [43, 2, 1, "", "set_method"], [43, 2, 1, "", "set_reference_set"], [43, 2, 1, "", "show"], [43, 2, 1, "", "subset_intersection"], [43, 2, 1, "", "to_array"], [43, 2, 1, "", "to_bool_array"], [43, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlas": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "add_complexes_by_inference"], [44, 2, 1, "", "all_complexes"], [44, 2, 1, "", "all_entities"], [44, 2, 1, "", "all_mirnas"], [44, 2, 1, "", "all_proteins"], [44, 2, 1, "", "all_refs"], [44, 2, 1, "", "annotate_complex"], [44, 2, 1, "", "browse"], [44, 2, 1, "", "complex_inference"], [44, 2, 1, "", "coverage"], [44, 2, 1, "", "curation_effort"], [44, 2, 1, "", "get_names"], [44, 2, 1, "", "get_reference_set"], [44, 2, 1, "", "get_subset"], [44, 2, 1, "", "get_subset_bool_array"], [44, 2, 1, "", "get_values"], [44, 2, 1, "", "labels"], [44, 2, 1, "", "load"], [44, 2, 1, "", "load_data"], [44, 2, 1, "", "load_proteins"], [44, 2, 1, "", "make_df"], [44, 2, 1, "", "numof_entities"], [44, 2, 1, "", "numof_records"], [44, 2, 1, "", "numof_references"], [44, 2, 1, "", "process"], [44, 2, 1, "", "reload"], [44, 2, 1, "", "select"], [44, 2, 1, "", "set_method"], [44, 2, 1, "", "set_reference_set"], [44, 2, 1, "", "show"], [44, 2, 1, "", "subset_intersection"], [44, 2, 1, "", "to_array"], [44, 2, 1, "", "to_bool_array"], [44, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlasSecretome": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "add_complexes_by_inference"], [45, 2, 1, "", "all_complexes"], [45, 2, 1, "", "all_entities"], [45, 2, 1, "", "all_mirnas"], [45, 2, 1, "", "all_proteins"], [45, 2, 1, "", "all_refs"], [45, 2, 1, "", "annotate_complex"], [45, 2, 1, "", "browse"], [45, 2, 1, "", "complex_inference"], [45, 2, 1, "", "coverage"], [45, 2, 1, "", "curation_effort"], [45, 2, 1, "", "get_names"], [45, 2, 1, "", "get_reference_set"], [45, 2, 1, "", "get_subset"], [45, 2, 1, "", "get_subset_bool_array"], [45, 2, 1, "", "get_values"], [45, 2, 1, "", "labels"], [45, 2, 1, "", "load"], [45, 2, 1, "", "load_data"], [45, 2, 1, "", "load_proteins"], [45, 2, 1, "", "make_df"], [45, 2, 1, "", "numof_entities"], [45, 2, 1, "", "numof_records"], [45, 2, 1, "", "numof_references"], [45, 2, 1, "", "process"], [45, 2, 1, "", "reload"], [45, 2, 1, "", "select"], [45, 2, 1, "", "set_method"], [45, 2, 1, "", "set_reference_set"], [45, 2, 1, "", "show"], [45, 2, 1, "", "subset_intersection"], [45, 2, 1, "", "to_array"], [45, 2, 1, "", "to_bool_array"], [45, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlasSubcellular": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "add_complexes_by_inference"], [46, 2, 1, "", "all_complexes"], [46, 2, 1, "", "all_entities"], [46, 2, 1, "", "all_mirnas"], [46, 2, 1, "", "all_proteins"], [46, 2, 1, "", "all_refs"], [46, 2, 1, "", "annotate_complex"], [46, 2, 1, "", "browse"], [46, 2, 1, "", "complex_inference"], [46, 2, 1, "", "coverage"], [46, 2, 1, "", "curation_effort"], [46, 2, 1, "", "get_names"], [46, 2, 1, "", "get_reference_set"], [46, 2, 1, "", "get_subset"], [46, 2, 1, "", "get_subset_bool_array"], [46, 2, 1, "", "get_values"], [46, 2, 1, "", "labels"], [46, 2, 1, "", "load"], [46, 2, 1, "", "load_data"], [46, 2, 1, "", "load_proteins"], [46, 2, 1, "", "make_df"], [46, 2, 1, "", "numof_entities"], [46, 2, 1, "", "numof_records"], [46, 2, 1, "", "numof_references"], [46, 2, 1, "", "process"], [46, 2, 1, "", "reload"], [46, 2, 1, "", "select"], [46, 2, 1, "", "set_method"], [46, 2, 1, "", "set_reference_set"], [46, 2, 1, "", "show"], [46, 2, 1, "", "subset_intersection"], [46, 2, 1, "", "to_array"], [46, 2, 1, "", "to_bool_array"], [46, 2, 1, "", "to_set"]], "pypath.core.annot.Humancellmap": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "add_complexes_by_inference"], [47, 2, 1, "", "all_complexes"], [47, 2, 1, "", "all_entities"], [47, 2, 1, "", "all_mirnas"], [47, 2, 1, "", "all_proteins"], [47, 2, 1, "", "all_refs"], [47, 2, 1, "", "annotate_complex"], [47, 2, 1, "", "browse"], [47, 2, 1, "", "complex_inference"], [47, 2, 1, "", "coverage"], [47, 2, 1, "", "curation_effort"], [47, 2, 1, "", "get_names"], [47, 2, 1, "", "get_reference_set"], [47, 2, 1, "", "get_subset"], [47, 2, 1, "", "get_subset_bool_array"], [47, 2, 1, "", "get_values"], [47, 2, 1, "", "labels"], [47, 2, 1, "", "load"], [47, 2, 1, "", "load_data"], [47, 2, 1, "", "load_proteins"], [47, 2, 1, "", "make_df"], [47, 2, 1, "", "numof_entities"], [47, 2, 1, "", "numof_records"], [47, 2, 1, "", "numof_references"], [47, 2, 1, "", "process"], [47, 2, 1, "", "reload"], [47, 2, 1, "", "select"], [47, 2, 1, "", "set_method"], [47, 2, 1, "", "set_reference_set"], [47, 2, 1, "", "show"], [47, 2, 1, "", "subset_intersection"], [47, 2, 1, "", "to_array"], [47, 2, 1, "", "to_bool_array"], [47, 2, 1, "", "to_set"]], "pypath.core.annot.Icellnet": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "add_complexes_by_inference"], [48, 2, 1, "", "all_complexes"], [48, 2, 1, "", "all_entities"], [48, 2, 1, "", "all_mirnas"], [48, 2, 1, "", "all_proteins"], [48, 2, 1, "", "all_refs"], [48, 2, 1, "", "annotate_complex"], [48, 2, 1, "", "browse"], [48, 2, 1, "", "complex_inference"], [48, 2, 1, "", "coverage"], [48, 2, 1, "", "curation_effort"], [48, 2, 1, "", "get_names"], [48, 2, 1, "", "get_reference_set"], [48, 2, 1, "", "get_subset"], [48, 2, 1, "", "get_subset_bool_array"], [48, 2, 1, "", "get_values"], [48, 2, 1, "", "labels"], [48, 2, 1, "", "load"], [48, 2, 1, "", "load_data"], [48, 2, 1, "", "load_proteins"], [48, 2, 1, "", "make_df"], [48, 2, 1, "", "numof_entities"], [48, 2, 1, "", "numof_records"], [48, 2, 1, "", "numof_references"], [48, 2, 1, "", "process"], [48, 2, 1, "", "reload"], [48, 2, 1, "", "select"], [48, 2, 1, "", "set_method"], [48, 2, 1, "", "set_reference_set"], [48, 2, 1, "", "show"], [48, 2, 1, "", "subset_intersection"], [48, 2, 1, "", "to_array"], [48, 2, 1, "", "to_bool_array"], [48, 2, 1, "", "to_set"]], "pypath.core.annot.IcellnetComplex": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "add_complexes_by_inference"], [49, 2, 1, "", "all_complexes"], [49, 2, 1, "", "all_entities"], [49, 2, 1, "", "all_mirnas"], [49, 2, 1, "", "all_proteins"], [49, 2, 1, "", "all_refs"], [49, 2, 1, "", "annotate_complex"], [49, 2, 1, "", "browse"], [49, 2, 1, "", "complex_inference"], [49, 2, 1, "", "coverage"], [49, 2, 1, "", "curation_effort"], [49, 2, 1, "", "get_names"], [49, 2, 1, "", "get_reference_set"], [49, 2, 1, "", "get_subset"], [49, 2, 1, "", "get_subset_bool_array"], [49, 2, 1, "", "get_values"], [49, 2, 1, "", "labels"], [49, 2, 1, "", "load"], [49, 2, 1, "", "load_data"], [49, 2, 1, "", "load_proteins"], [49, 2, 1, "", "make_df"], [49, 2, 1, "", "numof_entities"], [49, 2, 1, "", "numof_records"], [49, 2, 1, "", "numof_references"], [49, 2, 1, "", "process"], [49, 2, 1, "", "reload"], [49, 2, 1, "", "select"], [49, 2, 1, "", "set_method"], [49, 2, 1, "", "set_reference_set"], [49, 2, 1, "", "show"], [49, 2, 1, "", "subset_intersection"], [49, 2, 1, "", "to_array"], [49, 2, 1, "", "to_bool_array"], [49, 2, 1, "", "to_set"]], "pypath.core.annot.Integrins": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "add_complexes_by_inference"], [50, 2, 1, "", "all_complexes"], [50, 2, 1, "", "all_entities"], [50, 2, 1, "", "all_mirnas"], [50, 2, 1, "", "all_proteins"], [50, 2, 1, "", "all_refs"], [50, 2, 1, "", "annotate_complex"], [50, 2, 1, "", "browse"], [50, 2, 1, "", "complex_inference"], [50, 2, 1, "", "coverage"], [50, 2, 1, "", "curation_effort"], [50, 2, 1, "", "get_names"], [50, 2, 1, "", "get_reference_set"], [50, 2, 1, "", "get_subset"], [50, 2, 1, "", "get_subset_bool_array"], [50, 2, 1, "", "get_values"], [50, 2, 1, "", "labels"], [50, 2, 1, "", "load"], [50, 2, 1, "", "load_data"], [50, 2, 1, "", "load_proteins"], [50, 2, 1, "", "make_df"], [50, 2, 1, "", "numof_entities"], [50, 2, 1, "", "numof_records"], [50, 2, 1, "", "numof_references"], [50, 2, 1, "", "process"], [50, 2, 1, "", "reload"], [50, 2, 1, "", "select"], [50, 2, 1, "", "set_method"], [50, 2, 1, "", "set_reference_set"], [50, 2, 1, "", "show"], [50, 2, 1, "", "subset_intersection"], [50, 2, 1, "", "to_array"], [50, 2, 1, "", "to_bool_array"], [50, 2, 1, "", "to_set"]], "pypath.core.annot.InterPro": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "add_complexes_by_inference"], [51, 2, 1, "", "all_complexes"], [51, 2, 1, "", "all_entities"], [51, 2, 1, "", "all_mirnas"], [51, 2, 1, "", "all_proteins"], [51, 2, 1, "", "all_refs"], [51, 2, 1, "", "annotate_complex"], [51, 2, 1, "", "browse"], [51, 2, 1, "", "complex_inference"], [51, 2, 1, "", "coverage"], [51, 2, 1, "", "curation_effort"], [51, 2, 1, "", "get_names"], [51, 2, 1, "", "get_reference_set"], [51, 2, 1, "", "get_subset"], [51, 2, 1, "", "get_subset_bool_array"], [51, 2, 1, "", "get_values"], [51, 2, 1, "", "labels"], [51, 2, 1, "", "load"], [51, 2, 1, "", "load_data"], [51, 2, 1, "", "load_proteins"], [51, 2, 1, "", "make_df"], [51, 2, 1, "", "numof_entities"], [51, 2, 1, "", "numof_records"], [51, 2, 1, "", "numof_references"], [51, 2, 1, "", "process"], [51, 2, 1, "", "reload"], [51, 2, 1, "", "select"], [51, 2, 1, "", "set_method"], [51, 2, 1, "", "set_reference_set"], [51, 2, 1, "", "show"], [51, 2, 1, "", "subset_intersection"], [51, 2, 1, "", "to_array"], [51, 2, 1, "", "to_bool_array"], [51, 2, 1, "", "to_set"]], "pypath.core.annot.Intogen": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "add_complexes_by_inference"], [52, 2, 1, "", "all_complexes"], [52, 2, 1, "", "all_entities"], [52, 2, 1, "", "all_mirnas"], [52, 2, 1, "", "all_proteins"], [52, 2, 1, "", "all_refs"], [52, 2, 1, "", "annotate_complex"], [52, 2, 1, "", "browse"], [52, 2, 1, "", "complex_inference"], [52, 2, 1, "", "coverage"], [52, 2, 1, "", "curation_effort"], [52, 2, 1, "", "get_names"], [52, 2, 1, "", "get_reference_set"], [52, 2, 1, "", "get_subset"], [52, 2, 1, "", "get_subset_bool_array"], [52, 2, 1, "", "get_values"], [52, 2, 1, "", "labels"], [52, 2, 1, "", "load"], [52, 2, 1, "", "load_data"], [52, 2, 1, "", "load_proteins"], [52, 2, 1, "", "make_df"], [52, 2, 1, "", "numof_entities"], [52, 2, 1, "", "numof_records"], [52, 2, 1, "", "numof_references"], [52, 2, 1, "", "process"], [52, 2, 1, "", "reload"], [52, 2, 1, "", "select"], [52, 2, 1, "", "set_method"], [52, 2, 1, "", "set_reference_set"], [52, 2, 1, "", "show"], [52, 2, 1, "", "subset_intersection"], [52, 2, 1, "", "to_array"], [52, 2, 1, "", "to_bool_array"], [52, 2, 1, "", "to_set"]], "pypath.core.annot.Italk": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "add_complexes_by_inference"], [53, 2, 1, "", "all_complexes"], [53, 2, 1, "", "all_entities"], [53, 2, 1, "", "all_mirnas"], [53, 2, 1, "", "all_proteins"], [53, 2, 1, "", "all_refs"], [53, 2, 1, "", "annotate_complex"], [53, 2, 1, "", "browse"], [53, 2, 1, "", "complex_inference"], [53, 2, 1, "", "coverage"], [53, 2, 1, "", "curation_effort"], [53, 2, 1, "", "get_names"], [53, 2, 1, "", "get_reference_set"], [53, 2, 1, "", "get_subset"], [53, 2, 1, "", "get_subset_bool_array"], [53, 2, 1, "", "get_values"], [53, 2, 1, "", "labels"], [53, 2, 1, "", "load"], [53, 2, 1, "", "load_data"], [53, 2, 1, "", "load_proteins"], [53, 2, 1, "", "make_df"], [53, 2, 1, "", "numof_entities"], [53, 2, 1, "", "numof_records"], [53, 2, 1, "", "numof_references"], [53, 2, 1, "", "process"], [53, 2, 1, "", "reload"], [53, 2, 1, "", "select"], [53, 2, 1, "", "set_method"], [53, 2, 1, "", "set_reference_set"], [53, 2, 1, "", "show"], [53, 2, 1, "", "subset_intersection"], [53, 2, 1, "", "to_array"], [53, 2, 1, "", "to_bool_array"], [53, 2, 1, "", "to_set"]], "pypath.core.annot.KeggPathways": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "add_complexes_by_inference"], [54, 2, 1, "", "all_complexes"], [54, 2, 1, "", "all_entities"], [54, 2, 1, "", "all_mirnas"], [54, 2, 1, "", "all_proteins"], [54, 2, 1, "", "all_refs"], [54, 2, 1, "", "annotate_complex"], [54, 2, 1, "", "browse"], [54, 2, 1, "", "complex_inference"], [54, 2, 1, "", "coverage"], [54, 2, 1, "", "curation_effort"], [54, 2, 1, "", "get_names"], [54, 2, 1, "", "get_reference_set"], [54, 2, 1, "", "get_subset"], [54, 2, 1, "", "get_subset_bool_array"], [54, 2, 1, "", "get_values"], [54, 2, 1, "", "labels"], [54, 2, 1, "", "load"], [54, 2, 1, "", "load_data"], [54, 2, 1, "", "load_proteins"], [54, 2, 1, "", "make_df"], [54, 2, 1, "", "numof_entities"], [54, 2, 1, "", "numof_records"], [54, 2, 1, "", "numof_references"], [54, 2, 1, "", "process"], [54, 2, 1, "", "reload"], [54, 2, 1, "", "select"], [54, 2, 1, "", "set_method"], [54, 2, 1, "", "set_reference_set"], [54, 2, 1, "", "show"], [54, 2, 1, "", "subset_intersection"], [54, 2, 1, "", "to_array"], [54, 2, 1, "", "to_bool_array"], [54, 2, 1, "", "to_set"]], "pypath.core.annot.KeggPathwaysPC": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "add_complexes_by_inference"], [55, 2, 1, "", "all_complexes"], [55, 2, 1, "", "all_entities"], [55, 2, 1, "", "all_mirnas"], [55, 2, 1, "", "all_proteins"], [55, 2, 1, "", "all_refs"], [55, 2, 1, "", "annotate_complex"], [55, 2, 1, "", "browse"], [55, 2, 1, "", "complex_inference"], [55, 2, 1, "", "coverage"], [55, 2, 1, "", "curation_effort"], [55, 2, 1, "", "get_names"], [55, 2, 1, "", "get_reference_set"], [55, 2, 1, "", "get_subset"], [55, 2, 1, "", "get_subset_bool_array"], [55, 2, 1, "", "get_values"], [55, 2, 1, "", "labels"], [55, 2, 1, "", "load"], [55, 2, 1, "", "load_data"], [55, 2, 1, "", "load_proteins"], [55, 2, 1, "", "make_df"], [55, 2, 1, "", "numof_entities"], [55, 2, 1, "", "numof_records"], [55, 2, 1, "", "numof_references"], [55, 2, 1, "", "process"], [55, 2, 1, "", "reload"], [55, 2, 1, "", "select"], [55, 2, 1, "", "set_method"], [55, 2, 1, "", "set_reference_set"], [55, 2, 1, "", "show"], [55, 2, 1, "", "subset_intersection"], [55, 2, 1, "", "to_array"], [55, 2, 1, "", "to_bool_array"], [55, 2, 1, "", "to_set"]], "pypath.core.annot.Kinasedotcom": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "add_complexes_by_inference"], [56, 2, 1, "", "all_complexes"], [56, 2, 1, "", "all_entities"], [56, 2, 1, "", "all_mirnas"], [56, 2, 1, "", "all_proteins"], [56, 2, 1, "", "all_refs"], [56, 2, 1, "", "annotate_complex"], [56, 2, 1, "", "browse"], [56, 2, 1, "", "complex_inference"], [56, 2, 1, "", "coverage"], [56, 2, 1, "", "curation_effort"], [56, 2, 1, "", "get_names"], [56, 2, 1, "", "get_reference_set"], [56, 2, 1, "", "get_subset"], [56, 2, 1, "", "get_subset_bool_array"], [56, 2, 1, "", "get_values"], [56, 2, 1, "", "labels"], [56, 2, 1, "", "load"], [56, 2, 1, "", "load_data"], [56, 2, 1, "", "load_proteins"], [56, 2, 1, "", "make_df"], [56, 2, 1, "", "numof_entities"], [56, 2, 1, "", "numof_records"], [56, 2, 1, "", "numof_references"], [56, 2, 1, "", "process"], [56, 2, 1, "", "reload"], [56, 2, 1, "", "select"], [56, 2, 1, "", "set_method"], [56, 2, 1, "", "set_reference_set"], [56, 2, 1, "", "show"], [56, 2, 1, "", "subset_intersection"], [56, 2, 1, "", "to_array"], [56, 2, 1, "", "to_bool_array"], [56, 2, 1, "", "to_set"]], "pypath.core.annot.Kirouac2010": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "add_complexes_by_inference"], [57, 2, 1, "", "all_complexes"], [57, 2, 1, "", "all_entities"], [57, 2, 1, "", "all_mirnas"], [57, 2, 1, "", "all_proteins"], [57, 2, 1, "", "all_refs"], [57, 2, 1, "", "annotate_complex"], [57, 2, 1, "", "browse"], [57, 2, 1, "", "complex_inference"], [57, 2, 1, "", "coverage"], [57, 2, 1, "", "curation_effort"], [57, 2, 1, "", "get_names"], [57, 2, 1, "", "get_reference_set"], [57, 2, 1, "", "get_subset"], [57, 2, 1, "", "get_subset_bool_array"], [57, 2, 1, "", "get_values"], [57, 2, 1, "", "labels"], [57, 2, 1, "", "load"], [57, 2, 1, "", "load_data"], [57, 2, 1, "", "load_proteins"], [57, 2, 1, "", "make_df"], [57, 2, 1, "", "numof_entities"], [57, 2, 1, "", "numof_records"], [57, 2, 1, "", "numof_references"], [57, 2, 1, "", "process"], [57, 2, 1, "", "reload"], [57, 2, 1, "", "select"], [57, 2, 1, "", "set_method"], [57, 2, 1, "", "set_reference_set"], [57, 2, 1, "", "show"], [57, 2, 1, "", "subset_intersection"], [57, 2, 1, "", "to_array"], [57, 2, 1, "", "to_bool_array"], [57, 2, 1, "", "to_set"]], "pypath.core.annot.Lambert2018": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "add_complexes_by_inference"], [58, 2, 1, "", "all_complexes"], [58, 2, 1, "", "all_entities"], [58, 2, 1, "", "all_mirnas"], [58, 2, 1, "", "all_proteins"], [58, 2, 1, "", "all_refs"], [58, 2, 1, "", "annotate_complex"], [58, 2, 1, "", "browse"], [58, 2, 1, "", "complex_inference"], [58, 2, 1, "", "coverage"], [58, 2, 1, "", "curation_effort"], [58, 2, 1, "", "get_names"], [58, 2, 1, "", "get_reference_set"], [58, 2, 1, "", "get_subset"], [58, 2, 1, "", "get_subset_bool_array"], [58, 2, 1, "", "get_values"], [58, 2, 1, "", "labels"], [58, 2, 1, "", "load"], [58, 2, 1, "", "load_data"], [58, 2, 1, "", "load_proteins"], [58, 2, 1, "", "make_df"], [58, 2, 1, "", "numof_entities"], [58, 2, 1, "", "numof_records"], [58, 2, 1, "", "numof_references"], [58, 2, 1, "", "process"], [58, 2, 1, "", "reload"], [58, 2, 1, "", "select"], [58, 2, 1, "", "set_method"], [58, 2, 1, "", "set_reference_set"], [58, 2, 1, "", "show"], [58, 2, 1, "", "subset_intersection"], [58, 2, 1, "", "to_array"], [58, 2, 1, "", "to_bool_array"], [58, 2, 1, "", "to_set"]], "pypath.core.annot.LigandReceptor": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "add_complexes_by_inference"], [59, 2, 1, "", "all_complexes"], [59, 2, 1, "", "all_entities"], [59, 2, 1, "", "all_mirnas"], [59, 2, 1, "", "all_proteins"], [59, 2, 1, "", "all_refs"], [59, 2, 1, "", "annotate_complex"], [59, 2, 1, "", "browse"], [59, 2, 1, "", "complex_inference"], [59, 2, 1, "", "coverage"], [59, 2, 1, "", "curation_effort"], [59, 2, 1, "", "get_names"], [59, 2, 1, "", "get_reference_set"], [59, 2, 1, "", "get_subset"], [59, 2, 1, "", "get_subset_bool_array"], [59, 2, 1, "", "get_values"], [59, 2, 1, "", "labels"], [59, 2, 1, "", "load"], [59, 2, 1, "", "load_data"], [59, 2, 1, "", "load_proteins"], [59, 2, 1, "", "make_df"], [59, 2, 1, "", "numof_entities"], [59, 2, 1, "", "numof_records"], [59, 2, 1, "", "numof_references"], [59, 2, 1, "", "process"], [59, 2, 1, "", "reload"], [59, 2, 1, "", "select"], [59, 2, 1, "", "set_method"], [59, 2, 1, "", "set_reference_set"], [59, 2, 1, "", "show"], [59, 2, 1, "", "subset_intersection"], [59, 2, 1, "", "to_array"], [59, 2, 1, "", "to_bool_array"], [59, 2, 1, "", "to_set"]], "pypath.core.annot.Locate": [[60, 2, 1, "", "__init__"], [60, 2, 1, "", "add_complexes_by_inference"], [60, 2, 1, "", "all_complexes"], [60, 2, 1, "", "all_entities"], [60, 2, 1, "", "all_mirnas"], [60, 2, 1, "", "all_proteins"], [60, 2, 1, "", "all_refs"], [60, 2, 1, "", "annotate_complex"], [60, 2, 1, "", "browse"], [60, 2, 1, "", "complex_inference"], [60, 2, 1, "", "coverage"], [60, 2, 1, "", "curation_effort"], [60, 2, 1, "", "get_names"], [60, 2, 1, "", "get_reference_set"], [60, 2, 1, "", "get_subset"], [60, 2, 1, "", "get_subset_bool_array"], [60, 2, 1, "", "get_values"], [60, 2, 1, "", "labels"], [60, 2, 1, "", "load"], [60, 2, 1, "", "load_data"], [60, 2, 1, "", "load_proteins"], [60, 2, 1, "", "make_df"], [60, 2, 1, "", "numof_entities"], [60, 2, 1, "", "numof_records"], [60, 2, 1, "", "numof_references"], [60, 2, 1, "", "process"], [60, 2, 1, "", "reload"], [60, 2, 1, "", "select"], [60, 2, 1, "", "set_method"], [60, 2, 1, "", "set_reference_set"], [60, 2, 1, "", "show"], [60, 2, 1, "", "subset_intersection"], [60, 2, 1, "", "to_array"], [60, 2, 1, "", "to_bool_array"], [60, 2, 1, "", "to_set"]], "pypath.core.annot.Lrdb": [[61, 2, 1, "", "__init__"], [61, 2, 1, "", "add_complexes_by_inference"], [61, 2, 1, "", "all_complexes"], [61, 2, 1, "", "all_entities"], [61, 2, 1, "", "all_mirnas"], [61, 2, 1, "", "all_proteins"], [61, 2, 1, "", "all_refs"], [61, 2, 1, "", "annotate_complex"], [61, 2, 1, "", "browse"], [61, 2, 1, "", "complex_inference"], [61, 2, 1, "", "coverage"], [61, 2, 1, "", "curation_effort"], [61, 2, 1, "", "get_names"], [61, 2, 1, "", "get_reference_set"], [61, 2, 1, "", "get_subset"], [61, 2, 1, "", "get_subset_bool_array"], [61, 2, 1, "", "get_values"], [61, 2, 1, "", "labels"], [61, 2, 1, "", "load"], [61, 2, 1, "", "load_data"], [61, 2, 1, "", "load_proteins"], [61, 2, 1, "", "make_df"], [61, 2, 1, "", "numof_entities"], [61, 2, 1, "", "numof_records"], [61, 2, 1, "", "numof_references"], [61, 2, 1, "", "process"], [61, 2, 1, "", "reload"], [61, 2, 1, "", "select"], [61, 2, 1, "", "set_method"], [61, 2, 1, "", "set_reference_set"], [61, 2, 1, "", "show"], [61, 2, 1, "", "subset_intersection"], [61, 2, 1, "", "to_array"], [61, 2, 1, "", "to_bool_array"], [61, 2, 1, "", "to_set"]], "pypath.core.annot.Matrisome": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "add_complexes_by_inference"], [62, 2, 1, "", "all_complexes"], [62, 2, 1, "", "all_entities"], [62, 2, 1, "", "all_mirnas"], [62, 2, 1, "", "all_proteins"], [62, 2, 1, "", "all_refs"], [62, 2, 1, "", "annotate_complex"], [62, 2, 1, "", "browse"], [62, 2, 1, "", "complex_inference"], [62, 2, 1, "", "coverage"], [62, 2, 1, "", "curation_effort"], [62, 2, 1, "", "get_names"], [62, 2, 1, "", "get_reference_set"], [62, 2, 1, "", "get_subset"], [62, 2, 1, "", "get_subset_bool_array"], [62, 2, 1, "", "get_values"], [62, 2, 1, "", "labels"], [62, 2, 1, "", "load"], [62, 2, 1, "", "load_data"], [62, 2, 1, "", "load_proteins"], [62, 2, 1, "", "make_df"], [62, 2, 1, "", "numof_entities"], [62, 2, 1, "", "numof_records"], [62, 2, 1, "", "numof_references"], [62, 2, 1, "", "process"], [62, 2, 1, "", "reload"], [62, 2, 1, "", "select"], [62, 2, 1, "", "set_method"], [62, 2, 1, "", "set_reference_set"], [62, 2, 1, "", "show"], [62, 2, 1, "", "subset_intersection"], [62, 2, 1, "", "to_array"], [62, 2, 1, "", "to_bool_array"], [62, 2, 1, "", "to_set"]], "pypath.core.annot.Matrixdb": [[63, 2, 1, "", "__init__"], [63, 2, 1, "", "add_complexes_by_inference"], [63, 2, 1, "", "all_complexes"], [63, 2, 1, "", "all_entities"], [63, 2, 1, "", "all_mirnas"], [63, 2, 1, "", "all_proteins"], [63, 2, 1, "", "all_refs"], [63, 2, 1, "", "annotate_complex"], [63, 2, 1, "", "browse"], [63, 2, 1, "", "complex_inference"], [63, 2, 1, "", "coverage"], [63, 2, 1, "", "curation_effort"], [63, 2, 1, "", "get_names"], [63, 2, 1, "", "get_reference_set"], [63, 2, 1, "", "get_subset"], [63, 2, 1, "", "get_subset_bool_array"], [63, 2, 1, "", "get_values"], [63, 2, 1, "", "labels"], [63, 2, 1, "", "load"], [63, 2, 1, "", "load_data"], [63, 2, 1, "", "load_proteins"], [63, 2, 1, "", "make_df"], [63, 2, 1, "", "numof_entities"], [63, 2, 1, "", "numof_records"], [63, 2, 1, "", "numof_references"], [63, 2, 1, "", "process"], [63, 2, 1, "", "reload"], [63, 2, 1, "", "select"], [63, 2, 1, "", "set_method"], [63, 2, 1, "", "set_reference_set"], [63, 2, 1, "", "show"], [63, 2, 1, "", "subset_intersection"], [63, 2, 1, "", "to_array"], [63, 2, 1, "", "to_bool_array"], [63, 2, 1, "", "to_set"]], "pypath.core.annot.Mcam": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "add_complexes_by_inference"], [64, 2, 1, "", "all_complexes"], [64, 2, 1, "", "all_entities"], [64, 2, 1, "", "all_mirnas"], [64, 2, 1, "", "all_proteins"], [64, 2, 1, "", "all_refs"], [64, 2, 1, "", "annotate_complex"], [64, 2, 1, "", "browse"], [64, 2, 1, "", "complex_inference"], [64, 2, 1, "", "coverage"], [64, 2, 1, "", "curation_effort"], [64, 2, 1, "", "get_names"], [64, 2, 1, "", "get_reference_set"], [64, 2, 1, "", "get_subset"], [64, 2, 1, "", "get_subset_bool_array"], [64, 2, 1, "", "get_values"], [64, 2, 1, "", "labels"], [64, 2, 1, "", "load"], [64, 2, 1, "", "load_data"], [64, 2, 1, "", "load_proteins"], [64, 2, 1, "", "make_df"], [64, 2, 1, "", "numof_entities"], [64, 2, 1, "", "numof_records"], [64, 2, 1, "", "numof_references"], [64, 2, 1, "", "process"], [64, 2, 1, "", "reload"], [64, 2, 1, "", "select"], [64, 2, 1, "", "set_method"], [64, 2, 1, "", "set_reference_set"], [64, 2, 1, "", "show"], [64, 2, 1, "", "subset_intersection"], [64, 2, 1, "", "to_array"], [64, 2, 1, "", "to_bool_array"], [64, 2, 1, "", "to_set"]], "pypath.core.annot.Membranome": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "add_complexes_by_inference"], [65, 2, 1, "", "all_complexes"], [65, 2, 1, "", "all_entities"], [65, 2, 1, "", "all_mirnas"], [65, 2, 1, "", "all_proteins"], [65, 2, 1, "", "all_refs"], [65, 2, 1, "", "annotate_complex"], [65, 2, 1, "", "browse"], [65, 2, 1, "", "complex_inference"], [65, 2, 1, "", "coverage"], [65, 2, 1, "", "curation_effort"], [65, 2, 1, "", "get_names"], [65, 2, 1, "", "get_reference_set"], [65, 2, 1, "", "get_subset"], [65, 2, 1, "", "get_subset_bool_array"], [65, 2, 1, "", "get_values"], [65, 2, 1, "", "labels"], [65, 2, 1, "", "load"], [65, 2, 1, "", "load_data"], [65, 2, 1, "", "load_proteins"], [65, 2, 1, "", "make_df"], [65, 2, 1, "", "numof_entities"], [65, 2, 1, "", "numof_records"], [65, 2, 1, "", "numof_references"], [65, 2, 1, "", "process"], [65, 2, 1, "", "reload"], [65, 2, 1, "", "select"], [65, 2, 1, "", "set_method"], [65, 2, 1, "", "set_reference_set"], [65, 2, 1, "", "show"], [65, 2, 1, "", "subset_intersection"], [65, 2, 1, "", "to_array"], [65, 2, 1, "", "to_bool_array"], [65, 2, 1, "", "to_set"]], "pypath.core.annot.Msigdb": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "add_complexes_by_inference"], [66, 2, 1, "", "all_complexes"], [66, 2, 1, "", "all_entities"], [66, 2, 1, "", "all_mirnas"], [66, 2, 1, "", "all_proteins"], [66, 2, 1, "", "all_refs"], [66, 2, 1, "", "annotate_complex"], [66, 2, 1, "", "browse"], [66, 2, 1, "", "complex_inference"], [66, 2, 1, "", "coverage"], [66, 2, 1, "", "curation_effort"], [66, 2, 1, "", "get_names"], [66, 2, 1, "", "get_reference_set"], [66, 2, 1, "", "get_subset"], [66, 2, 1, "", "get_subset_bool_array"], [66, 2, 1, "", "get_values"], [66, 2, 1, "", "labels"], [66, 2, 1, "", "load"], [66, 2, 1, "", "load_data"], [66, 2, 1, "", "load_proteins"], [66, 2, 1, "", "make_df"], [66, 2, 1, "", "numof_entities"], [66, 2, 1, "", "numof_records"], [66, 2, 1, "", "numof_references"], [66, 2, 1, "", "process"], [66, 2, 1, "", "reload"], [66, 2, 1, "", "select"], [66, 2, 1, "", "set_method"], [66, 2, 1, "", "set_reference_set"], [66, 2, 1, "", "show"], [66, 2, 1, "", "subset_intersection"], [66, 2, 1, "", "to_array"], [66, 2, 1, "", "to_bool_array"], [66, 2, 1, "", "to_set"]], "pypath.core.annot.NetpathPathways": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "add_complexes_by_inference"], [67, 2, 1, "", "all_complexes"], [67, 2, 1, "", "all_entities"], [67, 2, 1, "", "all_mirnas"], [67, 2, 1, "", "all_proteins"], [67, 2, 1, "", "all_refs"], [67, 2, 1, "", "annotate_complex"], [67, 2, 1, "", "browse"], [67, 2, 1, "", "complex_inference"], [67, 2, 1, "", "coverage"], [67, 2, 1, "", "curation_effort"], [67, 2, 1, "", "get_names"], [67, 2, 1, "", "get_reference_set"], [67, 2, 1, "", "get_subset"], [67, 2, 1, "", "get_subset_bool_array"], [67, 2, 1, "", "get_values"], [67, 2, 1, "", "labels"], [67, 2, 1, "", "load"], [67, 2, 1, "", "load_data"], [67, 2, 1, "", "load_proteins"], [67, 2, 1, "", "make_df"], [67, 2, 1, "", "numof_entities"], [67, 2, 1, "", "numof_records"], [67, 2, 1, "", "numof_references"], [67, 2, 1, "", "process"], [67, 2, 1, "", "reload"], [67, 2, 1, "", "select"], [67, 2, 1, "", "set_method"], [67, 2, 1, "", "set_reference_set"], [67, 2, 1, "", "show"], [67, 2, 1, "", "subset_intersection"], [67, 2, 1, "", "to_array"], [67, 2, 1, "", "to_bool_array"], [67, 2, 1, "", "to_set"]], "pypath.core.annot.Opm": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "add_complexes_by_inference"], [68, 2, 1, "", "all_complexes"], [68, 2, 1, "", "all_entities"], [68, 2, 1, "", "all_mirnas"], [68, 2, 1, "", "all_proteins"], [68, 2, 1, "", "all_refs"], [68, 2, 1, "", "annotate_complex"], [68, 2, 1, "", "browse"], [68, 2, 1, "", "complex_inference"], [68, 2, 1, "", "coverage"], [68, 2, 1, "", "curation_effort"], [68, 2, 1, "", "get_names"], [68, 2, 1, "", "get_reference_set"], [68, 2, 1, "", "get_subset"], [68, 2, 1, "", "get_subset_bool_array"], [68, 2, 1, "", "get_values"], [68, 2, 1, "", "labels"], [68, 2, 1, "", "load"], [68, 2, 1, "", "load_data"], [68, 2, 1, "", "load_proteins"], [68, 2, 1, "", "make_df"], [68, 2, 1, "", "numof_entities"], [68, 2, 1, "", "numof_records"], [68, 2, 1, "", "numof_references"], [68, 2, 1, "", "process"], [68, 2, 1, "", "reload"], [68, 2, 1, "", "select"], [68, 2, 1, "", "set_method"], [68, 2, 1, "", "set_reference_set"], [68, 2, 1, "", "show"], [68, 2, 1, "", "subset_intersection"], [68, 2, 1, "", "to_array"], [68, 2, 1, "", "to_bool_array"], [68, 2, 1, "", "to_set"]], "pypath.core.annot.Panglaodb": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "add_complexes_by_inference"], [69, 2, 1, "", "all_complexes"], [69, 2, 1, "", "all_entities"], [69, 2, 1, "", "all_mirnas"], [69, 2, 1, "", "all_proteins"], [69, 2, 1, "", "all_refs"], [69, 2, 1, "", "annotate_complex"], [69, 2, 1, "", "browse"], [69, 2, 1, "", "complex_inference"], [69, 2, 1, "", "coverage"], [69, 2, 1, "", "curation_effort"], [69, 2, 1, "", "get_names"], [69, 2, 1, "", "get_reference_set"], [69, 2, 1, "", "get_subset"], [69, 2, 1, "", "get_subset_bool_array"], [69, 2, 1, "", "get_values"], [69, 2, 1, "", "labels"], [69, 2, 1, "", "load"], [69, 2, 1, "", "load_data"], [69, 2, 1, "", "load_proteins"], [69, 2, 1, "", "make_df"], [69, 2, 1, "", "numof_entities"], [69, 2, 1, "", "numof_records"], [69, 2, 1, "", "numof_references"], [69, 2, 1, "", "process"], [69, 2, 1, "", "reload"], [69, 2, 1, "", "select"], [69, 2, 1, "", "set_method"], [69, 2, 1, "", "set_reference_set"], [69, 2, 1, "", "show"], [69, 2, 1, "", "subset_intersection"], [69, 2, 1, "", "to_array"], [69, 2, 1, "", "to_bool_array"], [69, 2, 1, "", "to_set"]], "pypath.core.annot.Phobius": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "add_complexes_by_inference"], [70, 2, 1, "", "all_complexes"], [70, 2, 1, "", "all_entities"], [70, 2, 1, "", "all_mirnas"], [70, 2, 1, "", "all_proteins"], [70, 2, 1, "", "all_refs"], [70, 2, 1, "", "annotate_complex"], [70, 2, 1, "", "browse"], [70, 2, 1, "", "complex_inference"], [70, 2, 1, "", "coverage"], [70, 2, 1, "", "curation_effort"], [70, 2, 1, "", "get_names"], [70, 2, 1, "", "get_reference_set"], [70, 2, 1, "", "get_subset"], [70, 2, 1, "", "get_subset_bool_array"], [70, 2, 1, "", "get_values"], [70, 2, 1, "", "labels"], [70, 2, 1, "", "load"], [70, 2, 1, "", "load_data"], [70, 2, 1, "", "load_proteins"], [70, 2, 1, "", "make_df"], [70, 2, 1, "", "numof_entities"], [70, 2, 1, "", "numof_records"], [70, 2, 1, "", "numof_references"], [70, 2, 1, "", "process"], [70, 2, 1, "", "reload"], [70, 2, 1, "", "select"], [70, 2, 1, "", "set_method"], [70, 2, 1, "", "set_reference_set"], [70, 2, 1, "", "show"], [70, 2, 1, "", "subset_intersection"], [70, 2, 1, "", "to_array"], [70, 2, 1, "", "to_bool_array"], [70, 2, 1, "", "to_set"]], "pypath.core.annot.Phosphatome": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "add_complexes_by_inference"], [71, 2, 1, "", "all_complexes"], [71, 2, 1, "", "all_entities"], [71, 2, 1, "", "all_mirnas"], [71, 2, 1, "", "all_proteins"], [71, 2, 1, "", "all_refs"], [71, 2, 1, "", "annotate_complex"], [71, 2, 1, "", "browse"], [71, 2, 1, "", "complex_inference"], [71, 2, 1, "", "coverage"], [71, 2, 1, "", "curation_effort"], [71, 2, 1, "", "get_names"], [71, 2, 1, "", "get_reference_set"], [71, 2, 1, "", "get_subset"], [71, 2, 1, "", "get_subset_bool_array"], [71, 2, 1, "", "get_values"], [71, 2, 1, "", "labels"], [71, 2, 1, "", "load"], [71, 2, 1, "", "load_data"], [71, 2, 1, "", "load_proteins"], [71, 2, 1, "", "make_df"], [71, 2, 1, "", "numof_entities"], [71, 2, 1, "", "numof_records"], [71, 2, 1, "", "numof_references"], [71, 2, 1, "", "process"], [71, 2, 1, "", "reload"], [71, 2, 1, "", "select"], [71, 2, 1, "", "set_method"], [71, 2, 1, "", "set_reference_set"], [71, 2, 1, "", "show"], [71, 2, 1, "", "subset_intersection"], [71, 2, 1, "", "to_array"], [71, 2, 1, "", "to_bool_array"], [71, 2, 1, "", "to_set"]], "pypath.core.annot.Progeny": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "add_complexes_by_inference"], [72, 2, 1, "", "all_complexes"], [72, 2, 1, "", "all_entities"], [72, 2, 1, "", "all_mirnas"], [72, 2, 1, "", "all_proteins"], [72, 2, 1, "", "all_refs"], [72, 2, 1, "", "annotate_complex"], [72, 2, 1, "", "browse"], [72, 2, 1, "", "complex_inference"], [72, 2, 1, "", "coverage"], [72, 2, 1, "", "curation_effort"], [72, 2, 1, "", "get_names"], [72, 2, 1, "", "get_reference_set"], [72, 2, 1, "", "get_subset"], [72, 2, 1, "", "get_subset_bool_array"], [72, 2, 1, "", "get_values"], [72, 2, 1, "", "labels"], [72, 2, 1, "", "load"], [72, 2, 1, "", "load_data"], [72, 2, 1, "", "load_proteins"], [72, 2, 1, "", "make_df"], [72, 2, 1, "", "numof_entities"], [72, 2, 1, "", "numof_records"], [72, 2, 1, "", "numof_references"], [72, 2, 1, "", "process"], [72, 2, 1, "", "reload"], [72, 2, 1, "", "select"], [72, 2, 1, "", "set_method"], [72, 2, 1, "", "set_reference_set"], [72, 2, 1, "", "show"], [72, 2, 1, "", "subset_intersection"], [72, 2, 1, "", "to_array"], [72, 2, 1, "", "to_bool_array"], [72, 2, 1, "", "to_set"]], "pypath.core.annot.Ramilowski2015": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "add_complexes_by_inference"], [73, 2, 1, "", "all_complexes"], [73, 2, 1, "", "all_entities"], [73, 2, 1, "", "all_mirnas"], [73, 2, 1, "", "all_proteins"], [73, 2, 1, "", "all_refs"], [73, 2, 1, "", "annotate_complex"], [73, 2, 1, "", "browse"], [73, 2, 1, "", "complex_inference"], [73, 2, 1, "", "coverage"], [73, 2, 1, "", "curation_effort"], [73, 2, 1, "", "get_names"], [73, 2, 1, "", "get_reference_set"], [73, 2, 1, "", "get_subset"], [73, 2, 1, "", "get_subset_bool_array"], [73, 2, 1, "", "get_values"], [73, 2, 1, "", "labels"], [73, 2, 1, "", "load"], [73, 2, 1, "", "load_data"], [73, 2, 1, "", "load_proteins"], [73, 2, 1, "", "make_df"], [73, 2, 1, "", "numof_entities"], [73, 2, 1, "", "numof_records"], [73, 2, 1, "", "numof_references"], [73, 2, 1, "", "process"], [73, 2, 1, "", "reload"], [73, 2, 1, "", "select"], [73, 2, 1, "", "set_method"], [73, 2, 1, "", "set_reference_set"], [73, 2, 1, "", "show"], [73, 2, 1, "", "subset_intersection"], [73, 2, 1, "", "to_array"], [73, 2, 1, "", "to_bool_array"], [73, 2, 1, "", "to_set"]], "pypath.core.annot.Ramilowski2015Location": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "add_complexes_by_inference"], [74, 2, 1, "", "all_complexes"], [74, 2, 1, "", "all_entities"], [74, 2, 1, "", "all_mirnas"], [74, 2, 1, "", "all_proteins"], [74, 2, 1, "", "all_refs"], [74, 2, 1, "", "annotate_complex"], [74, 2, 1, "", "browse"], [74, 2, 1, "", "complex_inference"], [74, 2, 1, "", "coverage"], [74, 2, 1, "", "curation_effort"], [74, 2, 1, "", "get_names"], [74, 2, 1, "", "get_reference_set"], [74, 2, 1, "", "get_subset"], [74, 2, 1, "", "get_subset_bool_array"], [74, 2, 1, "", "get_values"], [74, 2, 1, "", "labels"], [74, 2, 1, "", "load"], [74, 2, 1, "", "load_data"], [74, 2, 1, "", "load_proteins"], [74, 2, 1, "", "make_df"], [74, 2, 1, "", "numof_entities"], [74, 2, 1, "", "numof_records"], [74, 2, 1, "", "numof_references"], [74, 2, 1, "", "process"], [74, 2, 1, "", "reload"], [74, 2, 1, "", "select"], [74, 2, 1, "", "set_method"], [74, 2, 1, "", "set_reference_set"], [74, 2, 1, "", "show"], [74, 2, 1, "", "subset_intersection"], [74, 2, 1, "", "to_array"], [74, 2, 1, "", "to_bool_array"], [74, 2, 1, "", "to_set"]], "pypath.core.annot.Scconnect": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "add_complexes_by_inference"], [75, 2, 1, "", "all_complexes"], [75, 2, 1, "", "all_entities"], [75, 2, 1, "", "all_mirnas"], [75, 2, 1, "", "all_proteins"], [75, 2, 1, "", "all_refs"], [75, 2, 1, "", "annotate_complex"], [75, 2, 1, "", "browse"], [75, 2, 1, "", "complex_inference"], [75, 2, 1, "", "coverage"], [75, 2, 1, "", "curation_effort"], [75, 2, 1, "", "get_names"], [75, 2, 1, "", "get_reference_set"], [75, 2, 1, "", "get_subset"], [75, 2, 1, "", "get_subset_bool_array"], [75, 2, 1, "", "get_values"], [75, 2, 1, "", "labels"], [75, 2, 1, "", "load"], [75, 2, 1, "", "load_data"], [75, 2, 1, "", "load_proteins"], [75, 2, 1, "", "make_df"], [75, 2, 1, "", "numof_entities"], [75, 2, 1, "", "numof_records"], [75, 2, 1, "", "numof_references"], [75, 2, 1, "", "process"], [75, 2, 1, "", "reload"], [75, 2, 1, "", "select"], [75, 2, 1, "", "set_method"], [75, 2, 1, "", "set_reference_set"], [75, 2, 1, "", "show"], [75, 2, 1, "", "subset_intersection"], [75, 2, 1, "", "to_array"], [75, 2, 1, "", "to_bool_array"], [75, 2, 1, "", "to_set"]], "pypath.core.annot.ScconnectComplex": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "add_complexes_by_inference"], [76, 2, 1, "", "all_complexes"], [76, 2, 1, "", "all_entities"], [76, 2, 1, "", "all_mirnas"], [76, 2, 1, "", "all_proteins"], [76, 2, 1, "", "all_refs"], [76, 2, 1, "", "annotate_complex"], [76, 2, 1, "", "browse"], [76, 2, 1, "", "complex_inference"], [76, 2, 1, "", "coverage"], [76, 2, 1, "", "curation_effort"], [76, 2, 1, "", "get_names"], [76, 2, 1, "", "get_reference_set"], [76, 2, 1, "", "get_subset"], [76, 2, 1, "", "get_subset_bool_array"], [76, 2, 1, "", "get_values"], [76, 2, 1, "", "labels"], [76, 2, 1, "", "load"], [76, 2, 1, "", "load_data"], [76, 2, 1, "", "load_proteins"], [76, 2, 1, "", "make_df"], [76, 2, 1, "", "numof_entities"], [76, 2, 1, "", "numof_records"], [76, 2, 1, "", "numof_references"], [76, 2, 1, "", "process"], [76, 2, 1, "", "reload"], [76, 2, 1, "", "select"], [76, 2, 1, "", "set_method"], [76, 2, 1, "", "set_reference_set"], [76, 2, 1, "", "show"], [76, 2, 1, "", "subset_intersection"], [76, 2, 1, "", "to_array"], [76, 2, 1, "", "to_bool_array"], [76, 2, 1, "", "to_set"]], "pypath.core.annot.SignalinkFunctions": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "add_complexes_by_inference"], [77, 2, 1, "", "all_complexes"], [77, 2, 1, "", "all_entities"], [77, 2, 1, "", "all_mirnas"], [77, 2, 1, "", "all_proteins"], [77, 2, 1, "", "all_refs"], [77, 2, 1, "", "annotate_complex"], [77, 2, 1, "", "browse"], [77, 2, 1, "", "complex_inference"], [77, 2, 1, "", "coverage"], [77, 2, 1, "", "curation_effort"], [77, 2, 1, "", "get_names"], [77, 2, 1, "", "get_reference_set"], [77, 2, 1, "", "get_subset"], [77, 2, 1, "", "get_subset_bool_array"], [77, 2, 1, "", "get_values"], [77, 2, 1, "", "labels"], [77, 2, 1, "", "load"], [77, 2, 1, "", "load_data"], [77, 2, 1, "", "load_proteins"], [77, 2, 1, "", "make_df"], [77, 2, 1, "", "numof_entities"], [77, 2, 1, "", "numof_records"], [77, 2, 1, "", "numof_references"], [77, 2, 1, "", "process"], [77, 2, 1, "", "reload"], [77, 2, 1, "", "select"], [77, 2, 1, "", "set_method"], [77, 2, 1, "", "set_reference_set"], [77, 2, 1, "", "show"], [77, 2, 1, "", "subset_intersection"], [77, 2, 1, "", "to_array"], [77, 2, 1, "", "to_bool_array"], [77, 2, 1, "", "to_set"]], "pypath.core.annot.SignalinkPathways": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "add_complexes_by_inference"], [78, 2, 1, "", "all_complexes"], [78, 2, 1, "", "all_entities"], [78, 2, 1, "", "all_mirnas"], [78, 2, 1, "", "all_proteins"], [78, 2, 1, "", "all_refs"], [78, 2, 1, "", "annotate_complex"], [78, 2, 1, "", "browse"], [78, 2, 1, "", "complex_inference"], [78, 2, 1, "", "coverage"], [78, 2, 1, "", "curation_effort"], [78, 2, 1, "", "get_names"], [78, 2, 1, "", "get_reference_set"], [78, 2, 1, "", "get_subset"], [78, 2, 1, "", "get_subset_bool_array"], [78, 2, 1, "", "get_values"], [78, 2, 1, "", "labels"], [78, 2, 1, "", "load"], [78, 2, 1, "", "load_data"], [78, 2, 1, "", "load_proteins"], [78, 2, 1, "", "make_df"], [78, 2, 1, "", "numof_entities"], [78, 2, 1, "", "numof_records"], [78, 2, 1, "", "numof_references"], [78, 2, 1, "", "process"], [78, 2, 1, "", "reload"], [78, 2, 1, "", "select"], [78, 2, 1, "", "set_method"], [78, 2, 1, "", "set_reference_set"], [78, 2, 1, "", "show"], [78, 2, 1, "", "subset_intersection"], [78, 2, 1, "", "to_array"], [78, 2, 1, "", "to_bool_array"], [78, 2, 1, "", "to_set"]], "pypath.core.annot.SignorPathways": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "add_complexes_by_inference"], [79, 2, 1, "", "all_complexes"], [79, 2, 1, "", "all_entities"], [79, 2, 1, "", "all_mirnas"], [79, 2, 1, "", "all_proteins"], [79, 2, 1, "", "all_refs"], [79, 2, 1, "", "annotate_complex"], [79, 2, 1, "", "browse"], [79, 2, 1, "", "complex_inference"], [79, 2, 1, "", "coverage"], [79, 2, 1, "", "curation_effort"], [79, 2, 1, "", "get_names"], [79, 2, 1, "", "get_reference_set"], [79, 2, 1, "", "get_subset"], [79, 2, 1, "", "get_subset_bool_array"], [79, 2, 1, "", "get_values"], [79, 2, 1, "", "labels"], [79, 2, 1, "", "load"], [79, 2, 1, "", "load_data"], [79, 2, 1, "", "load_proteins"], [79, 2, 1, "", "make_df"], [79, 2, 1, "", "numof_entities"], [79, 2, 1, "", "numof_records"], [79, 2, 1, "", "numof_references"], [79, 2, 1, "", "process"], [79, 2, 1, "", "reload"], [79, 2, 1, "", "select"], [79, 2, 1, "", "set_method"], [79, 2, 1, "", "set_reference_set"], [79, 2, 1, "", "show"], [79, 2, 1, "", "subset_intersection"], [79, 2, 1, "", "to_array"], [79, 2, 1, "", "to_bool_array"], [79, 2, 1, "", "to_set"]], "pypath.core.annot.Surfaceome": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "add_complexes_by_inference"], [80, 2, 1, "", "all_complexes"], [80, 2, 1, "", "all_entities"], [80, 2, 1, "", "all_mirnas"], [80, 2, 1, "", "all_proteins"], [80, 2, 1, "", "all_refs"], [80, 2, 1, "", "annotate_complex"], [80, 2, 1, "", "browse"], [80, 2, 1, "", "complex_inference"], [80, 2, 1, "", "coverage"], [80, 2, 1, "", "curation_effort"], [80, 2, 1, "", "get_names"], [80, 2, 1, "", "get_reference_set"], [80, 2, 1, "", "get_subset"], [80, 2, 1, "", "get_subset_bool_array"], [80, 2, 1, "", "get_values"], [80, 2, 1, "", "labels"], [80, 2, 1, "", "load"], [80, 2, 1, "", "load_data"], [80, 2, 1, "", "load_proteins"], [80, 2, 1, "", "make_df"], [80, 2, 1, "", "numof_entities"], [80, 2, 1, "", "numof_records"], [80, 2, 1, "", "numof_references"], [80, 2, 1, "", "process"], [80, 2, 1, "", "reload"], [80, 2, 1, "", "select"], [80, 2, 1, "", "set_method"], [80, 2, 1, "", "set_reference_set"], [80, 2, 1, "", "show"], [80, 2, 1, "", "subset_intersection"], [80, 2, 1, "", "to_array"], [80, 2, 1, "", "to_bool_array"], [80, 2, 1, "", "to_set"]], "pypath.core.annot.Talklr": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "add_complexes_by_inference"], [81, 2, 1, "", "all_complexes"], [81, 2, 1, "", "all_entities"], [81, 2, 1, "", "all_mirnas"], [81, 2, 1, "", "all_proteins"], [81, 2, 1, "", "all_refs"], [81, 2, 1, "", "annotate_complex"], [81, 2, 1, "", "browse"], [81, 2, 1, "", "complex_inference"], [81, 2, 1, "", "coverage"], [81, 2, 1, "", "curation_effort"], [81, 2, 1, "", "get_names"], [81, 2, 1, "", "get_reference_set"], [81, 2, 1, "", "get_subset"], [81, 2, 1, "", "get_subset_bool_array"], [81, 2, 1, "", "get_values"], [81, 2, 1, "", "labels"], [81, 2, 1, "", "load"], [81, 2, 1, "", "load_data"], [81, 2, 1, "", "load_proteins"], [81, 2, 1, "", "make_df"], [81, 2, 1, "", "numof_entities"], [81, 2, 1, "", "numof_records"], [81, 2, 1, "", "numof_references"], [81, 2, 1, "", "process"], [81, 2, 1, "", "reload"], [81, 2, 1, "", "select"], [81, 2, 1, "", "set_method"], [81, 2, 1, "", "set_reference_set"], [81, 2, 1, "", "show"], [81, 2, 1, "", "subset_intersection"], [81, 2, 1, "", "to_array"], [81, 2, 1, "", "to_bool_array"], [81, 2, 1, "", "to_set"]], "pypath.core.annot.Tcdb": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "add_complexes_by_inference"], [82, 2, 1, "", "all_complexes"], [82, 2, 1, "", "all_entities"], [82, 2, 1, "", "all_mirnas"], [82, 2, 1, "", "all_proteins"], [82, 2, 1, "", "all_refs"], [82, 2, 1, "", "annotate_complex"], [82, 2, 1, "", "browse"], [82, 2, 1, "", "complex_inference"], [82, 2, 1, "", "coverage"], [82, 2, 1, "", "curation_effort"], [82, 2, 1, "", "get_names"], [82, 2, 1, "", "get_reference_set"], [82, 2, 1, "", "get_subset"], [82, 2, 1, "", "get_subset_bool_array"], [82, 2, 1, "", "get_values"], [82, 2, 1, "", "labels"], [82, 2, 1, "", "load"], [82, 2, 1, "", "load_data"], [82, 2, 1, "", "load_proteins"], [82, 2, 1, "", "make_df"], [82, 2, 1, "", "numof_entities"], [82, 2, 1, "", "numof_records"], [82, 2, 1, "", "numof_references"], [82, 2, 1, "", "process"], [82, 2, 1, "", "reload"], [82, 2, 1, "", "select"], [82, 2, 1, "", "set_method"], [82, 2, 1, "", "set_reference_set"], [82, 2, 1, "", "show"], [82, 2, 1, "", "subset_intersection"], [82, 2, 1, "", "to_array"], [82, 2, 1, "", "to_bool_array"], [82, 2, 1, "", "to_set"]], "pypath.core.annot.Tfcensus": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "add_complexes_by_inference"], [83, 2, 1, "", "all_complexes"], [83, 2, 1, "", "all_entities"], [83, 2, 1, "", "all_mirnas"], [83, 2, 1, "", "all_proteins"], [83, 2, 1, "", "all_refs"], [83, 2, 1, "", "annotate_complex"], [83, 2, 1, "", "browse"], [83, 2, 1, "", "complex_inference"], [83, 2, 1, "", "coverage"], [83, 2, 1, "", "curation_effort"], [83, 2, 1, "", "get_names"], [83, 2, 1, "", "get_reference_set"], [83, 2, 1, "", "get_subset"], [83, 2, 1, "", "get_subset_bool_array"], [83, 2, 1, "", "get_values"], [83, 2, 1, "", "labels"], [83, 2, 1, "", "load"], [83, 2, 1, "", "load_data"], [83, 2, 1, "", "load_proteins"], [83, 2, 1, "", "make_df"], [83, 2, 1, "", "numof_entities"], [83, 2, 1, "", "numof_records"], [83, 2, 1, "", "numof_references"], [83, 2, 1, "", "process"], [83, 2, 1, "", "reload"], [83, 2, 1, "", "select"], [83, 2, 1, "", "set_method"], [83, 2, 1, "", "set_reference_set"], [83, 2, 1, "", "show"], [83, 2, 1, "", "subset_intersection"], [83, 2, 1, "", "to_array"], [83, 2, 1, "", "to_bool_array"], [83, 2, 1, "", "to_set"]], "pypath.core.annot.Topdb": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "add_complexes_by_inference"], [84, 2, 1, "", "all_complexes"], [84, 2, 1, "", "all_entities"], [84, 2, 1, "", "all_mirnas"], [84, 2, 1, "", "all_proteins"], [84, 2, 1, "", "all_refs"], [84, 2, 1, "", "annotate_complex"], [84, 2, 1, "", "browse"], [84, 2, 1, "", "complex_inference"], [84, 2, 1, "", "coverage"], [84, 2, 1, "", "curation_effort"], [84, 2, 1, "", "get_names"], [84, 2, 1, "", "get_reference_set"], [84, 2, 1, "", "get_subset"], [84, 2, 1, "", "get_subset_bool_array"], [84, 2, 1, "", "get_values"], [84, 2, 1, "", "labels"], [84, 2, 1, "", "load"], [84, 2, 1, "", "load_data"], [84, 2, 1, "", "load_proteins"], [84, 2, 1, "", "make_df"], [84, 2, 1, "", "numof_entities"], [84, 2, 1, "", "numof_records"], [84, 2, 1, "", "numof_references"], [84, 2, 1, "", "process"], [84, 2, 1, "", "reload"], [84, 2, 1, "", "select"], [84, 2, 1, "", "set_method"], [84, 2, 1, "", "set_reference_set"], [84, 2, 1, "", "show"], [84, 2, 1, "", "subset_intersection"], [84, 2, 1, "", "to_array"], [84, 2, 1, "", "to_bool_array"], [84, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotFamilies": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "add_complexes_by_inference"], [85, 2, 1, "", "all_complexes"], [85, 2, 1, "", "all_entities"], [85, 2, 1, "", "all_mirnas"], [85, 2, 1, "", "all_proteins"], [85, 2, 1, "", "all_refs"], [85, 2, 1, "", "annotate_complex"], [85, 2, 1, "", "browse"], [85, 2, 1, "", "complex_inference"], [85, 2, 1, "", "coverage"], [85, 2, 1, "", "curation_effort"], [85, 2, 1, "", "get_names"], [85, 2, 1, "", "get_reference_set"], [85, 2, 1, "", "get_subset"], [85, 2, 1, "", "get_subset_bool_array"], [85, 2, 1, "", "get_values"], [85, 2, 1, "", "labels"], [85, 2, 1, "", "load"], [85, 2, 1, "", "load_data"], [85, 2, 1, "", "load_proteins"], [85, 2, 1, "", "make_df"], [85, 2, 1, "", "numof_entities"], [85, 2, 1, "", "numof_records"], [85, 2, 1, "", "numof_references"], [85, 2, 1, "", "process"], [85, 2, 1, "", "reload"], [85, 2, 1, "", "select"], [85, 2, 1, "", "set_method"], [85, 2, 1, "", "set_reference_set"], [85, 2, 1, "", "show"], [85, 2, 1, "", "subset_intersection"], [85, 2, 1, "", "to_array"], [85, 2, 1, "", "to_bool_array"], [85, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotKeywords": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "add_complexes_by_inference"], [86, 2, 1, "", "all_complexes"], [86, 2, 1, "", "all_entities"], [86, 2, 1, "", "all_mirnas"], [86, 2, 1, "", "all_proteins"], [86, 2, 1, "", "all_refs"], [86, 2, 1, "", "annotate_complex"], [86, 2, 1, "", "browse"], [86, 2, 1, "", "complex_inference"], [86, 2, 1, "", "coverage"], [86, 2, 1, "", "curation_effort"], [86, 2, 1, "", "get_names"], [86, 2, 1, "", "get_reference_set"], [86, 2, 1, "", "get_subset"], [86, 2, 1, "", "get_subset_bool_array"], [86, 2, 1, "", "get_values"], [86, 2, 1, "", "labels"], [86, 2, 1, "", "load"], [86, 2, 1, "", "load_data"], [86, 2, 1, "", "load_proteins"], [86, 2, 1, "", "make_df"], [86, 2, 1, "", "numof_entities"], [86, 2, 1, "", "numof_records"], [86, 2, 1, "", "numof_references"], [86, 2, 1, "", "process"], [86, 2, 1, "", "reload"], [86, 2, 1, "", "select"], [86, 2, 1, "", "set_method"], [86, 2, 1, "", "set_reference_set"], [86, 2, 1, "", "show"], [86, 2, 1, "", "subset_intersection"], [86, 2, 1, "", "to_array"], [86, 2, 1, "", "to_bool_array"], [86, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotLocations": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "add_complexes_by_inference"], [87, 2, 1, "", "all_complexes"], [87, 2, 1, "", "all_entities"], [87, 2, 1, "", "all_mirnas"], [87, 2, 1, "", "all_proteins"], [87, 2, 1, "", "all_refs"], [87, 2, 1, "", "annotate_complex"], [87, 2, 1, "", "browse"], [87, 2, 1, "", "complex_inference"], [87, 2, 1, "", "coverage"], [87, 2, 1, "", "curation_effort"], [87, 2, 1, "", "get_names"], [87, 2, 1, "", "get_reference_set"], [87, 2, 1, "", "get_subset"], [87, 2, 1, "", "get_subset_bool_array"], [87, 2, 1, "", "get_values"], [87, 2, 1, "", "labels"], [87, 2, 1, "", "load"], [87, 2, 1, "", "load_data"], [87, 2, 1, "", "load_proteins"], [87, 2, 1, "", "make_df"], [87, 2, 1, "", "numof_entities"], [87, 2, 1, "", "numof_records"], [87, 2, 1, "", "numof_references"], [87, 2, 1, "", "process"], [87, 2, 1, "", "reload"], [87, 2, 1, "", "select"], [87, 2, 1, "", "set_method"], [87, 2, 1, "", "set_reference_set"], [87, 2, 1, "", "show"], [87, 2, 1, "", "subset_intersection"], [87, 2, 1, "", "to_array"], [87, 2, 1, "", "to_bool_array"], [87, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotTissues": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "add_complexes_by_inference"], [88, 2, 1, "", "all_complexes"], [88, 2, 1, "", "all_entities"], [88, 2, 1, "", "all_mirnas"], [88, 2, 1, "", "all_proteins"], [88, 2, 1, "", "all_refs"], [88, 2, 1, "", "annotate_complex"], [88, 2, 1, "", "browse"], [88, 2, 1, "", "complex_inference"], [88, 2, 1, "", "coverage"], [88, 2, 1, "", "curation_effort"], [88, 2, 1, "", "get_names"], [88, 2, 1, "", "get_reference_set"], [88, 2, 1, "", "get_subset"], [88, 2, 1, "", "get_subset_bool_array"], [88, 2, 1, "", "get_values"], [88, 2, 1, "", "labels"], [88, 2, 1, "", "load"], [88, 2, 1, "", "load_data"], [88, 2, 1, "", "load_proteins"], [88, 2, 1, "", "make_df"], [88, 2, 1, "", "numof_entities"], [88, 2, 1, "", "numof_records"], [88, 2, 1, "", "numof_references"], [88, 2, 1, "", "process"], [88, 2, 1, "", "reload"], [88, 2, 1, "", "select"], [88, 2, 1, "", "set_method"], [88, 2, 1, "", "set_reference_set"], [88, 2, 1, "", "show"], [88, 2, 1, "", "subset_intersection"], [88, 2, 1, "", "to_array"], [88, 2, 1, "", "to_bool_array"], [88, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotTopologies": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "add_complexes_by_inference"], [89, 2, 1, "", "all_complexes"], [89, 2, 1, "", "all_entities"], [89, 2, 1, "", "all_mirnas"], [89, 2, 1, "", "all_proteins"], [89, 2, 1, "", "all_refs"], [89, 2, 1, "", "annotate_complex"], [89, 2, 1, "", "browse"], [89, 2, 1, "", "complex_inference"], [89, 2, 1, "", "coverage"], [89, 2, 1, "", "curation_effort"], [89, 2, 1, "", "get_names"], [89, 2, 1, "", "get_reference_set"], [89, 2, 1, "", "get_subset"], [89, 2, 1, "", "get_subset_bool_array"], [89, 2, 1, "", "get_values"], [89, 2, 1, "", "labels"], [89, 2, 1, "", "load"], [89, 2, 1, "", "load_data"], [89, 2, 1, "", "load_proteins"], [89, 2, 1, "", "make_df"], [89, 2, 1, "", "numof_entities"], [89, 2, 1, "", "numof_records"], [89, 2, 1, "", "numof_references"], [89, 2, 1, "", "process"], [89, 2, 1, "", "reload"], [89, 2, 1, "", "select"], [89, 2, 1, "", "set_method"], [89, 2, 1, "", "set_reference_set"], [89, 2, 1, "", "show"], [89, 2, 1, "", "subset_intersection"], [89, 2, 1, "", "to_array"], [89, 2, 1, "", "to_bool_array"], [89, 2, 1, "", "to_set"]], "pypath.core.annot.Vesiclepedia": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "add_complexes_by_inference"], [90, 2, 1, "", "all_complexes"], [90, 2, 1, "", "all_entities"], [90, 2, 1, "", "all_mirnas"], [90, 2, 1, "", "all_proteins"], [90, 2, 1, "", "all_refs"], [90, 2, 1, "", "annotate_complex"], [90, 2, 1, "", "browse"], [90, 2, 1, "", "complex_inference"], [90, 2, 1, "", "coverage"], [90, 2, 1, "", "curation_effort"], [90, 2, 1, "", "get_names"], [90, 2, 1, "", "get_reference_set"], [90, 2, 1, "", "get_subset"], [90, 2, 1, "", "get_subset_bool_array"], [90, 2, 1, "", "get_values"], [90, 2, 1, "", "labels"], [90, 2, 1, "", "load"], [90, 2, 1, "", "load_data"], [90, 2, 1, "", "load_proteins"], [90, 2, 1, "", "make_df"], [90, 2, 1, "", "numof_entities"], [90, 2, 1, "", "numof_records"], [90, 2, 1, "", "numof_references"], [90, 2, 1, "", "process"], [90, 2, 1, "", "reload"], [90, 2, 1, "", "select"], [90, 2, 1, "", "set_method"], [90, 2, 1, "", "set_reference_set"], [90, 2, 1, "", "show"], [90, 2, 1, "", "subset_intersection"], [90, 2, 1, "", "to_array"], [90, 2, 1, "", "to_bool_array"], [90, 2, 1, "", "to_set"]], "pypath.core.annot.Wang": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "add_complexes_by_inference"], [91, 2, 1, "", "all_complexes"], [91, 2, 1, "", "all_entities"], [91, 2, 1, "", "all_mirnas"], [91, 2, 1, "", "all_proteins"], [91, 2, 1, "", "all_refs"], [91, 2, 1, "", "annotate_complex"], [91, 2, 1, "", "browse"], [91, 2, 1, "", "complex_inference"], [91, 2, 1, "", "coverage"], [91, 2, 1, "", "curation_effort"], [91, 2, 1, "", "get_names"], [91, 2, 1, "", "get_reference_set"], [91, 2, 1, "", "get_subset"], [91, 2, 1, "", "get_subset_bool_array"], [91, 2, 1, "", "get_values"], [91, 2, 1, "", "labels"], [91, 2, 1, "", "load"], [91, 2, 1, "", "load_data"], [91, 2, 1, "", "load_proteins"], [91, 2, 1, "", "make_df"], [91, 2, 1, "", "numof_entities"], [91, 2, 1, "", "numof_records"], [91, 2, 1, "", "numof_references"], [91, 2, 1, "", "process"], [91, 2, 1, "", "reload"], [91, 2, 1, "", "select"], [91, 2, 1, "", "set_method"], [91, 2, 1, "", "set_reference_set"], [91, 2, 1, "", "show"], [91, 2, 1, "", "subset_intersection"], [91, 2, 1, "", "to_array"], [91, 2, 1, "", "to_bool_array"], [91, 2, 1, "", "to_set"]], "pypath.core.annot.Zhong2015": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "add_complexes_by_inference"], [92, 2, 1, "", "all_complexes"], [92, 2, 1, "", "all_entities"], [92, 2, 1, "", "all_mirnas"], [92, 2, 1, "", "all_proteins"], [92, 2, 1, "", "all_refs"], [92, 2, 1, "", "annotate_complex"], [92, 2, 1, "", "browse"], [92, 2, 1, "", "complex_inference"], [92, 2, 1, "", "coverage"], [92, 2, 1, "", "curation_effort"], [92, 2, 1, "", "get_names"], [92, 2, 1, "", "get_reference_set"], [92, 2, 1, "", "get_subset"], [92, 2, 1, "", "get_subset_bool_array"], [92, 2, 1, "", "get_values"], [92, 2, 1, "", "labels"], [92, 2, 1, "", "load"], [92, 2, 1, "", "load_data"], [92, 2, 1, "", "load_proteins"], [92, 2, 1, "", "make_df"], [92, 2, 1, "", "numof_entities"], [92, 2, 1, "", "numof_records"], [92, 2, 1, "", "numof_references"], [92, 2, 1, "", "process"], [92, 2, 1, "", "reload"], [92, 2, 1, "", "select"], [92, 2, 1, "", "set_method"], [92, 2, 1, "", "set_reference_set"], [92, 2, 1, "", "show"], [92, 2, 1, "", "subset_intersection"], [92, 2, 1, "", "to_array"], [92, 2, 1, "", "to_bool_array"], [92, 2, 1, "", "to_set"]], "pypath.core.attrs": [[96, 1, 1, "", "AttributeHandler"]], "pypath.core.attrs.AttributeHandler": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "serialize"], [96, 2, 1, "", "update_attrs"]], "pypath.core.common": [[98, 3, 1, "", "filter_network_df"]], "pypath.core.complex": [[100, 1, 1, "", "AbstractComplexResource"], [101, 1, 1, "", "CellPhoneDB"], [102, 1, 1, "", "Cellchatdb"], [103, 1, 1, "", "Cellinker"], [104, 1, 1, "", "Compleat"], [105, 1, 1, "", "ComplexAggregator"], [106, 1, 1, "", "ComplexPortal"], [107, 1, 1, "", "Corum"], [108, 1, 1, "", "GuideToPharmacology"], [109, 1, 1, "", "Havugimana"], [110, 1, 1, "", "Hpmr"], [111, 1, 1, "", "Humap"], [112, 1, 1, "", "Humap2"], [113, 1, 1, "", "Icellnet"], [114, 1, 1, "", "Kegg"], [115, 1, 1, "", "Pdb"], [116, 1, 1, "", "Signor"], [117, 1, 1, "", "Spike"], [118, 3, 1, "", "all_complexes"], [119, 3, 1, "", "get_db"], [120, 3, 1, "", "init_db"]], "pypath.core.complex.AbstractComplexResource": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "load_data"], [100, 2, 1, "", "process"], [100, 2, 1, "", "set_method"]], "pypath.core.complex.CellPhoneDB": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "load_data"], [101, 2, 1, "", "process"], [101, 2, 1, "", "set_method"]], "pypath.core.complex.Cellchatdb": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "load_data"], [102, 2, 1, "", "process"], [102, 2, 1, "", "set_method"]], "pypath.core.complex.Cellinker": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "load_data"], [103, 2, 1, "", "process"], [103, 2, 1, "", "set_method"]], "pypath.core.complex.Compleat": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "load_data"], [104, 2, 1, "", "process"], [104, 2, 1, "", "set_method"]], "pypath.core.complex.ComplexAggregator": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "load_data"], [105, 2, 1, "", "process"], [105, 2, 1, "", "reload"], [105, 2, 1, "", "set_method"]], "pypath.core.complex.ComplexPortal": [[106, 2, 1, "", "__init__"], [106, 2, 1, "", "load_data"], [106, 2, 1, "", "process"], [106, 2, 1, "", "set_method"]], "pypath.core.complex.Corum": [[107, 2, 1, "", "__init__"], [107, 2, 1, "", "load_data"], [107, 2, 1, "", "process"], [107, 2, 1, "", "set_method"]], "pypath.core.complex.GuideToPharmacology": [[108, 2, 1, "", "__init__"], [108, 2, 1, "", "load_data"], [108, 2, 1, "", "process"], [108, 2, 1, "", "set_method"]], "pypath.core.complex.Havugimana": [[109, 2, 1, "", "__init__"], [109, 2, 1, "", "load_data"], [109, 2, 1, "", "process"], [109, 2, 1, "", "set_method"]], "pypath.core.complex.Hpmr": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "load_data"], [110, 2, 1, "", "process"], [110, 2, 1, "", "set_method"]], "pypath.core.complex.Humap": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "load_data"], [111, 2, 1, "", "process"], [111, 2, 1, "", "set_method"]], "pypath.core.complex.Humap2": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "load_data"], [112, 2, 1, "", "process"], [112, 2, 1, "", "set_method"]], "pypath.core.complex.Icellnet": [[113, 2, 1, "", "__init__"], [113, 2, 1, "", "load_data"], [113, 2, 1, "", "process"], [113, 2, 1, "", "set_method"]], "pypath.core.complex.Kegg": [[114, 2, 1, "", "__init__"], [114, 2, 1, "", "load_data"], [114, 2, 1, "", "process"], [114, 2, 1, "", "set_method"]], "pypath.core.complex.Pdb": [[115, 2, 1, "", "__init__"], [115, 2, 1, "", "load_data"], [115, 2, 1, "", "process"], [115, 2, 1, "", "set_method"]], "pypath.core.complex.Signor": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "load_data"], [116, 2, 1, "", "process"], [116, 2, 1, "", "set_method"]], "pypath.core.complex.Spike": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "load_data"], [117, 2, 1, "", "process"], [117, 2, 1, "", "set_method"]], "pypath.core.entity": [[122, 1, 1, "", "Entity"], [123, 1, 1, "", "EntityKey"], [124, 1, 1, "", "EntityList"]], "pypath.core.entity.Entity": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "count_entity_type"], [122, 2, 1, "", "filter_entity_type"], [122, 2, 1, "", "serialize"], [122, 2, 1, "", "update_attrs"]], "pypath.core.entity.EntityKey": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "count"], [123, 4, 1, "", "entity_type"], [123, 4, 1, "", "id_type"], [123, 4, 1, "", "identifier"], [123, 2, 1, "", "index"], [123, 4, 1, "", "taxon"]], "pypath.core.entity.EntityList": [[124, 2, 1, "", "__init__"]], "pypath.core.enz_sub": [[126, 1, 1, "", "EnzymeSubstrateAggregator"], [127, 1, 1, "", "EnzymeSubstrateHomologyProcessor"], [128, 1, 1, "", "EnzymeSubstrateProcessor"], [129, 3, 1, "", "get_db"], [130, 3, 1, "", "init_db"]], "pypath.core.enz_sub.EnzymeSubstrateAggregator": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "assign_to_network"], [126, 2, 1, "", "build_list"], [126, 2, 1, "", "unique"]], "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "asdict"], [127, 2, 1, "", "df"], [127, 2, 1, "", "load_data"], [127, 2, 1, "", "load_homologene"], [127, 2, 1, "", "ptm_orthology"], [127, 2, 1, "", "set_inputargs"], [127, 2, 1, "", "set_method"], [127, 2, 1, "", "translate"], [127, 2, 1, "", "translate_df"], [127, 2, 1, "", "translate_site"]], "pypath.core.enz_sub.EnzymeSubstrateProcessor": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "load_data"], [128, 2, 1, "", "set_inputargs"], [128, 2, 1, "", "set_method"]], "pypath.core.evidence": [[132, 1, 1, "", "Evidence"], [133, 1, 1, "", "Evidences"]], "pypath.core.evidence.Evidence": [[132, 2, 1, "", "__init__"], [132, 2, 1, "", "has_interaction_type"], [132, 2, 1, "", "merge"], [132, 2, 1, "", "reload"], [132, 2, 1, "", "serialize"], [132, 2, 1, "", "update_attrs"]], "pypath.core.evidence.Evidences": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "has_interaction_type"], [133, 2, 1, "", "items"], [133, 2, 1, "", "keys"], [133, 2, 1, "", "reload"], [133, 2, 1, "", "serialize_attrs"], [133, 5, 1, "", "simple_dict"]], "pypath.core.interaction": [[135, 1, 1, "", "Interaction"], [136, 1, 1, "", "InteractionDataFrameRecord"], [137, 1, 1, "", "InteractionKey"]], "pypath.core.interaction.Interaction": [[135, 2, 1, "", "__init__"], [135, 2, 1, "", "add_evidence"], [135, 2, 1, "", "add_sign"], [135, 2, 1, "", "complex_identifiers_by_data_model"], [135, 2, 1, "", "complex_identifiers_by_interaction_type"], [135, 2, 1, "", "complex_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "complex_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complex_identifiers_by_reference"], [135, 2, 1, "", "complex_identifiers_by_resource"], [135, 2, 1, "", "complex_labels_by_data_model"], [135, 2, 1, "", "complex_labels_by_interaction_type"], [135, 2, 1, "", "complex_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "complex_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complex_labels_by_reference"], [135, 2, 1, "", "complex_labels_by_resource"], [135, 2, 1, "", "complexes_by_data_model"], [135, 2, 1, "", "complexes_by_interaction_type"], [135, 2, 1, "", "complexes_by_interaction_type_and_data_model"], [135, 2, 1, "", "complexes_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complexes_by_reference"], [135, 2, 1, "", "complexes_by_resource"], [135, 2, 1, "", "consensus"], [135, 2, 1, "", "consensus_edges"], [135, 2, 1, "", "count_complex_identifiers"], [135, 2, 1, "", "count_complex_labels"], [135, 2, 1, "", "count_complexes"], [135, 4, 1, "", "count_data_models"], [135, 4, 1, "", "count_degrees_directed"], [135, 4, 1, "", "count_degrees_directed_in"], [135, 4, 1, "", "count_degrees_directed_out"], [135, 4, 1, "", "count_degrees_negative"], [135, 4, 1, "", "count_degrees_negative_in"], [135, 4, 1, "", "count_degrees_negative_out"], [135, 4, 1, "", "count_degrees_non_directed"], [135, 4, 1, "", "count_degrees_positive"], [135, 4, 1, "", "count_degrees_positive_in"], [135, 4, 1, "", "count_degrees_positive_out"], [135, 4, 1, "", "count_degrees_signed"], [135, 4, 1, "", "count_degrees_signed_in"], [135, 4, 1, "", "count_degrees_signed_out"], [135, 4, 1, "", "count_degrees_undirected"], [135, 2, 1, "", "count_entities"], [135, 2, 1, "", "count_identifiers"], [135, 4, 1, "", "count_interaction_types"], [135, 2, 1, "", "count_interactions"], [135, 2, 1, "", "count_interactions_0"], [135, 2, 1, "", "count_interactions_directed"], [135, 2, 1, "", "count_interactions_mutual"], [135, 2, 1, "", "count_interactions_negative"], [135, 2, 1, "", "count_interactions_non_directed"], [135, 2, 1, "", "count_interactions_positive"], [135, 2, 1, "", "count_interactions_signed"], [135, 2, 1, "", "count_interactions_undirected"], [135, 2, 1, "", "count_labels"], [135, 2, 1, "", "count_lncrna_identifiers"], [135, 2, 1, "", "count_lncrna_labels"], [135, 2, 1, "", "count_lncrnas"], [135, 2, 1, "", "count_mirna_identifiers"], [135, 2, 1, "", "count_mirna_labels"], [135, 2, 1, "", "count_mirnas"], [135, 2, 1, "", "count_protein_identifiers"], [135, 2, 1, "", "count_protein_labels"], [135, 2, 1, "", "count_proteins"], [135, 4, 1, "", "count_references"], [135, 4, 1, "", "count_resource_names"], [135, 4, 1, "", "count_resource_names_via"], [135, 4, 1, "", "count_resources"], [135, 4, 1, "", "count_resources_via"], [135, 2, 1, "", "count_small_molecule_identifiers"], [135, 2, 1, "", "count_small_molecule_labels"], [135, 2, 1, "", "count_small_molecules"], [135, 4, 1, "", "data_models_by_data_model"], [135, 4, 1, "", "data_models_by_interaction_type"], [135, 4, 1, "", "data_models_by_interaction_type_and_data_model"], [135, 4, 1, "", "data_models_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "data_models_by_reference"], [135, 4, 1, "", "data_models_by_resource"], [135, 4, 1, "", "degrees_directed_by_data_model"], [135, 4, 1, "", "degrees_directed_by_interaction_type"], [135, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_by_reference"], [135, 4, 1, "", "degrees_directed_by_resource"], [135, 4, 1, "", "degrees_directed_in_by_data_model"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_in_by_reference"], [135, 4, 1, "", "degrees_directed_in_by_resource"], [135, 4, 1, "", "degrees_directed_out_by_data_model"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_out_by_reference"], [135, 4, 1, "", "degrees_directed_out_by_resource"], [135, 4, 1, "", "degrees_negative_by_data_model"], [135, 4, 1, "", "degrees_negative_by_interaction_type"], [135, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_by_reference"], [135, 4, 1, "", "degrees_negative_by_resource"], [135, 4, 1, "", "degrees_negative_in_by_data_model"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_in_by_reference"], [135, 4, 1, "", "degrees_negative_in_by_resource"], [135, 4, 1, "", "degrees_negative_out_by_data_model"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_out_by_reference"], [135, 4, 1, "", "degrees_negative_out_by_resource"], [135, 4, 1, "", "degrees_non_directed_by_data_model"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_non_directed_by_reference"], [135, 4, 1, "", "degrees_non_directed_by_resource"], [135, 4, 1, "", "degrees_positive_by_data_model"], [135, 4, 1, "", "degrees_positive_by_interaction_type"], [135, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_by_reference"], [135, 4, 1, "", "degrees_positive_by_resource"], [135, 4, 1, "", "degrees_positive_in_by_data_model"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_in_by_reference"], [135, 4, 1, "", "degrees_positive_in_by_resource"], [135, 4, 1, "", "degrees_positive_out_by_data_model"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_out_by_reference"], [135, 4, 1, "", "degrees_positive_out_by_resource"], [135, 4, 1, "", "degrees_signed_by_data_model"], [135, 4, 1, "", "degrees_signed_by_interaction_type"], [135, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_by_reference"], [135, 4, 1, "", "degrees_signed_by_resource"], [135, 4, 1, "", "degrees_signed_in_by_data_model"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_in_by_reference"], [135, 4, 1, "", "degrees_signed_in_by_resource"], [135, 4, 1, "", "degrees_signed_out_by_data_model"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_out_by_reference"], [135, 4, 1, "", "degrees_signed_out_by_resource"], [135, 4, 1, "", "degrees_undirected_by_data_model"], [135, 4, 1, "", "degrees_undirected_by_interaction_type"], [135, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_undirected_by_reference"], [135, 4, 1, "", "degrees_undirected_by_resource"], [135, 2, 1, "", "direction_key"], [135, 2, 1, "", "dorothea_level"], [135, 2, 1, "", "dorothea_levels"], [135, 2, 1, "", "entities_by_data_model"], [135, 2, 1, "", "entities_by_interaction_type"], [135, 2, 1, "", "entities_by_interaction_type_and_data_model"], [135, 2, 1, "", "entities_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "entities_by_reference"], [135, 2, 1, "", "entities_by_resource"], [135, 2, 1, "", "evaluate_evidences"], [135, 2, 1, "", "generate_df_records"], [135, 2, 1, "", "get_attr"], [135, 2, 1, "", "get_complex_identifiers"], [135, 2, 1, "", "get_complex_labels"], [135, 2, 1, "", "get_complexes"], [135, 4, 1, "", "get_data_models"], [135, 2, 1, "", "get_degrees"], [135, 4, 1, "", "get_degrees_directed"], [135, 4, 1, "", "get_degrees_directed_in"], [135, 4, 1, "", "get_degrees_directed_out"], [135, 4, 1, "", "get_degrees_negative"], [135, 4, 1, "", "get_degrees_negative_in"], [135, 4, 1, "", "get_degrees_negative_out"], [135, 4, 1, "", "get_degrees_non_directed"], [135, 4, 1, "", "get_degrees_positive"], [135, 4, 1, "", "get_degrees_positive_in"], [135, 4, 1, "", "get_degrees_positive_out"], [135, 4, 1, "", "get_degrees_signed"], [135, 4, 1, "", "get_degrees_signed_in"], [135, 4, 1, "", "get_degrees_signed_out"], [135, 4, 1, "", "get_degrees_undirected"], [135, 2, 1, "", "get_direction"], [135, 2, 1, "", "get_directions"], [135, 2, 1, "", "get_entities"], [135, 2, 1, "", "get_identifiers"], [135, 4, 1, "", "get_interaction_types"], [135, 2, 1, "", "get_interactions"], [135, 2, 1, "", "get_interactions_0"], [135, 2, 1, "", "get_interactions_directed"], [135, 2, 1, "", "get_interactions_mutual"], [135, 2, 1, "", "get_interactions_negative"], [135, 2, 1, "", "get_interactions_non_directed"], [135, 2, 1, "", "get_interactions_non_directed_0"], [135, 2, 1, "", "get_interactions_positive"], [135, 2, 1, "", "get_interactions_signed"], [135, 2, 1, "", "get_interactions_undirected"], [135, 2, 1, "", "get_interactions_undirected_0"], [135, 2, 1, "", "get_labels"], [135, 2, 1, "", "get_lncrna_identifiers"], [135, 2, 1, "", "get_lncrna_labels"], [135, 2, 1, "", "get_lncrnas"], [135, 2, 1, "", "get_mirna_identifiers"], [135, 2, 1, "", "get_mirna_labels"], [135, 2, 1, "", "get_mirnas"], [135, 2, 1, "", "get_protein_identifiers"], [135, 2, 1, "", "get_protein_labels"], [135, 2, 1, "", "get_proteins"], [135, 4, 1, "", "get_references"], [135, 4, 1, "", "get_resource_names"], [135, 4, 1, "", "get_resource_names_via"], [135, 4, 1, "", "get_resources"], [135, 4, 1, "", "get_resources_via"], [135, 2, 1, "", "get_sign"], [135, 2, 1, "", "get_small_molecule_identifiers"], [135, 2, 1, "", "get_small_molecule_labels"], [135, 2, 1, "", "get_small_molecules"], [135, 2, 1, "", "has_sign"], [135, 2, 1, "", "identifiers_by_data_model"], [135, 2, 1, "", "identifiers_by_interaction_type"], [135, 2, 1, "", "identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "identifiers_by_reference"], [135, 2, 1, "", "identifiers_by_resource"], [135, 4, 1, "", "interaction_types_by_data_model"], [135, 4, 1, "", "interaction_types_by_interaction_type"], [135, 4, 1, "", "interaction_types_by_interaction_type_and_data_model"], [135, 4, 1, "", "interaction_types_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "interaction_types_by_reference"], [135, 4, 1, "", "interaction_types_by_resource"], [135, 2, 1, "", "interactions_0_by_data_model"], [135, 2, 1, "", "interactions_0_by_interaction_type"], [135, 2, 1, "", "interactions_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_0_by_reference"], [135, 2, 1, "", "interactions_0_by_resource"], [135, 2, 1, "", "interactions_by_data_model"], [135, 2, 1, "", "interactions_by_interaction_type"], [135, 2, 1, "", "interactions_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_by_reference"], [135, 2, 1, "", "interactions_by_resource"], [135, 2, 1, "", "interactions_directed_by_data_model"], [135, 2, 1, "", "interactions_directed_by_interaction_type"], [135, 2, 1, "", "interactions_directed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_directed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_directed_by_reference"], [135, 2, 1, "", "interactions_directed_by_resource"], [135, 2, 1, "", "interactions_mutual_by_data_model"], [135, 2, 1, "", "interactions_mutual_by_interaction_type"], [135, 2, 1, "", "interactions_mutual_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_mutual_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_mutual_by_reference"], [135, 2, 1, "", "interactions_mutual_by_resource"], [135, 2, 1, "", "interactions_negative_by_data_model"], [135, 2, 1, "", "interactions_negative_by_interaction_type"], [135, 2, 1, "", "interactions_negative_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_negative_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_negative_by_reference"], [135, 2, 1, "", "interactions_negative_by_resource"], [135, 2, 1, "", "interactions_non_directed_0_by_data_model"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_non_directed_0_by_reference"], [135, 2, 1, "", "interactions_non_directed_0_by_resource"], [135, 2, 1, "", "interactions_non_directed_by_data_model"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_non_directed_by_reference"], [135, 2, 1, "", "interactions_non_directed_by_resource"], [135, 2, 1, "", "interactions_positive_by_data_model"], [135, 2, 1, "", "interactions_positive_by_interaction_type"], [135, 2, 1, "", "interactions_positive_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_positive_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_positive_by_reference"], [135, 2, 1, "", "interactions_positive_by_resource"], [135, 2, 1, "", "interactions_signed_by_data_model"], [135, 2, 1, "", "interactions_signed_by_interaction_type"], [135, 2, 1, "", "interactions_signed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_signed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_signed_by_reference"], [135, 2, 1, "", "interactions_signed_by_resource"], [135, 2, 1, "", "interactions_undirected_0_by_data_model"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_undirected_0_by_reference"], [135, 2, 1, "", "interactions_undirected_0_by_resource"], [135, 2, 1, "", "interactions_undirected_by_data_model"], [135, 2, 1, "", "interactions_undirected_by_interaction_type"], [135, 2, 1, "", "interactions_undirected_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_undirected_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_undirected_by_reference"], [135, 2, 1, "", "interactions_undirected_by_resource"], [135, 2, 1, "", "is_directed"], [135, 2, 1, "", "is_directed_by_resources"], [135, 2, 1, "", "is_inhibition"], [135, 2, 1, "", "is_loop"], [135, 2, 1, "", "is_mutual"], [135, 2, 1, "", "is_mutual_by_resources"], [135, 2, 1, "", "is_stimulation"], [135, 2, 1, "", "iter_evidences"], [135, 2, 1, "", "iter_match_evidences"], [135, 2, 1, "", "labels_by_data_model"], [135, 2, 1, "", "labels_by_interaction_type"], [135, 2, 1, "", "labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "labels_by_reference"], [135, 2, 1, "", "labels_by_resource"], [135, 2, 1, "", "lncrna_identifiers_by_data_model"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrna_identifiers_by_reference"], [135, 2, 1, "", "lncrna_identifiers_by_resource"], [135, 2, 1, "", "lncrna_labels_by_data_model"], [135, 2, 1, "", "lncrna_labels_by_interaction_type"], [135, 2, 1, "", "lncrna_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrna_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrna_labels_by_reference"], [135, 2, 1, "", "lncrna_labels_by_resource"], [135, 2, 1, "", "lncrnas_by_data_model"], [135, 2, 1, "", "lncrnas_by_interaction_type"], [135, 2, 1, "", "lncrnas_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrnas_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrnas_by_reference"], [135, 2, 1, "", "lncrnas_by_resource"], [135, 2, 1, "", "majority_dir"], [135, 2, 1, "", "majority_sign"], [135, 2, 1, "", "merge"], [135, 2, 1, "", "mirna_identifiers_by_data_model"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirna_identifiers_by_reference"], [135, 2, 1, "", "mirna_identifiers_by_resource"], [135, 2, 1, "", "mirna_labels_by_data_model"], [135, 2, 1, "", "mirna_labels_by_interaction_type"], [135, 2, 1, "", "mirna_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirna_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirna_labels_by_reference"], [135, 2, 1, "", "mirna_labels_by_resource"], [135, 2, 1, "", "mirnas_by_data_model"], [135, 2, 1, "", "mirnas_by_interaction_type"], [135, 2, 1, "", "mirnas_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirnas_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirnas_by_reference"], [135, 2, 1, "", "mirnas_by_resource"], [135, 2, 1, "", "negative_a_b"], [135, 2, 1, "", "negative_b_a"], [135, 2, 1, "", "negative_resources_a_b"], [135, 2, 1, "", "negative_resources_b_a"], [135, 2, 1, "", "negative_reverse"], [135, 2, 1, "", "negative_straight"], [135, 2, 1, "", "positive_a_b"], [135, 2, 1, "", "positive_b_a"], [135, 2, 1, "", "positive_resources_a_b"], [135, 2, 1, "", "positive_resources_b_a"], [135, 2, 1, "", "positive_reverse"], [135, 2, 1, "", "positive_straight"], [135, 2, 1, "", "protein_identifiers_by_data_model"], [135, 2, 1, "", "protein_identifiers_by_interaction_type"], [135, 2, 1, "", "protein_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "protein_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "protein_identifiers_by_reference"], [135, 2, 1, "", "protein_identifiers_by_resource"], [135, 2, 1, "", "protein_labels_by_data_model"], [135, 2, 1, "", "protein_labels_by_interaction_type"], [135, 2, 1, "", "protein_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "protein_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "protein_labels_by_reference"], [135, 2, 1, "", "protein_labels_by_resource"], [135, 2, 1, "", "proteins_by_data_model"], [135, 2, 1, "", "proteins_by_interaction_type"], [135, 2, 1, "", "proteins_by_interaction_type_and_data_model"], [135, 2, 1, "", "proteins_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "proteins_by_reference"], [135, 2, 1, "", "proteins_by_resource"], [135, 4, 1, "", "references_by_data_model"], [135, 4, 1, "", "references_by_interaction_type"], [135, 4, 1, "", "references_by_interaction_type_and_data_model"], [135, 4, 1, "", "references_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "references_by_reference"], [135, 4, 1, "", "references_by_resource"], [135, 2, 1, "", "reload"], [135, 4, 1, "", "resource_names_by_data_model"], [135, 4, 1, "", "resource_names_by_interaction_type"], [135, 4, 1, "", "resource_names_by_interaction_type_and_data_model"], [135, 4, 1, "", "resource_names_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resource_names_by_reference"], [135, 4, 1, "", "resource_names_by_resource"], [135, 4, 1, "", "resource_names_via_by_data_model"], [135, 4, 1, "", "resource_names_via_by_interaction_type"], [135, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model"], [135, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resource_names_via_by_reference"], [135, 4, 1, "", "resource_names_via_by_resource"], [135, 2, 1, "", "resources_a_b"], [135, 2, 1, "", "resources_b_a"], [135, 4, 1, "", "resources_by_data_model"], [135, 4, 1, "", "resources_by_interaction_type"], [135, 4, 1, "", "resources_by_interaction_type_and_data_model"], [135, 4, 1, "", "resources_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resources_by_reference"], [135, 4, 1, "", "resources_by_resource"], [135, 2, 1, "", "resources_undirected"], [135, 4, 1, "", "resources_via_by_data_model"], [135, 4, 1, "", "resources_via_by_interaction_type"], [135, 4, 1, "", "resources_via_by_interaction_type_and_data_model"], [135, 4, 1, "", "resources_via_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resources_via_by_reference"], [135, 4, 1, "", "resources_via_by_resource"], [135, 2, 1, "", "serialize"], [135, 2, 1, "", "small_molecule_identifiers_by_data_model"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecule_identifiers_by_reference"], [135, 2, 1, "", "small_molecule_identifiers_by_resource"], [135, 2, 1, "", "small_molecule_labels_by_data_model"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecule_labels_by_reference"], [135, 2, 1, "", "small_molecule_labels_by_resource"], [135, 2, 1, "", "small_molecules_by_data_model"], [135, 2, 1, "", "small_molecules_by_interaction_type"], [135, 2, 1, "", "small_molecules_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecules_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecules_by_reference"], [135, 2, 1, "", "small_molecules_by_resource"], [135, 2, 1, "", "source"], [135, 2, 1, "", "sources_reverse"], [135, 2, 1, "", "sources_straight"], [135, 2, 1, "", "sources_undirected"], [135, 2, 1, "", "src"], [135, 2, 1, "", "src_by_resource"], [135, 2, 1, "", "target"], [135, 2, 1, "", "tgt"], [135, 2, 1, "", "tgt_by_resource"], [135, 2, 1, "", "translate"], [135, 2, 1, "", "unset_dir"], [135, 2, 1, "", "unset_direction"], [135, 2, 1, "", "unset_interaction_type"], [135, 2, 1, "", "unset_sign"], [135, 2, 1, "", "update_attrs"], [135, 2, 1, "", "which_directions"], [135, 2, 1, "", "which_dirs"], [135, 2, 1, "", "which_signs"]], "pypath.core.interaction.InteractionDataFrameRecord": [[136, 2, 1, "", "__init__"], [136, 2, 1, "", "count"], [136, 4, 1, "", "directed"], [136, 4, 1, "", "dmodel"], [136, 4, 1, "", "effect"], [136, 4, 1, "", "id_a"], [136, 4, 1, "", "id_b"], [136, 2, 1, "", "index"], [136, 4, 1, "", "references"], [136, 4, 1, "", "sources"], [136, 4, 1, "", "type"], [136, 4, 1, "", "type_a"], [136, 4, 1, "", "type_b"]], "pypath.core.interaction.InteractionKey": [[137, 2, 1, "", "__init__"], [137, 2, 1, "", "count"], [137, 4, 1, "", "entity_a"], [137, 4, 1, "", "entity_b"], [137, 2, 1, "", "index"]], "pypath.core.intercell": [[139, 1, 1, "", "IntercellAnnotation"], [140, 3, 1, "", "get_db"], [141, 3, 1, "", "init_db"]], "pypath.core.intercell.IntercellAnnotation": [[139, 2, 1, "", "__init__"], [139, 2, 1, "", "browse"], [139, 2, 1, "", "class_to_class_connections"], [139, 2, 1, "", "classes_by_entity"], [139, 2, 1, "", "counts"], [139, 2, 1, "", "counts_by_class"], [139, 2, 1, "", "create_class"], [139, 2, 1, "", "degree_inter_class_network"], [139, 2, 1, "", "filter"], [139, 2, 1, "", "filter_classes"], [139, 2, 1, "", "filter_interclass_network"], [139, 2, 1, "", "get_class"], [139, 2, 1, "", "get_df"], [139, 2, 1, "", "get_interclass_network_df"], [139, 2, 1, "", "get_parents"], [139, 2, 1, "", "get_resource"], [139, 2, 1, "", "get_resources"], [139, 2, 1, "", "labels"], [139, 2, 1, "", "make_df"], [139, 2, 1, "", "network_df"], [139, 2, 1, "", "populate_classes"], [139, 2, 1, "", "populate_scores"], [139, 2, 1, "", "process_annot"], [139, 2, 1, "", "quality_check_table"], [139, 2, 1, "", "register_network"], [139, 2, 1, "", "reload"], [139, 2, 1, "", "resources_in_category"], [139, 2, 1, "", "select"], [139, 2, 1, "", "set_interclass_network_df"], [139, 2, 1, "", "show"], [139, 2, 1, "", "update_parents"]], "pypath.core.intercell_annot": [[143, 6, 1, "", "excludes"]], "pypath.core.network": [[145, 1, 1, "", "Network"], [146, 1, 1, "", "NetworkEntityCollection"], [147, 1, 1, "", "NetworkStatsRecord"], [148, 3, 1, "", "get_db"], [149, 3, 1, "", "init_db"]], "pypath.core.network.Network": [[145, 2, 1, "", "__init__"], [145, 4, 1, "", "activated_by"], [145, 4, 1, "", "activates"], [145, 2, 1, "", "add_interaction"], [145, 2, 1, "", "add_node"], [145, 4, 1, "", "collect_complex_identifiers"], [145, 4, 1, "", "collect_complex_labels"], [145, 4, 1, "", "collect_complexes"], [145, 4, 1, "", "collect_curation_effort"], [145, 4, 1, "", "collect_data_models"], [145, 4, 1, "", "collect_degrees_directed"], [145, 4, 1, "", "collect_degrees_directed_in"], [145, 4, 1, "", "collect_degrees_directed_out"], [145, 4, 1, "", "collect_degrees_negative"], [145, 4, 1, "", "collect_degrees_negative_in"], [145, 4, 1, "", "collect_degrees_negative_out"], [145, 4, 1, "", "collect_degrees_non_directed"], [145, 4, 1, "", "collect_degrees_positive"], [145, 4, 1, "", "collect_degrees_positive_in"], [145, 4, 1, "", "collect_degrees_positive_out"], [145, 4, 1, "", "collect_degrees_signed"], [145, 4, 1, "", "collect_degrees_signed_in"], [145, 4, 1, "", "collect_degrees_signed_out"], [145, 4, 1, "", "collect_degrees_undirected"], [145, 4, 1, "", "collect_entities"], [145, 4, 1, "", "collect_evidences"], [145, 4, 1, "", "collect_identifiers"], [145, 4, 1, "", "collect_interaction_types"], [145, 4, 1, "", "collect_interactions"], [145, 4, 1, "", "collect_interactions_0"], [145, 4, 1, "", "collect_interactions_directed"], [145, 4, 1, "", "collect_interactions_mutual"], [145, 4, 1, "", "collect_interactions_negative"], [145, 4, 1, "", "collect_interactions_non_directed"], [145, 4, 1, "", "collect_interactions_non_directed_0"], [145, 4, 1, "", "collect_interactions_positive"], [145, 4, 1, "", "collect_interactions_signed"], [145, 4, 1, "", "collect_interactions_undirected"], [145, 4, 1, "", "collect_interactions_undirected_0"], [145, 4, 1, "", "collect_labels"], [145, 4, 1, "", "collect_lncrna_identifiers"], [145, 4, 1, "", "collect_lncrna_labels"], [145, 4, 1, "", "collect_lncrnas"], [145, 4, 1, "", "collect_mirna_identifiers"], [145, 4, 1, "", "collect_mirna_labels"], [145, 4, 1, "", "collect_mirnas"], [145, 4, 1, "", "collect_protein_identifiers"], [145, 4, 1, "", "collect_protein_labels"], [145, 4, 1, "", "collect_proteins"], [145, 4, 1, "", "collect_references"], [145, 4, 1, "", "collect_resource_names"], [145, 4, 1, "", "collect_resource_names_via"], [145, 4, 1, "", "collect_resources"], [145, 4, 1, "", "collect_resources_via"], [145, 4, 1, "", "collect_small_molecule_identifiers"], [145, 4, 1, "", "collect_small_molecule_labels"], [145, 4, 1, "", "collect_small_molecules"], [145, 4, 1, "", "complex_identifiers_by_data_model"], [145, 4, 1, "", "complex_identifiers_by_interaction_type"], [145, 4, 1, "", "complex_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "complex_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complex_identifiers_by_reference"], [145, 4, 1, "", "complex_identifiers_by_resource"], [145, 4, 1, "", "complex_labels_by_data_model"], [145, 4, 1, "", "complex_labels_by_interaction_type"], [145, 4, 1, "", "complex_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "complex_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complex_labels_by_reference"], [145, 4, 1, "", "complex_labels_by_resource"], [145, 4, 1, "", "complexes_by_data_model"], [145, 4, 1, "", "complexes_by_interaction_type"], [145, 4, 1, "", "complexes_by_interaction_type_and_data_model"], [145, 4, 1, "", "complexes_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complexes_by_reference"], [145, 4, 1, "", "complexes_by_resource"], [145, 4, 1, "", "count_activated_by"], [145, 4, 1, "", "count_activates"], [145, 4, 1, "", "count_complex_identifiers"], [145, 4, 1, "", "count_complex_identifiers_by_data_model"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complex_identifiers_by_reference"], [145, 4, 1, "", "count_complex_identifiers_by_resource"], [145, 4, 1, "", "count_complex_labels"], [145, 4, 1, "", "count_complex_labels_by_data_model"], [145, 4, 1, "", "count_complex_labels_by_interaction_type"], [145, 4, 1, "", "count_complex_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complex_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complex_labels_by_reference"], [145, 4, 1, "", "count_complex_labels_by_resource"], [145, 4, 1, "", "count_complexes"], [145, 4, 1, "", "count_complexes_by_data_model"], [145, 4, 1, "", "count_complexes_by_interaction_type"], [145, 4, 1, "", "count_complexes_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complexes_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complexes_by_reference"], [145, 4, 1, "", "count_complexes_by_resource"], [145, 4, 1, "", "count_curation_effort"], [145, 4, 1, "", "count_curation_effort_by_data_model"], [145, 4, 1, "", "count_curation_effort_by_interaction_type"], [145, 4, 1, "", "count_curation_effort_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_curation_effort_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_curation_effort_by_reference"], [145, 4, 1, "", "count_curation_effort_by_resource"], [145, 4, 1, "", "count_data_models"], [145, 4, 1, "", "count_data_models_by_data_model"], [145, 4, 1, "", "count_data_models_by_interaction_type"], [145, 4, 1, "", "count_data_models_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_data_models_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_data_models_by_reference"], [145, 4, 1, "", "count_data_models_by_resource"], [145, 4, 1, "", "count_degrees_directed"], [145, 4, 1, "", "count_degrees_directed_by_data_model"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_by_reference"], [145, 4, 1, "", "count_degrees_directed_by_resource"], [145, 4, 1, "", "count_degrees_directed_in"], [145, 4, 1, "", "count_degrees_directed_in_by_data_model"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_in_by_reference"], [145, 4, 1, "", "count_degrees_directed_in_by_resource"], [145, 4, 1, "", "count_degrees_directed_out"], [145, 4, 1, "", "count_degrees_directed_out_by_data_model"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_out_by_reference"], [145, 4, 1, "", "count_degrees_directed_out_by_resource"], [145, 4, 1, "", "count_degrees_negative"], [145, 4, 1, "", "count_degrees_negative_by_data_model"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_by_reference"], [145, 4, 1, "", "count_degrees_negative_by_resource"], [145, 4, 1, "", "count_degrees_negative_in"], [145, 4, 1, "", "count_degrees_negative_in_by_data_model"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_in_by_reference"], [145, 4, 1, "", "count_degrees_negative_in_by_resource"], [145, 4, 1, "", "count_degrees_negative_out"], [145, 4, 1, "", "count_degrees_negative_out_by_data_model"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_out_by_reference"], [145, 4, 1, "", "count_degrees_negative_out_by_resource"], [145, 4, 1, "", "count_degrees_non_directed"], [145, 4, 1, "", "count_degrees_non_directed_by_data_model"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_non_directed_by_reference"], [145, 4, 1, "", "count_degrees_non_directed_by_resource"], [145, 4, 1, "", "count_degrees_positive"], [145, 4, 1, "", "count_degrees_positive_by_data_model"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_by_reference"], [145, 4, 1, "", "count_degrees_positive_by_resource"], [145, 4, 1, "", "count_degrees_positive_in"], [145, 4, 1, "", "count_degrees_positive_in_by_data_model"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_in_by_reference"], [145, 4, 1, "", "count_degrees_positive_in_by_resource"], [145, 4, 1, "", "count_degrees_positive_out"], [145, 4, 1, "", "count_degrees_positive_out_by_data_model"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_out_by_reference"], [145, 4, 1, "", "count_degrees_positive_out_by_resource"], [145, 4, 1, "", "count_degrees_signed"], [145, 4, 1, "", "count_degrees_signed_by_data_model"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_by_reference"], [145, 4, 1, "", "count_degrees_signed_by_resource"], [145, 4, 1, "", "count_degrees_signed_in"], [145, 4, 1, "", "count_degrees_signed_in_by_data_model"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_in_by_reference"], [145, 4, 1, "", "count_degrees_signed_in_by_resource"], [145, 4, 1, "", "count_degrees_signed_out"], [145, 4, 1, "", "count_degrees_signed_out_by_data_model"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_out_by_reference"], [145, 4, 1, "", "count_degrees_signed_out_by_resource"], [145, 4, 1, "", "count_degrees_undirected"], [145, 4, 1, "", "count_degrees_undirected_by_data_model"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_undirected_by_reference"], [145, 4, 1, "", "count_degrees_undirected_by_resource"], [145, 4, 1, "", "count_entities"], [145, 4, 1, "", "count_entities_by_data_model"], [145, 4, 1, "", "count_entities_by_interaction_type"], [145, 4, 1, "", "count_entities_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_entities_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_entities_by_reference"], [145, 4, 1, "", "count_entities_by_resource"], [145, 4, 1, "", "count_evidences"], [145, 4, 1, "", "count_evidences_by_data_model"], [145, 4, 1, "", "count_evidences_by_interaction_type"], [145, 4, 1, "", "count_evidences_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_evidences_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_evidences_by_reference"], [145, 4, 1, "", "count_evidences_by_resource"], [145, 4, 1, "", "count_identifiers"], [145, 4, 1, "", "count_identifiers_by_data_model"], [145, 4, 1, "", "count_identifiers_by_interaction_type"], [145, 4, 1, "", "count_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_identifiers_by_reference"], [145, 4, 1, "", "count_identifiers_by_resource"], [145, 4, 1, "", "count_interaction_types"], [145, 4, 1, "", "count_interaction_types_by_data_model"], [145, 4, 1, "", "count_interaction_types_by_interaction_type"], [145, 4, 1, "", "count_interaction_types_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interaction_types_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interaction_types_by_reference"], [145, 4, 1, "", "count_interaction_types_by_resource"], [145, 4, 1, "", "count_interactions"], [145, 4, 1, "", "count_interactions_0"], [145, 4, 1, "", "count_interactions_0_by_data_model"], [145, 4, 1, "", "count_interactions_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_0_by_reference"], [145, 4, 1, "", "count_interactions_0_by_resource"], [145, 4, 1, "", "count_interactions_by_data_model"], [145, 4, 1, "", "count_interactions_by_interaction_type"], [145, 4, 1, "", "count_interactions_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_by_reference"], [145, 4, 1, "", "count_interactions_by_resource"], [145, 4, 1, "", "count_interactions_directed"], [145, 4, 1, "", "count_interactions_directed_by_data_model"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_directed_by_reference"], [145, 4, 1, "", "count_interactions_directed_by_resource"], [145, 4, 1, "", "count_interactions_mutual"], [145, 4, 1, "", "count_interactions_mutual_by_data_model"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_mutual_by_reference"], [145, 4, 1, "", "count_interactions_mutual_by_resource"], [145, 4, 1, "", "count_interactions_negative"], [145, 4, 1, "", "count_interactions_negative_by_data_model"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_negative_by_reference"], [145, 4, 1, "", "count_interactions_negative_by_resource"], [145, 4, 1, "", "count_interactions_non_directed"], [145, 4, 1, "", "count_interactions_non_directed_0"], [145, 4, 1, "", "count_interactions_non_directed_0_by_data_model"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_non_directed_0_by_reference"], [145, 4, 1, "", "count_interactions_non_directed_0_by_resource"], [145, 4, 1, "", "count_interactions_non_directed_by_data_model"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_non_directed_by_reference"], [145, 4, 1, "", "count_interactions_non_directed_by_resource"], [145, 4, 1, "", "count_interactions_positive"], [145, 4, 1, "", "count_interactions_positive_by_data_model"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_positive_by_reference"], [145, 4, 1, "", "count_interactions_positive_by_resource"], [145, 4, 1, "", "count_interactions_signed"], [145, 4, 1, "", "count_interactions_signed_by_data_model"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_signed_by_reference"], [145, 4, 1, "", "count_interactions_signed_by_resource"], [145, 4, 1, "", "count_interactions_undirected"], [145, 4, 1, "", "count_interactions_undirected_0"], [145, 4, 1, "", "count_interactions_undirected_0_by_data_model"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_undirected_0_by_reference"], [145, 4, 1, "", "count_interactions_undirected_0_by_resource"], [145, 4, 1, "", "count_interactions_undirected_by_data_model"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_undirected_by_reference"], [145, 4, 1, "", "count_interactions_undirected_by_resource"], [145, 4, 1, "", "count_labels"], [145, 4, 1, "", "count_labels_by_data_model"], [145, 4, 1, "", "count_labels_by_interaction_type"], [145, 4, 1, "", "count_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_labels_by_reference"], [145, 4, 1, "", "count_labels_by_resource"], [145, 4, 1, "", "count_lncrna_identifiers"], [145, 4, 1, "", "count_lncrna_identifiers_by_data_model"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrna_identifiers_by_reference"], [145, 4, 1, "", "count_lncrna_identifiers_by_resource"], [145, 4, 1, "", "count_lncrna_labels"], [145, 4, 1, "", "count_lncrna_labels_by_data_model"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrna_labels_by_reference"], [145, 4, 1, "", "count_lncrna_labels_by_resource"], [145, 4, 1, "", "count_lncrnas"], [145, 4, 1, "", "count_lncrnas_by_data_model"], [145, 4, 1, "", "count_lncrnas_by_interaction_type"], [145, 4, 1, "", "count_lncrnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrnas_by_reference"], [145, 4, 1, "", "count_lncrnas_by_resource"], [145, 4, 1, "", "count_mirna_identifiers"], [145, 4, 1, "", "count_mirna_identifiers_by_data_model"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirna_identifiers_by_reference"], [145, 4, 1, "", "count_mirna_identifiers_by_resource"], [145, 4, 1, "", "count_mirna_labels"], [145, 4, 1, "", "count_mirna_labels_by_data_model"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirna_labels_by_reference"], [145, 4, 1, "", "count_mirna_labels_by_resource"], [145, 4, 1, "", "count_mirnas"], [145, 4, 1, "", "count_mirnas_by_data_model"], [145, 4, 1, "", "count_mirnas_by_interaction_type"], [145, 4, 1, "", "count_mirnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirnas_by_reference"], [145, 4, 1, "", "count_mirnas_by_resource"], [145, 2, 1, "", "count_partners"], [145, 4, 1, "", "count_post_transcriptionally_activated_by"], [145, 4, 1, "", "count_post_transcriptionally_activates"], [145, 4, 1, "", "count_post_transcriptionally_regulated_by"], [145, 4, 1, "", "count_post_transcriptionally_regulates"], [145, 4, 1, "", "count_post_transcriptionally_suppressed_by"], [145, 4, 1, "", "count_post_transcriptionally_suppresses"], [145, 4, 1, "", "count_post_translationally_activated_by"], [145, 4, 1, "", "count_post_translationally_activates"], [145, 4, 1, "", "count_post_translationally_regulated_by"], [145, 4, 1, "", "count_post_translationally_regulates"], [145, 4, 1, "", "count_post_translationally_suppressed_by"], [145, 4, 1, "", "count_post_translationally_suppresses"], [145, 4, 1, "", "count_protein_identifiers"], [145, 4, 1, "", "count_protein_identifiers_by_data_model"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_protein_identifiers_by_reference"], [145, 4, 1, "", "count_protein_identifiers_by_resource"], [145, 4, 1, "", "count_protein_labels"], [145, 4, 1, "", "count_protein_labels_by_data_model"], [145, 4, 1, "", "count_protein_labels_by_interaction_type"], [145, 4, 1, "", "count_protein_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_protein_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_protein_labels_by_reference"], [145, 4, 1, "", "count_protein_labels_by_resource"], [145, 4, 1, "", "count_proteins"], [145, 4, 1, "", "count_proteins_by_data_model"], [145, 4, 1, "", "count_proteins_by_interaction_type"], [145, 4, 1, "", "count_proteins_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_proteins_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_proteins_by_reference"], [145, 4, 1, "", "count_proteins_by_resource"], [145, 4, 1, "", "count_references"], [145, 4, 1, "", "count_references_by_data_model"], [145, 4, 1, "", "count_references_by_interaction_type"], [145, 4, 1, "", "count_references_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_references_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_references_by_reference"], [145, 4, 1, "", "count_references_by_resource"], [145, 4, 1, "", "count_regulated_by"], [145, 4, 1, "", "count_regulates"], [145, 4, 1, "", "count_resource_names"], [145, 4, 1, "", "count_resource_names_by_data_model"], [145, 4, 1, "", "count_resource_names_by_interaction_type"], [145, 4, 1, "", "count_resource_names_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resource_names_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resource_names_by_reference"], [145, 4, 1, "", "count_resource_names_by_resource"], [145, 4, 1, "", "count_resource_names_via"], [145, 4, 1, "", "count_resource_names_via_by_data_model"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resource_names_via_by_reference"], [145, 4, 1, "", "count_resource_names_via_by_resource"], [145, 4, 1, "", "count_resources"], [145, 4, 1, "", "count_resources_by_data_model"], [145, 4, 1, "", "count_resources_by_interaction_type"], [145, 4, 1, "", "count_resources_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resources_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resources_by_reference"], [145, 4, 1, "", "count_resources_by_resource"], [145, 4, 1, "", "count_resources_via"], [145, 4, 1, "", "count_resources_via_by_data_model"], [145, 4, 1, "", "count_resources_via_by_interaction_type"], [145, 4, 1, "", "count_resources_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resources_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resources_via_by_reference"], [145, 4, 1, "", "count_resources_via_by_resource"], [145, 4, 1, "", "count_small_molecule_identifiers"], [145, 4, 1, "", "count_small_molecule_identifiers_by_data_model"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecule_identifiers_by_reference"], [145, 4, 1, "", "count_small_molecule_identifiers_by_resource"], [145, 4, 1, "", "count_small_molecule_labels"], [145, 4, 1, "", "count_small_molecule_labels_by_data_model"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecule_labels_by_reference"], [145, 4, 1, "", "count_small_molecule_labels_by_resource"], [145, 4, 1, "", "count_small_molecules"], [145, 4, 1, "", "count_small_molecules_by_data_model"], [145, 4, 1, "", "count_small_molecules_by_interaction_type"], [145, 4, 1, "", "count_small_molecules_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecules_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecules_by_reference"], [145, 4, 1, "", "count_small_molecules_by_resource"], [145, 4, 1, "", "count_suppressed_by"], [145, 4, 1, "", "count_suppresses"], [145, 4, 1, "", "count_transcriptionally_activated_by"], [145, 4, 1, "", "count_transcriptionally_activates"], [145, 4, 1, "", "count_transcriptionally_regulated_by"], [145, 4, 1, "", "count_transcriptionally_regulates"], [145, 4, 1, "", "count_transcriptionally_suppressed_by"], [145, 4, 1, "", "count_transcriptionally_suppresses"], [145, 4, 1, "", "curation_effort_by_data_model"], [145, 4, 1, "", "curation_effort_by_interaction_type"], [145, 4, 1, "", "curation_effort_by_interaction_type_and_data_model"], [145, 4, 1, "", "curation_effort_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "curation_effort_by_reference"], [145, 4, 1, "", "curation_effort_by_resource"], [145, 4, 1, "", "data_models_by_data_model"], [145, 4, 1, "", "data_models_by_interaction_type"], [145, 4, 1, "", "data_models_by_interaction_type_and_data_model"], [145, 4, 1, "", "data_models_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "data_models_by_reference"], [145, 4, 1, "", "data_models_by_resource"], [145, 4, 1, "", "degrees_directed_by_data_model"], [145, 4, 1, "", "degrees_directed_by_interaction_type"], [145, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_by_reference"], [145, 4, 1, "", "degrees_directed_by_resource"], [145, 4, 1, "", "degrees_directed_in_by_data_model"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_in_by_reference"], [145, 4, 1, "", "degrees_directed_in_by_resource"], [145, 4, 1, "", "degrees_directed_out_by_data_model"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_out_by_reference"], [145, 4, 1, "", "degrees_directed_out_by_resource"], [145, 4, 1, "", "degrees_negative_by_data_model"], [145, 4, 1, "", "degrees_negative_by_interaction_type"], [145, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_by_reference"], [145, 4, 1, "", "degrees_negative_by_resource"], [145, 4, 1, "", "degrees_negative_in_by_data_model"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_in_by_reference"], [145, 4, 1, "", "degrees_negative_in_by_resource"], [145, 4, 1, "", "degrees_negative_out_by_data_model"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_out_by_reference"], [145, 4, 1, "", "degrees_negative_out_by_resource"], [145, 4, 1, "", "degrees_non_directed_by_data_model"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_non_directed_by_reference"], [145, 4, 1, "", "degrees_non_directed_by_resource"], [145, 4, 1, "", "degrees_positive_by_data_model"], [145, 4, 1, "", "degrees_positive_by_interaction_type"], [145, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_by_reference"], [145, 4, 1, "", "degrees_positive_by_resource"], [145, 4, 1, "", "degrees_positive_in_by_data_model"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_in_by_reference"], [145, 4, 1, "", "degrees_positive_in_by_resource"], [145, 4, 1, "", "degrees_positive_out_by_data_model"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_out_by_reference"], [145, 4, 1, "", "degrees_positive_out_by_resource"], [145, 4, 1, "", "degrees_signed_by_data_model"], [145, 4, 1, "", "degrees_signed_by_interaction_type"], [145, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_by_reference"], [145, 4, 1, "", "degrees_signed_by_resource"], [145, 4, 1, "", "degrees_signed_in_by_data_model"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_in_by_reference"], [145, 4, 1, "", "degrees_signed_in_by_resource"], [145, 4, 1, "", "degrees_signed_out_by_data_model"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_out_by_reference"], [145, 4, 1, "", "degrees_signed_out_by_resource"], [145, 4, 1, "", "degrees_undirected_by_data_model"], [145, 4, 1, "", "degrees_undirected_by_interaction_type"], [145, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_undirected_by_reference"], [145, 4, 1, "", "degrees_undirected_by_resource"], [145, 2, 1, "", "direction_consistency"], [145, 2, 1, "", "dorothea"], [145, 4, 1, "", "entities_by_data_model"], [145, 4, 1, "", "entities_by_interaction_type"], [145, 4, 1, "", "entities_by_interaction_type_and_data_model"], [145, 4, 1, "", "entities_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "entities_by_reference"], [145, 4, 1, "", "entities_by_resource"], [145, 2, 1, "", "entity_by_id"], [145, 2, 1, "", "entity_by_label"], [145, 4, 1, "", "evidences_by_data_model"], [145, 4, 1, "", "evidences_by_interaction_type"], [145, 4, 1, "", "evidences_by_interaction_type_and_data_model"], [145, 4, 1, "", "evidences_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "evidences_by_reference"], [145, 4, 1, "", "evidences_by_resource"], [145, 2, 1, "", "extra_directions"], [145, 2, 1, "", "find_paths"], [145, 2, 1, "", "from_igraph"], [145, 2, 1, "", "from_pickle"], [145, 4, 1, "", "get_complex_identifiers"], [145, 4, 1, "", "get_complex_labels"], [145, 4, 1, "", "get_complexes"], [145, 4, 1, "", "get_curation_effort"], [145, 4, 1, "", "get_data_models"], [145, 4, 1, "", "get_degrees_directed"], [145, 4, 1, "", "get_degrees_directed_in"], [145, 4, 1, "", "get_degrees_directed_out"], [145, 4, 1, "", "get_degrees_negative"], [145, 4, 1, "", "get_degrees_negative_in"], [145, 4, 1, "", "get_degrees_negative_out"], [145, 4, 1, "", "get_degrees_non_directed"], [145, 4, 1, "", "get_degrees_positive"], [145, 4, 1, "", "get_degrees_positive_in"], [145, 4, 1, "", "get_degrees_positive_out"], [145, 4, 1, "", "get_degrees_signed"], [145, 4, 1, "", "get_degrees_signed_in"], [145, 4, 1, "", "get_degrees_signed_out"], [145, 4, 1, "", "get_degrees_undirected"], [145, 4, 1, "", "get_entities"], [145, 4, 1, "", "get_evidences"], [145, 4, 1, "", "get_identifiers"], [145, 4, 1, "", "get_interaction_types"], [145, 4, 1, "", "get_interactions"], [145, 4, 1, "", "get_interactions_0"], [145, 4, 1, "", "get_interactions_directed"], [145, 4, 1, "", "get_interactions_mutual"], [145, 4, 1, "", "get_interactions_negative"], [145, 4, 1, "", "get_interactions_non_directed"], [145, 4, 1, "", "get_interactions_non_directed_0"], [145, 4, 1, "", "get_interactions_positive"], [145, 4, 1, "", "get_interactions_signed"], [145, 4, 1, "", "get_interactions_undirected"], [145, 4, 1, "", "get_interactions_undirected_0"], [145, 4, 1, "", "get_labels"], [145, 4, 1, "", "get_lncrna_identifiers"], [145, 4, 1, "", "get_lncrna_labels"], [145, 4, 1, "", "get_lncrnas"], [145, 4, 1, "", "get_mirna_identifiers"], [145, 4, 1, "", "get_mirna_labels"], [145, 4, 1, "", "get_mirnas"], [145, 2, 1, "", "get_organisms"], [145, 4, 1, "", "get_protein_identifiers"], [145, 4, 1, "", "get_protein_labels"], [145, 4, 1, "", "get_proteins"], [145, 4, 1, "", "get_references"], [145, 4, 1, "", "get_resource_names"], [145, 4, 1, "", "get_resource_names_via"], [145, 4, 1, "", "get_resources"], [145, 4, 1, "", "get_resources_via"], [145, 4, 1, "", "get_small_molecule_identifiers"], [145, 4, 1, "", "get_small_molecule_labels"], [145, 4, 1, "", "get_small_molecules"], [145, 2, 1, "", "htp_interactions"], [145, 2, 1, "", "htp_references"], [145, 4, 1, "", "identifiers_by_data_model"], [145, 4, 1, "", "identifiers_by_interaction_type"], [145, 4, 1, "", "identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "identifiers_by_reference"], [145, 4, 1, "", "identifiers_by_resource"], [145, 2, 1, "", "init_network"], [145, 2, 1, "", "interaction"], [145, 2, 1, "", "interaction_by_id"], [145, 2, 1, "", "interaction_by_label"], [145, 4, 1, "", "interaction_types_by_data_model"], [145, 4, 1, "", "interaction_types_by_interaction_type"], [145, 4, 1, "", "interaction_types_by_interaction_type_and_data_model"], [145, 4, 1, "", "interaction_types_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interaction_types_by_reference"], [145, 4, 1, "", "interaction_types_by_resource"], [145, 4, 1, "", "interactions_0_by_data_model"], [145, 4, 1, "", "interactions_0_by_interaction_type"], [145, 4, 1, "", "interactions_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_0_by_reference"], [145, 4, 1, "", "interactions_0_by_resource"], [145, 4, 1, "", "interactions_by_data_model"], [145, 4, 1, "", "interactions_by_interaction_type"], [145, 4, 1, "", "interactions_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_by_reference"], [145, 4, 1, "", "interactions_by_resource"], [145, 4, 1, "", "interactions_directed_by_data_model"], [145, 4, 1, "", "interactions_directed_by_interaction_type"], [145, 4, 1, "", "interactions_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_directed_by_reference"], [145, 4, 1, "", "interactions_directed_by_resource"], [145, 4, 1, "", "interactions_mutual_by_data_model"], [145, 4, 1, "", "interactions_mutual_by_interaction_type"], [145, 4, 1, "", "interactions_mutual_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_mutual_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_mutual_by_reference"], [145, 4, 1, "", "interactions_mutual_by_resource"], [145, 4, 1, "", "interactions_negative_by_data_model"], [145, 4, 1, "", "interactions_negative_by_interaction_type"], [145, 4, 1, "", "interactions_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_negative_by_reference"], [145, 4, 1, "", "interactions_negative_by_resource"], [145, 4, 1, "", "interactions_non_directed_0_by_data_model"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_non_directed_0_by_reference"], [145, 4, 1, "", "interactions_non_directed_0_by_resource"], [145, 4, 1, "", "interactions_non_directed_by_data_model"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_non_directed_by_reference"], [145, 4, 1, "", "interactions_non_directed_by_resource"], [145, 4, 1, "", "interactions_positive_by_data_model"], [145, 4, 1, "", "interactions_positive_by_interaction_type"], [145, 4, 1, "", "interactions_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_positive_by_reference"], [145, 4, 1, "", "interactions_positive_by_resource"], [145, 4, 1, "", "interactions_signed_by_data_model"], [145, 4, 1, "", "interactions_signed_by_interaction_type"], [145, 4, 1, "", "interactions_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_signed_by_reference"], [145, 4, 1, "", "interactions_signed_by_resource"], [145, 4, 1, "", "interactions_undirected_0_by_data_model"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_undirected_0_by_reference"], [145, 4, 1, "", "interactions_undirected_0_by_resource"], [145, 4, 1, "", "interactions_undirected_by_data_model"], [145, 4, 1, "", "interactions_undirected_by_interaction_type"], [145, 4, 1, "", "interactions_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_undirected_by_reference"], [145, 4, 1, "", "interactions_undirected_by_resource"], [145, 4, 1, "", "labels_by_data_model"], [145, 4, 1, "", "labels_by_interaction_type"], [145, 4, 1, "", "labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "labels_by_reference"], [145, 4, 1, "", "labels_by_resource"], [145, 4, 1, "", "lncrna_identifiers_by_data_model"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrna_identifiers_by_reference"], [145, 4, 1, "", "lncrna_identifiers_by_resource"], [145, 4, 1, "", "lncrna_labels_by_data_model"], [145, 4, 1, "", "lncrna_labels_by_interaction_type"], [145, 4, 1, "", "lncrna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrna_labels_by_reference"], [145, 4, 1, "", "lncrna_labels_by_resource"], [145, 4, 1, "", "lncrnas_by_data_model"], [145, 4, 1, "", "lncrnas_by_interaction_type"], [145, 4, 1, "", "lncrnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrnas_by_reference"], [145, 4, 1, "", "lncrnas_by_resource"], [145, 2, 1, "", "load"], [145, 2, 1, "", "load_from_pickle"], [145, 2, 1, "", "load_resource"], [145, 2, 1, "", "load_resources"], [145, 2, 1, "", "make_df"], [145, 4, 1, "", "mirna_identifiers_by_data_model"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirna_identifiers_by_reference"], [145, 4, 1, "", "mirna_identifiers_by_resource"], [145, 4, 1, "", "mirna_labels_by_data_model"], [145, 4, 1, "", "mirna_labels_by_interaction_type"], [145, 4, 1, "", "mirna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirna_labels_by_reference"], [145, 4, 1, "", "mirna_labels_by_resource"], [145, 2, 1, "", "mirna_target"], [145, 4, 1, "", "mirnas_by_data_model"], [145, 4, 1, "", "mirnas_by_interaction_type"], [145, 4, 1, "", "mirnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirnas_by_reference"], [145, 4, 1, "", "mirnas_by_resource"], [145, 2, 1, "", "numof_interactions_per_reference"], [145, 2, 1, "", "organisms_check"], [145, 2, 1, "", "partners"], [145, 4, 1, "", "post_transcriptionally_activated_by"], [145, 4, 1, "", "post_transcriptionally_activates"], [145, 4, 1, "", "post_transcriptionally_regulated_by"], [145, 4, 1, "", "post_transcriptionally_regulates"], [145, 4, 1, "", "post_transcriptionally_suppressed_by"], [145, 4, 1, "", "post_transcriptionally_suppresses"], [145, 4, 1, "", "post_translationally_activated_by"], [145, 4, 1, "", "post_translationally_activates"], [145, 4, 1, "", "post_translationally_regulated_by"], [145, 4, 1, "", "post_translationally_regulates"], [145, 4, 1, "", "post_translationally_suppressed_by"], [145, 4, 1, "", "post_translationally_suppresses"], [145, 4, 1, "", "protein_identifiers_by_data_model"], [145, 4, 1, "", "protein_identifiers_by_interaction_type"], [145, 4, 1, "", "protein_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "protein_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "protein_identifiers_by_reference"], [145, 4, 1, "", "protein_identifiers_by_resource"], [145, 4, 1, "", "protein_labels_by_data_model"], [145, 4, 1, "", "protein_labels_by_interaction_type"], [145, 4, 1, "", "protein_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "protein_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "protein_labels_by_reference"], [145, 4, 1, "", "protein_labels_by_resource"], [145, 4, 1, "", "proteins_by_data_model"], [145, 4, 1, "", "proteins_by_interaction_type"], [145, 4, 1, "", "proteins_by_interaction_type_and_data_model"], [145, 4, 1, "", "proteins_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "proteins_by_reference"], [145, 4, 1, "", "proteins_by_resource"], [145, 2, 1, "", "random_interaction"], [145, 4, 1, "", "references_by_data_model"], [145, 4, 1, "", "references_by_interaction_type"], [145, 4, 1, "", "references_by_interaction_type_and_data_model"], [145, 4, 1, "", "references_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "references_by_reference"], [145, 4, 1, "", "references_by_resource"], [145, 4, 1, "", "regulated_by"], [145, 4, 1, "", "regulates"], [145, 2, 1, "", "reload"], [145, 2, 1, "", "remove_interaction"], [145, 2, 1, "", "remove_loops"], [145, 2, 1, "", "remove_node"], [145, 2, 1, "", "remove_zero_degree"], [145, 2, 1, "", "reset"], [145, 5, 1, "", "resource_names"], [145, 4, 1, "", "resource_names_by_data_model"], [145, 4, 1, "", "resource_names_by_interaction_type"], [145, 4, 1, "", "resource_names_by_interaction_type_and_data_model"], [145, 4, 1, "", "resource_names_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resource_names_by_reference"], [145, 4, 1, "", "resource_names_by_resource"], [145, 4, 1, "", "resource_names_via_by_data_model"], [145, 4, 1, "", "resource_names_via_by_interaction_type"], [145, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resource_names_via_by_reference"], [145, 4, 1, "", "resource_names_via_by_resource"], [145, 5, 1, "", "resources"], [145, 4, 1, "", "resources_by_data_model"], [145, 4, 1, "", "resources_by_interaction_type"], [145, 4, 1, "", "resources_by_interaction_type_and_data_model"], [145, 4, 1, "", "resources_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resources_by_reference"], [145, 4, 1, "", "resources_by_resource"], [145, 4, 1, "", "resources_via_by_data_model"], [145, 4, 1, "", "resources_via_by_interaction_type"], [145, 4, 1, "", "resources_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "resources_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resources_via_by_reference"], [145, 4, 1, "", "resources_via_by_resource"], [145, 2, 1, "", "save_to_pickle"], [145, 4, 1, "", "small_molecule_identifiers_by_data_model"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecule_identifiers_by_reference"], [145, 4, 1, "", "small_molecule_identifiers_by_resource"], [145, 4, 1, "", "small_molecule_labels_by_data_model"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecule_labels_by_reference"], [145, 4, 1, "", "small_molecule_labels_by_resource"], [145, 4, 1, "", "small_molecules_by_data_model"], [145, 4, 1, "", "small_molecules_by_interaction_type"], [145, 4, 1, "", "small_molecules_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecules_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecules_by_reference"], [145, 4, 1, "", "small_molecules_by_resource"], [145, 2, 1, "", "summaries_tab"], [145, 4, 1, "", "suppressed_by"], [145, 4, 1, "", "suppresses"], [145, 2, 1, "", "to_igraph"], [145, 2, 1, "", "transcription"], [145, 4, 1, "", "transcriptionally_activated_by"], [145, 4, 1, "", "transcriptionally_activates"], [145, 4, 1, "", "transcriptionally_regulated_by"], [145, 4, 1, "", "transcriptionally_regulates"], [145, 4, 1, "", "transcriptionally_suppressed_by"], [145, 4, 1, "", "transcriptionally_suppresses"]], "pypath.core.network.NetworkEntityCollection": [[146, 2, 1, "", "__init__"]], "pypath.core.network.NetworkStatsRecord": [[147, 2, 1, "", "__init__"], [147, 4, 1, "", "by_category"], [147, 4, 1, "", "by_resource"], [147, 4, 1, "", "cat_resource"], [147, 2, 1, "", "count"], [147, 2, 1, "", "index"], [147, 4, 1, "", "label"], [147, 4, 1, "", "method"], [147, 4, 1, "", "percent"], [147, 4, 1, "", "percent_cat"], [147, 4, 1, "", "percent_res_cat"], [147, 4, 1, "", "resource_cat"], [147, 4, 1, "", "shared"], [147, 4, 1, "", "shared_cat"], [147, 4, 1, "", "shared_res_cat"], [147, 4, 1, "", "total"], [147, 4, 1, "", "unique"], [147, 4, 1, "", "unique_cat"], [147, 4, 1, "", "unique_res_cat"]], "pypath.inputs": [[154, 0, 0, "-", "abs"], [156, 0, 0, "-", "acsn"], [159, 0, 0, "-", "adhesome"], [162, 0, 0, "-", "almen2009"], [164, 0, 0, "-", "baccin2019"], [167, 0, 0, "-", "biogps"], [173, 0, 0, "-", "biogrid"], [176, 0, 0, "-", "biomart"], [182, 0, 0, "-", "biomodels"], [188, 0, 0, "-", "ca1"], [190, 0, 0, "-", "cancercellmap"], [192, 0, 0, "-", "cancerdrugsdb"], [196, 0, 0, "-", "cancersea"], [198, 0, 0, "-", "cell"], [200, 0, 0, "-", "cellcall"], [205, 0, 0, "-", "cellcellinteractions"], [207, 0, 0, "-", "cellchatdb"], [213, 0, 0, "-", "cellinker"], [225, 0, 0, "-", "cellphonedb"], [232, 0, 0, "-", "celltalkdb"], [236, 0, 0, "-", "celltypist"], [238, 0, 0, "-", "chembl"], [245, 0, 0, "-", "clinvar"], [248, 0, 0, "-", "common"], [255, 0, 0, "-", "compleat"], [258, 0, 0, "-", "complexportal"], [260, 0, 0, "-", "comppi"], [263, 0, 0, "-", "connectomedb"], [266, 0, 0, "-", "corum"], [268, 0, 0, "-", "cosmic"], [270, 0, 0, "-", "cpad"], [274, 0, 0, "-", "cpdb"], [277, 0, 0, "-", "credentials"], [279, 0, 0, "-", "csa"], [281, 0, 0, "-", "cspa"], [285, 0, 0, "-", "ctdbase"], [288, 0, 0, "-", "cytosig"], [291, 0, 0, "-", "dbptm"], [295, 0, 0, "-", "deathdomain"], [298, 0, 0, "-", "depod"], [301, 0, 0, "-", "dgidb"], [305, 0, 0, "-", "dip"], [308, 0, 0, "-", "disgenet"], [313, 0, 0, "-", "domino"], [318, 0, 0, "-", "dorothea"], [329, 0, 0, "-", "drugbank"], [336, 0, 0, "-", "drugcentral"], [340, 0, 0, "-", "ebi"], [342, 0, 0, "-", "elm"], [347, 0, 0, "-", "embopress"], [349, 0, 0, "-", "embrace"], [354, 0, 0, "-", "encode"], [356, 0, 0, "-", "ensembl"], [358, 0, 0, "-", "exocarta"], [361, 0, 0, "-", "genecards"], [365, 3, 1, "", "get_method"], [366, 0, 0, "-", "go"], [388, 0, 0, "-", "gpcrdb"], [390, 0, 0, "-", "graphviz"], [392, 0, 0, "-", "guide2pharma"], [396, 0, 0, "-", "havugimana"], [399, 0, 0, "-", "hgnc"], [401, 0, 0, "-", "hippie"], [403, 0, 0, "-", "homologene"], [407, 0, 0, "-", "hpmr"], [413, 0, 0, "-", "hpo"], [418, 0, 0, "-", "hprd"], [423, 0, 0, "-", "htri"], [425, 0, 0, "-", "humancellmap"], [427, 0, 0, "-", "humap"], [430, 0, 0, "-", "huri"], [443, 0, 0, "-", "i3d"], [445, 0, 0, "-", "icellnet"], [450, 0, 0, "-", "ielm"], [453, 0, 0, "-", "imweb"], [456, 0, 0, "-", "innatedb"], [458, 0, 0, "-", "instruct"], [461, 0, 0, "-", "intact"], [463, 0, 0, "-", "integrins"], [465, 0, 0, "-", "interpro"], [470, 0, 0, "-", "intogen"], [472, 0, 0, "-", "ipi"], [474, 0, 0, "-", "iptmnet"], [477, 0, 0, "-", "italk"], [481, 0, 0, "-", "kea"], [484, 0, 0, "-", "kegg"], [494, 0, 0, "-", "kegg_api"], [511, 0, 0, "-", "kinasedotcom"], [513, 0, 0, "-", "kirouac2010"], [515, 0, 0, "-", "lambert2018"], [518, 0, 0, "-", "laudanna"], [521, 0, 0, "-", "li2012"], [526, 0, 0, "-", "lincs"], [528, 0, 0, "-", "lmpid"], [532, 0, 0, "-", "lncdisease"], [534, 0, 0, "-", "lncrnadb"], [536, 0, 0, "-", "locate"], [538, 0, 0, "-", "lrdb"], [542, 0, 0, "-", "macrophage"], [544, 0, 0, "-", "main"], [545, 0, 0, "-", "matrisome"], [547, 0, 0, "-", "matrixdb"], [553, 0, 0, "-", "mcam"], [555, 0, 0, "-", "membranome"], [557, 0, 0, "-", "mimp"], [561, 0, 0, "-", "mir2disease"], [563, 0, 0, "-", "mirbase"], [571, 0, 0, "-", "mirdeathdb"], [573, 0, 0, "-", "mirecords"], [575, 0, 0, "-", "mirtarbase"], [577, 0, 0, "-", "mitab"], [580, 0, 0, "-", "mppi"], [582, 0, 0, "-", "ncrdeathdb"], [584, 0, 0, "-", "negatome"], [586, 0, 0, "-", "netbiol"], [589, 0, 0, "-", "netpath"], [593, 0, 0, "-", "oma"], [595, 0, 0, "-", "ontology"], [598, 0, 0, "-", "opm"], [600, 0, 0, "-", "oreganno"], [603, 0, 0, "-", "panglaodb"], [606, 0, 0, "-", "pathophenodb"], [609, 0, 0, "-", "pathwaycommons"], [626, 0, 0, "-", "pazar"], [628, 0, 0, "-", "pdb"], [632, 0, 0, "-", "pdzbase"], [634, 0, 0, "-", "pepcyber"], [637, 0, 0, "-", "pfam"], [642, 0, 0, "-", "pharos"], [651, 0, 0, "-", "phobius"], [653, 0, 0, "-", "phosphatome"], [655, 0, 0, "-", "phosphoelm"], [659, 0, 0, "-", "phosphonetworks"], [662, 0, 0, "-", "phosphopoint"], [665, 0, 0, "-", "phosphosite"], [678, 0, 0, "-", "pisa"], [682, 0, 0, "-", "pro"], [685, 0, 0, "-", "progeny"], [688, 0, 0, "-", "proteinatlas"], [693, 0, 0, "-", "proteins"], [695, 0, 0, "-", "protmapper"], [699, 0, 0, "-", "pubchem"], [701, 0, 0, "-", "pubmed"], [708, 0, 0, "-", "ramilowski2015"], [711, 0, 0, "-", "rdata"], [712, 0, 0, "-", "reaction"], [732, 0, 0, "-", "scconnect"], [736, 0, 0, "-", "science"], [738, 0, 0, "-", "signalink"], [743, 0, 0, "-", "signor"], [750, 0, 0, "-", "spike"], [753, 0, 0, "-", "stitch"], [756, 0, 0, "-", "string"], [761, 0, 0, "-", "surfaceome"], [763, 0, 0, "-", "switches_elm"], [765, 0, 0, "-", "talklr"], [769, 0, 0, "-", "tcdb"], [773, 0, 0, "-", "tfcensus"], [775, 0, 0, "-", "threedcomplex"], [781, 0, 0, "-", "threedid"], [786, 0, 0, "-", "topdb"], [788, 0, 0, "-", "transmir"], [790, 0, 0, "-", "trip"], [797, 0, 0, "-", "trrust"], [804, 0, 0, "-", "unichem"], [809, 0, 0, "-", "uniprot"], [840, 0, 0, "-", "wang"], [845, 0, 0, "-", "wojtowicz2020"], [848, 0, 0, "-", "zhong2015"]], "pypath.inputs.abs": [[155, 3, 1, "", "abs_interactions"]], "pypath.inputs.acsn": [[157, 3, 1, "", "acsn_interactions"], [158, 3, 1, "", "acsn_interactions_sif"]], "pypath.inputs.adhesome": [[160, 3, 1, "", "adhesome_annotations"], [161, 3, 1, "", "adhesome_interactions"]], "pypath.inputs.almen2009": [[163, 3, 1, "", "almen2009_annotations"]], "pypath.inputs.baccin2019": [[165, 3, 1, "", "baccin2019_annotations"], [166, 3, 1, "", "baccin2019_interactions"]], "pypath.inputs.biogps": [[168, 1, 1, "", "BiogpsDataset"], [169, 3, 1, "", "biogps_annotations"], [170, 3, 1, "", "biogps_datasets"], [171, 3, 1, "", "biogps_download"], [172, 3, 1, "", "biogps_download_all"]], "pypath.inputs.biogps.BiogpsDataset": [[168, 2, 1, "", "__init__"], [168, 2, 1, "", "count"], [168, 2, 1, "", "index"], [168, 4, 1, "", "label"], [168, 4, 1, "", "organism"], [168, 4, 1, "", "url"]], "pypath.inputs.biogrid": [[174, 3, 1, "", "biogrid_all_interactions"], [175, 3, 1, "", "biogrid_interactions"]], "pypath.inputs.biomart": [[177, 3, 1, "", "biomart_homology"], [178, 3, 1, "", "biomart_microarray"], [179, 3, 1, "", "biomart_microarray_types"], [180, 3, 1, "", "biomart_microarrays"], [181, 3, 1, "", "biomart_query"]], "pypath.inputs.biomodels": [[183, 3, 1, "", "download_single_model"], [184, 3, 1, "", "get_all_models"], [185, 3, 1, "", "get_biomodels"], [186, 3, 1, "", "get_biomodels_req"], [187, 3, 1, "", "get_single_model"]], "pypath.inputs.ca1": [[189, 3, 1, "", "ca1_interactions"]], "pypath.inputs.cancercellmap": [[191, 3, 1, "", "ccmap_interactions"]], "pypath.inputs.cancerdrugsdb": [[193, 3, 1, "", "cancerdrugsdb_annotations"], [194, 3, 1, "", "cancerdrugsdb_download"], [195, 3, 1, "", "cancerdrugsdb_interactions"]], "pypath.inputs.cancersea": [[197, 3, 1, "", "cancersea_annotations"]], "pypath.inputs.cell": [[199, 3, 1, "", "cell_supplementary"]], "pypath.inputs.cellcall": [[201, 3, 1, "", "cellcall_annotations"], [202, 3, 1, "", "cellcall_download"], [203, 3, 1, "", "cellcall_download_all"], [204, 3, 1, "", "cellcall_interactions"]], "pypath.inputs.cellcellinteractions": [[206, 3, 1, "", "cellcellinteractions_annotations"]], "pypath.inputs.cellchatdb": [[208, 3, 1, "", "cellchatdb_annotations"], [209, 3, 1, "", "cellchatdb_cofactors"], [210, 3, 1, "", "cellchatdb_complexes"], [211, 3, 1, "", "cellchatdb_download"], [212, 3, 1, "", "cellchatdb_interactions"]], "pypath.inputs.cellinker": [[214, 1, 1, "", "CellinkerInteraction"], [215, 3, 1, "", "cellinker_annotations"], [216, 3, 1, "", "cellinker_complex_annotations"], [217, 3, 1, "", "cellinker_complexes"], [218, 3, 1, "", "cellinker_complexes_raw"], [219, 3, 1, "", "cellinker_lr_interactions"], [220, 3, 1, "", "cellinker_lr_interactions_raw"], [221, 3, 1, "", "cellinker_protein_annotations"], [222, 3, 1, "", "cellinker_smol_interactions"], [223, 3, 1, "", "cellinker_smol_interactions_raw"], [224, 3, 1, "", "components_to_complex"]], "pypath.inputs.cellinker.CellinkerInteraction": [[214, 2, 1, "", "__init__"], [214, 2, 1, "", "count"], [214, 2, 1, "", "index"], [214, 4, 1, "", "ligand"], [214, 4, 1, "", "ligand_location"], [214, 4, 1, "", "pmids"], [214, 4, 1, "", "receptor"], [214, 4, 1, "", "receptor_location"], [214, 4, 1, "", "resources"], [214, 4, 1, "", "type"]], "pypath.inputs.cellphonedb": [[226, 1, 1, "", "CellPhoneDBAnnotation"], [227, 3, 1, "", "cellphonedb_complex_annotations"], [228, 3, 1, "", "cellphonedb_complexes"], [229, 3, 1, "", "cellphonedb_interactions"], [230, 3, 1, "", "cellphonedb_ligands_receptors"], [231, 3, 1, "", "cellphonedb_protein_annotations"]], "pypath.inputs.cellphonedb.CellPhoneDBAnnotation": [[226, 2, 1, "", "__init__"], [226, 2, 1, "", "count"], [226, 2, 1, "", "index"], [226, 4, 1, "", "integrin"], [226, 4, 1, "", "peripheral"], [226, 4, 1, "", "receptor"], [226, 4, 1, "", "receptor_class"], [226, 4, 1, "", "secreted"], [226, 4, 1, "", "secreted_class"], [226, 4, 1, "", "transmembrane"]], "pypath.inputs.celltalkdb": [[233, 3, 1, "", "celltalkdb_annotations"], [234, 3, 1, "", "celltalkdb_download"], [235, 3, 1, "", "celltalkdb_interactions"]], "pypath.inputs.celltypist": [[237, 3, 1, "", "celltypist_annotations"]], "pypath.inputs.chembl": [[239, 3, 1, "", "chembl_activities"], [240, 3, 1, "", "chembl_assays"], [241, 3, 1, "", "chembl_documents"], [242, 3, 1, "", "chembl_drug_indications"], [243, 3, 1, "", "chembl_molecules"], [244, 3, 1, "", "chembl_targets"]], "pypath.inputs.clinvar": [[246, 3, 1, "", "clinvar_citations"], [247, 3, 1, "", "clinvar_raw"]], "pypath.inputs.common": [[249, 3, 1, "", "csv_sep_change"], [250, 3, 1, "", "glom_fields"], [251, 3, 1, "", "json_extract"], [252, 3, 1, "", "json_read"], [253, 3, 1, "", "read_table"], [254, 3, 1, "", "read_xls"]], "pypath.inputs.compleat": [[256, 3, 1, "", "compleat_complexes"], [257, 3, 1, "", "compleat_raw"]], "pypath.inputs.complexportal": [[259, 3, 1, "", "complexportal_complexes"]], "pypath.inputs.comppi": [[261, 3, 1, "", "comppi_interaction_locations"], [262, 3, 1, "", "comppi_locations"]], "pypath.inputs.connectomedb": [[264, 3, 1, "", "connectomedb_annotations"], [265, 3, 1, "", "connectomedb_interactions"]], "pypath.inputs.corum": [[267, 3, 1, "", "corum_complexes"]], "pypath.inputs.cosmic": [[269, 3, 1, "", "cancer_gene_census_annotations"]], "pypath.inputs.cpad": [[271, 3, 1, "", "cpad_annotations"], [272, 3, 1, "", "cpad_pathway_cancer"], [273, 3, 1, "", "get_cpad"]], "pypath.inputs.cpdb": [[275, 3, 1, "", "cpdb_interactions"], [276, 3, 1, "", "cpdb_interactions_ltp"]], "pypath.inputs.credentials": [[278, 3, 1, "", "credentials"]], "pypath.inputs.csa": [[280, 3, 1, "", "get_csa"]], "pypath.inputs.cspa": [[282, 3, 1, "", "cspa_annotations"], [283, 3, 1, "", "cspa_cell_type_annotations"], [284, 3, 1, "", "cspa_cell_types"]], "pypath.inputs.ctdbase": [[286, 3, 1, "", "ctdbase_relations"], [287, 3, 1, "", "ctdbase_vocabulary"]], "pypath.inputs.cytosig": [[289, 3, 1, "", "cytosig_annotations"], [290, 3, 1, "", "cytosig_df"]], "pypath.inputs.dbptm": [[292, 3, 1, "", "dbptm_enzyme_substrate"], [293, 3, 1, "", "dbptm_enzyme_substrate_old"], [294, 3, 1, "", "dbptm_interactions"]], "pypath.inputs.deathdomain": [[296, 3, 1, "", "deathdomain_interactions"], [297, 3, 1, "", "deathdomain_interactions_rescued"]], "pypath.inputs.depod": [[299, 3, 1, "", "depod_enzyme_substrate"], [300, 3, 1, "", "depod_interactions"]], "pypath.inputs.dgidb": [[302, 3, 1, "", "dgidb_annotations"], [303, 3, 1, "", "dgidb_interactions"], [304, 3, 1, "", "get_dgidb_old"]], "pypath.inputs.dip": [[306, 3, 1, "", "dip_interactions"], [307, 3, 1, "", "dip_login"]], "pypath.inputs.disgenet": [[309, 1, 1, "", "DisgenetApi"], [310, 3, 1, "", "disease_id_mappings"], [311, 3, 1, "", "disgenet_annotations"], [312, 3, 1, "", "variant_gene_mappings"]], "pypath.inputs.disgenet.DisgenetApi": [[309, 2, 1, "", "__init__"], [309, 2, 1, "", "authenticate"], [309, 2, 1, "", "get_ddas_that_share_genes"], [309, 2, 1, "", "get_ddas_that_share_variants"], [309, 2, 1, "", "get_gdas_by_diseases"], [309, 2, 1, "", "get_gdas_by_genes"], [309, 2, 1, "", "get_gdas_by_source"], [309, 2, 1, "", "get_gdas_by_uniprots"], [309, 2, 1, "", "get_vdas_by_diseases"], [309, 2, 1, "", "get_vdas_by_genes"], [309, 2, 1, "", "get_vdas_by_source"], [309, 2, 1, "", "get_vdas_by_variants"]], "pypath.inputs.domino": [[314, 3, 1, "", "domino_ddi"], [315, 3, 1, "", "domino_enzsub"], [316, 3, 1, "", "domino_interactions"], [317, 3, 1, "", "get_domino"]], "pypath.inputs.dorothea": [[319, 1, 1, "", "DorotheaInteraction"], [320, 3, 1, "", "dorothea_full_raw"], [321, 3, 1, "", "dorothea_interactions"], [322, 3, 1, "", "dorothea_interactions_old"], [323, 3, 1, "", "dorothea_old_csv"], [324, 3, 1, "", "dorothea_rda_raw"], [325, 3, 1, "", "get_dorothea_old"], [326, 3, 1, "", "get_tfregulons"], [327, 3, 1, "", "tfregulons_interactions"], [328, 3, 1, "", "tfregulons_interactions_old"]], "pypath.inputs.dorothea.DorotheaInteraction": [[319, 2, 1, "", "__init__"], [319, 4, 1, "", "all_sources"], [319, 4, 1, "", "chipseq"], [319, 4, 1, "", "chipseq_sources"], [319, 4, 1, "", "coexp"], [319, 4, 1, "", "coexp_sources"], [319, 2, 1, "", "count"], [319, 4, 1, "", "curated"], [319, 4, 1, "", "curated_sources"], [319, 4, 1, "", "effect"], [319, 2, 1, "", "index"], [319, 4, 1, "", "kegg_pathways"], [319, 4, 1, "", "level"], [319, 4, 1, "", "predicted"], [319, 4, 1, "", "predicted_sources"], [319, 4, 1, "", "pubmed"], [319, 4, 1, "", "target"], [319, 4, 1, "", "tf"]], "pypath.inputs.drugbank": [[330, 1, 1, "", "DrugbankFull"], [331, 3, 1, "", "drugbank_annotations"], [332, 3, 1, "", "drugbank_drugs"], [333, 3, 1, "", "drugbank_interactions"], [334, 3, 1, "", "drugbank_mapping"], [335, 3, 1, "", "drugbank_raw_interactions"]], "pypath.inputs.drugbank.DrugbankFull": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "drugbank_drugs_full"], [330, 2, 1, "", "drugbank_external_ids_full"], [330, 2, 1, "", "drugbank_targets_full"]], "pypath.inputs.drugcentral": [[337, 3, 1, "", "drugcentral_drugs"], [338, 3, 1, "", "drugcentral_interactions"], [339, 3, 1, "", "drugcentral_mapping"]], "pypath.inputs.ebi": [[341, 3, 1, "", "ebi_rest"]], "pypath.inputs.elm": [[343, 3, 1, "", "elm_classes"], [344, 3, 1, "", "elm_domains"], [345, 3, 1, "", "elm_instances"], [346, 3, 1, "", "elm_interactions"]], "pypath.inputs.embopress": [[348, 3, 1, "", "embopress_supplementary"]], "pypath.inputs.embrace": [[350, 3, 1, "", "embrace_annotations"], [351, 3, 1, "", "embrace_interactions"], [352, 3, 1, "", "embrace_raw"], [353, 3, 1, "", "embrace_translated"]], "pypath.inputs.encode": [[355, 3, 1, "", "encode_tf_mirna_interactions"]], "pypath.inputs.ensembl": [[357, 3, 1, "", "ensembl_organisms"]], "pypath.inputs.exocarta": [[359, 3, 1, "", "get_exocarta"], [360, 3, 1, "", "get_vesiclepedia"]], "pypath.inputs.genecards": [[362, 3, 1, "", "genecards_datasheet"], [363, 3, 1, "", "genecards_soup"], [364, 3, 1, "", "genecards_summaries"]], "pypath.inputs.go": [[367, 3, 1, "", "get_go_desc"], [368, 3, 1, "", "get_go_quick"], [369, 3, 1, "", "get_goslim"], [370, 3, 1, "", "go_ancestors"], [371, 3, 1, "", "go_ancestors_goose"], [372, 3, 1, "", "go_ancestors_quickgo"], [373, 3, 1, "", "go_annotations"], [374, 3, 1, "", "go_annotations_all"], [375, 3, 1, "", "go_annotations_goa"], [376, 3, 1, "", "go_annotations_goose"], [377, 3, 1, "", "go_annotations_quickgo"], [378, 3, 1, "", "go_annotations_solr"], [379, 3, 1, "", "go_annotations_uniprot"], [380, 3, 1, "", "go_descendants"], [381, 3, 1, "", "go_descendants_goose"], [382, 3, 1, "", "go_descendants_quickgo"], [383, 3, 1, "", "go_descendants_to_ancestors"], [384, 3, 1, "", "go_terms"], [385, 3, 1, "", "go_terms_goose"], [386, 3, 1, "", "go_terms_quickgo"], [387, 3, 1, "", "go_terms_solr"]], "pypath.inputs.gpcrdb": [[389, 3, 1, "", "gpcrdb_annotations"]], "pypath.inputs.graphviz": [[391, 3, 1, "", "graphviz_attrs"]], "pypath.inputs.guide2pharma": [[393, 3, 1, "", "guide2pharma_complexes"], [394, 3, 1, "", "guide2pharma_download"], [395, 3, 1, "", "guide2pharma_interactions"]], "pypath.inputs.havugimana": [[397, 3, 1, "", "get_havugimana"], [398, 3, 1, "", "havugimana_complexes"]], "pypath.inputs.hgnc": [[400, 3, 1, "", "hgnc_genegroups"]], "pypath.inputs.hippie": [[402, 3, 1, "", "hippie_interactions"]], "pypath.inputs.homologene": [[404, 3, 1, "", "get_homologene"], [405, 3, 1, "", "homologene_dict"], [406, 3, 1, "", "homologene_uniprot_dict"]], "pypath.inputs.hpmr": [[408, 1, 1, "", "HpmrInteraction"], [409, 3, 1, "", "get_hpmr"], [410, 3, 1, "", "hpmr_annotations"], [411, 3, 1, "", "hpmr_complexes"], [412, 3, 1, "", "hpmr_interactions"]], "pypath.inputs.hpmr.HpmrInteraction": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "count"], [408, 2, 1, "", "index"], [408, 4, 1, "", "partner"], [408, 4, 1, "", "partner_role"], [408, 4, 1, "", "receptor"], [408, 4, 1, "", "references"], [408, 4, 1, "", "unambiguous"]], "pypath.inputs.hpo": [[414, 3, 1, "", "hpo_annotations"], [415, 3, 1, "", "hpo_diseases"], [416, 3, 1, "", "hpo_ontology"], [417, 3, 1, "", "hpo_terms"]], "pypath.inputs.hprd": [[419, 3, 1, "", "get_hprd"], [420, 3, 1, "", "hprd_enzyme_substrate"], [421, 3, 1, "", "hprd_interactions"], [422, 3, 1, "", "hprd_interactions_htp"]], "pypath.inputs.htri": [[424, 3, 1, "", "htri_interactions"]], "pypath.inputs.humancellmap": [[426, 3, 1, "", "humancellmap_annotations"]], "pypath.inputs.humap": [[428, 3, 1, "", "humap2_complexes"], [429, 3, 1, "", "humap_complexes"]], "pypath.inputs.huri": [[431, 3, 1, "", "hi_i_interactions"], [432, 3, 1, "", "hi_ii_interactions"], [433, 3, 1, "", "hi_iii_old"], [434, 3, 1, "", "hi_union_interactions"], [435, 3, 1, "", "huri_interactions"], [436, 3, 1, "", "lit_bm_13_interactions"], [437, 3, 1, "", "lit_bm_17_interactions"], [438, 3, 1, "", "lit_bm_interactions"], [439, 3, 1, "", "rolland_hi_ii_14"], [440, 3, 1, "", "vidal_hi_iii_old"], [441, 3, 1, "", "yang2016_interactions"], [442, 3, 1, "", "yu2011_interactions"]], "pypath.inputs.i3d": [[444, 3, 1, "", "get_i3d"]], "pypath.inputs.icellnet": [[446, 1, 1, "", "IcellnetRecord"], [447, 3, 1, "", "icellnet_annotations"], [448, 3, 1, "", "icellnet_complexes"], [449, 3, 1, "", "icellnet_interactions"]], "pypath.inputs.icellnet.IcellnetRecord": [[446, 2, 1, "", "__init__"], [446, 4, 1, "", "classification"], [446, 2, 1, "", "count"], [446, 4, 1, "", "family"], [446, 2, 1, "", "index"], [446, 4, 1, "", "ligand"], [446, 4, 1, "", "receptor"], [446, 4, 1, "", "references"], [446, 4, 1, "", "resources"], [446, 4, 1, "", "subfamily"]], "pypath.inputs.ielm": [[451, 3, 1, "", "get_ielm"], [452, 3, 1, "", "get_ielm_huge"]], "pypath.inputs.imweb": [[454, 3, 1, "", "get_imweb"], [455, 3, 1, "", "get_imweb_req"]], "pypath.inputs.innatedb": [[457, 3, 1, "", "innatedb_interactions"]], "pypath.inputs.instruct": [[459, 3, 1, "", "get_instruct"], [460, 3, 1, "", "get_instruct_offsets"]], "pypath.inputs.intact": [[462, 3, 1, "", "intact_interactions"]], "pypath.inputs.integrins": [[464, 3, 1, "", "get_integrins"]], "pypath.inputs.interpro": [[466, 3, 1, "", "interpro2go_annotations"], [467, 3, 1, "", "interpro_annotations"], [468, 3, 1, "", "interpro_entries"], [469, 3, 1, "", "interpro_xrefs"]], "pypath.inputs.intogen": [[471, 3, 1, "", "intogen_annotations"]], "pypath.inputs.ipi": [[473, 3, 1, "", "ipi_uniprot"]], "pypath.inputs.iptmnet": [[475, 1, 1, "", "IptmnetInteraction"], [476, 3, 1, "", "iptmnet_interactions"]], "pypath.inputs.iptmnet.IptmnetInteraction": [[475, 2, 1, "", "__init__"], [475, 2, 1, "", "count"], [475, 4, 1, "", "enzyme"], [475, 4, 1, "", "enzyme_isoform"], [475, 2, 1, "", "index"], [475, 4, 1, "", "ptm_type"], [475, 4, 1, "", "references"], [475, 4, 1, "", "resaa"], [475, 4, 1, "", "resnum"], [475, 4, 1, "", "score"], [475, 4, 1, "", "substrate"], [475, 4, 1, "", "substrate_isoform"]], "pypath.inputs.italk": [[478, 3, 1, "", "italk_annotations"], [479, 3, 1, "", "italk_interactions"], [480, 3, 1, "", "italk_raw"]], "pypath.inputs.kea": [[482, 3, 1, "", "kea_enzyme_substrate"], [483, 3, 1, "", "kea_interactions"]], "pypath.inputs.kegg": [[485, 1, 1, "", "KeggPathway"], [486, 3, 1, "", "kegg_dbget"], [487, 3, 1, "", "kegg_interactions"], [488, 3, 1, "", "kegg_medicus"], [489, 3, 1, "", "kegg_medicus_complexes"], [490, 3, 1, "", "kegg_medicus_interactions"], [491, 3, 1, "", "kegg_pathway_annotations"], [492, 3, 1, "", "kegg_pathway_annotations_pathwaycommons"], [493, 3, 1, "", "kegg_pathways"]], "pypath.inputs.kegg.KeggPathway": [[485, 2, 1, "", "__init__"], [485, 2, 1, "", "count"], [485, 2, 1, "", "index"], [485, 4, 1, "", "pathway"]], "pypath.inputs.kegg_api": [[495, 3, 1, "", "disease_to_drug"], [496, 3, 1, "", "disease_to_gene"], [497, 3, 1, "", "disease_to_pathway"], [498, 3, 1, "", "drug_to_disease"], [499, 3, 1, "", "drug_to_drug"], [500, 3, 1, "", "drug_to_gene"], [501, 3, 1, "", "drug_to_pathway"], [502, 3, 1, "", "gene_to_disease"], [503, 3, 1, "", "gene_to_drug"], [504, 3, 1, "", "gene_to_pathway"], [505, 3, 1, "", "kegg_drug_to_chebi"], [506, 3, 1, "", "kegg_gene_to_ncbi_geneid"], [507, 3, 1, "", "kegg_gene_to_uniprot"], [508, 3, 1, "", "pathway_to_disease"], [509, 3, 1, "", "pathway_to_drug"], [510, 3, 1, "", "pathway_to_gene"]], "pypath.inputs.kinasedotcom": [[512, 3, 1, "", "kinasedotcom_annotations"]], "pypath.inputs.kirouac2010": [[514, 3, 1, "", "kirouac2010_interactions"]], "pypath.inputs.lambert2018": [[516, 3, 1, "", "lambert2018_annotations"], [517, 3, 1, "", "lambert2018_s1_raw"]], "pypath.inputs.laudanna": [[519, 3, 1, "", "laudanna_directions"], [520, 3, 1, "", "laudanna_effects"]], "pypath.inputs.li2012": [[522, 3, 1, "", "get_li2012"], [523, 3, 1, "", "li2012_dmi"], [524, 3, 1, "", "li2012_enzyme_substrate"], [525, 3, 1, "", "li2012_interactions"]], "pypath.inputs.lincs": [[527, 3, 1, "", "lincs_compounds"]], "pypath.inputs.lmpid": [[529, 3, 1, "", "lmpid_dmi"], [530, 3, 1, "", "lmpid_interactions"], [531, 3, 1, "", "load_lmpid"]], "pypath.inputs.lncdisease": [[533, 3, 1, "", "lncdisease_interactions"]], "pypath.inputs.lncrnadb": [[535, 3, 1, "", "lncrnadb_interactions"]], "pypath.inputs.locate": [[537, 3, 1, "", "locate_localizations"]], "pypath.inputs.lrdb": [[539, 1, 1, "", "LrdbAnnotation"], [540, 3, 1, "", "lrdb_annotations"], [541, 3, 1, "", "lrdb_interactions"]], "pypath.inputs.lrdb.LrdbAnnotation": [[539, 2, 1, "", "__init__"], [539, 4, 1, "", "cell_type"], [539, 2, 1, "", "count"], [539, 2, 1, "", "index"], [539, 4, 1, "", "references"], [539, 4, 1, "", "role"], [539, 4, 1, "", "sources"]], "pypath.inputs.macrophage": [[543, 3, 1, "", "macrophage_interactions"]], "pypath.inputs.matrisome": [[546, 3, 1, "", "matrisome_annotations"]], "pypath.inputs.matrixdb": [[548, 3, 1, "", "matrixdb_annotations"], [549, 3, 1, "", "matrixdb_ecm_proteins"], [550, 3, 1, "", "matrixdb_interactions"], [551, 3, 1, "", "matrixdb_membrane_proteins"], [552, 3, 1, "", "matrixdb_secreted_proteins"]], "pypath.inputs.mcam": [[554, 3, 1, "", "mcam_cell_adhesion_molecules"]], "pypath.inputs.membranome": [[556, 3, 1, "", "membranome_annotations"]], "pypath.inputs.mimp": [[558, 3, 1, "", "get_kinase_class"], [559, 3, 1, "", "mimp_enzyme_substrate"], [560, 3, 1, "", "mimp_interactions"]], "pypath.inputs.mir2disease": [[562, 3, 1, "", "mir2disease_interactions"]], "pypath.inputs.mirbase": [[564, 3, 1, "", "get_mirbase_aliases"], [565, 3, 1, "", "mirbase_ids"], [566, 3, 1, "", "mirbase_mature"], [567, 3, 1, "", "mirbase_mature_all"], [568, 3, 1, "", "mirbase_precursor"], [569, 3, 1, "", "mirbase_precursor_all"], [570, 3, 1, "", "mirbase_precursor_to_mature"]], "pypath.inputs.mirdeathdb": [[572, 3, 1, "", "mirdeathdb_interactions"]], "pypath.inputs.mirecords": [[574, 3, 1, "", "mirecords_interactions"]], "pypath.inputs.mirtarbase": [[576, 3, 1, "", "mirtarbase_interactions"]], "pypath.inputs.mitab": [[578, 3, 1, "", "mitab_field_list"], [579, 3, 1, "", "mitab_field_uniprot"]], "pypath.inputs.mppi": [[581, 3, 1, "", "mppi_interactions"]], "pypath.inputs.ncrdeathdb": [[583, 3, 1, "", "ncrdeathdb_interactions"]], "pypath.inputs.negatome": [[585, 3, 1, "", "negatome_interactions"]], "pypath.inputs.netbiol": [[587, 3, 1, "", "arn_interactions"], [588, 3, 1, "", "nrf2ome_interactions"]], "pypath.inputs.netpath": [[590, 3, 1, "", "netpath_interactions"], [591, 3, 1, "", "netpath_names"], [592, 3, 1, "", "netpath_pathway_annotations"]], "pypath.inputs.oma": [[594, 3, 1, "", "oma_orthologs"]], "pypath.inputs.ontology": [[596, 3, 1, "", "listof_ontologies"], [597, 3, 1, "", "ontology"]], "pypath.inputs.opm": [[599, 3, 1, "", "opm_annotations"]], "pypath.inputs.oreganno": [[601, 3, 1, "", "oreganno_interactions"], [602, 3, 1, "", "oreganno_raw"]], "pypath.inputs.panglaodb": [[604, 3, 1, "", "panglaodb_annotations"], [605, 3, 1, "", "panglaodb_raw"]], "pypath.inputs.pathophenodb": [[607, 1, 1, "", "DiseasePathogen"], [608, 3, 1, "", "disease_pathogen_interactions"]], "pypath.inputs.pathophenodb.DiseasePathogen": [[607, 2, 1, "", "__init__"], [607, 2, 1, "", "count"], [607, 4, 1, "", "disease"], [607, 4, 1, "", "disease_id"], [607, 4, 1, "", "evidence"], [607, 2, 1, "", "index"], [607, 4, 1, "", "pathogen"], [607, 4, 1, "", "pathogen_taxid"]], "pypath.inputs.pathwaycommons": [[610, 1, 1, "", "PathwayCommonsInteraction"], [611, 1, 1, "", "PathwayCommonsResource"], [612, 3, 1, "", "pathwaycommons_bind_interactions"], [613, 3, 1, "", "pathwaycommons_biogrid_interactions"], [614, 3, 1, "", "pathwaycommons_corum_interactions"], [615, 3, 1, "", "pathwaycommons_dip_interactions"], [616, 3, 1, "", "pathwaycommons_hprd_interactions"], [617, 3, 1, "", "pathwaycommons_inoh_interactions"], [618, 3, 1, "", "pathwaycommons_intact_interactions"], [619, 3, 1, "", "pathwaycommons_interactions"], [620, 3, 1, "", "pathwaycommons_kegg_interactions"], [621, 3, 1, "", "pathwaycommons_netpath_interactions"], [622, 3, 1, "", "pathwaycommons_panther_interactions"], [623, 3, 1, "", "pathwaycommons_phosphosite_interactions"], [624, 3, 1, "", "pathwaycommons_reactome_interactions"], [625, 3, 1, "", "pathwaycommons_wikipathways_interactions"]], "pypath.inputs.pathwaycommons.PathwayCommonsInteraction": [[610, 2, 1, "", "__init__"], [610, 2, 1, "", "count"], [610, 4, 1, "", "id_a"], [610, 4, 1, "", "id_b"], [610, 2, 1, "", "index"], [610, 4, 1, "", "interaction_type"], [610, 4, 1, "", "resource"]], "pypath.inputs.pathwaycommons.PathwayCommonsResource": [[611, 2, 1, "", "__init__"], [611, 2, 1, "", "count"], [611, 2, 1, "", "index"], [611, 4, 1, "", "name"], [611, 4, 1, "", "pc_label"], [611, 4, 1, "", "version"]], "pypath.inputs.pazar": [[627, 3, 1, "", "pazar_interactions"]], "pypath.inputs.pdb": [[629, 3, 1, "", "pdb_chains"], [630, 3, 1, "", "pdb_complexes"], [631, 3, 1, "", "pdb_uniprot"]], "pypath.inputs.pdzbase": [[633, 3, 1, "", "pdzbase_interactions"]], "pypath.inputs.pepcyber": [[635, 3, 1, "", "pepcyber_details"], [636, 3, 1, "", "pepcyber_interactions"]], "pypath.inputs.pfam": [[638, 3, 1, "", "pfam_names"], [639, 3, 1, "", "pfam_pdb"], [640, 3, 1, "", "pfam_regions"], [641, 3, 1, "", "pfam_uniprot"]], "pypath.inputs.pharos": [[643, 3, 1, "", "pharos_diseases"], [644, 3, 1, "", "pharos_expression"], [645, 3, 1, "", "pharos_general"], [646, 3, 1, "", "pharos_gtex"], [647, 3, 1, "", "pharos_ligands"], [648, 3, 1, "", "pharos_orthologs"], [649, 3, 1, "", "pharos_targets"], [650, 3, 1, "", "pharos_xrefs"]], "pypath.inputs.phobius": [[652, 3, 1, "", "phobius_annotations"]], "pypath.inputs.phosphatome": [[654, 3, 1, "", "phosphatome_annotations"]], "pypath.inputs.phosphoelm": [[656, 3, 1, "", "phosphoelm_enzyme_substrate"], [657, 3, 1, "", "phosphoelm_interactions"], [658, 3, 1, "", "phosphoelm_kinases"]], "pypath.inputs.phosphonetworks": [[660, 3, 1, "", "phosphonetworks_enzyme_substrate"], [661, 3, 1, "", "phosphonetworks_interactions"]], "pypath.inputs.phosphopoint": [[663, 3, 1, "", "phosphopoint_directions"], [664, 3, 1, "", "phosphopoint_interactions"]], "pypath.inputs.phosphosite": [[666, 3, 1, "", "phosphosite_directions"], [667, 3, 1, "", "phosphosite_enzyme_substrate"], [668, 3, 1, "", "phosphosite_interactions"], [669, 3, 1, "", "phosphosite_interactions_all"], [670, 3, 1, "", "phosphosite_interactions_curated"], [671, 3, 1, "", "phosphosite_interactions_new"], [672, 3, 1, "", "phosphosite_interactions_noref"], [673, 3, 1, "", "phosphosite_ptm_orthology"], [674, 3, 1, "", "phosphosite_ptms"], [675, 3, 1, "", "phosphosite_regsites"], [676, 3, 1, "", "phosphosite_regsites_one_organism"], [677, 3, 1, "", "regsites_tab"]], "pypath.inputs.pisa": [[679, 1, 1, "", "PisaBond"], [680, 3, 1, "", "pisa_bonds"], [681, 3, 1, "", "pisa_interfaces"]], "pypath.inputs.pisa.PisaBond": [[679, 2, 1, "", "__init__"], [679, 4, 1, "", "chain_1"], [679, 4, 1, "", "chain_2"], [679, 2, 1, "", "count"], [679, 2, 1, "", "index"], [679, 4, 1, "", "residue_1"], [679, 4, 1, "", "residue_2"], [679, 4, 1, "", "seqnum_1"], [679, 4, 1, "", "seqnum_2"], [679, 4, 1, "", "uniprot_1"], [679, 4, 1, "", "uniprot_2"]], "pypath.inputs.pro": [[683, 3, 1, "", "get_pro"], [684, 3, 1, "", "pro_mapping"]], "pypath.inputs.progeny": [[686, 3, 1, "", "progeny_annotations"], [687, 3, 1, "", "progeny_raw"]], "pypath.inputs.proteinatlas": [[689, 3, 1, "", "get_proteinatlas"], [690, 3, 1, "", "proteinatlas_annotations"], [691, 3, 1, "", "proteinatlas_secretome_annotations"], [692, 3, 1, "", "proteinatlas_subcellular_annotations"]], "pypath.inputs.proteins": [[694, 3, 1, "", "variants"]], "pypath.inputs.protmapper": [[696, 3, 1, "", "get_protmapper"], [697, 3, 1, "", "protmapper_enzyme_substrate"], [698, 3, 1, "", "protmapper_interactions"]], "pypath.inputs.pubchem": [[700, 3, 1, "", "pubchem_mapping"]], "pypath.inputs.pubmed": [[702, 3, 1, "", "get_pmid"], [703, 3, 1, "", "get_pubmeds"], [704, 3, 1, "", "only_pmids"], [705, 3, 1, "", "open_pubmed"], [706, 3, 1, "", "pmids_dict"], [707, 3, 1, "", "pmids_list"]], "pypath.inputs.ramilowski2015": [[709, 3, 1, "", "ramilowski_interactions"], [710, 3, 1, "", "ramilowski_locations"]], "pypath.inputs.reaction": [[713, 3, 1, "", "acsn_biopax"], [714, 3, 1, "", "acsn_interactions_2"], [715, 3, 1, "", "get_acsn_effects"], [716, 3, 1, "", "get_controls"], [717, 3, 1, "", "get_interactions"], [718, 3, 1, "", "get_reactions"], [719, 3, 1, "", "get_soup"], [720, 3, 1, "", "panther_biopax"], [721, 3, 1, "", "panther_interactions"], [722, 3, 1, "", "pid_biopax"], [723, 3, 1, "", "pid_interactions"], [724, 3, 1, "", "process_complex"], [725, 3, 1, "", "process_controls"], [726, 3, 1, "", "process_reactions"], [727, 3, 1, "", "reactions_biopax"], [728, 3, 1, "", "reactome_biopax"], [729, 3, 1, "", "reactome_bs"], [730, 3, 1, "", "reactome_interactions"], [731, 3, 1, "", "reactome_sbml"]], "pypath.inputs.scconnect": [[733, 3, 1, "", "scconnect_annotations"], [734, 3, 1, "", "scconnect_complexes"], [735, 3, 1, "", "scconnect_interactions"]], "pypath.inputs.science": [[737, 3, 1, "", "science_download"]], "pypath.inputs.signalink": [[739, 3, 1, "", "signalink_annotations"], [740, 3, 1, "", "signalink_function_annotations"], [741, 3, 1, "", "signalink_interactions"], [742, 3, 1, "", "signalink_pathway_annotations"]], "pypath.inputs.signor": [[744, 3, 1, "", "signor_complexes"], [745, 3, 1, "", "signor_enzyme_substrate"], [746, 3, 1, "", "signor_interactions"], [747, 3, 1, "", "signor_pathway_annotations"], [748, 3, 1, "", "signor_pathways"], [749, 3, 1, "", "signor_protein_families"]], "pypath.inputs.spike": [[751, 3, 1, "", "spike_complexes"], [752, 3, 1, "", "spike_interactions"]], "pypath.inputs.stitch": [[754, 3, 1, "", "stitch_actions_interactions"], [755, 3, 1, "", "stitch_links_interactions"]], "pypath.inputs.string": [[757, 3, 1, "", "string_effects"], [758, 3, 1, "", "string_links_interactions"], [759, 3, 1, "", "string_physical_interactions"], [760, 3, 1, "", "string_species"]], "pypath.inputs.surfaceome": [[762, 3, 1, "", "surfaceome_annotations"]], "pypath.inputs.switches_elm": [[764, 3, 1, "", "get_switches_elm"]], "pypath.inputs.talklr": [[766, 3, 1, "", "talklr_annotations"], [767, 3, 1, "", "talklr_interactions"], [768, 3, 1, "", "talklr_raw"]], "pypath.inputs.tcdb": [[770, 3, 1, "", "tcdb_annotations"], [771, 3, 1, "", "tcdb_classes"], [772, 3, 1, "", "tcdb_families"]], "pypath.inputs.tfcensus": [[774, 3, 1, "", "tfcensus_annotations"]], "pypath.inputs.threedcomplex": [[776, 3, 1, "", "threedcomplex_chains"], [777, 3, 1, "", "threedcomplex_complexes"], [778, 3, 1, "", "threedcomplex_contacts"], [779, 3, 1, "", "threedcomplex_ddi"], [780, 3, 1, "", "threedcomplex_nresidues"]], "pypath.inputs.threedid": [[782, 3, 1, "", "get_3did"], [783, 3, 1, "", "get_3did_ddi"], [784, 3, 1, "", "get_3did_dmi"], [785, 3, 1, "", "process_3did_dmi"]], "pypath.inputs.topdb": [[787, 3, 1, "", "topdb_annotations"]], "pypath.inputs.transmir": [[789, 3, 1, "", "transmir_interactions"]], "pypath.inputs.trip": [[791, 3, 1, "", "take_a_trip"], [792, 3, 1, "", "trip_find_uniprot"], [793, 3, 1, "", "trip_get_uniprot"], [794, 3, 1, "", "trip_interactions"], [795, 3, 1, "", "trip_process"], [796, 3, 1, "", "trip_process_table"]], "pypath.inputs.trrust": [[798, 3, 1, "", "scrape_human"], [799, 3, 1, "", "scrape_mouse"], [800, 3, 1, "", "trrust_general"], [801, 3, 1, "", "trrust_human"], [802, 3, 1, "", "trrust_mouse"], [803, 3, 1, "", "trrust_scraping"]], "pypath.inputs.unichem": [[805, 3, 1, "", "info"], [806, 3, 1, "", "unichem_info"], [807, 3, 1, "", "unichem_mapping"], [808, 3, 1, "", "unichem_sources"]], "pypath.inputs.uniprot": [[810, 1, 1, "", "Taxon"], [811, 1, 1, "", "UniprotRecordHistory"], [812, 3, 1, "", "all_swissprots"], [813, 3, 1, "", "all_trembls"], [814, 3, 1, "", "all_uniprots"], [815, 3, 1, "", "deleted_uniprot_genesymbol"], [816, 3, 1, "", "get_db"], [817, 3, 1, "", "get_uniprot_sec"], [818, 3, 1, "", "init_db"], [819, 3, 1, "", "is_swissprot"], [820, 3, 1, "", "is_trembl"], [821, 3, 1, "", "is_uniprot"], [822, 3, 1, "", "protein_datasheet"], [823, 3, 1, "", "swissprot_deleted"], [824, 3, 1, "", "trembl_deleted"], [825, 3, 1, "", "uniprot_data"], [826, 3, 1, "", "uniprot_deleted"], [827, 3, 1, "", "uniprot_families"], [828, 3, 1, "", "uniprot_history"], [829, 3, 1, "", "uniprot_history_recent_datasheet"], [830, 3, 1, "", "uniprot_keywords"], [831, 3, 1, "", "uniprot_locations"], [832, 3, 1, "", "uniprot_ncbi_taxids"], [833, 3, 1, "", "uniprot_ncbi_taxids_2"], [834, 3, 1, "", "uniprot_preprocess"], [835, 3, 1, "", "uniprot_recent_version"], [836, 3, 1, "", "uniprot_taxonomy"], [837, 3, 1, "", "uniprot_tissues"], [838, 3, 1, "", "uniprot_topology"], [839, 3, 1, "", "valid_uniprot"]], "pypath.inputs.uniprot.Taxon": [[810, 2, 1, "", "__init__"], [810, 2, 1, "", "count"], [810, 4, 1, "", "english"], [810, 2, 1, "", "index"], [810, 4, 1, "", "latin"], [810, 4, 1, "", "latin_synonym"], [810, 4, 1, "", "ncbi_id"]], "pypath.inputs.uniprot.UniprotRecordHistory": [[811, 2, 1, "", "__init__"], [811, 2, 1, "", "count"], [811, 4, 1, "", "database"], [811, 4, 1, "", "date"], [811, 4, 1, "", "entry_name"], [811, 4, 1, "", "entry_version"], [811, 2, 1, "", "index"], [811, 4, 1, "", "number"], [811, 4, 1, "", "replaced_by"], [811, 4, 1, "", "replaces"], [811, 4, 1, "", "sequence_version"]], "pypath.inputs.wang": [[841, 3, 1, "", "cui_interactions"], [842, 3, 1, "", "hsn_interactions"], [843, 3, 1, "", "wang_annotations"], [844, 3, 1, "", "wang_interactions"]], "pypath.inputs.wojtowicz2020": [[846, 3, 1, "", "wojtowicz2020_interactions"], [847, 3, 1, "", "wojtowicz2020_raw"]], "pypath.inputs.zhong2015": [[849, 3, 1, "", "zhong2015_annotations"]], "pypath.internals": [[851, 0, 0, "-", "annot_formats"], [856, 0, 0, "-", "input_formats"], [868, 0, 0, "-", "intera"], [878, 0, 0, "-", "license"], [884, 0, 0, "-", "maps"], [885, 0, 0, "-", "refs"], [888, 0, 0, "-", "resource"]], "pypath.internals.annot_formats": [[852, 1, 1, "", "AnnotDef"], [853, 1, 1, "", "AnnotDefKey"], [854, 1, 1, "", "AnnotOp"], [855, 1, 1, "", "AnnotationGroup"]], "pypath.internals.annot_formats.AnnotDef": [[852, 2, 1, "", "__init__"], [852, 4, 1, "", "args"], [852, 4, 1, "", "aspect"], [852, 4, 1, "", "avoid"], [852, 2, 1, "", "count"], [852, 4, 1, "", "enabled"], [852, 4, 1, "", "exclude"], [852, 2, 1, "", "index"], [852, 4, 1, "", "limit"], [852, 4, 1, "", "name"], [852, 4, 1, "", "parent"], [852, 4, 1, "", "receiver"], [852, 4, 1, "", "resource"], [852, 4, 1, "", "resource_name"], [852, 4, 1, "", "scope"], [852, 4, 1, "", "source"], [852, 4, 1, "", "transmitter"]], "pypath.internals.annot_formats.AnnotDefKey": [[853, 2, 1, "", "__init__"], [853, 2, 1, "", "count"], [853, 2, 1, "", "index"], [853, 4, 1, "", "name"], [853, 4, 1, "", "parent"], [853, 4, 1, "", "resource"]], "pypath.internals.annot_formats.AnnotOp": [[854, 2, 1, "", "__init__"], [854, 4, 1, "", "annots"], [854, 2, 1, "", "count"], [854, 2, 1, "", "index"], [854, 4, 1, "", "op"]], "pypath.internals.annot_formats.AnnotationGroup": [[855, 2, 1, "", "__init__"], [855, 2, 1, "", "filter_entity_type"], [855, 2, 1, "", "isdisjoint"]], "pypath.internals.input_formats": [[857, 1, 1, "", "ArrayMapping"], [858, 1, 1, "", "BiomartMapping"], [859, 1, 1, "", "FileMapping"], [860, 1, 1, "", "MappingInput"], [861, 1, 1, "", "NetworkInput"], [862, 1, 1, "", "PickleMapping"], [863, 1, 1, "", "ProMapping"], [864, 1, 1, "", "ReadList"], [865, 1, 1, "", "UnichemMapping"], [866, 1, 1, "", "UniprotListMapping"], [867, 1, 1, "", "UniprotMapping"]], "pypath.internals.input_formats.ArrayMapping": [[857, 2, 1, "", "__init__"]], "pypath.internals.input_formats.BiomartMapping": [[858, 2, 1, "", "__init__"]], "pypath.internals.input_formats.FileMapping": [[859, 2, 1, "", "__init__"]], "pypath.internals.input_formats.MappingInput": [[860, 2, 1, "", "__init__"]], "pypath.internals.input_formats.NetworkInput": [[861, 2, 1, "", "__init__"]], "pypath.internals.input_formats.PickleMapping": [[862, 2, 1, "", "__init__"]], "pypath.internals.input_formats.ProMapping": [[863, 2, 1, "", "__init__"]], "pypath.internals.input_formats.ReadList": [[864, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UnichemMapping": [[865, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UniprotListMapping": [[866, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UniprotMapping": [[867, 2, 1, "", "__init__"], [867, 2, 1, "", "resource_id_type"]], "pypath.internals.intera": [[869, 1, 1, "", "Complex"], [870, 1, 1, "", "Domain"], [871, 1, 1, "", "DomainDomain"], [872, 1, 1, "", "DomainMotif"], [873, 1, 1, "", "Interface"], [874, 1, 1, "", "Motif"], [875, 1, 1, "", "Ptm"], [876, 1, 1, "", "Regulation"], [877, 1, 1, "", "Residue"]], "pypath.internals.intera.Complex": [[869, 2, 1, "", "__init__"], [869, 2, 1, "", "add_attr"], [869, 2, 1, "", "merge"]], "pypath.internals.intera.Domain": [[870, 2, 1, "", "__init__"]], "pypath.internals.intera.DomainDomain": [[871, 2, 1, "", "__init__"]], "pypath.internals.intera.DomainMotif": [[872, 2, 1, "", "__init__"], [872, 2, 1, "", "get_line"], [872, 2, 1, "", "key"]], "pypath.internals.intera.Interface": [[873, 2, 1, "", "__init__"], [873, 2, 1, "", "add_residues"], [873, 2, 1, "", "bond_types"], [873, 2, 1, "", "get_bonds"], [873, 2, 1, "", "numof_residues"]], "pypath.internals.intera.Motif": [[874, 2, 1, "", "__init__"]], "pypath.internals.intera.Ptm": [[875, 2, 1, "", "__init__"]], "pypath.internals.intera.Regulation": [[876, 2, 1, "", "__init__"]], "pypath.internals.intera.Residue": [[877, 2, 1, "", "__init__"]], "pypath.internals.license": [[879, 1, 1, "", "License"], [880, 1, 1, "", "LicenseAttrib"], [881, 1, 1, "", "LicenseFeature"], [882, 1, 1, "", "LicensePurpose"], [883, 1, 1, "", "LicenseSharing"]], "pypath.internals.license.License": [[879, 2, 1, "", "__init__"], [879, 2, 1, "", "enables"]], "pypath.internals.license.LicenseAttrib": [[880, 2, 1, "", "__init__"], [880, 2, 1, "", "check_level"], [880, 2, 1, "", "int_to_level"], [880, 2, 1, "", "level_to_int"], [880, 2, 1, "", "to_int"]], "pypath.internals.license.LicenseFeature": [[881, 2, 1, "", "__init__"], [881, 2, 1, "", "check_level"], [881, 2, 1, "", "int_to_level"], [881, 2, 1, "", "level_to_int"], [881, 2, 1, "", "to_int"]], "pypath.internals.license.LicensePurpose": [[882, 2, 1, "", "__init__"], [882, 2, 1, "", "check_level"], [882, 2, 1, "", "int_to_level"], [882, 2, 1, "", "level_to_int"], [882, 2, 1, "", "to_int"]], "pypath.internals.license.LicenseSharing": [[883, 2, 1, "", "__init__"], [883, 2, 1, "", "check_level"], [883, 2, 1, "", "int_to_level"], [883, 2, 1, "", "level_to_int"], [883, 2, 1, "", "to_int"]], "pypath.internals.refs": [[886, 1, 1, "", "Reference"], [887, 3, 1, "", "get_pubmed_data"]], "pypath.internals.refs.Reference": [[886, 2, 1, "", "__init__"]], "pypath.internals.resource": [[889, 1, 1, "", "AbstractResource"], [890, 1, 1, "", "EnzymeSubstrateResource"], [891, 1, 1, "", "EnzymeSubstrateResourceKey"], [892, 1, 1, "", "NetworkResource"], [893, 1, 1, "", "NetworkResourceKey"], [894, 1, 1, "", "ResourceAttributes"]], "pypath.internals.resource.AbstractResource": [[889, 2, 1, "", "__init__"], [889, 2, 1, "", "load_data"], [889, 2, 1, "", "process"], [889, 2, 1, "", "set_method"]], "pypath.internals.resource.EnzymeSubstrateResource": [[890, 2, 1, "", "__init__"], [890, 2, 1, "", "get_via"]], "pypath.internals.resource.EnzymeSubstrateResourceKey": [[891, 2, 1, "", "__init__"], [891, 2, 1, "", "count"], [891, 4, 1, "", "data_type"], [891, 2, 1, "", "index"], [891, 4, 1, "", "name"], [891, 4, 1, "", "via"]], "pypath.internals.resource.NetworkResource": [[892, 2, 1, "", "__init__"]], "pypath.internals.resource.NetworkResourceKey": [[893, 2, 1, "", "__init__"], [893, 2, 1, "", "count"], [893, 4, 1, "", "data_model"], [893, 4, 1, "", "data_type"], [893, 2, 1, "", "index"], [893, 4, 1, "", "interaction_type"], [893, 5, 1, "", "label"], [893, 5, 1, "", "last"], [893, 4, 1, "", "name"], [893, 4, 1, "", "via"]], "pypath.internals.resource.ResourceAttributes": [[894, 2, 1, "", "__init__"]], "pypath.legacy": [[896, 0, 0, "-", "db_categories"], [899, 0, 0, "-", "main"]], "pypath.legacy.db_categories": [[897, 3, 1, "", "get_categories"], [898, 3, 1, "", "get_category"]], "pypath.legacy.main": [[900, 1, 1, "", "Direction"], [901, 1, 1, "", "NetworkEntityCollection"], [902, 1, 1, "", "NetworkStatsRecord"], [903, 1, 1, "", "PyPath"], [904, 3, 1, "", "get_db"], [905, 3, 1, "", "init_db"]], "pypath.legacy.main.Direction": [[900, 2, 1, "", "__init__"], [900, 2, 1, "", "check_nodes"], [900, 2, 1, "", "check_param"], [900, 2, 1, "", "consensus_edges"], [900, 2, 1, "", "get_dir"], [900, 2, 1, "", "get_direction"], [900, 2, 1, "", "get_directions"], [900, 2, 1, "", "get_dirs"], [900, 2, 1, "", "get_sign"], [900, 2, 1, "", "has_sign"], [900, 2, 1, "", "is_directed"], [900, 2, 1, "", "is_directed_by_resources"], [900, 2, 1, "", "is_inhibition"], [900, 2, 1, "", "is_mutual"], [900, 2, 1, "", "is_mutual_by_resources"], [900, 2, 1, "", "is_stimulation"], [900, 2, 1, "", "majority_dir"], [900, 2, 1, "", "majority_sign"], [900, 2, 1, "", "merge"], [900, 2, 1, "", "negative_reverse"], [900, 2, 1, "", "negative_sources_reverse"], [900, 2, 1, "", "negative_sources_straight"], [900, 2, 1, "", "negative_straight"], [900, 2, 1, "", "positive_reverse"], [900, 2, 1, "", "positive_sources_reverse"], [900, 2, 1, "", "positive_sources_straight"], [900, 2, 1, "", "positive_straight"], [900, 2, 1, "", "reload"], [900, 2, 1, "", "set_dir"], [900, 2, 1, "", "set_direction"], [900, 2, 1, "", "set_sign"], [900, 2, 1, "", "source"], [900, 2, 1, "", "sources_reverse"], [900, 2, 1, "", "sources_straight"], [900, 2, 1, "", "sources_undirected"], [900, 2, 1, "", "src"], [900, 2, 1, "", "src_by_source"], [900, 2, 1, "", "target"], [900, 2, 1, "", "tgt"], [900, 2, 1, "", "tgt_by_source"], [900, 2, 1, "", "translate"], [900, 2, 1, "", "unset_dir"], [900, 2, 1, "", "unset_direction"], [900, 2, 1, "", "unset_sign"], [900, 2, 1, "", "which_directions"], [900, 2, 1, "", "which_dirs"], [900, 2, 1, "", "which_signs"]], "pypath.legacy.main.NetworkEntityCollection": [[901, 2, 1, "", "__init__"], [901, 4, 1, "", "by_category"], [901, 4, 1, "", "by_resource"], [901, 4, 1, "", "cat_resource"], [901, 2, 1, "", "count"], [901, 2, 1, "", "index"], [901, 4, 1, "", "label"], [901, 4, 1, "", "method"], [901, 4, 1, "", "resource_cat"], [901, 4, 1, "", "shared"], [901, 4, 1, "", "shared_cat"], [901, 4, 1, "", "shared_res_cat"], [901, 4, 1, "", "total"], [901, 4, 1, "", "unique"], [901, 4, 1, "", "unique_cat"], [901, 4, 1, "", "unique_res_cat"]], "pypath.legacy.main.NetworkStatsRecord": [[902, 2, 1, "", "__init__"], [902, 4, 1, "", "by_category"], [902, 4, 1, "", "by_resource"], [902, 4, 1, "", "cat_resource"], [902, 2, 1, "", "count"], [902, 2, 1, "", "index"], [902, 4, 1, "", "label"], [902, 4, 1, "", "method"], [902, 4, 1, "", "percent"], [902, 4, 1, "", "percent_cat"], [902, 4, 1, "", "percent_res_cat"], [902, 4, 1, "", "resource_cat"], [902, 4, 1, "", "shared"], [902, 4, 1, "", "shared_cat"], [902, 4, 1, "", "shared_res_cat"], [902, 4, 1, "", "total"], [902, 4, 1, "", "unique"], [902, 4, 1, "", "unique_cat"], [902, 4, 1, "", "unique_res_cat"]], "pypath.legacy.main.PyPath": [[903, 2, 1, "", "__init__"], [903, 2, 1, "", "acsn_effects"], [903, 2, 1, "", "add_genesets"], [903, 2, 1, "", "add_grouped_eattr"], [903, 2, 1, "", "add_grouped_set_eattr"], [903, 2, 1, "", "add_list_eattr"], [903, 2, 1, "", "add_set_eattr"], [903, 2, 1, "", "affects"], [903, 2, 1, "", "all_between"], [903, 2, 1, "", "all_neighbours"], [903, 2, 1, "", "apply_list"], [903, 2, 1, "", "apply_negative"], [903, 2, 1, "", "basic_stats"], [903, 2, 1, "", "basic_stats_intergroup"], [903, 2, 1, "", "cancer_drivers_list"], [903, 2, 1, "", "cancer_gene_census_list"], [903, 2, 1, "", "clean_graph"], [903, 2, 1, "", "collapse_by_name"], [903, 2, 1, "", "collect"], [903, 2, 1, "", "combine_attr"], [903, 2, 1, "", "communities"], [903, 2, 1, "", "complex_comembership_network"], [903, 2, 1, "", "complexes"], [903, 2, 1, "", "complexes_in_network"], [903, 2, 1, "", "compounds_from_chembl"], [903, 2, 1, "", "consistency"], [903, 2, 1, "", "copy"], [903, 2, 1, "", "copy_edges"], [903, 2, 1, "", "count_sol"], [903, 2, 1, "", "counts"], [903, 2, 1, "", "coverage"], [903, 2, 1, "", "curation_effort"], [903, 2, 1, "", "curation_effort_by_resource"], [903, 2, 1, "", "curation_stats"], [903, 2, 1, "", "curation_tab"], [903, 2, 1, "", "curators_work"], [903, 2, 1, "", "databases_similarity"], [903, 2, 1, "", "degree_dist"], [903, 2, 1, "", "degree_dists"], [903, 2, 1, "", "delete_by_organism"], [903, 2, 1, "", "delete_by_source"], [903, 2, 1, "", "delete_unknown"], [903, 2, 1, "", "delete_unmapped"], [903, 2, 1, "", "dgenesymbol"], [903, 2, 1, "", "dgenesymbols"], [903, 2, 1, "", "dgs"], [903, 2, 1, "", "dgss"], [903, 2, 1, "", "dneighbors"], [903, 2, 1, "", "dp"], [903, 2, 1, "", "dproteins"], [903, 2, 1, "", "dps"], [903, 2, 1, "", "duniprot"], [903, 2, 1, "", "duniprots"], [903, 2, 1, "", "dup"], [903, 2, 1, "", "dups"], [903, 2, 1, "", "dv"], [903, 2, 1, "", "dvs"], [903, 2, 1, "", "edge_exists"], [903, 2, 1, "", "edge_loc"], [903, 2, 1, "", "edge_names"], [903, 2, 1, "", "edges_3d"], [903, 2, 1, "", "edges_between"], [903, 2, 1, "", "edges_expression"], [903, 2, 1, "", "edges_in_complexes"], [903, 2, 1, "", "edges_ptms"], [903, 2, 1, "", "edgeseq_inverse"], [903, 2, 1, "", "entities_by_resource"], [903, 2, 1, "", "entities_by_resources"], [903, 2, 1, "", "export_dot"], [903, 2, 1, "", "export_edgelist"], [903, 2, 1, "", "export_graphml"], [903, 2, 1, "", "export_ptms_tab"], [903, 2, 1, "", "export_sif"], [903, 2, 1, "", "export_struct_tab"], [903, 2, 1, "", "export_tab"], [903, 2, 1, "", "find_all_paths"], [903, 2, 1, "", "find_all_paths2"], [903, 2, 1, "", "find_complex"], [903, 2, 1, "", "first_neighbours"], [903, 2, 1, "", "fisher_enrichment"], [903, 2, 1, "", "geneset_enrichment"], [903, 2, 1, "", "genesymbol"], [903, 2, 1, "", "genesymbol_labels"], [903, 2, 1, "", "genesymbols"], [903, 2, 1, "", "get_attrs"], [903, 2, 1, "", "get_directed"], [903, 2, 1, "", "get_dirs_signs"], [903, 2, 1, "", "get_edge"], [903, 2, 1, "", "get_edges"], [903, 2, 1, "", "get_function"], [903, 2, 1, "", "get_giant"], [903, 2, 1, "", "get_go"], [903, 2, 1, "", "get_max"], [903, 2, 1, "", "get_network"], [903, 2, 1, "", "get_node"], [903, 2, 1, "", "get_node_d"], [903, 2, 1, "", "get_node_pair"], [903, 2, 1, "", "get_nodes"], [903, 2, 1, "", "get_nodes_d"], [903, 2, 1, "", "get_pathways"], [903, 2, 1, "", "get_proteomicsdb"], [903, 2, 1, "", "get_sub"], [903, 2, 1, "", "get_taxon"], [903, 2, 1, "", "go_annotate_graph"], [903, 2, 1, "", "go_enrichment"], [903, 2, 1, "", "gs"], [903, 2, 1, "", "gs_affected_by"], [903, 2, 1, "", "gs_affects"], [903, 2, 1, "", "gs_edge"], [903, 2, 1, "", "gs_in_directed"], [903, 2, 1, "", "gs_in_undirected"], [903, 2, 1, "", "gs_inhibited_by"], [903, 2, 1, "", "gs_inhibits"], [903, 2, 1, "", "gs_neighborhood"], [903, 2, 1, "", "gs_neighbors"], [903, 2, 1, "", "gs_stimulated_by"], [903, 2, 1, "", "gs_stimulates"], [903, 2, 1, "", "gss"], [903, 2, 1, "", "guide2pharma"], [903, 2, 1, "", "having_attr"], [903, 2, 1, "", "having_eattr"], [903, 2, 1, "", "having_ptm"], [903, 2, 1, "", "having_vattr"], [903, 2, 1, "", "homology_translation"], [903, 2, 1, "", "htp_stats"], [903, 2, 1, "", "in_complex"], [903, 2, 1, "", "in_directed"], [903, 2, 1, "", "in_undirected"], [903, 2, 1, "", "info"], [903, 2, 1, "", "init_complex_attr"], [903, 2, 1, "", "init_edge_attr"], [903, 2, 1, "", "init_gsea"], [903, 2, 1, "", "init_network"], [903, 2, 1, "", "init_vertex_attr"], [903, 2, 1, "", "interactions_all"], [903, 2, 1, "", "interactions_directed"], [903, 2, 1, "", "interactions_directed_by_resource"], [903, 2, 1, "", "interactions_inhibitory"], [903, 2, 1, "", "interactions_inhibitory_by_resource"], [903, 2, 1, "", "interactions_mutual"], [903, 2, 1, "", "interactions_mutual_by_resource"], [903, 2, 1, "", "interactions_signed"], [903, 2, 1, "", "interactions_signed_by_resource"], [903, 2, 1, "", "interactions_stimulatory"], [903, 2, 1, "", "interactions_stimulatory_by_resource"], [903, 2, 1, "", "interactions_undirected"], [903, 2, 1, "", "interactions_undirected_by_resource"], [903, 2, 1, "", "intergroup_shortest_paths"], [903, 2, 1, "", "intogen_cancer_drivers_list"], [903, 2, 1, "", "iter_edges"], [903, 2, 1, "", "iter_interactions"], [903, 2, 1, "", "jaccard_edges"], [903, 2, 1, "", "jaccard_meta"], [903, 2, 1, "", "kegg_directions"], [903, 2, 1, "", "kegg_pathways"], [903, 2, 1, "", "kinase_stats"], [903, 2, 1, "", "label"], [903, 2, 1, "", "label_by_go"], [903, 2, 1, "", "label_edges"], [903, 2, 1, "", "label_vertices"], [903, 2, 1, "", "laudanna_directions"], [903, 2, 1, "", "laudanna_effects"], [903, 2, 1, "", "license"], [903, 2, 1, "", "list_resources"], [903, 2, 1, "", "load_3dcomplexes"], [903, 2, 1, "", "load_3did_ddi"], [903, 2, 1, "", "load_3did_ddi2"], [903, 2, 1, "", "load_3did_dmi"], [903, 2, 1, "", "load_3did_interfaces"], [903, 2, 1, "", "load_all_pathways"], [903, 2, 1, "", "load_compleat"], [903, 2, 1, "", "load_complexportal"], [903, 2, 1, "", "load_comppi"], [903, 2, 1, "", "load_corum"], [903, 2, 1, "", "load_dbptm"], [903, 2, 1, "", "load_ddi"], [903, 2, 1, "", "load_ddis"], [903, 2, 1, "", "load_depod_dmi"], [903, 2, 1, "", "load_disgenet"], [903, 2, 1, "", "load_dmi"], [903, 2, 1, "", "load_dmis"], [903, 2, 1, "", "load_domino_dmi"], [903, 2, 1, "", "load_dorothea"], [903, 2, 1, "", "load_elm"], [903, 2, 1, "", "load_exocarta_attrs"], [903, 2, 1, "", "load_expression"], [903, 2, 1, "", "load_from_pickle"], [903, 2, 1, "", "load_go"], [903, 2, 1, "", "load_havugimana"], [903, 2, 1, "", "load_hpa"], [903, 2, 1, "", "load_hprd_ptms"], [903, 2, 1, "", "load_ielm"], [903, 2, 1, "", "load_interfaces"], [903, 2, 1, "", "load_li2012_ptms"], [903, 2, 1, "", "load_ligand_receptor_network"], [903, 2, 1, "", "load_lmpid"], [903, 2, 1, "", "load_matrisome_attrs"], [903, 2, 1, "", "load_membranome_attrs"], [903, 2, 1, "", "load_mimp_dmi"], [903, 2, 1, "", "load_mutations"], [903, 2, 1, "", "load_negatives"], [903, 2, 1, "", "load_old_omnipath"], [903, 2, 1, "", "load_omnipath"], [903, 2, 1, "", "load_pathways"], [903, 2, 1, "", "load_pdb"], [903, 2, 1, "", "load_pepcyber"], [903, 2, 1, "", "load_pfam"], [903, 2, 1, "", "load_pfam2"], [903, 2, 1, "", "load_pfam3"], [903, 2, 1, "", "load_phospho_dmi"], [903, 2, 1, "", "load_phosphoelm"], [903, 2, 1, "", "load_pisa"], [903, 2, 1, "", "load_pnetworks_dmi"], [903, 2, 1, "", "load_psite_phos"], [903, 2, 1, "", "load_psite_reg"], [903, 2, 1, "", "load_ptms"], [903, 2, 1, "", "load_ptms2"], [903, 2, 1, "", "load_resource"], [903, 2, 1, "", "load_resources"], [903, 2, 1, "", "load_signor_ptms"], [903, 2, 1, "", "load_surfaceome_attrs"], [903, 2, 1, "", "load_tfregulons"], [903, 2, 1, "", "load_vesiclepedia_attrs"], [903, 2, 1, "", "lookup_cache"], [903, 2, 1, "", "loop_edges"], [903, 2, 1, "", "mean_reference_per_interaction"], [903, 2, 1, "", "mean_reference_per_interaction_by_resource"], [903, 2, 1, "", "merge_lists"], [903, 2, 1, "", "merge_nodes"], [903, 2, 1, "", "mimp_directions"], [903, 2, 1, "", "mutated_edges"], [903, 2, 1, "", "name_edgelist"], [903, 2, 1, "", "names2vids"], [903, 2, 1, "", "negative_report"], [903, 2, 1, "", "neighborhood"], [903, 2, 1, "", "neighbors"], [903, 2, 1, "", "neighbourhood_network"], [903, 2, 1, "", "network_by_go"], [903, 2, 1, "", "network_filter"], [903, 2, 1, "", "network_stats"], [903, 2, 1, "", "new_edges"], [903, 2, 1, "", "new_nodes"], [903, 2, 1, "", "node_exists"], [903, 2, 1, "", "numof_directed_edges"], [903, 2, 1, "", "numof_edges"], [903, 2, 1, "", "numof_reference_interaction_pairs"], [903, 2, 1, "", "numof_references_by_resource"], [903, 2, 1, "", "numof_undirected_edges"], [903, 2, 1, "", "orthology_translation"], [903, 2, 1, "", "p"], [903, 2, 1, "", "pathway_attributes"], [903, 2, 1, "", "pathway_members"], [903, 2, 1, "", "pathway_names"], [903, 2, 1, "", "pathway_similarity"], [903, 2, 1, "", "pathways_table"], [903, 2, 1, "", "pfam_regions"], [903, 2, 1, "", "phosphonetworks_directions"], [903, 2, 1, "", "phosphopoint_directions"], [903, 2, 1, "", "phosphorylation_directions"], [903, 2, 1, "", "phosphorylation_signs"], [903, 2, 1, "", "phosphosite_directions"], [903, 2, 1, "", "prdb_tissue_expr"], [903, 2, 1, "", "process_directions"], [903, 2, 1, "", "process_dmi"], [903, 2, 1, "", "protein"], [903, 2, 1, "", "protein_edge"], [903, 2, 1, "", "proteins"], [903, 2, 1, "", "ps"], [903, 2, 1, "", "random_walk_with_return"], [903, 2, 1, "", "random_walk_with_return2"], [903, 2, 1, "", "read_from_cache"], [903, 2, 1, "", "read_list_file"], [903, 2, 1, "", "reference_edge_ratio"], [903, 2, 1, "", "reference_hist"], [903, 2, 1, "", "references"], [903, 2, 1, "", "references_by_resource"], [903, 2, 1, "", "reload"], [903, 2, 1, "", "remove_htp"], [903, 2, 1, "", "remove_undirected"], [903, 5, 1, "", "resources"], [903, 2, 1, "", "run_batch"], [903, 2, 1, "", "save_network"], [903, 2, 1, "", "save_session"], [903, 2, 1, "", "save_to_pickle"], [903, 2, 1, "", "search_attr_and"], [903, 2, 1, "", "search_attr_or"], [903, 2, 1, "", "second_neighbours"], [903, 2, 1, "", "select_by_go"], [903, 2, 1, "", "select_by_go_all"], [903, 2, 1, "", "select_by_go_expr"], [903, 2, 1, "", "separate"], [903, 2, 1, "", "separate_by_category"], [903, 2, 1, "", "sequences"], [903, 2, 1, "", "set_boolean_vattr"], [903, 2, 1, "", "set_categories"], [903, 2, 1, "", "set_chembl_mysql"], [903, 2, 1, "", "set_disease_genes"], [903, 2, 1, "", "set_druggability"], [903, 2, 1, "", "set_drugtargets"], [903, 2, 1, "", "set_kinases"], [903, 2, 1, "", "set_plasma_membrane_proteins_cspa"], [903, 2, 1, "", "set_plasma_membrane_proteins_cspa_surfaceome"], [903, 2, 1, "", "set_plasma_membrane_proteins_surfaceome"], [903, 2, 1, "", "set_receptors"], [903, 2, 1, "", "set_signaling_proteins"], [903, 2, 1, "", "set_tfs"], [903, 2, 1, "", "set_transcription_factors"], [903, 2, 1, "", "shortest_path_dist"], [903, 2, 1, "", "signaling_proteins_list"], [903, 2, 1, "", "signor_pathways"], [903, 2, 1, "", "similarity_groups"], [903, 2, 1, "", "small_plot"], [903, 2, 1, "", "sorensen_pathways"], [903, 2, 1, "", "source_diagram"], [903, 2, 1, "", "source_network"], [903, 2, 1, "", "source_similarity"], [903, 2, 1, "", "source_stats"], [903, 2, 1, "", "sources_hist"], [903, 2, 1, "", "sources_overlap"], [903, 2, 1, "", "sources_venn_data"], [903, 2, 1, "", "stats"], [903, 2, 1, "", "straight_between"], [903, 2, 1, "", "string_effects"], [903, 2, 1, "", "sum_in_complex"], [903, 2, 1, "", "summaries_tab"], [903, 2, 1, "", "table_latex"], [903, 2, 1, "", "third_source_directions"], [903, 2, 1, "", "tissue_network"], [903, 2, 1, "", "transcription_factors"], [903, 2, 1, "", "uniprot"], [903, 2, 1, "", "uniprots"], [903, 2, 1, "", "uniq_node_list"], [903, 2, 1, "", "uniq_ptm"], [903, 2, 1, "", "uniq_ptms"], [903, 2, 1, "", "up"], [903, 2, 1, "", "up_affected_by"], [903, 2, 1, "", "up_affects"], [903, 2, 1, "", "up_edge"], [903, 2, 1, "", "up_in_directed"], [903, 2, 1, "", "up_in_undirected"], [903, 2, 1, "", "up_inhibited_by"], [903, 2, 1, "", "up_inhibits"], [903, 2, 1, "", "up_neighborhood"], [903, 2, 1, "", "up_neighbors"], [903, 2, 1, "", "up_stimulated_by"], [903, 2, 1, "", "up_stimulates"], [903, 2, 1, "", "update_adjlist"], [903, 2, 1, "", "update_attrs"], [903, 2, 1, "", "update_cats"], [903, 2, 1, "", "update_db_dict"], [903, 2, 1, "", "update_pathway_types"], [903, 2, 1, "", "update_pathways"], [903, 2, 1, "", "update_sources"], [903, 2, 1, "", "update_summaries"], [903, 2, 1, "", "update_vertex_sources"], [903, 2, 1, "", "update_vindex"], [903, 2, 1, "", "update_vname"], [903, 2, 1, "", "ups"], [903, 2, 1, "", "v"], [903, 2, 1, "", "vertex_pathways"], [903, 2, 1, "", "vsgs"], [903, 2, 1, "", "vsup"], [903, 2, 1, "", "wang_effects"], [903, 2, 1, "", "write_table"]], "pypath.omnipath": [[908, 0, 0, "-", "app"], [910, 0, 0, "-", "databases"], [919, 0, 0, "-", "export"], [921, 3, 1, "", "init"], [922, 0, 0, "-", "param"], [925, 0, 0, "-", "server"]], "pypath.omnipath.app": [[909, 1, 1, "", "DatabaseManager"]], "pypath.omnipath.app.DatabaseManager": [[909, 2, 1, "", "__init__"], [909, 2, 1, "", "build"], [909, 2, 1, "", "build_dataset"], [909, 2, 1, "", "compile_table"], [909, 2, 1, "", "compile_tables"], [909, 2, 1, "", "dataset_dependencies"], [909, 2, 1, "", "define_dataset"], [909, 2, 1, "", "ensure_dataset"], [909, 2, 1, "", "ensure_dirs"], [909, 2, 1, "", "ensure_module"], [909, 2, 1, "", "foreach_dataset"], [909, 2, 1, "", "get_args_curated"], [909, 2, 1, "", "get_args_lncrna_mrna"], [909, 2, 1, "", "get_args_mirna_mrna"], [909, 2, 1, "", "get_args_small_molecule"], [909, 2, 1, "", "get_args_tf_mirna"], [909, 2, 1, "", "get_args_tf_target"], [909, 2, 1, "", "get_build_args"], [909, 2, 1, "", "get_db"], [909, 2, 1, "", "get_param"], [909, 2, 1, "", "load_dataset"], [909, 2, 1, "", "network_df"], [909, 2, 1, "", "network_df_by_source"], [909, 2, 1, "", "pickle_exists"], [909, 2, 1, "", "pickle_path"], [909, 2, 1, "", "reload"], [909, 2, 1, "", "reload_module"], [909, 2, 1, "", "remove_all"], [909, 2, 1, "", "remove_db"], [909, 2, 1, "", "set_network"], [909, 2, 1, "", "table_path"]], "pypath.omnipath.databases": [[911, 3, 1, "", "build"], [912, 3, 1, "", "class_and_param"], [913, 0, 0, "-", "define"], [917, 3, 1, "", "get_manager"], [918, 3, 1, "", "init_manager"]], "pypath.omnipath.databases.define": [[914, 1, 1, "", "DatabaseClass"], [915, 1, 1, "", "DatabaseDefinition"], [916, 1, 1, "", "DatabaseDefinitionManager"]], "pypath.omnipath.databases.define.DatabaseClass": [[914, 2, 1, "", "__init__"]], "pypath.omnipath.databases.define.DatabaseDefinition": [[915, 2, 1, "", "__init__"], [915, 2, 1, "", "from_dict"], [915, 2, 1, "", "from_json"]], "pypath.omnipath.databases.define.DatabaseDefinitionManager": [[916, 2, 1, "", "__init__"], [916, 2, 1, "", "build"], [916, 2, 1, "", "class_and_param"]], "pypath.omnipath.export": [[920, 1, 1, "", "Export"]], "pypath.omnipath.export.Export": [[920, 2, 1, "", "__init__"], [920, 2, 1, "", "add_extra_fields"], [920, 2, 1, "", "generic_attr_processor"], [920, 2, 1, "", "get_header"], [920, 2, 1, "", "make_df"], [920, 2, 1, "", "sources_table"], [920, 2, 1, "", "write_tab"]], "pypath.omnipath.param": [[923, 3, 1, "", "curated_ppi_resources"], [924, 3, 1, "", "tf_target_resources"]], "pypath.omnipath.server": [[926, 0, 0, "-", "build"], [928, 0, 0, "-", "generate_about_page"], [933, 0, 0, "-", "legacy"], [935, 0, 0, "-", "run"]], "pypath.omnipath.server.build": [[927, 1, 1, "", "WebserviceTables"]], "pypath.omnipath.server.build.WebserviceTables": [[927, 2, 1, "", "__init__"]], "pypath.omnipath.server.generate_about_page": [[929, 3, 1, "", "export_licenses"], [930, 3, 1, "", "generate_about_html"], [931, 3, 1, "", "resource_list_latex"], [932, 3, 1, "", "write_html"]], "pypath.omnipath.server.legacy": [[934, 1, 1, "", "PypathServer"]], "pypath.omnipath.server.legacy.PypathServer": [[934, 2, 1, "", "__init__"]], "pypath.omnipath.server.run": [[936, 1, 1, "", "BaseServer"], [937, 1, 1, "", "Rest"], [938, 1, 1, "", "TableServer"], [939, 1, 1, "", "TwistedWebResource"], [940, 1, 1, "", "TwistedWebSite"], [941, 3, 1, "", "stop_server"], [942, 3, 1, "", "twisted_listen_tcp"], [943, 3, 1, "", "twisted_run"]], "pypath.omnipath.server.run.BaseServer": [[936, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.Rest": [[937, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.TableServer": [[938, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.TwistedWebResource": [[939, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.TwistedWebSite": [[940, 2, 1, "", "__init__"]], "pypath.resources": [[945, 0, 0, "-", "controller"], [947, 0, 0, "-", "data"], [948, 0, 0, "-", "data_formats"], [959, 0, 0, "-", "descriptions"], [964, 3, 1, "", "get_controller"], [965, 0, 0, "-", "licenses"], [967, 0, 0, "-", "network"], [969, 0, 0, "-", "urls"]], "pypath.resources.controller": [[946, 1, 1, "", "ResourceController"]], "pypath.resources.controller.ResourceController": [[946, 2, 1, "", "__init__"], [946, 2, 1, "", "update"]], "pypath.resources.data_formats": [[949, 6, 1, "", "ROOT"], [950, 6, 1, "", "activity_flow"], [951, 6, 1, "", "enzyme_substrate"], [952, 6, 1, "", "interaction"], [953, 6, 1, "", "interaction_htp"], [954, 6, 1, "", "obsolate"], [955, 6, 1, "", "pathway_bad"], [956, 6, 1, "", "reaction_pc"], [957, 6, 1, "", "transcription_deprecated"], [958, 6, 1, "", "transcription_onebyone"]], "pypath.resources.descriptions": [[960, 3, 1, "", "export_licenses"], [961, 3, 1, "", "gen_html"], [962, 3, 1, "", "resource_list_latex"], [963, 3, 1, "", "write_html"]], "pypath.resources.licenses": [[966, 1, 1, "", "Licenses"]], "pypath.resources.licenses.Licenses": [[966, 2, 1, "", "__init__"]], "pypath.resources.network": [[968, 3, 1, "", "dorothea_expand_levels"]], "pypath.share": [[971, 0, 0, "-", "cache"], [974, 0, 0, "-", "common"], [1066, 0, 0, "-", "constants"], [1067, 0, 0, "-", "curl"], [1084, 0, 0, "-", "log"], [1087, 0, 0, "-", "progress"], [1089, 0, 0, "-", "session"], [1095, 0, 0, "-", "settings"]], "pypath.share.cache": [[972, 3, 1, "", "cache_item"], [973, 3, 1, "", "get_cachedir"]], "pypath.share.common": [[975, 3, 1, "", "add_to_list"], [976, 3, 1, "", "add_to_set"], [977, 3, 1, "", "at_least_in"], [978, 3, 1, "", "clean_dict"], [979, 3, 1, "", "combine_attrs"], [980, 3, 1, "", "console"], [981, 3, 1, "", "decode"], [982, 3, 1, "", "del_empty"], [983, 3, 1, "", "df_memory_usage"], [984, 3, 1, "", "dict_collapse_keys"], [985, 3, 1, "", "dict_counts"], [986, 3, 1, "", "dict_diff"], [987, 3, 1, "", "dict_expand_keys"], [988, 3, 1, "", "dict_percent"], [989, 3, 1, "", "dict_set_path"], [990, 3, 1, "", "dict_set_percent"], [991, 3, 1, "", "dict_str"], [992, 3, 1, "", "dict_subtotals"], [993, 3, 1, "", "dict_sym_diff"], [994, 3, 1, "", "dict_union"], [995, 3, 1, "", "eq"], [996, 3, 1, "", "filtr"], [997, 3, 1, "", "first"], [998, 3, 1, "", "flat_list"], [999, 3, 1, "", "float_or_nan"], [1000, 3, 1, "", "gen_session_id"], [1001, 3, 1, "", "get"], [1002, 3, 1, "", "get_args"], [1003, 3, 1, "", "is_float"], [1004, 3, 1, "", "is_int"], [1005, 3, 1, "", "is_str"], [1006, 3, 1, "", "jaccard_index"], [1007, 3, 1, "", "join_dicts"], [1008, 3, 1, "", "latex_table"], [1009, 3, 1, "", "match"], [1010, 3, 1, "", "maybe_in_dict"], [1011, 3, 1, "", "md5"], [1012, 3, 1, "", "merge_dicts"], [1013, 3, 1, "", "n_shared_elements"], [1014, 3, 1, "", "n_shared_foreach"], [1015, 3, 1, "", "n_shared_total"], [1016, 3, 1, "", "n_shared_unique_foreach"], [1017, 3, 1, "", "n_unique_elements"], [1018, 3, 1, "", "n_unique_foreach"], [1019, 3, 1, "", "n_unique_total"], [1020, 3, 1, "", "negate"], [1021, 3, 1, "", "none_or_len"], [1022, 3, 1, "", "paginate"], [1023, 3, 1, "", "prefix"], [1024, 3, 1, "", "print_table"], [1025, 3, 1, "", "re_safe_groups"], [1026, 3, 1, "", "remove_prefix"], [1027, 3, 1, "", "rotate"], [1028, 3, 1, "", "sets_to_sorted_lists"], [1029, 3, 1, "", "sfirst"], [1030, 3, 1, "", "shared_elements"], [1031, 3, 1, "", "shared_foreach"], [1032, 3, 1, "", "shared_total"], [1033, 3, 1, "", "shared_unique"], [1034, 3, 1, "", "shared_unique_foreach"], [1035, 3, 1, "", "shared_unique_total"], [1036, 1, 1, "", "silent"], [1037, 3, 1, "", "simpson_index"], [1038, 3, 1, "", "simpson_index_counts"], [1039, 3, 1, "", "something"], [1040, 3, 1, "", "sorensen_index"], [1041, 3, 1, "", "suffix"], [1042, 3, 1, "", "sum_dicts"], [1043, 3, 1, "", "swap_dict"], [1044, 3, 1, "", "swap_dict_simple"], [1045, 3, 1, "", "swap_suffix"], [1046, 3, 1, "", "table_add_row_numbers"], [1047, 3, 1, "", "table_format"], [1048, 3, 1, "", "table_textwrap"], [1049, 3, 1, "", "to_list"], [1050, 3, 1, "", "to_set"], [1051, 3, 1, "", "try_bool"], [1052, 3, 1, "", "try_float"], [1053, 3, 1, "", "tsv_table"], [1054, 3, 1, "", "uniq_list"], [1055, 3, 1, "", "uniq_list1"], [1056, 3, 1, "", "uniq_list2"], [1057, 3, 1, "", "uniq_ord_list"], [1058, 3, 1, "", "unique_elements"], [1059, 3, 1, "", "unique_foreach"], [1060, 3, 1, "", "unique_list"], [1061, 3, 1, "", "unique_total"], [1062, 3, 1, "", "upper0"], [1063, 3, 1, "", "values"], [1064, 3, 1, "", "wcl"], [1065, 3, 1, "", "wrap_truncate"]], "pypath.share.common.silent": [[1036, 2, 1, "", "__init__"]], "pypath.share.curl": [[1068, 1, 1, "", "Curl"], [1069, 1, 1, "", "FileOpener"], [1070, 1, 1, "", "RemoteFile"], [1071, 1, 1, "", "cache_delete_off"], [1072, 1, 1, "", "cache_delete_on"], [1073, 1, 1, "", "cache_off"], [1074, 1, 1, "", "cache_on"], [1075, 1, 1, "", "cache_print_off"], [1076, 1, 1, "", "cache_print_on"], [1077, 1, 1, "", "debug_off"], [1078, 1, 1, "", "debug_on"], [1079, 1, 1, "", "dryrun_off"], [1080, 1, 1, "", "dryrun_on"], [1081, 3, 1, "", "is_url"], [1082, 1, 1, "", "preserve_off"], [1083, 1, 1, "", "preserve_on"]], "pypath.share.curl.Curl": [[1068, 2, 1, "", "__init__"], [1068, 2, 1, "", "close"], [1068, 2, 1, "", "construct_binary_data"], [1068, 2, 1, "", "extract"], [1068, 2, 1, "", "is_quoted"], [1068, 2, 1, "", "open"], [1068, 2, 1, "", "open_tgz"], [1068, 2, 1, "", "replace_forbidden"], [1068, 2, 1, "", "set_binary_data"], [1068, 2, 1, "", "url_fix"]], "pypath.share.curl.FileOpener": [[1069, 2, 1, "", "__init__"], [1069, 2, 1, "", "extract"], [1069, 2, 1, "", "open"], [1069, 2, 1, "", "open_tgz"]], "pypath.share.curl.RemoteFile": [[1070, 2, 1, "", "__init__"]], "pypath.share.curl.cache_delete_off": [[1071, 2, 1, "", "__init__"]], "pypath.share.curl.cache_delete_on": [[1072, 2, 1, "", "__init__"]], "pypath.share.curl.cache_off": [[1073, 2, 1, "", "__init__"]], "pypath.share.curl.cache_on": [[1074, 2, 1, "", "__init__"]], "pypath.share.curl.cache_print_off": [[1075, 2, 1, "", "__init__"]], "pypath.share.curl.cache_print_on": [[1076, 2, 1, "", "__init__"]], "pypath.share.curl.debug_off": [[1077, 2, 1, "", "__init__"]], "pypath.share.curl.debug_on": [[1078, 2, 1, "", "__init__"]], "pypath.share.curl.dryrun_off": [[1079, 2, 1, "", "__init__"]], "pypath.share.curl.dryrun_on": [[1080, 2, 1, "", "__init__"]], "pypath.share.curl.preserve_off": [[1082, 2, 1, "", "__init__"]], "pypath.share.curl.preserve_on": [[1083, 2, 1, "", "__init__"]], "pypath.share.log": [[1085, 1, 1, "", "Logger"], [1086, 3, 1, "", "new_logger"]], "pypath.share.log.Logger": [[1085, 2, 1, "", "__init__"], [1085, 2, 1, "", "browse"], [1085, 2, 1, "", "close_logfile"], [1085, 2, 1, "", "console"], [1085, 2, 1, "", "flush"], [1085, 2, 1, "", "get_logdir"], [1085, 2, 1, "", "label_message"], [1085, 2, 1, "", "msg"], [1085, 2, 1, "", "open_logfile"], [1085, 2, 1, "", "strftime"], [1085, 2, 1, "", "timestamp"], [1085, 2, 1, "", "timestamp_message"]], "pypath.share.progress": [[1088, 1, 1, "", "Progress"]], "pypath.share.progress.Progress": [[1088, 2, 1, "", "__init__"], [1088, 2, 1, "", "get_desc"], [1088, 2, 1, "", "init_tqdm"], [1088, 2, 1, "", "set_done"], [1088, 2, 1, "", "set_status"], [1088, 2, 1, "", "set_total"], [1088, 2, 1, "", "step"], [1088, 2, 1, "", "terminate"]], "pypath.share.session": [[1090, 1, 1, "", "Logger"], [1091, 1, 1, "", "Session"], [1092, 3, 1, "", "get_log"], [1093, 3, 1, "", "get_session"], [1094, 3, 1, "", "new_session"]], "pypath.share.session.Logger": [[1090, 2, 1, "", "__init__"]], "pypath.share.session.Session": [[1091, 2, 1, "", "__init__"], [1091, 2, 1, "", "gen_session_id"], [1091, 2, 1, "", "start_logger"]], "pypath.share.settings": [[1096, 1, 1, "", "Settings"], [1097, 3, 1, "", "context"], [1098, 3, 1, "", "get"], [1099, 3, 1, "", "setup"]], "pypath.share.settings.Settings": [[1096, 2, 1, "", "__init__"], [1096, 2, 1, "", "context"], [1096, 2, 1, "", "get"], [1096, 2, 1, "", "get_default"], [1096, 2, 1, "", "reset"], [1096, 2, 1, "", "reset_all"], [1096, 2, 1, "", "setup"]], "pypath.utils": [[1101, 0, 0, "-", "go"], [1109, 0, 0, "-", "homology"], [1122, 0, 0, "-", "mapping"], [1137, 0, 0, "-", "pdb"], [1142, 0, 0, "-", "proteomicsdb"], [1144, 0, 0, "-", "pyreact"], [1159, 0, 0, "-", "reflists"], [1167, 0, 0, "-", "residues"], [1169, 0, 0, "-", "seq"], [1176, 0, 0, "-", "taxonomy"], [1191, 0, 0, "-", "unichem"], [1193, 0, 0, "-", "uniprot"]], "pypath.utils.go": [[1102, 1, 1, "", "GOAnnotation"], [1103, 1, 1, "", "GOCustomAnnotation"], [1104, 1, 1, "", "GeneOntology"], [1105, 3, 1, "", "annotate"], [1106, 3, 1, "", "get_db"], [1107, 3, 1, "", "init_db"], [1108, 3, 1, "", "load_go"]], "pypath.utils.go.GOAnnotation": [[1102, 2, 1, "", "__init__"], [1102, 2, 1, "", "all_uniprots"], [1102, 2, 1, "", "expr_names_to_terms"], [1102, 2, 1, "", "get_annot"], [1102, 2, 1, "", "get_annot_ancestors"], [1102, 2, 1, "", "get_annots"], [1102, 2, 1, "", "get_annots_ancestors"], [1102, 2, 1, "", "get_name"], [1102, 2, 1, "", "get_term"], [1102, 2, 1, "", "has_any_term"], [1102, 2, 1, "", "has_term"], [1102, 2, 1, "", "i_select_by_term"], [1102, 2, 1, "", "reload"], [1102, 2, 1, "", "select"], [1102, 2, 1, "", "select_by_all"], [1102, 2, 1, "", "select_by_expr"], [1102, 2, 1, "", "select_by_expr_terms"], [1102, 2, 1, "", "select_by_name"], [1102, 2, 1, "", "select_by_term"]], "pypath.utils.go.GOCustomAnnotation": [[1103, 2, 1, "", "__init__"], [1103, 2, 1, "", "get_annotation"], [1103, 2, 1, "", "get_annotations"], [1103, 2, 1, "", "process_categories"], [1103, 2, 1, "", "reload"]], "pypath.utils.go.GeneOntology": [[1104, 2, 1, "", "__init__"], [1104, 2, 1, "", "all_from_aspect"], [1104, 2, 1, "", "aspect_from_name"], [1104, 2, 1, "", "flatten"], [1104, 2, 1, "", "get_all_ancestors"], [1104, 2, 1, "", "get_all_descendants"], [1104, 2, 1, "", "get_aspect"], [1104, 2, 1, "", "get_name"], [1104, 2, 1, "", "get_term"], [1104, 2, 1, "", "highest"], [1104, 2, 1, "", "is_leaf"], [1104, 2, 1, "", "is_name"], [1104, 2, 1, "", "is_root"], [1104, 2, 1, "", "is_term"], [1104, 2, 1, "", "lowest"], [1104, 2, 1, "", "names_to_terms"], [1104, 2, 1, "", "names_to_terms_aspects"], [1104, 2, 1, "", "reload"], [1104, 2, 1, "", "set_of"], [1104, 2, 1, "", "set_of_names"], [1104, 2, 1, "", "set_of_terms"], [1104, 2, 1, "", "subgraph_nodes"], [1104, 2, 1, "", "terms_to_names"], [1104, 2, 1, "", "terms_to_names_aspects"]], "pypath.utils.homology": [[1110, 1, 1, "", "HomologyManager"], [1111, 1, 1, "", "Ortholog"], [1112, 1, 1, "", "ProteinHomology"], [1113, 1, 1, "", "Proteomes"], [1114, 1, 1, "", "PtmHomology"], [1115, 1, 1, "", "SequenceContainer"], [1116, 3, 1, "", "get_df"], [1117, 3, 1, "", "get_dict"], [1118, 3, 1, "", "get_manager"], [1119, 3, 1, "", "init"], [1120, 3, 1, "", "translate"], [1121, 3, 1, "", "translate_df"]], "pypath.utils.homology.HomologyManager": [[1110, 2, 1, "", "__init__"], [1110, 2, 1, "", "get_df"], [1110, 2, 1, "", "get_dict"], [1110, 2, 1, "", "translate"], [1110, 2, 1, "", "translate_df"]], "pypath.utils.homology.Ortholog": [[1111, 2, 1, "", "__init__"], [1111, 2, 1, "", "count"], [1111, 4, 1, "", "ensembl_hc"], [1111, 4, 1, "", "ensembl_type"], [1111, 2, 1, "", "index"], [1111, 4, 1, "", "resource"], [1111, 4, 1, "", "uniprot"]], "pypath.utils.homology.ProteinHomology": [[1112, 2, 1, "", "__init__"], [1112, 2, 1, "", "asdict"], [1112, 2, 1, "", "df"], [1112, 2, 1, "", "load_homologene"], [1112, 2, 1, "", "translate"], [1112, 2, 1, "", "translate_df"]], "pypath.utils.homology.Proteomes": [[1113, 2, 1, "", "__init__"]], "pypath.utils.homology.PtmHomology": [[1114, 2, 1, "", "__init__"], [1114, 2, 1, "", "asdict"], [1114, 2, 1, "", "df"], [1114, 2, 1, "", "load_homologene"], [1114, 2, 1, "", "ptm_orthology"], [1114, 2, 1, "", "translate"], [1114, 2, 1, "", "translate_df"], [1114, 2, 1, "", "translate_site"]], "pypath.utils.homology.SequenceContainer": [[1115, 2, 1, "", "__init__"]], "pypath.utils.mapping": [[1123, 1, 1, "", "MapReader"], [1124, 1, 1, "", "Mapper"], [1125, 1, 1, "", "MappingTable"], [1126, 1, 1, "", "MappingTableKey"], [1127, 6, 1, "", "UNIPROT_ID_TYPES"], [1128, 3, 1, "", "get_mapper"], [1129, 3, 1, "", "guess_type"], [1130, 3, 1, "", "id_from_label"], [1131, 3, 1, "", "id_from_label0"], [1132, 3, 1, "", "init"], [1133, 3, 1, "", "label"], [1134, 3, 1, "", "map_name"], [1135, 3, 1, "", "map_name0"], [1136, 3, 1, "", "map_names"]], "pypath.utils.mapping.MapReader": [[1123, 2, 1, "", "__init__"], [1123, 2, 1, "", "id_type_side"], [1123, 2, 1, "", "load"], [1123, 5, 1, "", "mapping_table_a_to_b"], [1123, 5, 1, "", "mapping_table_b_to_a"], [1123, 2, 1, "", "read"], [1123, 2, 1, "", "read_cache"], [1123, 2, 1, "", "read_mapping_array"], [1123, 2, 1, "", "read_mapping_biomart"], [1123, 2, 1, "", "read_mapping_file"], [1123, 2, 1, "", "read_mapping_unichem"], [1123, 2, 1, "", "read_mapping_uniprot"], [1123, 2, 1, "", "read_mapping_uniprot_list"], [1123, 2, 1, "", "set_uniprot_space"], [1123, 2, 1, "", "setup_cache"], [1123, 2, 1, "", "tables_loaded"], [1123, 2, 1, "", "write_cache"]], "pypath.utils.mapping.Mapper": [[1124, 2, 1, "", "__init__"], [1124, 2, 1, "", "chain_map"], [1124, 2, 1, "", "create_reverse"], [1124, 2, 1, "", "get_table_key"], [1124, 2, 1, "", "guess_type"], [1124, 2, 1, "", "has_mapping_table"], [1124, 2, 1, "", "id_types"], [1124, 2, 1, "", "identifier"], [1124, 2, 1, "", "label"], [1124, 2, 1, "", "load_genesymbol5"], [1124, 2, 1, "", "load_mapping"], [1124, 2, 1, "", "load_uniprot_static"], [1124, 2, 1, "", "map_name"], [1124, 2, 1, "", "map_name0"], [1124, 2, 1, "", "map_names"], [1124, 2, 1, "", "mapping_tables"], [1124, 2, 1, "", "only_uniprot_ac"], [1124, 2, 1, "", "other_organism_uniprot"], [1124, 2, 1, "", "primary_uniprot"], [1124, 2, 1, "", "reload"], [1124, 2, 1, "", "remove_expired"], [1124, 2, 1, "", "remove_key"], [1124, 2, 1, "", "remove_table"], [1124, 2, 1, "", "reverse_key"], [1124, 2, 1, "", "reverse_mapping"], [1124, 2, 1, "", "swissprots"], [1124, 2, 1, "", "translate_deleted_uniprot_by_genesymbol"], [1124, 2, 1, "", "trembl_swissprot"], [1124, 2, 1, "", "uniprot_cleanup"], [1124, 2, 1, "", "valid_uniprot"], [1124, 2, 1, "", "which_table"]], "pypath.utils.mapping.MappingTable": [[1125, 2, 1, "", "__init__"], [1125, 2, 1, "", "get_key"]], "pypath.utils.mapping.MappingTableKey": [[1126, 2, 1, "", "__init__"], [1126, 2, 1, "", "count"], [1126, 4, 1, "", "id_type"], [1126, 2, 1, "", "index"], [1126, 4, 1, "", "ncbi_tax_id"], [1126, 4, 1, "", "target_id_type"]], "pypath.utils.pdb": [[1138, 1, 1, "", "Residue"], [1139, 1, 1, "", "ResidueMapper"], [1140, 1, 1, "", "Segment"], [1141, 3, 1, "", "residue_pdb"]], "pypath.utils.pdb.Residue": [[1138, 2, 1, "", "__init__"], [1138, 4, 1, "", "chain"], [1138, 2, 1, "", "count"], [1138, 2, 1, "", "index"], [1138, 4, 1, "", "offset"], [1138, 4, 1, "", "resnum"], [1138, 4, 1, "", "uniprot"]], "pypath.utils.pdb.ResidueMapper": [[1139, 2, 1, "", "__init__"], [1139, 2, 1, "", "clean"], [1139, 2, 1, "", "get_residue"], [1139, 2, 1, "", "load_mapping"]], "pypath.utils.pdb.Segment": [[1140, 2, 1, "", "__init__"], [1140, 2, 1, "", "count"], [1140, 2, 1, "", "index"], [1140, 4, 1, "", "pdb_end"], [1140, 4, 1, "", "pdb_start"], [1140, 4, 1, "", "uniprot"], [1140, 4, 1, "", "uniprot_end"], [1140, 4, 1, "", "uniprot_start"]], "pypath.utils.proteomicsdb": [[1143, 1, 1, "", "ProteomicsDB"]], "pypath.utils.proteomicsdb.ProteomicsDB": [[1143, 2, 1, "", "__init__"], [1143, 2, 1, "", "get_expression"], [1143, 2, 1, "", "get_pieces"], [1143, 2, 1, "", "get_proteins"], [1143, 2, 1, "", "get_tissues"], [1143, 2, 1, "", "pandas_matrix"], [1143, 2, 1, "", "query"], [1143, 2, 1, "", "tissues_x_proteins"]], "pypath.utils.pyreact": [[1145, 1, 1, "", "AttributeHandler"], [1146, 1, 1, "", "BioPaxReader"], [1147, 1, 1, "", "Complex"], [1148, 1, 1, "", "ComplexVariations"], [1149, 1, 1, "", "Control"], [1150, 1, 1, "", "Entity"], [1151, 1, 1, "", "EntitySet"], [1152, 1, 1, "", "Intersecting"], [1153, 1, 1, "", "Protein"], [1154, 1, 1, "", "ProteinFamily"], [1155, 1, 1, "", "PyReact"], [1156, 1, 1, "", "Reaction"], [1157, 1, 1, "", "ReactionSide"], [1158, 1, 1, "", "Reference"]], "pypath.utils.pyreact.AttributeHandler": [[1145, 2, 1, "", "__init__"]], "pypath.utils.pyreact.BioPaxReader": [[1146, 2, 1, "", "__init__"], [1146, 2, 1, "", "biopax_size"], [1146, 2, 1, "", "cleanup_hook"], [1146, 2, 1, "", "close_biopax"], [1146, 2, 1, "", "extract"], [1146, 2, 1, "", "init_etree"], [1146, 2, 1, "", "iterate"], [1146, 2, 1, "", "open_biopax"], [1146, 2, 1, "", "process"], [1146, 2, 1, "", "set_progress"]], "pypath.utils.pyreact.Complex": [[1147, 2, 1, "", "__init__"]], "pypath.utils.pyreact.ComplexVariations": [[1148, 2, 1, "", "__init__"], [1148, 2, 1, "", "itermembers"]], "pypath.utils.pyreact.Control": [[1149, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Entity": [[1150, 2, 1, "", "__init__"], [1150, 2, 1, "", "expand"]], "pypath.utils.pyreact.EntitySet": [[1151, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Intersecting": [[1152, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Protein": [[1153, 2, 1, "", "__init__"], [1153, 2, 1, "", "expand"]], "pypath.utils.pyreact.ProteinFamily": [[1154, 2, 1, "", "__init__"]], "pypath.utils.pyreact.PyReact": [[1155, 2, 1, "", "__init__"], [1155, 2, 1, "", "gen_cvariations"], [1155, 2, 1, "", "in_same_component"], [1155, 2, 1, "", "merge_complexes"], [1155, 2, 1, "", "merge_cvariations"]], "pypath.utils.pyreact.Reaction": [[1156, 2, 1, "", "__init__"]], "pypath.utils.pyreact.ReactionSide": [[1157, 2, 1, "", "__init__"], [1157, 2, 1, "", "expand"]], "pypath.utils.pyreact.Reference": [[1158, 2, 1, "", "__init__"], [1158, 2, 1, "", "expand"]], "pypath.utils.reflists": [[1160, 1, 1, "", "ReferenceListManager"], [1161, 3, 1, "", "check"], [1162, 3, 1, "", "get_manager"], [1163, 3, 1, "", "get_reflist"], [1164, 3, 1, "", "init"], [1165, 3, 1, "", "is_not"], [1166, 3, 1, "", "select"]], "pypath.utils.reflists.ReferenceListManager": [[1160, 2, 1, "", "__init__"], [1160, 2, 1, "", "check"], [1160, 2, 1, "", "is_not"], [1160, 2, 1, "", "select"]], "pypath.utils.residues": [[1168, 1, 1, "", "ResidueMapper"]], "pypath.utils.residues.ResidueMapper": [[1168, 2, 1, "", "__init__"], [1168, 2, 1, "", "clean"]], "pypath.utils.seq": [[1170, 1, 1, "", "Pfam"], [1171, 1, 1, "", "Resource"], [1172, 1, 1, "", "Seq"], [1173, 3, 1, "", "get_isoforms"], [1174, 3, 1, "", "read_fasta"], [1175, 3, 1, "", "swissprot_seq"]], "pypath.utils.seq.Pfam": [[1170, 2, 1, "", "__init__"], [1170, 2, 1, "", "iterdb"], [1170, 2, 1, "", "iterprotein"], [1170, 2, 1, "", "load"], [1170, 2, 1, "", "processor"], [1170, 2, 1, "", "unload"]], "pypath.utils.seq.Resource": [[1171, 2, 1, "", "__init__"], [1171, 2, 1, "", "iterdb"], [1171, 2, 1, "", "iterprotein"], [1171, 2, 1, "", "load"], [1171, 2, 1, "", "processor"], [1171, 2, 1, "", "unload"]], "pypath.utils.seq.Seq": [[1172, 2, 1, "", "__init__"], [1172, 2, 1, "", "findall"]], "pypath.utils.taxonomy": [[1177, 3, 1, "", "ensure_common_name"], [1178, 3, 1, "", "ensure_ensembl_name"], [1179, 3, 1, "", "ensure_latin_name"], [1180, 3, 1, "", "ensure_ncbi_tax_id"], [1181, 3, 1, "", "get_db"], [1182, 3, 1, "", "init_db"], [1183, 3, 1, "", "short_latin_names"], [1184, 3, 1, "", "shorten_latin_name"], [1185, 3, 1, "", "taxid_from_common_name"], [1186, 3, 1, "", "taxid_from_dbptm_taxon_name"], [1187, 3, 1, "", "taxid_from_ensembl_name"], [1188, 3, 1, "", "taxid_from_latin_name"], [1189, 3, 1, "", "taxid_from_nonstandard"], [1190, 3, 1, "", "uniprot_taxid"]], "pypath.utils.unichem": [[1192, 1, 1, "", "Unichem"]], "pypath.utils.unichem.Unichem": [[1192, 2, 1, "", "__init__"], [1192, 2, 1, "", "connectivity_search"], [1192, 2, 1, "", "inchikey2anything"], [1192, 2, 1, "", "info"], [1192, 2, 1, "", "smiles2chembl"], [1192, 2, 1, "", "translate"], [1192, 2, 1, "", "usage"]], "pypath.utils.uniprot": [[1194, 1, 1, "", "UniprotProtein"], [1195, 3, 1, "", "ac"], [1196, 3, 1, "", "activity_regulation"], [1197, 3, 1, "", "activity_regulation_with_xrefs"], [1198, 3, 1, "", "alternative_products"], [1199, 3, 1, "", "alternative_products_with_xrefs"], [1200, 3, 1, "", "browse"], [1201, 3, 1, "", "catalytic_activity"], [1202, 3, 1, "", "catalytic_activity_with_xrefs"], [1203, 3, 1, "", "collect"], [1204, 3, 1, "", "databases"], [1205, 3, 1, "", "disease"], [1206, 3, 1, "", "disease_with_xrefs"], [1207, 3, 1, "", "ec"], [1208, 3, 1, "", "features_table"], [1209, 3, 1, "", "full_name"], [1210, 3, 1, "", "function"], [1211, 3, 1, "", "function_genecards"], [1212, 3, 1, "", "function_or_genecards"], [1213, 3, 1, "", "function_with_genecards"], [1214, 3, 1, "", "function_with_xrefs"], [1215, 3, 1, "", "genesymbol"], [1216, 3, 1, "", "has_tag"], [1217, 3, 1, "", "id"], [1218, 3, 1, "", "info"], [1219, 3, 1, "", "info_section"], [1220, 3, 1, "", "interaction"], [1221, 3, 1, "", "interaction_with_xrefs"], [1222, 3, 1, "", "is_reviewed"], [1223, 3, 1, "", "itertag"], [1224, 3, 1, "", "keywords"], [1225, 3, 1, "", "keywords_with_xrefs"], [1226, 3, 1, "", "length"], [1227, 3, 1, "", "lengths"], [1228, 3, 1, "", "load"], [1229, 3, 1, "", "organism"], [1230, 3, 1, "", "print_features"], [1231, 3, 1, "", "ptm"], [1232, 3, 1, "", "ptm_with_xrefs"], [1233, 3, 1, "", "query"], [1234, 3, 1, "", "reload"], [1235, 3, 1, "", "remove_xrefs"], [1236, 3, 1, "", "sequence"], [1237, 3, 1, "", "sequence_caution"], [1238, 3, 1, "", "sequence_caution_with_xrefs"], [1239, 3, 1, "", "similarity"], [1240, 3, 1, "", "similarity_with_xrefs"], [1241, 3, 1, "", "subcellular_location"], [1242, 3, 1, "", "subcellular_location_with_xrefs"], [1243, 3, 1, "", "subunit"], [1244, 3, 1, "", "subunit_with_xrefs"], [1245, 3, 1, "", "tissue_specificity"], [1246, 3, 1, "", "tissue_specificity_with_xrefs"], [1247, 3, 1, "", "update_databases"], [1248, 3, 1, "", "update_info"], [1249, 3, 1, "", "web_resource"], [1250, 3, 1, "", "web_resource_with_xrefs"], [1251, 3, 1, "", "weight"], [1252, 3, 1, "", "weights"]], "pypath.utils.uniprot.UniprotProtein": [[1194, 2, 1, "", "__init__"], [1194, 5, 1, "", "databases"], [1194, 2, 1, "", "info_section"], [1194, 5, 1, "", "keywords"], [1194, 5, 1, "", "keywords_with_xrefs"], [1194, 5, 1, "", "length"], [1194, 5, 1, "", "lengths"], [1194, 5, 1, "", "sequence"], [1194, 5, 1, "", "weight"], [1194, 5, 1, "", "weights"]], "pypath.visual": [[1254, 0, 0, "-", "drawing"], [1257, 0, 0, "-", "igraph_drawing"], [1276, 0, 0, "-", "plot"]], "pypath.visual.drawing": [[1255, 1, 1, "", "InterSet"], [1256, 1, 1, "", "Plot"]], "pypath.visual.drawing.InterSet": [[1255, 2, 1, "", "__init__"], [1255, 2, 1, "", "draw"]], "pypath.visual.drawing.Plot": [[1256, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing": [[1258, 1, 1, "", "AbstractCairoGraphDrawer"], [1259, 4, 1, "", "ArrowEdgeDrawer"], [1260, 1, 1, "", "DefaultGraphDrawerFFsupport"], [1261, 4, 1, "", "DefaultVertexDrawer"], [1262, 4, 1, "", "TextDrawer"], [1263, 0, 0, "-", "edge"], [1270, 0, 0, "-", "vertex"]], "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer": [[1258, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport": [[1260, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.edge": [[1264, 1, 1, "", "AbstractEdgeDrawer"], [1265, 1, 1, "", "AlphaVaryingEdgeDrawer"], [1266, 1, 1, "", "ArrowEdgeDrawer"], [1267, 1, 1, "", "DarkToLightEdgeDrawer"], [1268, 1, 1, "", "LightToDarkEdgeDrawer"], [1269, 1, 1, "", "TaperedEdgeDrawer"]], "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer": [[1264, 2, 1, "", "__init__"], [1264, 2, 1, "", "draw_directed_edge"], [1264, 2, 1, "", "draw_loop_edge"], [1264, 2, 1, "", "draw_undirected_edge"], [1264, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer": [[1265, 2, 1, "", "__init__"], [1265, 2, 1, "", "draw_directed_edge"], [1265, 2, 1, "", "draw_loop_edge"], [1265, 2, 1, "", "draw_undirected_edge"], [1265, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer": [[1266, 2, 1, "", "__init__"], [1266, 2, 1, "", "draw_directed_edge"], [1266, 2, 1, "", "draw_loop_edge"], [1266, 2, 1, "", "draw_undirected_edge"], [1266, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer": [[1267, 2, 1, "", "__init__"], [1267, 2, 1, "", "draw_directed_edge"], [1267, 2, 1, "", "draw_loop_edge"], [1267, 2, 1, "", "draw_undirected_edge"], [1267, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer": [[1268, 2, 1, "", "__init__"], [1268, 2, 1, "", "draw_directed_edge"], [1268, 2, 1, "", "draw_loop_edge"], [1268, 2, 1, "", "draw_undirected_edge"], [1268, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer": [[1269, 2, 1, "", "__init__"], [1269, 2, 1, "", "draw_directed_edge"], [1269, 2, 1, "", "draw_loop_edge"], [1269, 2, 1, "", "draw_undirected_edge"], [1269, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.vertex": [[1271, 1, 1, "", "AbstractCairoDrawer"], [1272, 1, 1, "", "AbstractCairoVertexDrawer"], [1273, 1, 1, "", "AbstractDrawer"], [1274, 1, 1, "", "AbstractVertexDrawer"], [1275, 1, 1, "", "DefaultVertexDrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer": [[1271, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer": [[1272, 2, 1, "", "__init__"], [1272, 2, 1, "", "draw"]], "pypath.visual.igraph_drawing.vertex.AbstractDrawer": [[1273, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer": [[1274, 2, 1, "", "__init__"], [1274, 2, 1, "", "draw"]], "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer": [[1275, 2, 1, "", "__init__"], [1275, 2, 1, "", "draw"]], "pypath.visual.plot": [[1277, 1, 1, "", "Barplot"], [1278, 1, 1, "", "BarplotsGrid"], [1279, 1, 1, "", "CurationPlot"], [1280, 1, 1, "", "Dendrogram"], [1281, 1, 1, "", "Histogram"], [1282, 1, 1, "", "HistoryTree"], [1283, 1, 1, "", "HtpCharacteristics"], [1284, 1, 1, "", "MultiBarplot"], [1285, 1, 1, "", "Plot"], [1286, 1, 1, "", "RefsComposite"], [1287, 1, 1, "", "ScatterPlus"], [1288, 1, 1, "", "SimilarityGraph"], [1289, 1, 1, "", "StackedBarplot"], [1290, 3, 1, "", "boxplot"], [1291, 3, 1, "", "get_moves"], [1292, 3, 1, "", "is_opentype_cff_font"], [1293, 3, 1, "", "move_labels"], [1294, 3, 1, "", "overlap"], [1295, 3, 1, "", "rotate_labels"]], "pypath.visual.plot.Barplot": [[1277, 2, 1, "", "__init__"], [1277, 2, 1, "", "finish"]], "pypath.visual.plot.BarplotsGrid": [[1278, 2, 1, "", "__init__"], [1278, 2, 1, "", "finish"], [1278, 2, 1, "", "init_fig"], [1278, 2, 1, "", "set_figsize"], [1278, 2, 1, "", "set_grid"], [1278, 2, 1, "", "set_title"]], "pypath.visual.plot.CurationPlot": [[1279, 2, 1, "", "__init__"], [1279, 2, 1, "", "finish"], [1279, 2, 1, "", "init_fig"], [1279, 2, 1, "", "set_figsize"]], "pypath.visual.plot.Dendrogram": [[1280, 2, 1, "", "__init__"], [1280, 2, 1, "", "finish"], [1280, 2, 1, "", "init_fig"], [1280, 2, 1, "", "set_figsize"]], "pypath.visual.plot.Histogram": [[1281, 2, 1, "", "__init__"], [1281, 2, 1, "", "finish"]], "pypath.visual.plot.HistoryTree": [[1282, 2, 1, "", "__init__"], [1282, 2, 1, "", "run_latex"], [1282, 2, 1, "", "write_tex"]], "pypath.visual.plot.HtpCharacteristics": [[1283, 2, 1, "", "__init__"], [1283, 2, 1, "", "finish"], [1283, 2, 1, "", "init_fig"], [1283, 2, 1, "", "set_figsize"], [1283, 2, 1, "", "set_grid"], [1283, 2, 1, "", "set_title"]], "pypath.visual.plot.MultiBarplot": [[1284, 2, 1, "", "__init__"], [1284, 2, 1, "", "by_plot"], [1284, 2, 1, "", "do_plot"], [1284, 2, 1, "", "finish"], [1284, 2, 1, "", "init_fig"], [1284, 2, 1, "", "labels"], [1284, 2, 1, "", "make_plots"], [1284, 2, 1, "", "plot"], [1284, 2, 1, "", "plots_order"], [1284, 2, 1, "", "post_plot"], [1284, 2, 1, "", "pre_plot"], [1284, 2, 1, "", "reload"], [1284, 2, 1, "", "set_categories"], [1284, 2, 1, "", "set_colors"], [1284, 2, 1, "", "set_figsize"], [1284, 2, 1, "", "set_grid"], [1284, 2, 1, "", "set_title"], [1284, 2, 1, "", "sort"]], "pypath.visual.plot.Plot": [[1285, 2, 1, "", "__init__"], [1285, 2, 1, "", "finish"]], "pypath.visual.plot.RefsComposite": [[1286, 2, 1, "", "__init__"], [1286, 2, 1, "", "finish"], [1286, 2, 1, "", "init_fig"], [1286, 2, 1, "", "set_figsize"], [1286, 2, 1, "", "set_grid"], [1286, 2, 1, "", "set_title"]], "pypath.visual.plot.ScatterPlus": [[1287, 2, 1, "", "__init__"], [1287, 2, 1, "", "finish"], [1287, 2, 1, "", "init_fig"], [1287, 2, 1, "", "reload"], [1287, 2, 1, "", "set_figsize"], [1287, 2, 1, "", "set_title"], [1287, 2, 1, "", "values_to_sizes"]], "pypath.visual.plot.SimilarityGraph": [[1288, 2, 1, "", "__init__"], [1288, 2, 1, "", "sizes_edge"]], "pypath.visual.plot.StackedBarplot": [[1289, 2, 1, "", "__init__"], [1289, 2, 1, "", "finish"], [1289, 2, 1, "", "init_fig"], [1289, 2, 1, "", "plot"], [1289, 2, 1, "", "reload"], [1289, 2, 1, "", "set_figsize"], [1289, 2, 1, "", "set_title"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"]}, "titleterms": {"pypath": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298], "core": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "annot": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 1105, 1298, 1301], "adhesom": [3, 159, 160, 161], "almen2009": [4, 162, 163], "annotationbas": 5, "annotationt": 6, "baccin2019": [7, 164, 165, 166], "biogp": [8, 167, 168, 169, 170, 171, 172], "cancergenecensu": 9, "cancerdrugsdb": [10, 192, 193, 194, 195], "cancersea": [11, 196, 197], "cellphonedb": [12, 101, 225, 226, 227, 228, 229, 230, 231, 1298], "cellphonedbcomplex": 13, "cellsurfaceproteinatla": 14, "cellsurfaceproteinatlascelltyp": 15, "cellcal": [16, 200, 201, 202, 203, 204], "cellcellinteract": [17, 205, 206], "cellchatdb": [18, 102, 207, 208, 209, 210, 211, 212], "cellchatdbcomplex": 19, "cellink": [20, 103, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "cellinkercomplex": 21, "celltalkdb": [22, 232, 233, 234, 235], "celltypist": [23, 236, 237], "comppi": [24, 260, 261, 262], "connectomedb": [25, 263, 264, 265], "corum": [26, 107, 266, 267], "corumfuncat": 27, "corumgo": 28, "cpad": [29, 270, 271, 272, 273], "customannot": 30, "cytosig": [31, 288, 289, 290], "dgidb": [32, 301, 302, 303, 304], "disgenet": [33, 308, 309, 310, 311, 312], "embrac": [34, 349, 350, 351, 352, 353], "exocarta": [35, 358, 359, 360], "gocustomintercel": 36, "gointercel": 37, "gpcrdb": [38, 388, 389], "guidetopharmacologi": [39, 108], "hpo": [40, 413, 414, 415, 416, 417], "hgnc": [41, 399, 400], "hpmrcomplex": 42, "humanplasmamembranereceptom": 43, "humanproteinatla": 44, "humanproteinatlassecretom": 45, "humanproteinatlassubcellular": 46, "humancellmap": [47, 425, 426], "icellnet": [48, 113, 445, 446, 447, 448, 449], "icellnetcomplex": 49, "integrin": [50, 463, 464], "interpro": [51, 465, 466, 467, 468, 469], "intogen": [52, 470, 471], "italk": [53, 477, 478, 479, 480], "keggpathwai": [54, 485], "keggpathwayspc": 55, "kinasedotcom": [56, 511, 512], "kirouac2010": [57, 513, 514], "lambert2018": [58, 515, 516, 517], "ligandreceptor": 59, "locat": [60, 536, 537], "lrdb": [61, 538, 539, 540, 541], "matrisom": [62, 545, 546], "matrixdb": [63, 547, 548, 549, 550, 551, 552], "mcam": [64, 553, 554], "membranom": [65, 555, 556], "msigdb": 66, "netpathpathwai": 67, "opm": [68, 598, 599], "panglaodb": [69, 603, 604, 605], "phobiu": [70, 651, 652], "phosphatom": [71, 653, 654], "progeni": [72, 685, 686, 687], "ramilowski2015": [73, 708, 709, 710], "ramilowski2015loc": 74, "scconnect": [75, 732, 733, 734, 735], "scconnectcomplex": 76, "signalinkfunct": 77, "signalinkpathwai": 78, "signorpathwai": 79, "surfaceom": [80, 761, 762], "talklr": [81, 765, 766, 767, 768], "tcdb": [82, 769, 770, 771, 772], "tfcensu": [83, 773, 774], "topdb": [84, 786, 787], "uniprotfamili": 85, "uniprotkeyword": 86, "uniprotloc": 87, "uniprottissu": 88, "uniprottopologi": 89, "vesiclepedia": 90, "wang": [91, 840, 841, 842, 843, 844], "zhong2015": [92, 848, 849], "get_db": [93, 119, 129, 140, 148, 816, 904, 1106, 1181], "init_db": [94, 120, 130, 141, 149, 818, 905, 1107, 1182], "attr": [95, 96], "attributehandl": [96, 1145], "common": [97, 98, 248, 249, 250, 251, 252, 253, 254, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1298], "filter_network_df": 98, "complex": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 869, 1147, 1298, 1301], "abstractcomplexresourc": 100, "compleat": [104, 255, 256, 257], "complexaggreg": 105, "complexport": [106, 258, 259], "havugimana": [109, 396, 397, 398], "hpmr": [110, 407, 408, 409, 410, 411, 412], "humap": [111, 427, 428, 429], "humap2": 112, "kegg": [114, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "pdb": [115, 628, 629, 630, 631, 1137, 1138, 1139, 1140, 1141], "signor": [116, 743, 744, 745, 746, 747, 748, 749], "spike": [117, 750, 751, 752], "all_complex": 118, "entiti": [121, 122, 123, 124, 1150], "entitykei": 123, "entitylist": 124, "enz_sub": [125, 126, 127, 128, 129, 130], "enzymesubstrateaggreg": 126, "enzymesubstratehomologyprocessor": 127, "enzymesubstrateprocessor": 128, "evid": [131, 132, 133], "interact": [134, 135, 136, 137, 952, 1220, 1298, 1301], "interactiondataframerecord": 136, "interactionkei": 137, "intercel": [138, 139, 140, 141, 1298], "intercellannot": 139, "intercell_annot": [142, 143], "exclud": 143, "network": [144, 145, 146, 147, 148, 149, 967, 968, 1298, 1301], "networkentitycollect": [146, 901], "networkstatsrecord": [147, 902], "data": [150, 947, 1298], "disclaim": 151, "info": [152, 805, 1218, 1298], "input": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 1298], "ab": [154, 155], "abs_interact": 155, "acsn": [156, 157, 158], "acsn_interact": 157, "acsn_interactions_sif": 158, "adhesome_annot": 160, "adhesome_interact": 161, "almen2009_annot": 163, "baccin2019_annot": 165, "baccin2019_interact": 166, "biogpsdataset": 168, "biogps_annot": 169, "biogps_dataset": 170, "biogps_download": 171, "biogps_download_al": 172, "biogrid": [173, 174, 175], "biogrid_all_interact": 174, "biogrid_interact": 175, "biomart": [176, 177, 178, 179, 180, 181], "biomart_homologi": 177, "biomart_microarrai": [178, 180], "biomart_microarray_typ": 179, "biomart_queri": 181, "biomodel": [182, 183, 184, 185, 186, 187], "download_single_model": 183, "get_all_model": 184, "get_biomodel": 185, "get_biomodels_req": 186, "get_single_model": 187, "ca1": [188, 189], "ca1_interact": 189, "cancercellmap": [190, 191], "ccmap_interact": 191, "cancerdrugsdb_annot": 193, "cancerdrugsdb_download": 194, "cancerdrugsdb_interact": 195, "cancersea_annot": 197, "cell": [198, 199], "cell_supplementari": 199, "cellcall_annot": 201, "cellcall_download": 202, "cellcall_download_al": 203, "cellcall_interact": 204, "cellcellinteractions_annot": 206, "cellchatdb_annot": 208, "cellchatdb_cofactor": 209, "cellchatdb_complex": 210, "cellchatdb_download": 211, "cellchatdb_interact": 212, "cellinkerinteract": 214, "cellinker_annot": 215, "cellinker_complex_annot": 216, "cellinker_complex": 217, "cellinker_complexes_raw": 218, "cellinker_lr_interact": 219, "cellinker_lr_interactions_raw": 220, "cellinker_protein_annot": 221, "cellinker_smol_interact": 222, "cellinker_smol_interactions_raw": 223, "components_to_complex": 224, "cellphonedbannot": 226, "cellphonedb_complex_annot": 227, "cellphonedb_complex": 228, "cellphonedb_interact": 229, "cellphonedb_ligands_receptor": 230, "cellphonedb_protein_annot": 231, "celltalkdb_annot": 233, "celltalkdb_download": 234, "celltalkdb_interact": 235, "celltypist_annot": 237, "chembl": [238, 239, 240, 241, 242, 243, 244], "chembl_act": 239, "chembl_assai": 240, "chembl_docu": 241, "chembl_drug_ind": 242, "chembl_molecul": 243, "chembl_target": 244, "clinvar": [245, 246, 247], "clinvar_cit": 246, "clinvar_raw": 247, "csv_sep_chang": 249, "glom_field": 250, "json_extract": 251, "json_read": 252, "read_tabl": 253, "read_xl": 254, "compleat_complex": 256, "compleat_raw": 257, "complexportal_complex": 259, "comppi_interaction_loc": 261, "comppi_loc": 262, "connectomedb_annot": 264, "connectomedb_interact": 265, "corum_complex": 267, "cosmic": [268, 269], "cancer_gene_census_annot": 269, "cpad_annot": 271, "cpad_pathway_canc": 272, "get_cpad": 273, "cpdb": [274, 275, 276], "cpdb_interact": 275, "cpdb_interactions_ltp": 276, "credenti": [277, 278], "csa": [279, 280], "get_csa": 280, "cspa": [281, 282, 283, 284], "cspa_annot": 282, "cspa_cell_type_annot": 283, "cspa_cell_typ": 284, "ctdbase": [285, 286, 287], "ctdbase_rel": 286, "ctdbase_vocabulari": 287, "cytosig_annot": 289, "cytosig_df": 290, "dbptm": [291, 292, 293, 294], "dbptm_enzyme_substr": 292, "dbptm_enzyme_substrate_old": 293, "dbptm_interact": 294, "deathdomain": [295, 296, 297], "deathdomain_interact": 296, "deathdomain_interactions_rescu": 297, "depod": [298, 299, 300], "depod_enzyme_substr": 299, "depod_interact": 300, "dgidb_annot": 302, "dgidb_interact": 303, "get_dgidb_old": 304, "dip": [305, 306, 307], "dip_interact": 306, "dip_login": 307, "disgenetapi": 309, "disease_id_map": 310, "disgenet_annot": 311, "variant_gene_map": 312, "domino": [313, 314, 315, 316, 317], "domino_ddi": 314, "domino_enzsub": 315, "domino_interact": 316, "get_domino": 317, "dorothea": [318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 1298], "dorotheainteract": 319, "dorothea_full_raw": 320, "dorothea_interact": 321, "detail": [321, 322, 323, 325, 327, 328], "dorothea_interactions_old": 322, "dorothea_old_csv": 323, "dorothea_rda_raw": 324, "get_dorothea_old": 325, "get_tfregulon": 326, "tfregulons_interact": 327, "tfregulons_interactions_old": 328, "drugbank": [329, 330, 331, 332, 333, 334, 335], "drugbankful": 330, "drugbank_annot": 331, "drugbank_drug": 332, "drugbank_interact": 333, "drugbank_map": 334, "drugbank_raw_interact": 335, "drugcentr": [336, 337, 338, 339], "drugcentral_drug": 337, "drugcentral_interact": 338, "drugcentral_map": 339, "ebi": [340, 341], "ebi_rest": 341, "elm": [342, 343, 344, 345, 346], "elm_class": 343, "elm_domain": 344, "elm_inst": 345, "elm_interact": 346, "embopress": [347, 348], "embopress_supplementari": 348, "embrace_annot": 350, "embrace_interact": 351, "embrace_raw": 352, "embrace_transl": 353, "encod": [354, 355], "encode_tf_mirna_interact": 355, "ensembl": [356, 357], "ensembl_organ": 357, "get_exocarta": 359, "get_vesiclepedia": 360, "genecard": [361, 362, 363, 364], "genecards_datasheet": 362, "genecards_soup": 363, "genecards_summari": 364, "get_method": 365, "go": [366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108], "get_go_desc": 367, "get_go_quick": 368, "get_goslim": 369, "go_ancestor": 370, "go_ancestors_goos": 371, "go_ancestors_quickgo": 372, "go_annot": 373, "go_annotations_al": 374, "go_annotations_goa": 375, "go_annotations_goos": 376, "go_annotations_quickgo": 377, "go_annotations_solr": 378, "go_annotations_uniprot": 379, "go_descend": 380, "go_descendants_goos": 381, "go_descendants_quickgo": 382, "go_descendants_to_ancestor": 383, "go_term": 384, "go_terms_goos": 385, "go_terms_quickgo": 386, "go_terms_solr": 387, "gpcrdb_annot": 389, "graphviz": [390, 391], "graphviz_attr": 391, "guide2pharma": [392, 393, 394, 395], "guide2pharma_complex": 393, "guide2pharma_download": 394, "guide2pharma_interact": 395, "get_havugimana": 397, "havugimana_complex": 398, "hgnc_genegroup": 400, "hippi": [401, 402], "hippie_interact": 402, "homologen": [403, 404, 405, 406], "get_homologen": 404, "homologene_dict": 405, "homologene_uniprot_dict": 406, "hpmrinteract": 408, "get_hpmr": 409, "hpmr_annot": 410, "hpmr_complex": 411, "hpmr_interact": 412, "hpo_annot": 414, "hpo_diseas": 415, "hpo_ontologi": 416, "hpo_term": 417, "hprd": [418, 419, 420, 421, 422], "get_hprd": 419, "hprd_enzyme_substr": 420, "hprd_interact": 421, "hprd_interactions_htp": 422, "htri": [423, 424], "htri_interact": 424, "humancellmap_annot": 426, "humap2_complex": 428, "humap_complex": 429, "huri": [430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442], "hi_i_interact": 431, "hi_ii_interact": 432, "hi_iii_old": 433, "hi_union_interact": 434, "huri_interact": 435, "lit_bm_13_interact": 436, "lit_bm_17_interact": 437, "lit_bm_interact": 438, "rolland_hi_ii_14": 439, "vidal_hi_iii_old": 440, "yang2016_interact": 441, "yu2011_interact": 442, "i3d": [443, 444], "get_i3d": 444, "icellnetrecord": 446, "icellnet_annot": 447, "icellnet_complex": 448, "icellnet_interact": 449, "ielm": [450, 451, 452], "get_ielm": 451, "get_ielm_hug": 452, "imweb": [453, 454, 455], "get_imweb": 454, "get_imweb_req": 455, "innatedb": [456, 457], "innatedb_interact": 457, "instruct": [458, 459, 460], "get_instruct": 459, "get_instruct_offset": 460, "intact": [461, 462], "intact_interact": 462, "get_integrin": 464, "interpro2go_annot": 466, "interpro_annot": 467, "interpro_entri": 468, "interpro_xref": 469, "intogen_annot": 471, "ipi": [472, 473], "ipi_uniprot": 473, "iptmnet": [474, 475, 476], "iptmnetinteract": 475, "iptmnet_interact": 476, "italk_annot": 478, "italk_interact": 479, "italk_raw": 480, "kea": [481, 482, 483], "kea_enzyme_substr": 482, "kea_interact": 483, "kegg_dbget": 486, "kegg_interact": 487, "kegg_medicu": 488, "kegg_medicus_complex": 489, "kegg_medicus_interact": 490, "kegg_pathway_annot": 491, "kegg_pathway_annotations_pathwaycommon": 492, "kegg_pathwai": 493, "kegg_api": [494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "disease_to_drug": 495, "disease_to_gen": 496, "disease_to_pathwai": 497, "drug_to_diseas": 498, "drug_to_drug": 499, "drug_to_gen": 500, "drug_to_pathwai": 501, "gene_to_diseas": 502, "gene_to_drug": 503, "gene_to_pathwai": 504, "kegg_drug_to_chebi": 505, "kegg_gene_to_ncbi_geneid": 506, "kegg_gene_to_uniprot": 507, "pathway_to_diseas": 508, "pathway_to_drug": 509, "pathway_to_gen": 510, "kinasedotcom_annot": 512, "kirouac2010_interact": 514, "lambert2018_annot": 516, "lambert2018_s1_raw": 517, "laudanna": [518, 519, 520], "laudanna_direct": 519, "laudanna_effect": 520, "li2012": [521, 522, 523, 524, 525], "get_li2012": 522, "li2012_dmi": 523, "li2012_enzyme_substr": 524, "li2012_interact": 525, "linc": [526, 527], "lincs_compound": 527, "lmpid": [528, 529, 530, 531], "lmpid_dmi": 529, "lmpid_interact": 530, "load_lmpid": 531, "lncdiseas": [532, 533], "lncdisease_interact": 533, "lncrnadb": [534, 535], "lncrnadb_interact": 535, "locate_loc": 537, "lrdbannot": 539, "lrdb_annot": 540, "lrdb_interact": 541, "macrophag": [542, 543], "macrophage_interact": 543, "main": [544, 899, 900, 901, 902, 903, 904, 905], "matrisome_annot": 546, "matrixdb_annot": 548, "matrixdb_ecm_protein": 549, "matrixdb_interact": 550, "matrixdb_membrane_protein": 551, "matrixdb_secreted_protein": 552, "mcam_cell_adhesion_molecul": 554, "membranome_annot": 556, "mimp": [557, 558, 559, 560], "get_kinase_class": 558, "mimp_enzyme_substr": 559, "mimp_interact": 560, "mir2diseas": [561, 562], "mir2disease_interact": 562, "mirbas": [563, 564, 565, 566, 567, 568, 569, 570], "get_mirbase_alias": 564, "mirbase_id": 565, "mirbase_matur": 566, "mirbase_mature_al": 567, "mirbase_precursor": 568, "mirbase_precursor_al": 569, "mirbase_precursor_to_matur": 570, "mirdeathdb": [571, 572], "mirdeathdb_interact": 572, "mirecord": [573, 574], "mirecords_interact": 574, "mirtarbas": [575, 576], "mirtarbase_interact": 576, "mitab": [577, 578, 579], "mitab_field_list": 578, "mitab_field_uniprot": 579, "mppi": [580, 581], "mppi_interact": 581, "ncrdeathdb": [582, 583], "ncrdeathdb_interact": 583, "negatom": [584, 585], "negatome_interact": 585, "netbiol": [586, 587, 588], "arn_interact": 587, "nrf2ome_interact": 588, "netpath": [589, 590, 591, 592], "netpath_interact": 590, "netpath_nam": 591, "netpath_pathway_annot": 592, "oma": [593, 594], "oma_ortholog": 594, "ontologi": [595, 596, 597, 1298], "listof_ontologi": 596, "opm_annot": 599, "oreganno": [600, 601, 602], "oreganno_interact": 601, "oreganno_raw": 602, "panglaodb_annot": 604, "panglaodb_raw": 605, "pathophenodb": [606, 607, 608], "diseasepathogen": 607, "disease_pathogen_interact": 608, "pathwaycommon": [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625], "pathwaycommonsinteract": 610, "pathwaycommonsresourc": 611, "pathwaycommons_bind_interact": 612, "pathwaycommons_biogrid_interact": 613, "pathwaycommons_corum_interact": 614, "pathwaycommons_dip_interact": 615, "pathwaycommons_hprd_interact": 616, "pathwaycommons_inoh_interact": 617, "pathwaycommons_intact_interact": 618, "pathwaycommons_interact": 619, "pathwaycommons_kegg_interact": 620, "pathwaycommons_netpath_interact": 621, "pathwaycommons_panther_interact": 622, "pathwaycommons_phosphosite_interact": 623, "pathwaycommons_reactome_interact": 624, "pathwaycommons_wikipathways_interact": 625, "pazar": [626, 627], "pazar_interact": 627, "pdb_chain": 629, "pdb_complex": 630, "pdb_uniprot": 631, "pdzbase": [632, 633], "pdzbase_interact": 633, "pepcyb": [634, 635, 636], "pepcyber_detail": 635, "pepcyber_interact": 636, "pfam": [637, 638, 639, 640, 641, 1170], "pfam_nam": 638, "pfam_pdb": 639, "pfam_region": 640, "pfam_uniprot": 641, "pharo": [642, 643, 644, 645, 646, 647, 648, 649, 650], "pharos_diseas": 643, "pharos_express": 644, "pharos_gener": 645, "pharos_gtex": 646, "pharos_ligand": 647, "pharos_ortholog": 648, "pharos_target": 649, "pharos_xref": 650, "phobius_annot": 652, "phosphatome_annot": 654, "phosphoelm": [655, 656, 657, 658], "phosphoelm_enzyme_substr": 656, "phosphoelm_interact": 657, "phosphoelm_kinas": 658, "phosphonetwork": [659, 660, 661], "phosphonetworks_enzyme_substr": 660, "phosphonetworks_interact": 661, "phosphopoint": [662, 663, 664], "phosphopoint_direct": 663, "phosphopoint_interact": 664, "phosphosit": [665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "phosphosite_direct": 666, "phosphosite_enzyme_substr": 667, "phosphosite_interact": 668, "phosphosite_interactions_al": 669, "phosphosite_interactions_cur": 670, "phosphosite_interactions_new": 671, "phosphosite_interactions_noref": 672, "phosphosite_ptm_orthologi": 673, "phosphosite_ptm": 674, "phosphosite_regsit": 675, "phosphosite_regsites_one_organ": 676, "regsites_tab": 677, "pisa": [678, 679, 680, 681], "pisabond": 679, "pisa_bond": 680, "pisa_interfac": 681, "pro": [682, 683, 684], "get_pro": 683, "pro_map": 684, "progeny_annot": 686, "progeny_raw": 687, "proteinatla": [688, 689, 690, 691, 692], "get_proteinatla": 689, "proteinatlas_annot": 690, "proteinatlas_secretome_annot": 691, "proteinatlas_subcellular_annot": 692, "protein": [693, 694, 1153, 1298], "variant": 694, "protmapp": [695, 696, 697, 698], "get_protmapp": 696, "protmapper_enzyme_substr": 697, "protmapper_interact": 698, "pubchem": [699, 700], "pubchem_map": 700, "pubm": [701, 702, 703, 704, 705, 706, 707], "get_pmid": 702, "get_pubm": 703, "only_pmid": 704, "open_pubm": 705, "pmids_dict": 706, "pmids_list": 707, "ramilowski_interact": 709, "ramilowski_loc": 710, "rdata": 711, "reaction": [712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 1156], "acsn_biopax": 713, "acsn_interactions_2": 714, "get_acsn_effect": 715, "get_control": [716, 964], "get_interact": 717, "get_react": 718, "get_soup": 719, "panther_biopax": 720, "panther_interact": 721, "pid_biopax": 722, "pid_interact": 723, "process_complex": 724, "process_control": 725, "process_react": 726, "reactions_biopax": 727, "reactome_biopax": 728, "reactome_b": 729, "reactome_interact": 730, "reactome_sbml": 731, "scconnect_annot": 733, "scconnect_complex": 734, "scconnect_interact": 735, "scienc": [736, 737], "science_download": 737, "signalink": [738, 739, 740, 741, 742], "signalink_annot": 739, "signalink_function_annot": 740, "signalink_interact": 741, "signalink_pathway_annot": 742, "signor_complex": 744, "signor_enzyme_substr": 745, "signor_interact": 746, "signor_pathway_annot": 747, "signor_pathwai": 748, "signor_protein_famili": 749, "spike_complex": 751, "spike_interact": 752, "stitch": [753, 754, 755], "stitch_actions_interact": 754, "stitch_links_interact": 755, "string": [756, 757, 758, 759, 760], "string_effect": 757, "string_links_interact": 758, "string_physical_interact": 759, "string_speci": 760, "surfaceome_annot": 762, "switches_elm": [763, 764], "get_switches_elm": 764, "talklr_annot": 766, "talklr_interact": 767, "talklr_raw": 768, "tcdb_annot": 770, "tcdb_class": 771, "tcdb_famili": 772, "tfcensus_annot": 774, "threedcomplex": [775, 776, 777, 778, 779, 780], "threedcomplex_chain": 776, "threedcomplex_complex": 777, "threedcomplex_contact": 778, "threedcomplex_ddi": 779, "threedcomplex_nresidu": 780, "threedid": [781, 782, 783, 784, 785], "get_3did": 782, "get_3did_ddi": 783, "get_3did_dmi": 784, "process_3did_dmi": 785, "topdb_annot": 787, "transmir": [788, 789], "transmir_interact": 789, "trip": [790, 791, 792, 793, 794, 795, 796], "take_a_trip": 791, "trip_find_uniprot": 792, "trip_get_uniprot": 793, "trip_interact": 794, "trip_process": 795, "trip_process_t": 796, "trrust": [797, 798, 799, 800, 801, 802, 803], "scrape_human": 798, "scrape_mous": 799, "trrust_gener": 800, "trrust_human": 801, "trrust_mous": 802, "trrust_scrap": 803, "unichem": [804, 805, 806, 807, 808, 1191, 1192], "unichem_info": 806, "unichem_map": 807, "unichem_sourc": 808, "uniprot": [809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1298], "taxon": 810, "uniprotrecordhistori": 811, "all_swissprot": 812, "all_trembl": 813, "all_uniprot": 814, "deleted_uniprot_genesymbol": 815, "get_uniprot_sec": 817, "is_swissprot": 819, "is_trembl": 820, "is_uniprot": 821, "protein_datasheet": 822, "swissprot_delet": 823, "trembl_delet": 824, "uniprot_data": 825, "uniprot_delet": 826, "uniprot_famili": 827, "uniprot_histori": 828, "uniprot_history_recent_datasheet": 829, "uniprot_keyword": 830, "uniprot_loc": 831, "uniprot_ncbi_taxid": 832, "uniprot_ncbi_taxids_2": 833, "uniprot_preprocess": 834, "uniprot_recent_vers": 835, "uniprot_taxonomi": 836, "uniprot_tissu": 837, "uniprot_topologi": 838, "valid_uniprot": 839, "cui_interact": 841, "hsn_interact": 842, "wang_annot": 843, "wang_interact": 844, "wojtowicz2020": [845, 846, 847], "wojtowicz2020_interact": 846, "wojtowicz2020_raw": 847, "zhong2015_annot": 849, "intern": [850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894], "annot_format": [851, 852, 853, 854, 855], "annotdef": 852, "annotdefkei": 853, "annotop": 854, "annotationgroup": 855, "input_format": [856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867], "arraymap": 857, "biomartmap": 858, "filemap": 859, "mappinginput": 860, "networkinput": 861, "picklemap": 862, "promap": 863, "readlist": 864, "unichemmap": 865, "uniprotlistmap": 866, "uniprotmap": 867, "intera": [868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "domain": 870, "domaindomain": 871, "domainmotif": 872, "interfac": 873, "motif": 874, "ptm": [875, 1231], "regul": [876, 1298], "residu": [877, 1138, 1167, 1168], "licens": [878, 879, 880, 881, 882, 883, 965, 966, 1298], "licenseattrib": 880, "licensefeatur": 881, "licensepurpos": 882, "licenseshar": 883, "map": [884, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136], "ref": [885, 886, 887], "refer": [886, 1158, 1298, 1299], "get_pubmed_data": 887, "resourc": [888, 889, 890, 891, 892, 893, 894, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 1171, 1298], "abstractresourc": 889, "enzymesubstrateresourc": 890, "enzymesubstrateresourcekei": 891, "networkresourc": 892, "networkresourcekei": 893, "resourceattribut": 894, "legaci": [895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 933, 934, 1298], "db_categori": [896, 897, 898], "get_categori": [897, 898], "direct": [900, 1298], "exampl": [903, 1301], "log": [906, 1084, 1085, 1086, 1298], "omnipath": [907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 1297, 1298], "app": [908, 909, 1298], "databasemanag": 909, "databas": [910, 911, 912, 913, 914, 915, 916, 917, 918, 1204, 1297, 1298], "build": [911, 926, 927, 1298], "class_and_param": 912, "defin": [913, 914, 915, 916, 1298], "databaseclass": 914, "databasedefinit": 915, "databasedefinitionmanag": 916, "get_manag": [917, 1118, 1162], "init_manag": 918, "export": [919, 920, 1298], "init": [921, 1119, 1132, 1164], "param": [922, 923, 924], "curated_ppi_resourc": 923, "tf_target_resourc": 924, "server": [925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943], "webservicet": 927, "generate_about_pag": [928, 929, 930, 931, 932], "export_licens": [929, 960], "generate_about_html": 930, "resource_list_latex": [931, 962], "write_html": [932, 963], "pypathserv": 934, "run": [935, 936, 937, 938, 939, 940, 941, 942, 943], "baseserv": 936, "rest": 937, "tableserv": 938, "twistedwebresourc": 939, "twistedwebsit": 940, "stop_serv": 941, "twisted_listen_tcp": 942, "twisted_run": 943, "control": [945, 946, 1149], "resourcecontrol": 946, "data_format": [948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958], "root": 949, "activity_flow": 950, "enzyme_substr": 951, "interaction_htp": 953, "obsol": 954, "pathway_bad": 955, "reaction_pc": 956, "transcription_deprec": 957, "transcription_onebyon": 958, "descript": [959, 960, 961, 962, 963], "gen_html": 961, "dorothea_expand_level": 968, "url": 969, "share": [970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099], "cach": [971, 972, 973, 1298], "cache_item": 972, "get_cachedir": 973, "add_to_list": 975, "add_to_set": 976, "at_least_in": 977, "clean_dict": 978, "combine_attr": 979, "consol": [980, 1298], "decod": 981, "del_empti": 982, "df_memory_usag": 983, "dict_collapse_kei": 984, "dict_count": 985, "dict_diff": 986, "dict_expand_kei": 987, "dict_perc": 988, "dict_set_path": 989, "dict_set_perc": 990, "dict_str": 991, "dict_subtot": 992, "dict_sym_diff": 993, "dict_union": 994, "eq": 995, "filtr": 996, "first": 997, "flat_list": 998, "float_or_nan": 999, "gen_session_id": 1000, "get": [1001, 1098, 1297], "get_arg": 1002, "is_float": 1003, "is_int": 1004, "is_str": 1005, "jaccard_index": 1006, "join_dict": 1007, "latex_t": 1008, "match": 1009, "maybe_in_dict": 1010, "md5": 1011, "merge_dict": 1012, "n_shared_el": 1013, "n_shared_foreach": 1014, "n_shared_tot": 1015, "n_shared_unique_foreach": 1016, "n_unique_el": 1017, "n_unique_foreach": 1018, "n_unique_tot": 1019, "negat": 1020, "none_or_len": 1021, "pagin": 1022, "prefix": 1023, "print_tabl": 1024, "re_safe_group": 1025, "remove_prefix": 1026, "rotat": 1027, "sets_to_sorted_list": 1028, "sfirst": 1029, "shared_el": 1030, "shared_foreach": 1031, "shared_tot": 1032, "shared_uniqu": 1033, "shared_unique_foreach": 1034, "shared_unique_tot": 1035, "silent": 1036, "simpson_index": 1037, "simpson_index_count": 1038, "someth": 1039, "sorensen_index": 1040, "suffix": 1041, "sum_dict": 1042, "swap_dict": 1043, "swap_dict_simpl": 1044, "swap_suffix": 1045, "table_add_row_numb": 1046, "table_format": 1047, "table_textwrap": 1048, "to_list": 1049, "to_set": 1050, "try_bool": 1051, "try_float": 1052, "tsv_tabl": 1053, "uniq_list": 1054, "uniq_list1": 1055, "uniq_list2": 1056, "uniq_ord_list": 1057, "unique_el": 1058, "unique_foreach": 1059, "unique_list": 1060, "unique_tot": 1061, "upper0": 1062, "valu": 1063, "wcl": 1064, "wrap_trunc": 1065, "constant": 1066, "curl": [1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1298], "fileopen": 1069, "remotefil": 1070, "cache_delete_off": 1071, "cache_delete_on": 1072, "cache_off": 1073, "cache_on": 1074, "cache_print_off": 1075, "cache_print_on": 1076, "debug_off": 1077, "debug_on": 1078, "dryrun_off": 1079, "dryrun_on": 1080, "is_url": 1081, "preserve_off": 1082, "preserve_on": 1083, "logger": [1085, 1090, 1298], "new_logg": 1086, "progress": [1087, 1088], "session": [1089, 1090, 1091, 1092, 1093, 1094, 1298], "get_log": 1092, "get_sess": 1093, "new_sess": 1094, "set": [1095, 1096, 1097, 1098, 1099], "context": 1097, "setup": 1099, "util": [1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1298], "goannot": 1102, "gocustomannot": 1103, "geneontologi": 1104, "load_go": 1108, "homologi": [1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1297, 1298], "homologymanag": 1110, "ortholog": 1111, "proteinhomologi": 1112, "proteom": 1113, "ptmhomologi": 1114, "sequencecontain": 1115, "get_df": 1116, "get_dict": 1117, "translat": [1120, 1297, 1298], "translate_df": 1121, "mapread": 1123, "mapper": 1124, "mappingt": 1125, "mappingtablekei": 1126, "uniprot_id_typ": 1127, "get_mapp": 1128, "guess_typ": 1129, "id_from_label": 1130, "id_from_label0": 1131, "label": 1133, "map_nam": [1134, 1136], "map_name0": 1135, "residuemapp": [1139, 1168], "segment": 1140, "residue_pdb": 1141, "proteomicsdb": [1142, 1143], "pyreact": [1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158], "biopaxread": 1146, "complexvari": 1148, "entityset": 1151, "intersect": 1152, "proteinfamili": 1154, "reactionsid": 1157, "reflist": [1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "referencelistmanag": 1160, "check": 1161, "get_reflist": 1163, "is_not": 1165, "select": [1166, 1298], "seq": [1169, 1170, 1171, 1172, 1173, 1174, 1175], "get_isoform": 1173, "read_fasta": 1174, "swissprot_seq": 1175, "taxonomi": [1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1298], "ensure_common_nam": 1177, "ensure_ensembl_nam": 1178, "ensure_latin_nam": 1179, "ensure_ncbi_tax_id": 1180, "short_latin_nam": 1183, "shorten_latin_nam": 1184, "taxid_from_common_nam": 1185, "taxid_from_dbptm_taxon_nam": 1186, "taxid_from_ensembl_nam": 1187, "taxid_from_latin_nam": 1188, "taxid_from_nonstandard": 1189, "uniprot_taxid": 1190, "uniprotprotein": 1194, "ac": 1195, "activity_regul": 1196, "activity_regulation_with_xref": 1197, "alternative_product": 1198, "alternative_products_with_xref": 1199, "brows": [1200, 1298], "catalytic_act": 1201, "catalytic_activity_with_xref": 1202, "collect": 1203, "diseas": 1205, "disease_with_xref": 1206, "ec": 1207, "features_t": 1208, "full_nam": 1209, "function": 1210, "function_genecard": 1211, "function_or_genecard": 1212, "function_with_genecard": 1213, "function_with_xref": 1214, "genesymbol": 1215, "has_tag": 1216, "id": [1217, 1297, 1298], "info_sect": 1219, "interaction_with_xref": 1221, "is_review": 1222, "itertag": 1223, "keyword": 1224, "keywords_with_xref": 1225, "length": [1226, 1227], "load": [1228, 1298], "organ": [1229, 1298], "print_featur": 1230, "ptm_with_xref": 1232, "queri": [1233, 1298, 1301], "reload": 1234, "remove_xref": 1235, "sequenc": [1236, 1298], "sequence_caut": 1237, "sequence_caution_with_xref": 1238, "similar": 1239, "similarity_with_xref": 1240, "subcellular_loc": 1241, "subcellular_location_with_xref": 1242, "subunit": 1243, "subunit_with_xref": 1244, "tissue_specif": 1245, "tissue_specificity_with_xref": 1246, "update_databas": 1247, "update_info": 1248, "web_resourc": 1249, "web_resource_with_xref": 1250, "weight": [1251, 1252], "visual": [1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295], "draw": [1254, 1255, 1256], "interset": 1255, "plot": [1256, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1298], "igraph_draw": [1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275], "abstractcairographdraw": 1258, "arrowedgedraw": [1259, 1266], "defaultgraphdrawerffsupport": 1260, "defaultvertexdraw": [1261, 1275], "textdraw": 1262, "edg": [1263, 1264, 1265, 1266, 1267, 1268, 1269, 1298], "abstractedgedraw": 1264, "alphavaryingedgedraw": 1265, "darktolightedgedraw": 1267, "lighttodarkedgedraw": 1268, "taperededgedraw": 1269, "vertex": [1270, 1271, 1272, 1273, 1274, 1275], "abstractcairodraw": 1271, "abstractcairovertexdraw": 1272, "abstractdraw": 1273, "abstractvertexdraw": 1274, "barplot": 1277, "barplotsgrid": 1278, "curationplot": 1279, "dendrogram": 1280, "histogram": 1281, "historytre": 1282, "htpcharacterist": 1283, "multibarplot": 1284, "refscomposit": 1286, "scatterplu": 1287, "similaritygraph": 1288, "stackedbarplot": 1289, "boxplot": 1290, "get_mov": 1291, "is_opentype_cff_font": 1292, "move_label": 1293, "overlap": 1294, "rotate_label": 1295, "content": [1296, 1298], "welcom": 1297, "do": [1297, 1298], "you": [1297, 1298], "need": 1297, "instal": 1297, "doc": 1297, "help": 1297, "featur": 1297, "integr": 1297, "manag": [1297, 1298], "further": 1297, "modul": [1297, 1298], "convers": 1297, "faq": 1297, "contact": 1297, "impressum": 1297, "histori": [1297, 1298, 1300], "releas": [1297, 1300], "The": 1298, "book": 1298, "introduct": 1298, "save": 1298, "built": 1298, "definit": 1298, "strictli": 1298, "literatur": 1298, "curat": 1298, "extra": 1298, "activ": 1298, "flow": 1298, "enzym": [1298, 1301], "substrat": [1298, 1301], "ligand": 1298, "receptor": 1298, "transcript": 1298, "from": 1298, "other": 1298, "mirna": 1298, "post": 1298, "lncrna": 1298, "mrna": 1298, "small": 1298, "molecul": 1298, "relationship": 1298, "inter": [1298, 1301], "cellular": [1298, 1301], "commun": [1298, 1301], "role": [1298, 1301], "directli": 1298, "origin": 1298, "download": 1298, "custom": 1298, "failur": 1298, "corrupt": 1298, "issu": 1298, "look": 1298, "debug": 1298, "timeout": 1298, "access": 1298, "inspect": 1298, "object": 1298, "i": 1298, "fail": 1298, "onli": 1298, "read": 1298, "tl": 1298, "ssl": 1298, "http": 1298, "error": 1298, "inform": 1298, "certain": 1298, "dataset": [1298, 1301], "which": 1298, "ar": 1298, "pre": 1298, "panda": 1298, "datafram": 1298, "identifi": 1298, "tabl": 1298, "dictionari": 1298, "frame": 1298, "ncbi": 1298, "scientif": 1298, "name": 1298, "all": 1298, "one": 1298, "format": 1298, "valid": 1298, "singl": 1298, "datasheet": 1298, "record": 1298, "api": 1298, "process": 1298, "sanit": 1298, "full": 1298, "signal": 1298, "an": 1298, "intercellular": 1298, "quantit": 1298, "overview": 1298, "categori": 1298, "gene": 1298, "pickl": 1298, "messag": 1298, "basic": 1298, "about": 1298, "file": 1298, "disabl": 1298, "write": 1298, "send": 1298, "connect": 1298, "class": 1298, "bel": 1298, "igraph": 1298, "base": 1298, "just": 1298, "want": 1298, "quickli": 1298, "plai": 1298, "around": 1298, "how": [1298, 1299], "ani": 1298, "creat": 1298, "2": [1298, 1300], "test": 1298, "structur": 1298, "sign": 1298, "node": 1298, "our": 1298, "without": 1298, "causal": 1298, "navig": 1299, "0": 1300, "1": 1300, "3": 1300, "4": 1300, "5": 1300, "32": 1300, "6": 1300, "31": 1300, "7": 1300, "74": 1300, "93": 1300, "110": 1300, "8": 1300, "9": 1300, "10": 1300, "11": 1300, "12": 1300, "13": 1300, "14": 1300, "upcom": 1300, "webservic": 1301, "type": 1301, "mous": 1301, "rat": 1301, "molecular": 1301, "explor": 1301, "possibl": 1301, "paramet": 1301}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx_last_updated_by_git": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"pypath": [[0, "module-pypath"]], "pypath.core": [[1, "module-pypath.core"]], "pypath.core.annot": [[2, "module-pypath.core.annot"]], "pypath.core.annot.Adhesome": [[3, "pypath-core-annot-adhesome"]], "pypath.core.annot.Almen2009": [[4, "pypath-core-annot-almen2009"]], "pypath.core.annot.AnnotationBase": [[5, "pypath-core-annot-annotationbase"]], "pypath.core.annot.AnnotationTable": [[6, "pypath-core-annot-annotationtable"]], "pypath.core.annot.Baccin2019": [[7, "pypath-core-annot-baccin2019"]], "pypath.core.annot.Biogps": [[8, "pypath-core-annot-biogps"]], "pypath.core.annot.CancerGeneCensus": [[9, "pypath-core-annot-cancergenecensus"]], "pypath.core.annot.Cancerdrugsdb": [[10, "pypath-core-annot-cancerdrugsdb"]], "pypath.core.annot.Cancersea": [[11, "pypath-core-annot-cancersea"]], "pypath.core.annot.CellPhoneDB": [[12, "pypath-core-annot-cellphonedb"]], "pypath.core.annot.CellPhoneDBComplex": [[13, "pypath-core-annot-cellphonedbcomplex"]], "pypath.core.annot.CellSurfaceProteinAtlas": [[14, "pypath-core-annot-cellsurfaceproteinatlas"]], "pypath.core.annot.CellSurfaceProteinAtlasCellType": [[15, "pypath-core-annot-cellsurfaceproteinatlascelltype"]], "pypath.core.annot.Cellcall": [[16, "pypath-core-annot-cellcall"]], "pypath.core.annot.Cellcellinteractions": [[17, "pypath-core-annot-cellcellinteractions"]], "pypath.core.annot.Cellchatdb": [[18, "pypath-core-annot-cellchatdb"]], "pypath.core.annot.CellchatdbComplex": [[19, "pypath-core-annot-cellchatdbcomplex"]], "pypath.core.annot.Cellinker": [[20, "pypath-core-annot-cellinker"]], "pypath.core.annot.CellinkerComplex": [[21, "pypath-core-annot-cellinkercomplex"]], "pypath.core.annot.Celltalkdb": [[22, "pypath-core-annot-celltalkdb"]], "pypath.core.annot.Celltypist": [[23, "pypath-core-annot-celltypist"]], "pypath.core.annot.Comppi": [[24, "pypath-core-annot-comppi"]], "pypath.core.annot.Connectomedb": [[25, "pypath-core-annot-connectomedb"]], "pypath.core.annot.Corum": [[26, "pypath-core-annot-corum"]], "pypath.core.annot.CorumFuncat": [[27, "pypath-core-annot-corumfuncat"]], "pypath.core.annot.CorumGO": [[28, "pypath-core-annot-corumgo"]], "pypath.core.annot.Cpad": [[29, "pypath-core-annot-cpad"]], "pypath.core.annot.CustomAnnotation": [[30, "pypath-core-annot-customannotation"]], "pypath.core.annot.Cytosig": [[31, "pypath-core-annot-cytosig"]], "pypath.core.annot.Dgidb": [[32, "pypath-core-annot-dgidb"]], "pypath.core.annot.Disgenet": [[33, "pypath-core-annot-disgenet"]], "pypath.core.annot.Embrace": [[34, "pypath-core-annot-embrace"]], "pypath.core.annot.Exocarta": [[35, "pypath-core-annot-exocarta"]], "pypath.core.annot.GOCustomIntercell": [[36, "pypath-core-annot-gocustomintercell"]], "pypath.core.annot.GOIntercell": [[37, "pypath-core-annot-gointercell"]], "pypath.core.annot.Gpcrdb": [[38, "pypath-core-annot-gpcrdb"]], "pypath.core.annot.GuideToPharmacology": [[39, "pypath-core-annot-guidetopharmacology"]], "pypath.core.annot.HPO": [[40, "pypath-core-annot-hpo"]], "pypath.core.annot.Hgnc": [[41, "pypath-core-annot-hgnc"]], "pypath.core.annot.HpmrComplex": [[42, "pypath-core-annot-hpmrcomplex"]], "pypath.core.annot.HumanPlasmaMembraneReceptome": [[43, "pypath-core-annot-humanplasmamembranereceptome"]], "pypath.core.annot.HumanProteinAtlas": [[44, "pypath-core-annot-humanproteinatlas"]], "pypath.core.annot.HumanProteinAtlasSecretome": [[45, "pypath-core-annot-humanproteinatlassecretome"]], "pypath.core.annot.HumanProteinAtlasSubcellular": [[46, "pypath-core-annot-humanproteinatlassubcellular"]], "pypath.core.annot.Humancellmap": [[47, "pypath-core-annot-humancellmap"]], "pypath.core.annot.Icellnet": [[48, "pypath-core-annot-icellnet"]], "pypath.core.annot.IcellnetComplex": [[49, "pypath-core-annot-icellnetcomplex"]], "pypath.core.annot.Integrins": [[50, "pypath-core-annot-integrins"]], "pypath.core.annot.InterPro": [[51, "pypath-core-annot-interpro"]], "pypath.core.annot.Intogen": [[52, "pypath-core-annot-intogen"]], "pypath.core.annot.Italk": [[53, "pypath-core-annot-italk"]], "pypath.core.annot.KeggPathways": [[54, "pypath-core-annot-keggpathways"]], "pypath.core.annot.KeggPathwaysPC": [[55, "pypath-core-annot-keggpathwayspc"]], "pypath.core.annot.Kinasedotcom": [[56, "pypath-core-annot-kinasedotcom"]], "pypath.core.annot.Kirouac2010": [[57, "pypath-core-annot-kirouac2010"]], "pypath.core.annot.Lambert2018": [[58, "pypath-core-annot-lambert2018"]], "pypath.core.annot.LigandReceptor": [[59, "pypath-core-annot-ligandreceptor"]], "pypath.core.annot.Locate": [[60, "pypath-core-annot-locate"]], "pypath.core.annot.Lrdb": [[61, "pypath-core-annot-lrdb"]], "pypath.core.annot.Matrisome": [[62, "pypath-core-annot-matrisome"]], "pypath.core.annot.Matrixdb": [[63, "pypath-core-annot-matrixdb"]], "pypath.core.annot.Mcam": [[64, "pypath-core-annot-mcam"]], "pypath.core.annot.Membranome": [[65, "pypath-core-annot-membranome"]], "pypath.core.annot.Msigdb": [[66, "pypath-core-annot-msigdb"]], "pypath.core.annot.NetpathPathways": [[67, "pypath-core-annot-netpathpathways"]], "pypath.core.annot.Opm": [[68, "pypath-core-annot-opm"]], "pypath.core.annot.Panglaodb": [[69, "pypath-core-annot-panglaodb"]], "pypath.core.annot.Phobius": [[70, "pypath-core-annot-phobius"]], "pypath.core.annot.Phosphatome": [[71, "pypath-core-annot-phosphatome"]], "pypath.core.annot.Progeny": [[72, "pypath-core-annot-progeny"]], "pypath.core.annot.Ramilowski2015": [[73, "pypath-core-annot-ramilowski2015"]], "pypath.core.annot.Ramilowski2015Location": [[74, "pypath-core-annot-ramilowski2015location"]], "pypath.core.annot.Scconnect": [[75, "pypath-core-annot-scconnect"]], "pypath.core.annot.ScconnectComplex": [[76, "pypath-core-annot-scconnectcomplex"]], "pypath.core.annot.SignalinkFunctions": [[77, "pypath-core-annot-signalinkfunctions"]], "pypath.core.annot.SignalinkPathways": [[78, "pypath-core-annot-signalinkpathways"]], "pypath.core.annot.SignorPathways": [[79, "pypath-core-annot-signorpathways"]], "pypath.core.annot.Surfaceome": [[80, "pypath-core-annot-surfaceome"]], "pypath.core.annot.Talklr": [[81, "pypath-core-annot-talklr"]], "pypath.core.annot.Tcdb": [[82, "pypath-core-annot-tcdb"]], "pypath.core.annot.Tfcensus": [[83, "pypath-core-annot-tfcensus"]], "pypath.core.annot.Topdb": [[84, "pypath-core-annot-topdb"]], "pypath.core.annot.UniprotFamilies": [[85, "pypath-core-annot-uniprotfamilies"]], "pypath.core.annot.UniprotKeywords": [[86, "pypath-core-annot-uniprotkeywords"]], "pypath.core.annot.UniprotLocations": [[87, "pypath-core-annot-uniprotlocations"]], "pypath.core.annot.UniprotTissues": [[88, "pypath-core-annot-uniprottissues"]], "pypath.core.annot.UniprotTopologies": [[89, "pypath-core-annot-uniprottopologies"]], "pypath.core.annot.Vesiclepedia": [[90, "pypath-core-annot-vesiclepedia"]], "pypath.core.annot.Wang": [[91, "pypath-core-annot-wang"]], "pypath.core.annot.Zhong2015": [[92, "pypath-core-annot-zhong2015"]], "pypath.core.annot.get_db": [[93, "pypath-core-annot-get-db"]], "pypath.core.annot.init_db": [[94, "pypath-core-annot-init-db"]], "pypath.core.attrs": [[95, "module-pypath.core.attrs"]], "pypath.core.attrs.AttributeHandler": [[96, "pypath-core-attrs-attributehandler"]], "pypath.core.common": [[97, "module-pypath.core.common"]], "pypath.core.common.filter_network_df": [[98, "pypath-core-common-filter-network-df"]], "pypath.core.complex": [[99, "module-pypath.core.complex"]], "pypath.core.complex.AbstractComplexResource": [[100, "pypath-core-complex-abstractcomplexresource"]], "pypath.core.complex.CellPhoneDB": [[101, "pypath-core-complex-cellphonedb"]], "pypath.core.complex.Cellchatdb": [[102, "pypath-core-complex-cellchatdb"]], "pypath.core.complex.Cellinker": [[103, "pypath-core-complex-cellinker"]], "pypath.core.complex.Compleat": [[104, "pypath-core-complex-compleat"]], "pypath.core.complex.ComplexAggregator": [[105, "pypath-core-complex-complexaggregator"]], "pypath.core.complex.ComplexPortal": [[106, "pypath-core-complex-complexportal"]], "pypath.core.complex.Corum": [[107, "pypath-core-complex-corum"]], "pypath.core.complex.GuideToPharmacology": [[108, "pypath-core-complex-guidetopharmacology"]], "pypath.core.complex.Havugimana": [[109, "pypath-core-complex-havugimana"]], "pypath.core.complex.Hpmr": [[110, "pypath-core-complex-hpmr"]], "pypath.core.complex.Humap": [[111, "pypath-core-complex-humap"]], "pypath.core.complex.Humap2": [[112, "pypath-core-complex-humap2"]], "pypath.core.complex.Icellnet": [[113, "pypath-core-complex-icellnet"]], "pypath.core.complex.Kegg": [[114, "pypath-core-complex-kegg"]], "pypath.core.complex.Pdb": [[115, "pypath-core-complex-pdb"]], "pypath.core.complex.Signor": [[116, "pypath-core-complex-signor"]], "pypath.core.complex.Spike": [[117, "pypath-core-complex-spike"]], "pypath.core.complex.all_complexes": [[118, "pypath-core-complex-all-complexes"]], "pypath.core.complex.get_db": [[119, "pypath-core-complex-get-db"]], "pypath.core.complex.init_db": [[120, "pypath-core-complex-init-db"]], "pypath.core.entity": [[121, "module-pypath.core.entity"]], "pypath.core.entity.Entity": [[122, "pypath-core-entity-entity"]], "pypath.core.entity.EntityKey": [[123, "pypath-core-entity-entitykey"]], "pypath.core.entity.EntityList": [[124, "pypath-core-entity-entitylist"]], "pypath.core.enz_sub": [[125, "module-pypath.core.enz_sub"]], "pypath.core.enz_sub.EnzymeSubstrateAggregator": [[126, "pypath-core-enz-sub-enzymesubstrateaggregator"]], "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor": [[127, "pypath-core-enz-sub-enzymesubstratehomologyprocessor"]], "pypath.core.enz_sub.EnzymeSubstrateProcessor": [[128, "pypath-core-enz-sub-enzymesubstrateprocessor"]], "pypath.core.enz_sub.get_db": [[129, "pypath-core-enz-sub-get-db"]], "pypath.core.enz_sub.init_db": [[130, "pypath-core-enz-sub-init-db"]], "pypath.core.evidence": [[131, "module-pypath.core.evidence"]], "pypath.core.evidence.Evidence": [[132, "pypath-core-evidence-evidence"]], "pypath.core.evidence.Evidences": [[133, "pypath-core-evidence-evidences"]], "pypath.core.interaction": [[134, "module-pypath.core.interaction"]], "pypath.core.interaction.Interaction": [[135, "pypath-core-interaction-interaction"]], "pypath.core.interaction.InteractionDataFrameRecord": [[136, "pypath-core-interaction-interactiondataframerecord"]], "pypath.core.interaction.InteractionKey": [[137, "pypath-core-interaction-interactionkey"]], "pypath.core.intercell": [[138, "module-pypath.core.intercell"]], "pypath.core.intercell.IntercellAnnotation": [[139, "pypath-core-intercell-intercellannotation"]], "pypath.core.intercell.get_db": [[140, "pypath-core-intercell-get-db"]], "pypath.core.intercell.init_db": [[141, "pypath-core-intercell-init-db"]], "pypath.core.intercell_annot": [[142, "module-pypath.core.intercell_annot"]], "pypath.core.intercell_annot.excludes": [[143, "pypath-core-intercell-annot-excludes"]], "pypath.core.network": [[144, "module-pypath.core.network"]], "pypath.core.network.Network": [[145, "pypath-core-network-network"]], "pypath.core.network.NetworkEntityCollection": [[146, "pypath-core-network-networkentitycollection"]], "pypath.core.network.NetworkStatsRecord": [[147, "pypath-core-network-networkstatsrecord"]], "pypath.core.network.get_db": [[148, "pypath-core-network-get-db"]], "pypath.core.network.init_db": [[149, "pypath-core-network-init-db"]], "pypath.data": [[150, "module-pypath.data"]], "pypath.disclaimer": [[151, "pypath-disclaimer"]], "pypath.info": [[152, "pypath-info"]], "pypath.inputs": [[153, "module-pypath.inputs"]], "pypath.inputs.abs": [[154, "module-pypath.inputs.abs"]], "pypath.inputs.abs.abs_interactions": [[155, "pypath-inputs-abs-abs-interactions"]], "pypath.inputs.acsn": [[156, "module-pypath.inputs.acsn"]], "pypath.inputs.acsn.acsn_interactions": [[157, "pypath-inputs-acsn-acsn-interactions"]], "pypath.inputs.acsn.acsn_interactions_sif": [[158, "pypath-inputs-acsn-acsn-interactions-sif"]], "pypath.inputs.adhesome": [[159, "module-pypath.inputs.adhesome"]], "pypath.inputs.adhesome.adhesome_annotations": [[160, "pypath-inputs-adhesome-adhesome-annotations"]], "pypath.inputs.adhesome.adhesome_interactions": [[161, "pypath-inputs-adhesome-adhesome-interactions"]], "pypath.inputs.almen2009": [[162, "module-pypath.inputs.almen2009"]], "pypath.inputs.almen2009.almen2009_annotations": [[163, "pypath-inputs-almen2009-almen2009-annotations"]], "pypath.inputs.baccin2019": [[164, "module-pypath.inputs.baccin2019"]], "pypath.inputs.baccin2019.baccin2019_annotations": [[165, "pypath-inputs-baccin2019-baccin2019-annotations"]], "pypath.inputs.baccin2019.baccin2019_interactions": [[166, "pypath-inputs-baccin2019-baccin2019-interactions"]], "pypath.inputs.biogps": [[167, "module-pypath.inputs.biogps"]], "pypath.inputs.biogps.BiogpsDataset": [[168, "pypath-inputs-biogps-biogpsdataset"]], "pypath.inputs.biogps.biogps_annotations": [[169, "pypath-inputs-biogps-biogps-annotations"]], "pypath.inputs.biogps.biogps_datasets": [[170, "pypath-inputs-biogps-biogps-datasets"]], "pypath.inputs.biogps.biogps_download": [[171, "pypath-inputs-biogps-biogps-download"]], "pypath.inputs.biogps.biogps_download_all": [[172, "pypath-inputs-biogps-biogps-download-all"]], "pypath.inputs.biogrid": [[173, "module-pypath.inputs.biogrid"]], "pypath.inputs.biogrid.biogrid_all_interactions": [[174, "pypath-inputs-biogrid-biogrid-all-interactions"]], "pypath.inputs.biogrid.biogrid_interactions": [[175, "pypath-inputs-biogrid-biogrid-interactions"]], "pypath.inputs.biomart": [[176, "module-pypath.inputs.biomart"]], "pypath.inputs.biomart.biomart_homology": [[177, "pypath-inputs-biomart-biomart-homology"]], "pypath.inputs.biomart.biomart_microarray": [[178, "pypath-inputs-biomart-biomart-microarray"]], "pypath.inputs.biomart.biomart_microarray_types": [[179, "pypath-inputs-biomart-biomart-microarray-types"]], "pypath.inputs.biomart.biomart_microarrays": [[180, "pypath-inputs-biomart-biomart-microarrays"]], "pypath.inputs.biomart.biomart_query": [[181, "pypath-inputs-biomart-biomart-query"]], "pypath.inputs.biomodels": [[182, "module-pypath.inputs.biomodels"]], "pypath.inputs.biomodels.download_single_model": [[183, "pypath-inputs-biomodels-download-single-model"]], "pypath.inputs.biomodels.get_all_models": [[184, "pypath-inputs-biomodels-get-all-models"]], "pypath.inputs.biomodels.get_biomodels": [[185, "pypath-inputs-biomodels-get-biomodels"]], "pypath.inputs.biomodels.get_biomodels_req": [[186, "pypath-inputs-biomodels-get-biomodels-req"]], "pypath.inputs.biomodels.get_single_model": [[187, "pypath-inputs-biomodels-get-single-model"]], "pypath.inputs.ca1": [[188, "module-pypath.inputs.ca1"]], "pypath.inputs.ca1.ca1_interactions": [[189, "pypath-inputs-ca1-ca1-interactions"]], "pypath.inputs.cancercellmap": [[190, "module-pypath.inputs.cancercellmap"]], "pypath.inputs.cancercellmap.ccmap_interactions": [[191, "pypath-inputs-cancercellmap-ccmap-interactions"]], "pypath.inputs.cancerdrugsdb": [[192, "module-pypath.inputs.cancerdrugsdb"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations": [[193, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-annotations"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download": [[194, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-download"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions": [[195, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-interactions"]], "pypath.inputs.cancersea": [[196, "module-pypath.inputs.cancersea"]], "pypath.inputs.cancersea.cancersea_annotations": [[197, "pypath-inputs-cancersea-cancersea-annotations"]], "pypath.inputs.cell": [[198, "module-pypath.inputs.cell"]], "pypath.inputs.cell.cell_supplementary": [[199, "pypath-inputs-cell-cell-supplementary"]], "pypath.inputs.cellcall": [[200, "module-pypath.inputs.cellcall"]], "pypath.inputs.cellcall.cellcall_annotations": [[201, "pypath-inputs-cellcall-cellcall-annotations"]], "pypath.inputs.cellcall.cellcall_download": [[202, "pypath-inputs-cellcall-cellcall-download"]], "pypath.inputs.cellcall.cellcall_download_all": [[203, "pypath-inputs-cellcall-cellcall-download-all"]], "pypath.inputs.cellcall.cellcall_interactions": [[204, "pypath-inputs-cellcall-cellcall-interactions"]], "pypath.inputs.cellcellinteractions": [[205, "module-pypath.inputs.cellcellinteractions"]], "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations": [[206, "pypath-inputs-cellcellinteractions-cellcellinteractions-annotations"]], "pypath.inputs.cellchatdb": [[207, "module-pypath.inputs.cellchatdb"]], "pypath.inputs.cellchatdb.cellchatdb_annotations": [[208, "pypath-inputs-cellchatdb-cellchatdb-annotations"]], "pypath.inputs.cellchatdb.cellchatdb_cofactors": [[209, "pypath-inputs-cellchatdb-cellchatdb-cofactors"]], "pypath.inputs.cellchatdb.cellchatdb_complexes": [[210, "pypath-inputs-cellchatdb-cellchatdb-complexes"]], "pypath.inputs.cellchatdb.cellchatdb_download": [[211, "pypath-inputs-cellchatdb-cellchatdb-download"]], "pypath.inputs.cellchatdb.cellchatdb_interactions": [[212, "pypath-inputs-cellchatdb-cellchatdb-interactions"]], "pypath.inputs.cellinker": [[213, "module-pypath.inputs.cellinker"]], "pypath.inputs.cellinker.CellinkerInteraction": [[214, "pypath-inputs-cellinker-cellinkerinteraction"]], "pypath.inputs.cellinker.cellinker_annotations": [[215, "pypath-inputs-cellinker-cellinker-annotations"]], "pypath.inputs.cellinker.cellinker_complex_annotations": [[216, "pypath-inputs-cellinker-cellinker-complex-annotations"]], "pypath.inputs.cellinker.cellinker_complexes": [[217, "pypath-inputs-cellinker-cellinker-complexes"]], "pypath.inputs.cellinker.cellinker_complexes_raw": [[218, "pypath-inputs-cellinker-cellinker-complexes-raw"]], "pypath.inputs.cellinker.cellinker_lr_interactions": [[219, "pypath-inputs-cellinker-cellinker-lr-interactions"]], "pypath.inputs.cellinker.cellinker_lr_interactions_raw": [[220, "pypath-inputs-cellinker-cellinker-lr-interactions-raw"]], "pypath.inputs.cellinker.cellinker_protein_annotations": [[221, "pypath-inputs-cellinker-cellinker-protein-annotations"]], "pypath.inputs.cellinker.cellinker_smol_interactions": [[222, "pypath-inputs-cellinker-cellinker-smol-interactions"]], "pypath.inputs.cellinker.cellinker_smol_interactions_raw": [[223, "pypath-inputs-cellinker-cellinker-smol-interactions-raw"]], "pypath.inputs.cellinker.components_to_complex": [[224, "pypath-inputs-cellinker-components-to-complex"]], "pypath.inputs.cellphonedb": [[225, "module-pypath.inputs.cellphonedb"]], "pypath.inputs.cellphonedb.CellPhoneDBAnnotation": [[226, "pypath-inputs-cellphonedb-cellphonedbannotation"]], "pypath.inputs.cellphonedb.cellphonedb_complex_annotations": [[227, "pypath-inputs-cellphonedb-cellphonedb-complex-annotations"]], "pypath.inputs.cellphonedb.cellphonedb_complexes": [[228, "pypath-inputs-cellphonedb-cellphonedb-complexes"]], "pypath.inputs.cellphonedb.cellphonedb_interactions": [[229, "pypath-inputs-cellphonedb-cellphonedb-interactions"]], "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors": [[230, "pypath-inputs-cellphonedb-cellphonedb-ligands-receptors"]], "pypath.inputs.cellphonedb.cellphonedb_protein_annotations": [[231, "pypath-inputs-cellphonedb-cellphonedb-protein-annotations"]], "pypath.inputs.celltalkdb": [[232, "module-pypath.inputs.celltalkdb"]], "pypath.inputs.celltalkdb.celltalkdb_annotations": [[233, "pypath-inputs-celltalkdb-celltalkdb-annotations"]], "pypath.inputs.celltalkdb.celltalkdb_download": [[234, "pypath-inputs-celltalkdb-celltalkdb-download"]], "pypath.inputs.celltalkdb.celltalkdb_interactions": [[235, "pypath-inputs-celltalkdb-celltalkdb-interactions"]], "pypath.inputs.celltypist": [[236, "module-pypath.inputs.celltypist"]], "pypath.inputs.celltypist.celltypist_annotations": [[237, "pypath-inputs-celltypist-celltypist-annotations"]], "pypath.inputs.chembl": [[238, "module-pypath.inputs.chembl"]], "pypath.inputs.chembl.chembl_activities": [[239, "pypath-inputs-chembl-chembl-activities"]], "pypath.inputs.chembl.chembl_assays": [[240, "pypath-inputs-chembl-chembl-assays"]], "pypath.inputs.chembl.chembl_documents": [[241, "pypath-inputs-chembl-chembl-documents"]], "pypath.inputs.chembl.chembl_drug_indications": [[242, "pypath-inputs-chembl-chembl-drug-indications"]], "pypath.inputs.chembl.chembl_molecules": [[243, "pypath-inputs-chembl-chembl-molecules"]], "pypath.inputs.chembl.chembl_targets": [[244, "pypath-inputs-chembl-chembl-targets"]], "pypath.inputs.clinvar": [[245, "module-pypath.inputs.clinvar"]], "pypath.inputs.clinvar.clinvar_citations": [[246, "pypath-inputs-clinvar-clinvar-citations"]], "pypath.inputs.clinvar.clinvar_raw": [[247, "pypath-inputs-clinvar-clinvar-raw"]], "pypath.inputs.common": [[248, "module-pypath.inputs.common"]], "pypath.inputs.common.csv_sep_change": [[249, "pypath-inputs-common-csv-sep-change"]], "pypath.inputs.common.glom_fields": [[250, "pypath-inputs-common-glom-fields"]], "pypath.inputs.common.json_extract": [[251, "pypath-inputs-common-json-extract"]], "pypath.inputs.common.json_read": [[252, "pypath-inputs-common-json-read"]], "pypath.inputs.common.read_table": [[253, "pypath-inputs-common-read-table"]], "pypath.inputs.common.read_xls": [[254, "pypath-inputs-common-read-xls"]], "pypath.inputs.compleat": [[255, "module-pypath.inputs.compleat"]], "pypath.inputs.compleat.compleat_complexes": [[256, "pypath-inputs-compleat-compleat-complexes"]], "pypath.inputs.compleat.compleat_raw": [[257, "pypath-inputs-compleat-compleat-raw"]], "pypath.inputs.complexportal": [[258, "module-pypath.inputs.complexportal"]], "pypath.inputs.complexportal.complexportal_complexes": [[259, "pypath-inputs-complexportal-complexportal-complexes"]], "pypath.inputs.comppi": [[260, "module-pypath.inputs.comppi"]], "pypath.inputs.comppi.comppi_interaction_locations": [[261, "pypath-inputs-comppi-comppi-interaction-locations"]], "pypath.inputs.comppi.comppi_locations": [[262, "pypath-inputs-comppi-comppi-locations"]], "pypath.inputs.connectomedb": [[263, "module-pypath.inputs.connectomedb"]], "pypath.inputs.connectomedb.connectomedb_annotations": [[264, "pypath-inputs-connectomedb-connectomedb-annotations"]], "pypath.inputs.connectomedb.connectomedb_interactions": [[265, "pypath-inputs-connectomedb-connectomedb-interactions"]], "pypath.inputs.corum": [[266, "module-pypath.inputs.corum"]], "pypath.inputs.corum.corum_complexes": [[267, "pypath-inputs-corum-corum-complexes"]], "pypath.inputs.cosmic": [[268, "module-pypath.inputs.cosmic"]], "pypath.inputs.cosmic.cancer_gene_census_annotations": [[269, "pypath-inputs-cosmic-cancer-gene-census-annotations"]], "pypath.inputs.cpad": [[270, "module-pypath.inputs.cpad"]], "pypath.inputs.cpad.cpad_annotations": [[271, "pypath-inputs-cpad-cpad-annotations"]], "pypath.inputs.cpad.cpad_pathway_cancer": [[272, "pypath-inputs-cpad-cpad-pathway-cancer"]], "pypath.inputs.cpad.get_cpad": [[273, "pypath-inputs-cpad-get-cpad"]], "pypath.inputs.cpdb": [[274, "module-pypath.inputs.cpdb"]], "pypath.inputs.cpdb.cpdb_interactions": [[275, "pypath-inputs-cpdb-cpdb-interactions"]], "pypath.inputs.cpdb.cpdb_interactions_ltp": [[276, "pypath-inputs-cpdb-cpdb-interactions-ltp"]], "pypath.inputs.credentials": [[277, "module-pypath.inputs.credentials"]], "pypath.inputs.credentials.credentials": [[278, "pypath-inputs-credentials-credentials"]], "pypath.inputs.csa": [[279, "module-pypath.inputs.csa"]], "pypath.inputs.csa.get_csa": [[280, "pypath-inputs-csa-get-csa"]], "pypath.inputs.cspa": [[281, "module-pypath.inputs.cspa"]], "pypath.inputs.cspa.cspa_annotations": [[282, "pypath-inputs-cspa-cspa-annotations"]], "pypath.inputs.cspa.cspa_cell_type_annotations": [[283, "pypath-inputs-cspa-cspa-cell-type-annotations"]], "pypath.inputs.cspa.cspa_cell_types": [[284, "pypath-inputs-cspa-cspa-cell-types"]], "pypath.inputs.ctdbase": [[285, "module-pypath.inputs.ctdbase"]], "pypath.inputs.ctdbase.ctdbase_relations": [[286, "pypath-inputs-ctdbase-ctdbase-relations"]], "pypath.inputs.ctdbase.ctdbase_vocabulary": [[287, "pypath-inputs-ctdbase-ctdbase-vocabulary"]], "pypath.inputs.cytosig": [[288, "module-pypath.inputs.cytosig"]], "pypath.inputs.cytosig.cytosig_annotations": [[289, "pypath-inputs-cytosig-cytosig-annotations"]], "pypath.inputs.cytosig.cytosig_df": [[290, "pypath-inputs-cytosig-cytosig-df"]], "pypath.inputs.dbptm": [[291, "module-pypath.inputs.dbptm"]], "pypath.inputs.dbptm.dbptm_enzyme_substrate": [[292, "pypath-inputs-dbptm-dbptm-enzyme-substrate"]], "pypath.inputs.dbptm.dbptm_enzyme_substrate_old": [[293, "pypath-inputs-dbptm-dbptm-enzyme-substrate-old"]], "pypath.inputs.dbptm.dbptm_interactions": [[294, "pypath-inputs-dbptm-dbptm-interactions"]], "pypath.inputs.deathdomain": [[295, "module-pypath.inputs.deathdomain"]], "pypath.inputs.deathdomain.deathdomain_interactions": [[296, "pypath-inputs-deathdomain-deathdomain-interactions"]], "pypath.inputs.deathdomain.deathdomain_interactions_rescued": [[297, "pypath-inputs-deathdomain-deathdomain-interactions-rescued"]], "pypath.inputs.depod": [[298, "module-pypath.inputs.depod"]], "pypath.inputs.depod.depod_enzyme_substrate": [[299, "pypath-inputs-depod-depod-enzyme-substrate"]], "pypath.inputs.depod.depod_interactions": [[300, "pypath-inputs-depod-depod-interactions"]], "pypath.inputs.dgidb": [[301, "module-pypath.inputs.dgidb"]], "pypath.inputs.dgidb.dgidb_annotations": [[302, "pypath-inputs-dgidb-dgidb-annotations"]], "pypath.inputs.dgidb.dgidb_interactions": [[303, "pypath-inputs-dgidb-dgidb-interactions"]], "pypath.inputs.dgidb.get_dgidb_old": [[304, "pypath-inputs-dgidb-get-dgidb-old"]], "pypath.inputs.dip": [[305, "module-pypath.inputs.dip"]], "pypath.inputs.dip.dip_interactions": [[306, "pypath-inputs-dip-dip-interactions"]], "pypath.inputs.dip.dip_login": [[307, "pypath-inputs-dip-dip-login"]], "pypath.inputs.disgenet": [[308, "module-pypath.inputs.disgenet"]], "pypath.inputs.disgenet.DisgenetApi": [[309, "pypath-inputs-disgenet-disgenetapi"]], "pypath.inputs.disgenet.disease_id_mappings": [[310, "pypath-inputs-disgenet-disease-id-mappings"]], "pypath.inputs.disgenet.disgenet_annotations": [[311, "pypath-inputs-disgenet-disgenet-annotations"]], "pypath.inputs.disgenet.variant_gene_mappings": [[312, "pypath-inputs-disgenet-variant-gene-mappings"]], "pypath.inputs.domino": [[313, "module-pypath.inputs.domino"]], "pypath.inputs.domino.domino_ddi": [[314, "pypath-inputs-domino-domino-ddi"]], "pypath.inputs.domino.domino_enzsub": [[315, "pypath-inputs-domino-domino-enzsub"]], "pypath.inputs.domino.domino_interactions": [[316, "pypath-inputs-domino-domino-interactions"]], "pypath.inputs.domino.get_domino": [[317, "pypath-inputs-domino-get-domino"]], "pypath.inputs.dorothea": [[318, "module-pypath.inputs.dorothea"]], "pypath.inputs.dorothea.DorotheaInteraction": [[319, "pypath-inputs-dorothea-dorotheainteraction"]], "pypath.inputs.dorothea.dorothea_full_raw": [[320, "pypath-inputs-dorothea-dorothea-full-raw"]], "pypath.inputs.dorothea.dorothea_interactions": [[321, "pypath-inputs-dorothea-dorothea-interactions"]], "Details": [[321, "details"], [322, "details"], [323, "details"], [325, "details"], [327, "details"], [328, "details"]], "pypath.inputs.dorothea.dorothea_interactions_old": [[322, "pypath-inputs-dorothea-dorothea-interactions-old"]], "pypath.inputs.dorothea.dorothea_old_csv": [[323, "pypath-inputs-dorothea-dorothea-old-csv"]], "pypath.inputs.dorothea.dorothea_rda_raw": [[324, "pypath-inputs-dorothea-dorothea-rda-raw"]], "pypath.inputs.dorothea.get_dorothea_old": [[325, "pypath-inputs-dorothea-get-dorothea-old"]], "pypath.inputs.dorothea.get_tfregulons": [[326, "pypath-inputs-dorothea-get-tfregulons"]], "pypath.inputs.dorothea.tfregulons_interactions": [[327, "pypath-inputs-dorothea-tfregulons-interactions"]], "pypath.inputs.dorothea.tfregulons_interactions_old": [[328, "pypath-inputs-dorothea-tfregulons-interactions-old"]], "pypath.inputs.drugbank": [[329, "module-pypath.inputs.drugbank"]], "pypath.inputs.drugbank.DrugbankFull": [[330, "pypath-inputs-drugbank-drugbankfull"]], "pypath.inputs.drugbank.drugbank_annotations": [[331, "pypath-inputs-drugbank-drugbank-annotations"]], "pypath.inputs.drugbank.drugbank_drugs": [[332, "pypath-inputs-drugbank-drugbank-drugs"]], "pypath.inputs.drugbank.drugbank_interactions": [[333, "pypath-inputs-drugbank-drugbank-interactions"]], "pypath.inputs.drugbank.drugbank_mapping": [[334, "pypath-inputs-drugbank-drugbank-mapping"]], "pypath.inputs.drugbank.drugbank_raw_interactions": [[335, "pypath-inputs-drugbank-drugbank-raw-interactions"]], "pypath.inputs.drugcentral": [[336, "module-pypath.inputs.drugcentral"]], "pypath.inputs.drugcentral.drugcentral_drugs": [[337, "pypath-inputs-drugcentral-drugcentral-drugs"]], "pypath.inputs.drugcentral.drugcentral_interactions": [[338, "pypath-inputs-drugcentral-drugcentral-interactions"]], "pypath.inputs.drugcentral.drugcentral_mapping": [[339, "pypath-inputs-drugcentral-drugcentral-mapping"]], "pypath.inputs.ebi": [[340, "module-pypath.inputs.ebi"]], "pypath.inputs.ebi.ebi_rest": [[341, "pypath-inputs-ebi-ebi-rest"]], "pypath.inputs.elm": [[342, "module-pypath.inputs.elm"]], "pypath.inputs.elm.elm_classes": [[343, "pypath-inputs-elm-elm-classes"]], "pypath.inputs.elm.elm_domains": [[344, "pypath-inputs-elm-elm-domains"]], "pypath.inputs.elm.elm_instances": [[345, "pypath-inputs-elm-elm-instances"]], "pypath.inputs.elm.elm_interactions": [[346, "pypath-inputs-elm-elm-interactions"]], "pypath.inputs.embopress": [[347, "module-pypath.inputs.embopress"]], "pypath.inputs.embopress.embopress_supplementary": [[348, "pypath-inputs-embopress-embopress-supplementary"]], "pypath.inputs.embrace": [[349, "module-pypath.inputs.embrace"]], "pypath.inputs.embrace.embrace_annotations": [[350, "pypath-inputs-embrace-embrace-annotations"]], "pypath.inputs.embrace.embrace_interactions": [[351, "pypath-inputs-embrace-embrace-interactions"]], "pypath.inputs.embrace.embrace_raw": [[352, "pypath-inputs-embrace-embrace-raw"]], "pypath.inputs.embrace.embrace_translated": [[353, "pypath-inputs-embrace-embrace-translated"]], "pypath.inputs.encode": [[354, "module-pypath.inputs.encode"]], "pypath.inputs.encode.encode_tf_mirna_interactions": [[355, "pypath-inputs-encode-encode-tf-mirna-interactions"]], "pypath.inputs.ensembl": [[356, "module-pypath.inputs.ensembl"]], "pypath.inputs.ensembl.ensembl_organisms": [[357, "pypath-inputs-ensembl-ensembl-organisms"]], "pypath.inputs.exocarta": [[358, "module-pypath.inputs.exocarta"]], "pypath.inputs.exocarta.get_exocarta": [[359, "pypath-inputs-exocarta-get-exocarta"]], "pypath.inputs.exocarta.get_vesiclepedia": [[360, "pypath-inputs-exocarta-get-vesiclepedia"]], "pypath.inputs.genecards": [[361, "module-pypath.inputs.genecards"]], "pypath.inputs.genecards.genecards_datasheet": [[362, "pypath-inputs-genecards-genecards-datasheet"]], "pypath.inputs.genecards.genecards_soup": [[363, "pypath-inputs-genecards-genecards-soup"]], "pypath.inputs.genecards.genecards_summaries": [[364, "pypath-inputs-genecards-genecards-summaries"]], "pypath.inputs.get_method": [[365, "pypath-inputs-get-method"]], "pypath.inputs.go": [[366, "module-pypath.inputs.go"]], "pypath.inputs.go.get_go_desc": [[367, "pypath-inputs-go-get-go-desc"]], "pypath.inputs.go.get_go_quick": [[368, "pypath-inputs-go-get-go-quick"]], "pypath.inputs.go.get_goslim": [[369, "pypath-inputs-go-get-goslim"]], "pypath.inputs.go.go_ancestors": [[370, "pypath-inputs-go-go-ancestors"]], "pypath.inputs.go.go_ancestors_goose": [[371, "pypath-inputs-go-go-ancestors-goose"]], "pypath.inputs.go.go_ancestors_quickgo": [[372, "pypath-inputs-go-go-ancestors-quickgo"]], "pypath.inputs.go.go_annotations": [[373, "pypath-inputs-go-go-annotations"]], "pypath.inputs.go.go_annotations_all": [[374, "pypath-inputs-go-go-annotations-all"]], "pypath.inputs.go.go_annotations_goa": [[375, "pypath-inputs-go-go-annotations-goa"]], "pypath.inputs.go.go_annotations_goose": [[376, "pypath-inputs-go-go-annotations-goose"]], "pypath.inputs.go.go_annotations_quickgo": [[377, "pypath-inputs-go-go-annotations-quickgo"]], "pypath.inputs.go.go_annotations_solr": [[378, "pypath-inputs-go-go-annotations-solr"]], "pypath.inputs.go.go_annotations_uniprot": [[379, "pypath-inputs-go-go-annotations-uniprot"]], "pypath.inputs.go.go_descendants": [[380, "pypath-inputs-go-go-descendants"]], "pypath.inputs.go.go_descendants_goose": [[381, "pypath-inputs-go-go-descendants-goose"]], "pypath.inputs.go.go_descendants_quickgo": [[382, "pypath-inputs-go-go-descendants-quickgo"]], "pypath.inputs.go.go_descendants_to_ancestors": [[383, "pypath-inputs-go-go-descendants-to-ancestors"]], "pypath.inputs.go.go_terms": [[384, "pypath-inputs-go-go-terms"]], "pypath.inputs.go.go_terms_goose": [[385, "pypath-inputs-go-go-terms-goose"]], "pypath.inputs.go.go_terms_quickgo": [[386, "pypath-inputs-go-go-terms-quickgo"]], "pypath.inputs.go.go_terms_solr": [[387, "pypath-inputs-go-go-terms-solr"]], "pypath.inputs.gpcrdb": [[388, "module-pypath.inputs.gpcrdb"]], "pypath.inputs.gpcrdb.gpcrdb_annotations": [[389, "pypath-inputs-gpcrdb-gpcrdb-annotations"]], "pypath.inputs.graphviz": [[390, "module-pypath.inputs.graphviz"]], "pypath.inputs.graphviz.graphviz_attrs": [[391, "pypath-inputs-graphviz-graphviz-attrs"]], "pypath.inputs.guide2pharma": [[392, "module-pypath.inputs.guide2pharma"]], "pypath.inputs.guide2pharma.guide2pharma_complexes": [[393, "pypath-inputs-guide2pharma-guide2pharma-complexes"]], "pypath.inputs.guide2pharma.guide2pharma_download": [[394, "pypath-inputs-guide2pharma-guide2pharma-download"]], "pypath.inputs.guide2pharma.guide2pharma_interactions": [[395, "pypath-inputs-guide2pharma-guide2pharma-interactions"]], "pypath.inputs.havugimana": [[396, "module-pypath.inputs.havugimana"]], "pypath.inputs.havugimana.get_havugimana": [[397, "pypath-inputs-havugimana-get-havugimana"]], "pypath.inputs.havugimana.havugimana_complexes": [[398, "pypath-inputs-havugimana-havugimana-complexes"]], "pypath.inputs.hgnc": [[399, "module-pypath.inputs.hgnc"]], "pypath.inputs.hgnc.hgnc_genegroups": [[400, "pypath-inputs-hgnc-hgnc-genegroups"]], "pypath.inputs.hippie": [[401, "module-pypath.inputs.hippie"]], "pypath.inputs.hippie.hippie_interactions": [[402, "pypath-inputs-hippie-hippie-interactions"]], "pypath.inputs.homologene": [[403, "module-pypath.inputs.homologene"]], "pypath.inputs.homologene.get_homologene": [[404, "pypath-inputs-homologene-get-homologene"]], "pypath.inputs.homologene.homologene_dict": [[405, "pypath-inputs-homologene-homologene-dict"]], "pypath.inputs.homologene.homologene_uniprot_dict": [[406, "pypath-inputs-homologene-homologene-uniprot-dict"]], "pypath.inputs.hpmr": [[407, "module-pypath.inputs.hpmr"]], "pypath.inputs.hpmr.HpmrInteraction": [[408, "pypath-inputs-hpmr-hpmrinteraction"]], "pypath.inputs.hpmr.get_hpmr": [[409, "pypath-inputs-hpmr-get-hpmr"]], "pypath.inputs.hpmr.hpmr_annotations": [[410, "pypath-inputs-hpmr-hpmr-annotations"]], "pypath.inputs.hpmr.hpmr_complexes": [[411, "pypath-inputs-hpmr-hpmr-complexes"]], "pypath.inputs.hpmr.hpmr_interactions": [[412, "pypath-inputs-hpmr-hpmr-interactions"]], "pypath.inputs.hpo": [[413, "module-pypath.inputs.hpo"]], "pypath.inputs.hpo.hpo_annotations": [[414, "pypath-inputs-hpo-hpo-annotations"]], "pypath.inputs.hpo.hpo_diseases": [[415, "pypath-inputs-hpo-hpo-diseases"]], "pypath.inputs.hpo.hpo_ontology": [[416, "pypath-inputs-hpo-hpo-ontology"]], "pypath.inputs.hpo.hpo_terms": [[417, "pypath-inputs-hpo-hpo-terms"]], "pypath.inputs.hprd": [[418, "module-pypath.inputs.hprd"]], "pypath.inputs.hprd.get_hprd": [[419, "pypath-inputs-hprd-get-hprd"]], "pypath.inputs.hprd.hprd_enzyme_substrate": [[420, "pypath-inputs-hprd-hprd-enzyme-substrate"]], "pypath.inputs.hprd.hprd_interactions": [[421, "pypath-inputs-hprd-hprd-interactions"]], "pypath.inputs.hprd.hprd_interactions_htp": [[422, "pypath-inputs-hprd-hprd-interactions-htp"]], "pypath.inputs.htri": [[423, "module-pypath.inputs.htri"]], "pypath.inputs.htri.htri_interactions": [[424, "pypath-inputs-htri-htri-interactions"]], "pypath.inputs.humancellmap": [[425, "module-pypath.inputs.humancellmap"]], "pypath.inputs.humancellmap.humancellmap_annotations": [[426, "pypath-inputs-humancellmap-humancellmap-annotations"]], "pypath.inputs.humap": [[427, "module-pypath.inputs.humap"]], "pypath.inputs.humap.humap2_complexes": [[428, "pypath-inputs-humap-humap2-complexes"]], "pypath.inputs.humap.humap_complexes": [[429, "pypath-inputs-humap-humap-complexes"]], "pypath.inputs.huri": [[430, "module-pypath.inputs.huri"]], "pypath.inputs.huri.hi_i_interactions": [[431, "pypath-inputs-huri-hi-i-interactions"]], "pypath.inputs.huri.hi_ii_interactions": [[432, "pypath-inputs-huri-hi-ii-interactions"]], "pypath.inputs.huri.hi_iii_old": [[433, "pypath-inputs-huri-hi-iii-old"]], "pypath.inputs.huri.hi_union_interactions": [[434, "pypath-inputs-huri-hi-union-interactions"]], "pypath.inputs.huri.huri_interactions": [[435, "pypath-inputs-huri-huri-interactions"]], "pypath.inputs.huri.lit_bm_13_interactions": [[436, "pypath-inputs-huri-lit-bm-13-interactions"]], "pypath.inputs.huri.lit_bm_17_interactions": [[437, "pypath-inputs-huri-lit-bm-17-interactions"]], "pypath.inputs.huri.lit_bm_interactions": [[438, "pypath-inputs-huri-lit-bm-interactions"]], "pypath.inputs.huri.rolland_hi_ii_14": [[439, "pypath-inputs-huri-rolland-hi-ii-14"]], "pypath.inputs.huri.vidal_hi_iii_old": [[440, "pypath-inputs-huri-vidal-hi-iii-old"]], "pypath.inputs.huri.yang2016_interactions": [[441, "pypath-inputs-huri-yang2016-interactions"]], "pypath.inputs.huri.yu2011_interactions": [[442, "pypath-inputs-huri-yu2011-interactions"]], "pypath.inputs.i3d": [[443, "module-pypath.inputs.i3d"]], "pypath.inputs.i3d.get_i3d": [[444, "pypath-inputs-i3d-get-i3d"]], "pypath.inputs.icellnet": [[445, "module-pypath.inputs.icellnet"]], "pypath.inputs.icellnet.IcellnetRecord": [[446, "pypath-inputs-icellnet-icellnetrecord"]], "pypath.inputs.icellnet.icellnet_annotations": [[447, "pypath-inputs-icellnet-icellnet-annotations"]], "pypath.inputs.icellnet.icellnet_complexes": [[448, "pypath-inputs-icellnet-icellnet-complexes"]], "pypath.inputs.icellnet.icellnet_interactions": [[449, "pypath-inputs-icellnet-icellnet-interactions"]], "pypath.inputs.ielm": [[450, "module-pypath.inputs.ielm"]], "pypath.inputs.ielm.get_ielm": [[451, "pypath-inputs-ielm-get-ielm"]], "pypath.inputs.ielm.get_ielm_huge": [[452, "pypath-inputs-ielm-get-ielm-huge"]], "pypath.inputs.imweb": [[453, "module-pypath.inputs.imweb"]], "pypath.inputs.imweb.get_imweb": [[454, "pypath-inputs-imweb-get-imweb"]], "pypath.inputs.imweb.get_imweb_req": [[455, "pypath-inputs-imweb-get-imweb-req"]], "pypath.inputs.innatedb": [[456, "module-pypath.inputs.innatedb"]], "pypath.inputs.innatedb.innatedb_interactions": [[457, "pypath-inputs-innatedb-innatedb-interactions"]], "pypath.inputs.instruct": [[458, "module-pypath.inputs.instruct"]], "pypath.inputs.instruct.get_instruct": [[459, "pypath-inputs-instruct-get-instruct"]], "pypath.inputs.instruct.get_instruct_offsets": [[460, "pypath-inputs-instruct-get-instruct-offsets"]], "pypath.inputs.intact": [[461, "module-pypath.inputs.intact"]], "pypath.inputs.intact.intact_interactions": [[462, "pypath-inputs-intact-intact-interactions"]], "pypath.inputs.integrins": [[463, "module-pypath.inputs.integrins"]], "pypath.inputs.integrins.get_integrins": [[464, "pypath-inputs-integrins-get-integrins"]], "pypath.inputs.interpro": [[465, "module-pypath.inputs.interpro"]], "pypath.inputs.interpro.interpro2go_annotations": [[466, "pypath-inputs-interpro-interpro2go-annotations"]], "pypath.inputs.interpro.interpro_annotations": [[467, "pypath-inputs-interpro-interpro-annotations"]], "pypath.inputs.interpro.interpro_entries": [[468, "pypath-inputs-interpro-interpro-entries"]], "pypath.inputs.interpro.interpro_xrefs": [[469, "pypath-inputs-interpro-interpro-xrefs"]], "pypath.inputs.intogen": [[470, "module-pypath.inputs.intogen"]], "pypath.inputs.intogen.intogen_annotations": [[471, "pypath-inputs-intogen-intogen-annotations"]], "pypath.inputs.ipi": [[472, "module-pypath.inputs.ipi"]], "pypath.inputs.ipi.ipi_uniprot": [[473, "pypath-inputs-ipi-ipi-uniprot"]], "pypath.inputs.iptmnet": [[474, "module-pypath.inputs.iptmnet"]], "pypath.inputs.iptmnet.IptmnetInteraction": [[475, "pypath-inputs-iptmnet-iptmnetinteraction"]], "pypath.inputs.iptmnet.iptmnet_interactions": [[476, "pypath-inputs-iptmnet-iptmnet-interactions"]], "pypath.inputs.italk": [[477, "module-pypath.inputs.italk"]], "pypath.inputs.italk.italk_annotations": [[478, "pypath-inputs-italk-italk-annotations"]], "pypath.inputs.italk.italk_interactions": [[479, "pypath-inputs-italk-italk-interactions"]], "pypath.inputs.italk.italk_raw": [[480, "pypath-inputs-italk-italk-raw"]], "pypath.inputs.kea": [[481, "module-pypath.inputs.kea"]], "pypath.inputs.kea.kea_enzyme_substrate": [[482, "pypath-inputs-kea-kea-enzyme-substrate"]], "pypath.inputs.kea.kea_interactions": [[483, "pypath-inputs-kea-kea-interactions"]], "pypath.inputs.kegg": [[484, "module-pypath.inputs.kegg"]], "pypath.inputs.kegg.KeggPathway": [[485, "pypath-inputs-kegg-keggpathway"]], "pypath.inputs.kegg.kegg_dbget": [[486, "pypath-inputs-kegg-kegg-dbget"]], "pypath.inputs.kegg.kegg_interactions": [[487, "pypath-inputs-kegg-kegg-interactions"]], "pypath.inputs.kegg.kegg_medicus": [[488, "pypath-inputs-kegg-kegg-medicus"]], "pypath.inputs.kegg.kegg_medicus_complexes": [[489, "pypath-inputs-kegg-kegg-medicus-complexes"]], "pypath.inputs.kegg.kegg_medicus_interactions": [[490, "pypath-inputs-kegg-kegg-medicus-interactions"]], "pypath.inputs.kegg.kegg_pathway_annotations": [[491, "pypath-inputs-kegg-kegg-pathway-annotations"]], "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons": [[492, "pypath-inputs-kegg-kegg-pathway-annotations-pathwaycommons"]], "pypath.inputs.kegg.kegg_pathways": [[493, "pypath-inputs-kegg-kegg-pathways"]], "pypath.inputs.kegg_api": [[494, "module-pypath.inputs.kegg_api"]], "pypath.inputs.kegg_api.disease_to_drug": [[495, "pypath-inputs-kegg-api-disease-to-drug"]], "pypath.inputs.kegg_api.disease_to_gene": [[496, "pypath-inputs-kegg-api-disease-to-gene"]], "pypath.inputs.kegg_api.disease_to_pathway": [[497, "pypath-inputs-kegg-api-disease-to-pathway"]], "pypath.inputs.kegg_api.drug_to_disease": [[498, "pypath-inputs-kegg-api-drug-to-disease"]], "pypath.inputs.kegg_api.drug_to_drug": [[499, "pypath-inputs-kegg-api-drug-to-drug"]], "pypath.inputs.kegg_api.drug_to_gene": [[500, "pypath-inputs-kegg-api-drug-to-gene"]], "pypath.inputs.kegg_api.drug_to_pathway": [[501, "pypath-inputs-kegg-api-drug-to-pathway"]], "pypath.inputs.kegg_api.gene_to_disease": [[502, "pypath-inputs-kegg-api-gene-to-disease"]], "pypath.inputs.kegg_api.gene_to_drug": [[503, "pypath-inputs-kegg-api-gene-to-drug"]], "pypath.inputs.kegg_api.gene_to_pathway": [[504, "pypath-inputs-kegg-api-gene-to-pathway"]], "pypath.inputs.kegg_api.kegg_drug_to_chebi": [[505, "pypath-inputs-kegg-api-kegg-drug-to-chebi"]], "pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid": [[506, "pypath-inputs-kegg-api-kegg-gene-to-ncbi-geneid"]], "pypath.inputs.kegg_api.kegg_gene_to_uniprot": [[507, "pypath-inputs-kegg-api-kegg-gene-to-uniprot"]], "pypath.inputs.kegg_api.pathway_to_disease": [[508, "pypath-inputs-kegg-api-pathway-to-disease"]], "pypath.inputs.kegg_api.pathway_to_drug": [[509, "pypath-inputs-kegg-api-pathway-to-drug"]], "pypath.inputs.kegg_api.pathway_to_gene": [[510, "pypath-inputs-kegg-api-pathway-to-gene"]], "pypath.inputs.kinasedotcom": [[511, "module-pypath.inputs.kinasedotcom"]], "pypath.inputs.kinasedotcom.kinasedotcom_annotations": [[512, "pypath-inputs-kinasedotcom-kinasedotcom-annotations"]], "pypath.inputs.kirouac2010": [[513, "module-pypath.inputs.kirouac2010"]], "pypath.inputs.kirouac2010.kirouac2010_interactions": [[514, "pypath-inputs-kirouac2010-kirouac2010-interactions"]], "pypath.inputs.lambert2018": [[515, "module-pypath.inputs.lambert2018"]], "pypath.inputs.lambert2018.lambert2018_annotations": [[516, "pypath-inputs-lambert2018-lambert2018-annotations"]], "pypath.inputs.lambert2018.lambert2018_s1_raw": [[517, "pypath-inputs-lambert2018-lambert2018-s1-raw"]], "pypath.inputs.laudanna": [[518, "module-pypath.inputs.laudanna"]], "pypath.inputs.laudanna.laudanna_directions": [[519, "pypath-inputs-laudanna-laudanna-directions"]], "pypath.inputs.laudanna.laudanna_effects": [[520, "pypath-inputs-laudanna-laudanna-effects"]], "pypath.inputs.li2012": [[521, "module-pypath.inputs.li2012"]], "pypath.inputs.li2012.get_li2012": [[522, "pypath-inputs-li2012-get-li2012"]], "pypath.inputs.li2012.li2012_dmi": [[523, "pypath-inputs-li2012-li2012-dmi"]], "pypath.inputs.li2012.li2012_enzyme_substrate": [[524, "pypath-inputs-li2012-li2012-enzyme-substrate"]], "pypath.inputs.li2012.li2012_interactions": [[525, "pypath-inputs-li2012-li2012-interactions"]], "pypath.inputs.lincs": [[526, "module-pypath.inputs.lincs"]], "pypath.inputs.lincs.lincs_compounds": [[527, "pypath-inputs-lincs-lincs-compounds"]], "pypath.inputs.lmpid": [[528, "module-pypath.inputs.lmpid"]], "pypath.inputs.lmpid.lmpid_dmi": [[529, "pypath-inputs-lmpid-lmpid-dmi"]], "pypath.inputs.lmpid.lmpid_interactions": [[530, "pypath-inputs-lmpid-lmpid-interactions"]], "pypath.inputs.lmpid.load_lmpid": [[531, "pypath-inputs-lmpid-load-lmpid"]], "pypath.inputs.lncdisease": [[532, "module-pypath.inputs.lncdisease"]], "pypath.inputs.lncdisease.lncdisease_interactions": [[533, "pypath-inputs-lncdisease-lncdisease-interactions"]], "pypath.inputs.lncrnadb": [[534, "module-pypath.inputs.lncrnadb"]], "pypath.inputs.lncrnadb.lncrnadb_interactions": [[535, "pypath-inputs-lncrnadb-lncrnadb-interactions"]], "pypath.inputs.locate": [[536, "module-pypath.inputs.locate"]], "pypath.inputs.locate.locate_localizations": [[537, "pypath-inputs-locate-locate-localizations"]], "pypath.inputs.lrdb": [[538, "module-pypath.inputs.lrdb"]], "pypath.inputs.lrdb.LrdbAnnotation": [[539, "pypath-inputs-lrdb-lrdbannotation"]], "pypath.inputs.lrdb.lrdb_annotations": [[540, "pypath-inputs-lrdb-lrdb-annotations"]], "pypath.inputs.lrdb.lrdb_interactions": [[541, "pypath-inputs-lrdb-lrdb-interactions"]], "pypath.inputs.macrophage": [[542, "module-pypath.inputs.macrophage"]], "pypath.inputs.macrophage.macrophage_interactions": [[543, "pypath-inputs-macrophage-macrophage-interactions"]], "pypath.inputs.main": [[544, "module-pypath.inputs.main"]], "pypath.inputs.matrisome": [[545, "module-pypath.inputs.matrisome"]], "pypath.inputs.matrisome.matrisome_annotations": [[546, "pypath-inputs-matrisome-matrisome-annotations"]], "pypath.inputs.matrixdb": [[547, "module-pypath.inputs.matrixdb"]], "pypath.inputs.matrixdb.matrixdb_annotations": [[548, "pypath-inputs-matrixdb-matrixdb-annotations"]], "pypath.inputs.matrixdb.matrixdb_ecm_proteins": [[549, "pypath-inputs-matrixdb-matrixdb-ecm-proteins"]], "pypath.inputs.matrixdb.matrixdb_interactions": [[550, "pypath-inputs-matrixdb-matrixdb-interactions"]], "pypath.inputs.matrixdb.matrixdb_membrane_proteins": [[551, "pypath-inputs-matrixdb-matrixdb-membrane-proteins"]], "pypath.inputs.matrixdb.matrixdb_secreted_proteins": [[552, "pypath-inputs-matrixdb-matrixdb-secreted-proteins"]], "pypath.inputs.mcam": [[553, "module-pypath.inputs.mcam"]], "pypath.inputs.mcam.mcam_cell_adhesion_molecules": [[554, "pypath-inputs-mcam-mcam-cell-adhesion-molecules"]], "pypath.inputs.membranome": [[555, "module-pypath.inputs.membranome"]], "pypath.inputs.membranome.membranome_annotations": [[556, "pypath-inputs-membranome-membranome-annotations"]], "pypath.inputs.mimp": [[557, "module-pypath.inputs.mimp"]], "pypath.inputs.mimp.get_kinase_class": [[558, "pypath-inputs-mimp-get-kinase-class"]], "pypath.inputs.mimp.mimp_enzyme_substrate": [[559, "pypath-inputs-mimp-mimp-enzyme-substrate"]], "pypath.inputs.mimp.mimp_interactions": [[560, "pypath-inputs-mimp-mimp-interactions"]], "pypath.inputs.mir2disease": [[561, "module-pypath.inputs.mir2disease"]], "pypath.inputs.mir2disease.mir2disease_interactions": [[562, "pypath-inputs-mir2disease-mir2disease-interactions"]], "pypath.inputs.mirbase": [[563, "module-pypath.inputs.mirbase"]], "pypath.inputs.mirbase.get_mirbase_aliases": [[564, "pypath-inputs-mirbase-get-mirbase-aliases"]], "pypath.inputs.mirbase.mirbase_ids": [[565, "pypath-inputs-mirbase-mirbase-ids"]], "pypath.inputs.mirbase.mirbase_mature": [[566, "pypath-inputs-mirbase-mirbase-mature"]], "pypath.inputs.mirbase.mirbase_mature_all": [[567, "pypath-inputs-mirbase-mirbase-mature-all"]], "pypath.inputs.mirbase.mirbase_precursor": [[568, "pypath-inputs-mirbase-mirbase-precursor"]], "pypath.inputs.mirbase.mirbase_precursor_all": [[569, "pypath-inputs-mirbase-mirbase-precursor-all"]], "pypath.inputs.mirbase.mirbase_precursor_to_mature": [[570, "pypath-inputs-mirbase-mirbase-precursor-to-mature"]], "pypath.inputs.mirdeathdb": [[571, "module-pypath.inputs.mirdeathdb"]], "pypath.inputs.mirdeathdb.mirdeathdb_interactions": [[572, "pypath-inputs-mirdeathdb-mirdeathdb-interactions"]], "pypath.inputs.mirecords": [[573, "module-pypath.inputs.mirecords"]], "pypath.inputs.mirecords.mirecords_interactions": [[574, "pypath-inputs-mirecords-mirecords-interactions"]], "pypath.inputs.mirtarbase": [[575, "module-pypath.inputs.mirtarbase"]], "pypath.inputs.mirtarbase.mirtarbase_interactions": [[576, "pypath-inputs-mirtarbase-mirtarbase-interactions"]], "pypath.inputs.mitab": [[577, "module-pypath.inputs.mitab"]], "pypath.inputs.mitab.mitab_field_list": [[578, "pypath-inputs-mitab-mitab-field-list"]], "pypath.inputs.mitab.mitab_field_uniprot": [[579, "pypath-inputs-mitab-mitab-field-uniprot"]], "pypath.inputs.mppi": [[580, "module-pypath.inputs.mppi"]], "pypath.inputs.mppi.mppi_interactions": [[581, "pypath-inputs-mppi-mppi-interactions"]], "pypath.inputs.ncrdeathdb": [[582, "module-pypath.inputs.ncrdeathdb"]], "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions": [[583, "pypath-inputs-ncrdeathdb-ncrdeathdb-interactions"]], "pypath.inputs.negatome": [[584, "module-pypath.inputs.negatome"]], "pypath.inputs.negatome.negatome_interactions": [[585, "pypath-inputs-negatome-negatome-interactions"]], "pypath.inputs.netbiol": [[586, "module-pypath.inputs.netbiol"]], "pypath.inputs.netbiol.arn_interactions": [[587, "pypath-inputs-netbiol-arn-interactions"]], "pypath.inputs.netbiol.nrf2ome_interactions": [[588, "pypath-inputs-netbiol-nrf2ome-interactions"]], "pypath.inputs.netpath": [[589, "module-pypath.inputs.netpath"]], "pypath.inputs.netpath.netpath_interactions": [[590, "pypath-inputs-netpath-netpath-interactions"]], "pypath.inputs.netpath.netpath_names": [[591, "pypath-inputs-netpath-netpath-names"]], "pypath.inputs.netpath.netpath_pathway_annotations": [[592, "pypath-inputs-netpath-netpath-pathway-annotations"]], "pypath.inputs.oma": [[593, "module-pypath.inputs.oma"]], "pypath.inputs.oma.oma_orthologs": [[594, "pypath-inputs-oma-oma-orthologs"]], "pypath.inputs.ontology": [[595, "module-pypath.inputs.ontology"]], "pypath.inputs.ontology.listof_ontologies": [[596, "pypath-inputs-ontology-listof-ontologies"]], "pypath.inputs.ontology.ontology": [[597, "pypath-inputs-ontology-ontology"]], "pypath.inputs.opm": [[598, "module-pypath.inputs.opm"]], "pypath.inputs.opm.opm_annotations": [[599, "pypath-inputs-opm-opm-annotations"]], "pypath.inputs.oreganno": [[600, "module-pypath.inputs.oreganno"]], "pypath.inputs.oreganno.oreganno_interactions": [[601, "pypath-inputs-oreganno-oreganno-interactions"]], "pypath.inputs.oreganno.oreganno_raw": [[602, "pypath-inputs-oreganno-oreganno-raw"]], "pypath.inputs.panglaodb": [[603, "module-pypath.inputs.panglaodb"]], "pypath.inputs.panglaodb.panglaodb_annotations": [[604, "pypath-inputs-panglaodb-panglaodb-annotations"]], "pypath.inputs.panglaodb.panglaodb_raw": [[605, "pypath-inputs-panglaodb-panglaodb-raw"]], "pypath.inputs.pathophenodb": [[606, "module-pypath.inputs.pathophenodb"]], "pypath.inputs.pathophenodb.DiseasePathogen": [[607, "pypath-inputs-pathophenodb-diseasepathogen"]], "pypath.inputs.pathophenodb.disease_pathogen_interactions": [[608, "pypath-inputs-pathophenodb-disease-pathogen-interactions"]], "pypath.inputs.pathwaycommons": [[609, "module-pypath.inputs.pathwaycommons"]], "pypath.inputs.pathwaycommons.PathwayCommonsInteraction": [[610, "pypath-inputs-pathwaycommons-pathwaycommonsinteraction"]], "pypath.inputs.pathwaycommons.PathwayCommonsResource": [[611, "pypath-inputs-pathwaycommons-pathwaycommonsresource"]], "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions": [[612, "pypath-inputs-pathwaycommons-pathwaycommons-bind-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions": [[613, "pypath-inputs-pathwaycommons-pathwaycommons-biogrid-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions": [[614, "pypath-inputs-pathwaycommons-pathwaycommons-corum-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions": [[615, "pypath-inputs-pathwaycommons-pathwaycommons-dip-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions": [[616, "pypath-inputs-pathwaycommons-pathwaycommons-hprd-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions": [[617, "pypath-inputs-pathwaycommons-pathwaycommons-inoh-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions": [[618, "pypath-inputs-pathwaycommons-pathwaycommons-intact-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_interactions": [[619, "pypath-inputs-pathwaycommons-pathwaycommons-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions": [[620, "pypath-inputs-pathwaycommons-pathwaycommons-kegg-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions": [[621, "pypath-inputs-pathwaycommons-pathwaycommons-netpath-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions": [[622, "pypath-inputs-pathwaycommons-pathwaycommons-panther-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions": [[623, "pypath-inputs-pathwaycommons-pathwaycommons-phosphosite-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions": [[624, "pypath-inputs-pathwaycommons-pathwaycommons-reactome-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions": [[625, "pypath-inputs-pathwaycommons-pathwaycommons-wikipathways-interactions"]], "pypath.inputs.pazar": [[626, "module-pypath.inputs.pazar"]], "pypath.inputs.pazar.pazar_interactions": [[627, "pypath-inputs-pazar-pazar-interactions"]], "pypath.inputs.pdb": [[628, "module-pypath.inputs.pdb"]], "pypath.inputs.pdb.pdb_chains": [[629, "pypath-inputs-pdb-pdb-chains"]], "pypath.inputs.pdb.pdb_complexes": [[630, "pypath-inputs-pdb-pdb-complexes"]], "pypath.inputs.pdb.pdb_uniprot": [[631, "pypath-inputs-pdb-pdb-uniprot"]], "pypath.inputs.pdzbase": [[632, "module-pypath.inputs.pdzbase"]], "pypath.inputs.pdzbase.pdzbase_interactions": [[633, "pypath-inputs-pdzbase-pdzbase-interactions"]], "pypath.inputs.pepcyber": [[634, "module-pypath.inputs.pepcyber"]], "pypath.inputs.pepcyber.pepcyber_details": [[635, "pypath-inputs-pepcyber-pepcyber-details"]], "pypath.inputs.pepcyber.pepcyber_interactions": [[636, "pypath-inputs-pepcyber-pepcyber-interactions"]], "pypath.inputs.pfam": [[637, "module-pypath.inputs.pfam"]], "pypath.inputs.pfam.pfam_names": [[638, "pypath-inputs-pfam-pfam-names"]], "pypath.inputs.pfam.pfam_pdb": [[639, "pypath-inputs-pfam-pfam-pdb"]], "pypath.inputs.pfam.pfam_regions": [[640, "pypath-inputs-pfam-pfam-regions"]], "pypath.inputs.pfam.pfam_uniprot": [[641, "pypath-inputs-pfam-pfam-uniprot"]], "pypath.inputs.pharos": [[642, "module-pypath.inputs.pharos"]], "pypath.inputs.pharos.pharos_diseases": [[643, "pypath-inputs-pharos-pharos-diseases"]], "pypath.inputs.pharos.pharos_expression": [[644, "pypath-inputs-pharos-pharos-expression"]], "pypath.inputs.pharos.pharos_general": [[645, "pypath-inputs-pharos-pharos-general"]], "pypath.inputs.pharos.pharos_gtex": [[646, "pypath-inputs-pharos-pharos-gtex"]], "pypath.inputs.pharos.pharos_ligands": [[647, "pypath-inputs-pharos-pharos-ligands"]], "pypath.inputs.pharos.pharos_orthologs": [[648, "pypath-inputs-pharos-pharos-orthologs"]], "pypath.inputs.pharos.pharos_targets": [[649, "pypath-inputs-pharos-pharos-targets"]], "pypath.inputs.pharos.pharos_xrefs": [[650, "pypath-inputs-pharos-pharos-xrefs"]], "pypath.inputs.phobius": [[651, "module-pypath.inputs.phobius"]], "pypath.inputs.phobius.phobius_annotations": [[652, "pypath-inputs-phobius-phobius-annotations"]], "pypath.inputs.phosphatome": [[653, "module-pypath.inputs.phosphatome"]], "pypath.inputs.phosphatome.phosphatome_annotations": [[654, "pypath-inputs-phosphatome-phosphatome-annotations"]], "pypath.inputs.phosphoelm": [[655, "module-pypath.inputs.phosphoelm"]], "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate": [[656, "pypath-inputs-phosphoelm-phosphoelm-enzyme-substrate"]], "pypath.inputs.phosphoelm.phosphoelm_interactions": [[657, "pypath-inputs-phosphoelm-phosphoelm-interactions"]], "pypath.inputs.phosphoelm.phosphoelm_kinases": [[658, "pypath-inputs-phosphoelm-phosphoelm-kinases"]], "pypath.inputs.phosphonetworks": [[659, "module-pypath.inputs.phosphonetworks"]], "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate": [[660, "pypath-inputs-phosphonetworks-phosphonetworks-enzyme-substrate"]], "pypath.inputs.phosphonetworks.phosphonetworks_interactions": [[661, "pypath-inputs-phosphonetworks-phosphonetworks-interactions"]], "pypath.inputs.phosphopoint": [[662, "module-pypath.inputs.phosphopoint"]], "pypath.inputs.phosphopoint.phosphopoint_directions": [[663, "pypath-inputs-phosphopoint-phosphopoint-directions"]], "pypath.inputs.phosphopoint.phosphopoint_interactions": [[664, "pypath-inputs-phosphopoint-phosphopoint-interactions"]], "pypath.inputs.phosphosite": [[665, "module-pypath.inputs.phosphosite"]], "pypath.inputs.phosphosite.phosphosite_directions": [[666, "pypath-inputs-phosphosite-phosphosite-directions"]], "pypath.inputs.phosphosite.phosphosite_enzyme_substrate": [[667, "pypath-inputs-phosphosite-phosphosite-enzyme-substrate"]], "pypath.inputs.phosphosite.phosphosite_interactions": [[668, "pypath-inputs-phosphosite-phosphosite-interactions"]], "pypath.inputs.phosphosite.phosphosite_interactions_all": [[669, "pypath-inputs-phosphosite-phosphosite-interactions-all"]], "pypath.inputs.phosphosite.phosphosite_interactions_curated": [[670, "pypath-inputs-phosphosite-phosphosite-interactions-curated"]], "pypath.inputs.phosphosite.phosphosite_interactions_new": [[671, "pypath-inputs-phosphosite-phosphosite-interactions-new"]], "pypath.inputs.phosphosite.phosphosite_interactions_noref": [[672, "pypath-inputs-phosphosite-phosphosite-interactions-noref"]], "pypath.inputs.phosphosite.phosphosite_ptm_orthology": [[673, "pypath-inputs-phosphosite-phosphosite-ptm-orthology"]], "pypath.inputs.phosphosite.phosphosite_ptms": [[674, "pypath-inputs-phosphosite-phosphosite-ptms"]], "pypath.inputs.phosphosite.phosphosite_regsites": [[675, "pypath-inputs-phosphosite-phosphosite-regsites"]], "pypath.inputs.phosphosite.phosphosite_regsites_one_organism": [[676, "pypath-inputs-phosphosite-phosphosite-regsites-one-organism"]], "pypath.inputs.phosphosite.regsites_tab": [[677, "pypath-inputs-phosphosite-regsites-tab"]], "pypath.inputs.pisa": [[678, "module-pypath.inputs.pisa"]], "pypath.inputs.pisa.PisaBond": [[679, "pypath-inputs-pisa-pisabond"]], "pypath.inputs.pisa.pisa_bonds": [[680, "pypath-inputs-pisa-pisa-bonds"]], "pypath.inputs.pisa.pisa_interfaces": [[681, "pypath-inputs-pisa-pisa-interfaces"]], "pypath.inputs.pro": [[682, "module-pypath.inputs.pro"]], "pypath.inputs.pro.get_pro": [[683, "pypath-inputs-pro-get-pro"]], "pypath.inputs.pro.pro_mapping": [[684, "pypath-inputs-pro-pro-mapping"]], "pypath.inputs.progeny": [[685, "module-pypath.inputs.progeny"]], "pypath.inputs.progeny.progeny_annotations": [[686, "pypath-inputs-progeny-progeny-annotations"]], "pypath.inputs.progeny.progeny_raw": [[687, "pypath-inputs-progeny-progeny-raw"]], "pypath.inputs.proteinatlas": [[688, "module-pypath.inputs.proteinatlas"]], "pypath.inputs.proteinatlas.get_proteinatlas": [[689, "pypath-inputs-proteinatlas-get-proteinatlas"]], "pypath.inputs.proteinatlas.proteinatlas_annotations": [[690, "pypath-inputs-proteinatlas-proteinatlas-annotations"]], "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations": [[691, "pypath-inputs-proteinatlas-proteinatlas-secretome-annotations"]], "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations": [[692, "pypath-inputs-proteinatlas-proteinatlas-subcellular-annotations"]], "pypath.inputs.proteins": [[693, "module-pypath.inputs.proteins"]], "pypath.inputs.proteins.variants": [[694, "pypath-inputs-proteins-variants"]], "pypath.inputs.protmapper": [[695, "module-pypath.inputs.protmapper"]], "pypath.inputs.protmapper.get_protmapper": [[696, "pypath-inputs-protmapper-get-protmapper"]], "pypath.inputs.protmapper.protmapper_enzyme_substrate": [[697, "pypath-inputs-protmapper-protmapper-enzyme-substrate"]], "pypath.inputs.protmapper.protmapper_interactions": [[698, "pypath-inputs-protmapper-protmapper-interactions"]], "pypath.inputs.pubchem": [[699, "module-pypath.inputs.pubchem"]], "pypath.inputs.pubchem.pubchem_mapping": [[700, "pypath-inputs-pubchem-pubchem-mapping"]], "pypath.inputs.pubmed": [[701, "module-pypath.inputs.pubmed"]], "pypath.inputs.pubmed.get_pmid": [[702, "pypath-inputs-pubmed-get-pmid"]], "pypath.inputs.pubmed.get_pubmeds": [[703, "pypath-inputs-pubmed-get-pubmeds"]], "pypath.inputs.pubmed.only_pmids": [[704, "pypath-inputs-pubmed-only-pmids"]], "pypath.inputs.pubmed.open_pubmed": [[705, "pypath-inputs-pubmed-open-pubmed"]], "pypath.inputs.pubmed.pmids_dict": [[706, "pypath-inputs-pubmed-pmids-dict"]], "pypath.inputs.pubmed.pmids_list": [[707, "pypath-inputs-pubmed-pmids-list"]], "pypath.inputs.ramilowski2015": [[708, "module-pypath.inputs.ramilowski2015"]], "pypath.inputs.ramilowski2015.ramilowski_interactions": [[709, "pypath-inputs-ramilowski2015-ramilowski-interactions"]], "pypath.inputs.ramilowski2015.ramilowski_locations": [[710, "pypath-inputs-ramilowski2015-ramilowski-locations"]], "pypath.inputs.rdata": [[711, "module-pypath.inputs.rdata"]], "pypath.inputs.reaction": [[712, "module-pypath.inputs.reaction"]], "pypath.inputs.reaction.acsn_biopax": [[713, "pypath-inputs-reaction-acsn-biopax"]], "pypath.inputs.reaction.acsn_interactions_2": [[714, "pypath-inputs-reaction-acsn-interactions-2"]], "pypath.inputs.reaction.get_acsn_effects": [[715, "pypath-inputs-reaction-get-acsn-effects"]], "pypath.inputs.reaction.get_controls": [[716, "pypath-inputs-reaction-get-controls"]], "pypath.inputs.reaction.get_interactions": [[717, "pypath-inputs-reaction-get-interactions"]], "pypath.inputs.reaction.get_reactions": [[718, "pypath-inputs-reaction-get-reactions"]], "pypath.inputs.reaction.get_soup": [[719, "pypath-inputs-reaction-get-soup"]], "pypath.inputs.reaction.panther_biopax": [[720, "pypath-inputs-reaction-panther-biopax"]], "pypath.inputs.reaction.panther_interactions": [[721, "pypath-inputs-reaction-panther-interactions"]], "pypath.inputs.reaction.pid_biopax": [[722, "pypath-inputs-reaction-pid-biopax"]], "pypath.inputs.reaction.pid_interactions": [[723, "pypath-inputs-reaction-pid-interactions"]], "pypath.inputs.reaction.process_complex": [[724, "pypath-inputs-reaction-process-complex"]], "pypath.inputs.reaction.process_controls": [[725, "pypath-inputs-reaction-process-controls"]], "pypath.inputs.reaction.process_reactions": [[726, "pypath-inputs-reaction-process-reactions"]], "pypath.inputs.reaction.reactions_biopax": [[727, "pypath-inputs-reaction-reactions-biopax"]], "pypath.inputs.reaction.reactome_biopax": [[728, "pypath-inputs-reaction-reactome-biopax"]], "pypath.inputs.reaction.reactome_bs": [[729, "pypath-inputs-reaction-reactome-bs"]], "pypath.inputs.reaction.reactome_interactions": [[730, "pypath-inputs-reaction-reactome-interactions"]], "pypath.inputs.reaction.reactome_sbml": [[731, "pypath-inputs-reaction-reactome-sbml"]], "pypath.inputs.scconnect": [[732, "module-pypath.inputs.scconnect"]], "pypath.inputs.scconnect.scconnect_annotations": [[733, "pypath-inputs-scconnect-scconnect-annotations"]], "pypath.inputs.scconnect.scconnect_complexes": [[734, "pypath-inputs-scconnect-scconnect-complexes"]], "pypath.inputs.scconnect.scconnect_interactions": [[735, "pypath-inputs-scconnect-scconnect-interactions"]], "pypath.inputs.science": [[736, "module-pypath.inputs.science"]], "pypath.inputs.science.science_download": [[737, "pypath-inputs-science-science-download"]], "pypath.inputs.signalink": [[738, "module-pypath.inputs.signalink"]], "pypath.inputs.signalink.signalink_annotations": [[739, "pypath-inputs-signalink-signalink-annotations"]], "pypath.inputs.signalink.signalink_function_annotations": [[740, "pypath-inputs-signalink-signalink-function-annotations"]], "pypath.inputs.signalink.signalink_interactions": [[741, "pypath-inputs-signalink-signalink-interactions"]], "pypath.inputs.signalink.signalink_pathway_annotations": [[742, "pypath-inputs-signalink-signalink-pathway-annotations"]], "pypath.inputs.signor": [[743, "module-pypath.inputs.signor"]], "pypath.inputs.signor.signor_complexes": [[744, "pypath-inputs-signor-signor-complexes"]], "pypath.inputs.signor.signor_enzyme_substrate": [[745, "pypath-inputs-signor-signor-enzyme-substrate"]], "pypath.inputs.signor.signor_interactions": [[746, "pypath-inputs-signor-signor-interactions"]], "pypath.inputs.signor.signor_pathway_annotations": [[747, "pypath-inputs-signor-signor-pathway-annotations"]], "pypath.inputs.signor.signor_pathways": [[748, "pypath-inputs-signor-signor-pathways"]], "pypath.inputs.signor.signor_protein_families": [[749, "pypath-inputs-signor-signor-protein-families"]], "pypath.inputs.spike": [[750, "module-pypath.inputs.spike"]], "pypath.inputs.spike.spike_complexes": [[751, "pypath-inputs-spike-spike-complexes"]], "pypath.inputs.spike.spike_interactions": [[752, "pypath-inputs-spike-spike-interactions"]], "pypath.inputs.stitch": [[753, "module-pypath.inputs.stitch"]], "pypath.inputs.stitch.stitch_actions_interactions": [[754, "pypath-inputs-stitch-stitch-actions-interactions"]], "pypath.inputs.stitch.stitch_links_interactions": [[755, "pypath-inputs-stitch-stitch-links-interactions"]], "pypath.inputs.string": [[756, "module-pypath.inputs.string"]], "pypath.inputs.string.string_effects": [[757, "pypath-inputs-string-string-effects"]], "pypath.inputs.string.string_links_interactions": [[758, "pypath-inputs-string-string-links-interactions"]], "pypath.inputs.string.string_physical_interactions": [[759, "pypath-inputs-string-string-physical-interactions"]], "pypath.inputs.string.string_species": [[760, "pypath-inputs-string-string-species"]], "pypath.inputs.surfaceome": [[761, "module-pypath.inputs.surfaceome"]], "pypath.inputs.surfaceome.surfaceome_annotations": [[762, "pypath-inputs-surfaceome-surfaceome-annotations"]], "pypath.inputs.switches_elm": [[763, "module-pypath.inputs.switches_elm"]], "pypath.inputs.switches_elm.get_switches_elm": [[764, "pypath-inputs-switches-elm-get-switches-elm"]], "pypath.inputs.talklr": [[765, "module-pypath.inputs.talklr"]], "pypath.inputs.talklr.talklr_annotations": [[766, "pypath-inputs-talklr-talklr-annotations"]], "pypath.inputs.talklr.talklr_interactions": [[767, "pypath-inputs-talklr-talklr-interactions"]], "pypath.inputs.talklr.talklr_raw": [[768, "pypath-inputs-talklr-talklr-raw"]], "pypath.inputs.tcdb": [[769, "module-pypath.inputs.tcdb"]], "pypath.inputs.tcdb.tcdb_annotations": [[770, "pypath-inputs-tcdb-tcdb-annotations"]], "pypath.inputs.tcdb.tcdb_classes": [[771, "pypath-inputs-tcdb-tcdb-classes"]], "pypath.inputs.tcdb.tcdb_families": [[772, "pypath-inputs-tcdb-tcdb-families"]], "pypath.inputs.tfcensus": [[773, "module-pypath.inputs.tfcensus"]], "pypath.inputs.tfcensus.tfcensus_annotations": [[774, "pypath-inputs-tfcensus-tfcensus-annotations"]], "pypath.inputs.threedcomplex": [[775, "module-pypath.inputs.threedcomplex"]], "pypath.inputs.threedcomplex.threedcomplex_chains": [[776, "pypath-inputs-threedcomplex-threedcomplex-chains"]], "pypath.inputs.threedcomplex.threedcomplex_complexes": [[777, "pypath-inputs-threedcomplex-threedcomplex-complexes"]], "pypath.inputs.threedcomplex.threedcomplex_contacts": [[778, "pypath-inputs-threedcomplex-threedcomplex-contacts"]], "pypath.inputs.threedcomplex.threedcomplex_ddi": [[779, "pypath-inputs-threedcomplex-threedcomplex-ddi"]], "pypath.inputs.threedcomplex.threedcomplex_nresidues": [[780, "pypath-inputs-threedcomplex-threedcomplex-nresidues"]], "pypath.inputs.threedid": [[781, "module-pypath.inputs.threedid"]], "pypath.inputs.threedid.get_3did": [[782, "pypath-inputs-threedid-get-3did"]], "pypath.inputs.threedid.get_3did_ddi": [[783, "pypath-inputs-threedid-get-3did-ddi"]], "pypath.inputs.threedid.get_3did_dmi": [[784, "pypath-inputs-threedid-get-3did-dmi"]], "pypath.inputs.threedid.process_3did_dmi": [[785, "pypath-inputs-threedid-process-3did-dmi"]], "pypath.inputs.topdb": [[786, "module-pypath.inputs.topdb"]], "pypath.inputs.topdb.topdb_annotations": [[787, "pypath-inputs-topdb-topdb-annotations"]], "pypath.inputs.transmir": [[788, "module-pypath.inputs.transmir"]], "pypath.inputs.transmir.transmir_interactions": [[789, "pypath-inputs-transmir-transmir-interactions"]], "pypath.inputs.trip": [[790, "module-pypath.inputs.trip"]], "pypath.inputs.trip.take_a_trip": [[791, "pypath-inputs-trip-take-a-trip"]], "pypath.inputs.trip.trip_find_uniprot": [[792, "pypath-inputs-trip-trip-find-uniprot"]], "pypath.inputs.trip.trip_get_uniprot": [[793, "pypath-inputs-trip-trip-get-uniprot"]], "pypath.inputs.trip.trip_interactions": [[794, "pypath-inputs-trip-trip-interactions"]], "pypath.inputs.trip.trip_process": [[795, "pypath-inputs-trip-trip-process"]], "pypath.inputs.trip.trip_process_table": [[796, "pypath-inputs-trip-trip-process-table"]], "pypath.inputs.trrust": [[797, "module-pypath.inputs.trrust"]], "pypath.inputs.trrust.scrape_human": [[798, "pypath-inputs-trrust-scrape-human"]], "pypath.inputs.trrust.scrape_mouse": [[799, "pypath-inputs-trrust-scrape-mouse"]], "pypath.inputs.trrust.trrust_general": [[800, "pypath-inputs-trrust-trrust-general"]], "pypath.inputs.trrust.trrust_human": [[801, "pypath-inputs-trrust-trrust-human"]], "pypath.inputs.trrust.trrust_mouse": [[802, "pypath-inputs-trrust-trrust-mouse"]], "pypath.inputs.trrust.trrust_scraping": [[803, "pypath-inputs-trrust-trrust-scraping"]], "pypath.inputs.unichem": [[804, "module-pypath.inputs.unichem"]], "pypath.inputs.unichem.info": [[805, "pypath-inputs-unichem-info"]], "pypath.inputs.unichem.unichem_info": [[806, "pypath-inputs-unichem-unichem-info"]], "pypath.inputs.unichem.unichem_mapping": [[807, "pypath-inputs-unichem-unichem-mapping"]], "pypath.inputs.unichem.unichem_sources": [[808, "pypath-inputs-unichem-unichem-sources"]], "pypath.inputs.uniprot": [[809, "module-pypath.inputs.uniprot"]], "pypath.inputs.uniprot.Taxon": [[810, "pypath-inputs-uniprot-taxon"]], "pypath.inputs.uniprot.UniprotRecordHistory": [[811, "pypath-inputs-uniprot-uniprotrecordhistory"]], "pypath.inputs.uniprot.all_swissprots": [[812, "pypath-inputs-uniprot-all-swissprots"]], "pypath.inputs.uniprot.all_trembls": [[813, "pypath-inputs-uniprot-all-trembls"]], "pypath.inputs.uniprot.all_uniprots": [[814, "pypath-inputs-uniprot-all-uniprots"]], "pypath.inputs.uniprot.deleted_uniprot_genesymbol": [[815, "pypath-inputs-uniprot-deleted-uniprot-genesymbol"]], "pypath.inputs.uniprot.get_db": [[816, "pypath-inputs-uniprot-get-db"]], "pypath.inputs.uniprot.get_uniprot_sec": [[817, "pypath-inputs-uniprot-get-uniprot-sec"]], "pypath.inputs.uniprot.init_db": [[818, "pypath-inputs-uniprot-init-db"]], "pypath.inputs.uniprot.is_swissprot": [[819, "pypath-inputs-uniprot-is-swissprot"]], "pypath.inputs.uniprot.is_trembl": [[820, "pypath-inputs-uniprot-is-trembl"]], "pypath.inputs.uniprot.is_uniprot": [[821, "pypath-inputs-uniprot-is-uniprot"]], "pypath.inputs.uniprot.protein_datasheet": [[822, "pypath-inputs-uniprot-protein-datasheet"]], "pypath.inputs.uniprot.swissprot_deleted": [[823, "pypath-inputs-uniprot-swissprot-deleted"]], "pypath.inputs.uniprot.trembl_deleted": [[824, "pypath-inputs-uniprot-trembl-deleted"]], "pypath.inputs.uniprot.uniprot_data": [[825, "pypath-inputs-uniprot-uniprot-data"]], "pypath.inputs.uniprot.uniprot_deleted": [[826, "pypath-inputs-uniprot-uniprot-deleted"]], "pypath.inputs.uniprot.uniprot_families": [[827, "pypath-inputs-uniprot-uniprot-families"]], "pypath.inputs.uniprot.uniprot_history": [[828, "pypath-inputs-uniprot-uniprot-history"]], "pypath.inputs.uniprot.uniprot_history_recent_datasheet": [[829, "pypath-inputs-uniprot-uniprot-history-recent-datasheet"]], "pypath.inputs.uniprot.uniprot_keywords": [[830, "pypath-inputs-uniprot-uniprot-keywords"]], "pypath.inputs.uniprot.uniprot_locations": [[831, "pypath-inputs-uniprot-uniprot-locations"]], "pypath.inputs.uniprot.uniprot_ncbi_taxids": [[832, "pypath-inputs-uniprot-uniprot-ncbi-taxids"]], "pypath.inputs.uniprot.uniprot_ncbi_taxids_2": [[833, "pypath-inputs-uniprot-uniprot-ncbi-taxids-2"]], "pypath.inputs.uniprot.uniprot_preprocess": [[834, "pypath-inputs-uniprot-uniprot-preprocess"]], "pypath.inputs.uniprot.uniprot_recent_version": [[835, "pypath-inputs-uniprot-uniprot-recent-version"]], "pypath.inputs.uniprot.uniprot_taxonomy": [[836, "pypath-inputs-uniprot-uniprot-taxonomy"]], "pypath.inputs.uniprot.uniprot_tissues": [[837, "pypath-inputs-uniprot-uniprot-tissues"]], "pypath.inputs.uniprot.uniprot_topology": [[838, "pypath-inputs-uniprot-uniprot-topology"]], "pypath.inputs.uniprot.valid_uniprot": [[839, "pypath-inputs-uniprot-valid-uniprot"]], "pypath.inputs.wang": [[840, "module-pypath.inputs.wang"]], "pypath.inputs.wang.cui_interactions": [[841, "pypath-inputs-wang-cui-interactions"]], "pypath.inputs.wang.hsn_interactions": [[842, "pypath-inputs-wang-hsn-interactions"]], "pypath.inputs.wang.wang_annotations": [[843, "pypath-inputs-wang-wang-annotations"]], "pypath.inputs.wang.wang_interactions": [[844, "pypath-inputs-wang-wang-interactions"]], "pypath.inputs.wojtowicz2020": [[845, "module-pypath.inputs.wojtowicz2020"]], "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions": [[846, "pypath-inputs-wojtowicz2020-wojtowicz2020-interactions"]], "pypath.inputs.wojtowicz2020.wojtowicz2020_raw": [[847, "pypath-inputs-wojtowicz2020-wojtowicz2020-raw"]], "pypath.inputs.zhong2015": [[848, "module-pypath.inputs.zhong2015"]], "pypath.inputs.zhong2015.zhong2015_annotations": [[849, "pypath-inputs-zhong2015-zhong2015-annotations"]], "pypath.internals": [[850, "module-pypath.internals"]], "pypath.internals.annot_formats": [[851, "module-pypath.internals.annot_formats"]], "pypath.internals.annot_formats.AnnotDef": [[852, "pypath-internals-annot-formats-annotdef"]], "pypath.internals.annot_formats.AnnotDefKey": [[853, "pypath-internals-annot-formats-annotdefkey"]], "pypath.internals.annot_formats.AnnotOp": [[854, "pypath-internals-annot-formats-annotop"]], "pypath.internals.annot_formats.AnnotationGroup": [[855, "pypath-internals-annot-formats-annotationgroup"]], "pypath.internals.input_formats": [[856, "module-pypath.internals.input_formats"]], "pypath.internals.input_formats.ArrayMapping": [[857, "pypath-internals-input-formats-arraymapping"]], "pypath.internals.input_formats.BiomartMapping": [[858, "pypath-internals-input-formats-biomartmapping"]], "pypath.internals.input_formats.FileMapping": [[859, "pypath-internals-input-formats-filemapping"]], "pypath.internals.input_formats.MappingInput": [[860, "pypath-internals-input-formats-mappinginput"]], "pypath.internals.input_formats.NetworkInput": [[861, "pypath-internals-input-formats-networkinput"]], "pypath.internals.input_formats.PickleMapping": [[862, "pypath-internals-input-formats-picklemapping"]], "pypath.internals.input_formats.ProMapping": [[863, "pypath-internals-input-formats-promapping"]], "pypath.internals.input_formats.ReadList": [[864, "pypath-internals-input-formats-readlist"]], "pypath.internals.input_formats.UnichemMapping": [[865, "pypath-internals-input-formats-unichemmapping"]], "pypath.internals.input_formats.UniprotListMapping": [[866, "pypath-internals-input-formats-uniprotlistmapping"]], "pypath.internals.input_formats.UniprotMapping": [[867, "pypath-internals-input-formats-uniprotmapping"]], "pypath.internals.intera": [[868, "module-pypath.internals.intera"]], "pypath.internals.intera.Complex": [[869, "pypath-internals-intera-complex"]], "pypath.internals.intera.Domain": [[870, "pypath-internals-intera-domain"]], "pypath.internals.intera.DomainDomain": [[871, "pypath-internals-intera-domaindomain"]], "pypath.internals.intera.DomainMotif": [[872, "pypath-internals-intera-domainmotif"]], "pypath.internals.intera.Interface": [[873, "pypath-internals-intera-interface"]], "pypath.internals.intera.Motif": [[874, "pypath-internals-intera-motif"]], "pypath.internals.intera.Ptm": [[875, "pypath-internals-intera-ptm"]], "pypath.internals.intera.Regulation": [[876, "pypath-internals-intera-regulation"]], "pypath.internals.intera.Residue": [[877, "pypath-internals-intera-residue"]], "pypath.internals.license": [[878, "module-pypath.internals.license"]], "pypath.internals.license.License": [[879, "pypath-internals-license-license"]], "pypath.internals.license.LicenseAttrib": [[880, "pypath-internals-license-licenseattrib"]], "pypath.internals.license.LicenseFeature": [[881, "pypath-internals-license-licensefeature"]], "pypath.internals.license.LicensePurpose": [[882, "pypath-internals-license-licensepurpose"]], "pypath.internals.license.LicenseSharing": [[883, "pypath-internals-license-licensesharing"]], "pypath.internals.maps": [[884, "module-pypath.internals.maps"]], "pypath.internals.refs": [[885, "module-pypath.internals.refs"]], "pypath.internals.refs.Reference": [[886, "pypath-internals-refs-reference"]], "pypath.internals.refs.get_pubmed_data": [[887, "pypath-internals-refs-get-pubmed-data"]], "pypath.internals.resource": [[888, "module-pypath.internals.resource"]], "pypath.internals.resource.AbstractResource": [[889, "pypath-internals-resource-abstractresource"]], "pypath.internals.resource.EnzymeSubstrateResource": [[890, "pypath-internals-resource-enzymesubstrateresource"]], "pypath.internals.resource.EnzymeSubstrateResourceKey": [[891, "pypath-internals-resource-enzymesubstrateresourcekey"]], "pypath.internals.resource.NetworkResource": [[892, "pypath-internals-resource-networkresource"]], "pypath.internals.resource.NetworkResourceKey": [[893, "pypath-internals-resource-networkresourcekey"]], "pypath.internals.resource.ResourceAttributes": [[894, "pypath-internals-resource-resourceattributes"]], "pypath.legacy": [[895, "module-pypath.legacy"]], "pypath.legacy.db_categories": [[896, "module-pypath.legacy.db_categories"]], "pypath.legacy.db_categories.get_categories": [[897, "pypath-legacy-db-categories-get-categories"]], "pypath.legacy.db_categories.get_category": [[898, "pypath-legacy-db-categories-get-category"]], "pypath.legacy.main": [[899, "module-pypath.legacy.main"]], "pypath.legacy.main.Direction": [[900, "pypath-legacy-main-direction"]], "pypath.legacy.main.NetworkEntityCollection": [[901, "pypath-legacy-main-networkentitycollection"]], "pypath.legacy.main.NetworkStatsRecord": [[902, "pypath-legacy-main-networkstatsrecord"]], "pypath.legacy.main.PyPath": [[903, "pypath-legacy-main-pypath"]], "Example:": [[903, "example"]], "pypath.legacy.main.get_db": [[904, "pypath-legacy-main-get-db"]], "pypath.legacy.main.init_db": [[905, "pypath-legacy-main-init-db"]], "pypath.log": [[906, "pypath-log"]], "pypath.omnipath": [[907, "module-pypath.omnipath"]], "pypath.omnipath.app": [[908, "module-pypath.omnipath.app"]], "pypath.omnipath.app.DatabaseManager": [[909, "pypath-omnipath-app-databasemanager"]], "pypath.omnipath.databases": [[910, "module-pypath.omnipath.databases"]], "pypath.omnipath.databases.build": [[911, "pypath-omnipath-databases-build"]], "pypath.omnipath.databases.class_and_param": [[912, "pypath-omnipath-databases-class-and-param"]], "pypath.omnipath.databases.define": [[913, "module-pypath.omnipath.databases.define"]], "pypath.omnipath.databases.define.DatabaseClass": [[914, "pypath-omnipath-databases-define-databaseclass"]], "pypath.omnipath.databases.define.DatabaseDefinition": [[915, "pypath-omnipath-databases-define-databasedefinition"]], "pypath.omnipath.databases.define.DatabaseDefinitionManager": [[916, "pypath-omnipath-databases-define-databasedefinitionmanager"]], "pypath.omnipath.databases.get_manager": [[917, "pypath-omnipath-databases-get-manager"]], "pypath.omnipath.databases.init_manager": [[918, "pypath-omnipath-databases-init-manager"]], "pypath.omnipath.export": [[919, "module-pypath.omnipath.export"]], "pypath.omnipath.export.Export": [[920, "pypath-omnipath-export-export"]], "pypath.omnipath.init": [[921, "pypath-omnipath-init"]], "pypath.omnipath.param": [[922, "module-pypath.omnipath.param"]], "pypath.omnipath.param.curated_ppi_resources": [[923, "pypath-omnipath-param-curated-ppi-resources"]], "pypath.omnipath.param.tf_target_resources": [[924, "pypath-omnipath-param-tf-target-resources"]], "pypath.omnipath.server": [[925, "module-pypath.omnipath.server"]], "pypath.omnipath.server.build": [[926, "module-pypath.omnipath.server.build"]], "pypath.omnipath.server.build.WebserviceTables": [[927, "pypath-omnipath-server-build-webservicetables"]], "pypath.omnipath.server.generate_about_page": [[928, "module-pypath.omnipath.server.generate_about_page"]], "pypath.omnipath.server.generate_about_page.export_licenses": [[929, "pypath-omnipath-server-generate-about-page-export-licenses"]], "pypath.omnipath.server.generate_about_page.generate_about_html": [[930, "pypath-omnipath-server-generate-about-page-generate-about-html"]], "pypath.omnipath.server.generate_about_page.resource_list_latex": [[931, "pypath-omnipath-server-generate-about-page-resource-list-latex"]], "pypath.omnipath.server.generate_about_page.write_html": [[932, "pypath-omnipath-server-generate-about-page-write-html"]], "pypath.omnipath.server.legacy": [[933, "module-pypath.omnipath.server.legacy"]], "pypath.omnipath.server.legacy.PypathServer": [[934, "pypath-omnipath-server-legacy-pypathserver"]], "pypath.omnipath.server.run": [[935, "module-pypath.omnipath.server.run"]], "pypath.omnipath.server.run.BaseServer": [[936, "pypath-omnipath-server-run-baseserver"]], "pypath.omnipath.server.run.Rest": [[937, "pypath-omnipath-server-run-rest"]], "pypath.omnipath.server.run.TableServer": [[938, "pypath-omnipath-server-run-tableserver"]], "pypath.omnipath.server.run.TwistedWebResource": [[939, "pypath-omnipath-server-run-twistedwebresource"]], "pypath.omnipath.server.run.TwistedWebSite": [[940, "pypath-omnipath-server-run-twistedwebsite"]], "pypath.omnipath.server.run.stop_server": [[941, "pypath-omnipath-server-run-stop-server"]], "pypath.omnipath.server.run.twisted_listen_tcp": [[942, "pypath-omnipath-server-run-twisted-listen-tcp"]], "pypath.omnipath.server.run.twisted_run": [[943, "pypath-omnipath-server-run-twisted-run"]], "pypath.resources": [[944, "module-pypath.resources"]], "pypath.resources.controller": [[945, "module-pypath.resources.controller"]], "pypath.resources.controller.ResourceController": [[946, "pypath-resources-controller-resourcecontroller"]], "pypath.resources.data": [[947, "module-pypath.resources.data"]], "pypath.resources.data_formats": [[948, "module-pypath.resources.data_formats"]], "pypath.resources.data_formats.ROOT": [[949, "pypath-resources-data-formats-root"]], "pypath.resources.data_formats.activity_flow": [[950, "pypath-resources-data-formats-activity-flow"]], "pypath.resources.data_formats.enzyme_substrate": [[951, "pypath-resources-data-formats-enzyme-substrate"]], "pypath.resources.data_formats.interaction": [[952, "pypath-resources-data-formats-interaction"]], "pypath.resources.data_formats.interaction_htp": [[953, "pypath-resources-data-formats-interaction-htp"]], "pypath.resources.data_formats.obsolate": [[954, "pypath-resources-data-formats-obsolate"]], "pypath.resources.data_formats.pathway_bad": [[955, "pypath-resources-data-formats-pathway-bad"]], "pypath.resources.data_formats.reaction_pc": [[956, "pypath-resources-data-formats-reaction-pc"]], "pypath.resources.data_formats.transcription_deprecated": [[957, "pypath-resources-data-formats-transcription-deprecated"]], "pypath.resources.data_formats.transcription_onebyone": [[958, "pypath-resources-data-formats-transcription-onebyone"]], "pypath.resources.descriptions": [[959, "module-pypath.resources.descriptions"]], "pypath.resources.descriptions.export_licenses": [[960, "pypath-resources-descriptions-export-licenses"]], "pypath.resources.descriptions.gen_html": [[961, "pypath-resources-descriptions-gen-html"]], "pypath.resources.descriptions.resource_list_latex": [[962, "pypath-resources-descriptions-resource-list-latex"]], "pypath.resources.descriptions.write_html": [[963, "pypath-resources-descriptions-write-html"]], "pypath.resources.get_controller": [[964, "pypath-resources-get-controller"]], "pypath.resources.licenses": [[965, "module-pypath.resources.licenses"]], "pypath.resources.licenses.Licenses": [[966, "pypath-resources-licenses-licenses"]], "pypath.resources.network": [[967, "module-pypath.resources.network"]], "pypath.resources.network.dorothea_expand_levels": [[968, "pypath-resources-network-dorothea-expand-levels"]], "pypath.resources.urls": [[969, "module-pypath.resources.urls"]], "pypath.share": [[970, "module-pypath.share"]], "pypath.share.cache": [[971, "module-pypath.share.cache"]], "pypath.share.cache.cache_item": [[972, "pypath-share-cache-cache-item"]], "pypath.share.cache.get_cachedir": [[973, "pypath-share-cache-get-cachedir"]], "pypath.share.common": [[974, "module-pypath.share.common"]], "pypath.share.common.add_to_list": [[975, "pypath-share-common-add-to-list"]], "pypath.share.common.add_to_set": [[976, "pypath-share-common-add-to-set"]], "pypath.share.common.at_least_in": [[977, "pypath-share-common-at-least-in"]], "pypath.share.common.clean_dict": [[978, "pypath-share-common-clean-dict"]], "pypath.share.common.combine_attrs": [[979, "pypath-share-common-combine-attrs"]], "pypath.share.common.console": [[980, "pypath-share-common-console"]], "pypath.share.common.decode": [[981, "pypath-share-common-decode"]], "pypath.share.common.del_empty": [[982, "pypath-share-common-del-empty"]], "pypath.share.common.df_memory_usage": [[983, "pypath-share-common-df-memory-usage"]], "pypath.share.common.dict_collapse_keys": [[984, "pypath-share-common-dict-collapse-keys"]], "pypath.share.common.dict_counts": [[985, "pypath-share-common-dict-counts"]], "pypath.share.common.dict_diff": [[986, "pypath-share-common-dict-diff"]], "pypath.share.common.dict_expand_keys": [[987, "pypath-share-common-dict-expand-keys"]], "pypath.share.common.dict_percent": [[988, "pypath-share-common-dict-percent"]], "pypath.share.common.dict_set_path": [[989, "pypath-share-common-dict-set-path"]], "pypath.share.common.dict_set_percent": [[990, "pypath-share-common-dict-set-percent"]], "pypath.share.common.dict_str": [[991, "pypath-share-common-dict-str"]], "pypath.share.common.dict_subtotals": [[992, "pypath-share-common-dict-subtotals"]], "pypath.share.common.dict_sym_diff": [[993, "pypath-share-common-dict-sym-diff"]], "pypath.share.common.dict_union": [[994, "pypath-share-common-dict-union"]], "pypath.share.common.eq": [[995, "pypath-share-common-eq"]], "pypath.share.common.filtr": [[996, "pypath-share-common-filtr"]], "pypath.share.common.first": [[997, "pypath-share-common-first"]], "pypath.share.common.flat_list": [[998, "pypath-share-common-flat-list"]], "pypath.share.common.float_or_nan": [[999, "pypath-share-common-float-or-nan"]], "pypath.share.common.gen_session_id": [[1000, "pypath-share-common-gen-session-id"]], "pypath.share.common.get": [[1001, "pypath-share-common-get"]], "pypath.share.common.get_args": [[1002, "pypath-share-common-get-args"]], "pypath.share.common.is_float": [[1003, "pypath-share-common-is-float"]], "pypath.share.common.is_int": [[1004, "pypath-share-common-is-int"]], "pypath.share.common.is_str": [[1005, "pypath-share-common-is-str"]], "pypath.share.common.jaccard_index": [[1006, "pypath-share-common-jaccard-index"]], "pypath.share.common.join_dicts": [[1007, "pypath-share-common-join-dicts"]], "pypath.share.common.latex_table": [[1008, "pypath-share-common-latex-table"]], "pypath.share.common.match": [[1009, "pypath-share-common-match"]], "pypath.share.common.maybe_in_dict": [[1010, "pypath-share-common-maybe-in-dict"]], "pypath.share.common.md5": [[1011, "pypath-share-common-md5"]], "pypath.share.common.merge_dicts": [[1012, "pypath-share-common-merge-dicts"]], "pypath.share.common.n_shared_elements": [[1013, "pypath-share-common-n-shared-elements"]], "pypath.share.common.n_shared_foreach": [[1014, "pypath-share-common-n-shared-foreach"]], "pypath.share.common.n_shared_total": [[1015, "pypath-share-common-n-shared-total"]], "pypath.share.common.n_shared_unique_foreach": [[1016, "pypath-share-common-n-shared-unique-foreach"]], "pypath.share.common.n_unique_elements": [[1017, "pypath-share-common-n-unique-elements"]], "pypath.share.common.n_unique_foreach": [[1018, "pypath-share-common-n-unique-foreach"]], "pypath.share.common.n_unique_total": [[1019, "pypath-share-common-n-unique-total"]], "pypath.share.common.negate": [[1020, "pypath-share-common-negate"]], "pypath.share.common.none_or_len": [[1021, "pypath-share-common-none-or-len"]], "pypath.share.common.paginate": [[1022, "pypath-share-common-paginate"]], "pypath.share.common.prefix": [[1023, "pypath-share-common-prefix"]], "pypath.share.common.print_table": [[1024, "pypath-share-common-print-table"]], "pypath.share.common.re_safe_groups": [[1025, "pypath-share-common-re-safe-groups"]], "pypath.share.common.remove_prefix": [[1026, "pypath-share-common-remove-prefix"]], "pypath.share.common.rotate": [[1027, "pypath-share-common-rotate"]], "pypath.share.common.sets_to_sorted_lists": [[1028, "pypath-share-common-sets-to-sorted-lists"]], "pypath.share.common.sfirst": [[1029, "pypath-share-common-sfirst"]], "pypath.share.common.shared_elements": [[1030, "pypath-share-common-shared-elements"]], "pypath.share.common.shared_foreach": [[1031, "pypath-share-common-shared-foreach"]], "pypath.share.common.shared_total": [[1032, "pypath-share-common-shared-total"]], "pypath.share.common.shared_unique": [[1033, "pypath-share-common-shared-unique"]], "pypath.share.common.shared_unique_foreach": [[1034, "pypath-share-common-shared-unique-foreach"]], "pypath.share.common.shared_unique_total": [[1035, "pypath-share-common-shared-unique-total"]], "pypath.share.common.silent": [[1036, "pypath-share-common-silent"]], "pypath.share.common.simpson_index": [[1037, "pypath-share-common-simpson-index"]], "pypath.share.common.simpson_index_counts": [[1038, "pypath-share-common-simpson-index-counts"]], "pypath.share.common.something": [[1039, "pypath-share-common-something"]], "pypath.share.common.sorensen_index": [[1040, "pypath-share-common-sorensen-index"]], "pypath.share.common.suffix": [[1041, "pypath-share-common-suffix"]], "pypath.share.common.sum_dicts": [[1042, "pypath-share-common-sum-dicts"]], "pypath.share.common.swap_dict": [[1043, "pypath-share-common-swap-dict"]], "pypath.share.common.swap_dict_simple": [[1044, "pypath-share-common-swap-dict-simple"]], "pypath.share.common.swap_suffix": [[1045, "pypath-share-common-swap-suffix"]], "pypath.share.common.table_add_row_numbers": [[1046, "pypath-share-common-table-add-row-numbers"]], "pypath.share.common.table_format": [[1047, "pypath-share-common-table-format"]], "pypath.share.common.table_textwrap": [[1048, "pypath-share-common-table-textwrap"]], "pypath.share.common.to_list": [[1049, "pypath-share-common-to-list"]], "pypath.share.common.to_set": [[1050, "pypath-share-common-to-set"]], "pypath.share.common.try_bool": [[1051, "pypath-share-common-try-bool"]], "pypath.share.common.try_float": [[1052, "pypath-share-common-try-float"]], "pypath.share.common.tsv_table": [[1053, "pypath-share-common-tsv-table"]], "pypath.share.common.uniq_list": [[1054, "pypath-share-common-uniq-list"]], "pypath.share.common.uniq_list1": [[1055, "pypath-share-common-uniq-list1"]], "pypath.share.common.uniq_list2": [[1056, "pypath-share-common-uniq-list2"]], "pypath.share.common.uniq_ord_list": [[1057, "pypath-share-common-uniq-ord-list"]], "pypath.share.common.unique_elements": [[1058, "pypath-share-common-unique-elements"]], "pypath.share.common.unique_foreach": [[1059, "pypath-share-common-unique-foreach"]], "pypath.share.common.unique_list": [[1060, "pypath-share-common-unique-list"]], "pypath.share.common.unique_total": [[1061, "pypath-share-common-unique-total"]], "pypath.share.common.upper0": [[1062, "pypath-share-common-upper0"]], "pypath.share.common.values": [[1063, "pypath-share-common-values"]], "pypath.share.common.wcl": [[1064, "pypath-share-common-wcl"]], "pypath.share.common.wrap_truncate": [[1065, "pypath-share-common-wrap-truncate"]], "pypath.share.constants": [[1066, "module-pypath.share.constants"]], "pypath.share.curl": [[1067, "module-pypath.share.curl"]], "pypath.share.curl.Curl": [[1068, "pypath-share-curl-curl"]], "pypath.share.curl.FileOpener": [[1069, "pypath-share-curl-fileopener"]], "pypath.share.curl.RemoteFile": [[1070, "pypath-share-curl-remotefile"]], "pypath.share.curl.cache_delete_off": [[1071, "pypath-share-curl-cache-delete-off"]], "pypath.share.curl.cache_delete_on": [[1072, "pypath-share-curl-cache-delete-on"]], "pypath.share.curl.cache_off": [[1073, "pypath-share-curl-cache-off"]], "pypath.share.curl.cache_on": [[1074, "pypath-share-curl-cache-on"]], "pypath.share.curl.cache_print_off": [[1075, "pypath-share-curl-cache-print-off"]], "pypath.share.curl.cache_print_on": [[1076, "pypath-share-curl-cache-print-on"]], "pypath.share.curl.debug_off": [[1077, "pypath-share-curl-debug-off"]], "pypath.share.curl.debug_on": [[1078, "pypath-share-curl-debug-on"]], "pypath.share.curl.dryrun_off": [[1079, "pypath-share-curl-dryrun-off"]], "pypath.share.curl.dryrun_on": [[1080, "pypath-share-curl-dryrun-on"]], "pypath.share.curl.is_url": [[1081, "pypath-share-curl-is-url"]], "pypath.share.curl.preserve_off": [[1082, "pypath-share-curl-preserve-off"]], "pypath.share.curl.preserve_on": [[1083, "pypath-share-curl-preserve-on"]], "pypath.share.log": [[1084, "module-pypath.share.log"]], "pypath.share.log.Logger": [[1085, "pypath-share-log-logger"]], "pypath.share.log.new_logger": [[1086, "pypath-share-log-new-logger"]], "pypath.share.progress": [[1087, "module-pypath.share.progress"]], "pypath.share.progress.Progress": [[1088, "pypath-share-progress-progress"]], "pypath.share.session": [[1089, "module-pypath.share.session"]], "pypath.share.session.Logger": [[1090, "pypath-share-session-logger"]], "pypath.share.session.Session": [[1091, "pypath-share-session-session"]], "pypath.share.session.get_log": [[1092, "pypath-share-session-get-log"]], "pypath.share.session.get_session": [[1093, "pypath-share-session-get-session"]], "pypath.share.session.new_session": [[1094, "pypath-share-session-new-session"]], "pypath.share.settings": [[1095, "module-pypath.share.settings"]], "pypath.share.settings.Settings": [[1096, "pypath-share-settings-settings"]], "pypath.share.settings.context": [[1097, "pypath-share-settings-context"]], "pypath.share.settings.get": [[1098, "pypath-share-settings-get"]], "pypath.share.settings.setup": [[1099, "pypath-share-settings-setup"]], "pypath.utils": [[1100, "module-pypath.utils"]], "pypath.utils.go": [[1101, "module-pypath.utils.go"]], "pypath.utils.go.GOAnnotation": [[1102, "pypath-utils-go-goannotation"]], "pypath.utils.go.GOCustomAnnotation": [[1103, "pypath-utils-go-gocustomannotation"]], "pypath.utils.go.GeneOntology": [[1104, "pypath-utils-go-geneontology"]], "pypath.utils.go.annotate": [[1105, "pypath-utils-go-annotate"]], "pypath.utils.go.get_db": [[1106, "pypath-utils-go-get-db"]], "pypath.utils.go.init_db": [[1107, "pypath-utils-go-init-db"]], "pypath.utils.go.load_go": [[1108, "pypath-utils-go-load-go"]], "pypath.utils.homology": [[1109, "module-pypath.utils.homology"]], "pypath.utils.homology.HomologyManager": [[1110, "pypath-utils-homology-homologymanager"]], "pypath.utils.homology.Ortholog": [[1111, "pypath-utils-homology-ortholog"]], "pypath.utils.homology.ProteinHomology": [[1112, "pypath-utils-homology-proteinhomology"]], "pypath.utils.homology.Proteomes": [[1113, "pypath-utils-homology-proteomes"]], "pypath.utils.homology.PtmHomology": [[1114, "pypath-utils-homology-ptmhomology"]], "pypath.utils.homology.SequenceContainer": [[1115, "pypath-utils-homology-sequencecontainer"]], "pypath.utils.homology.get_df": [[1116, "pypath-utils-homology-get-df"]], "pypath.utils.homology.get_dict": [[1117, "pypath-utils-homology-get-dict"]], "pypath.utils.homology.get_manager": [[1118, "pypath-utils-homology-get-manager"]], "pypath.utils.homology.init": [[1119, "pypath-utils-homology-init"]], "pypath.utils.homology.translate": [[1120, "pypath-utils-homology-translate"]], "pypath.utils.homology.translate_df": [[1121, "pypath-utils-homology-translate-df"]], "pypath.utils.mapping": [[1122, "module-pypath.utils.mapping"]], "pypath.utils.mapping.MapReader": [[1123, "pypath-utils-mapping-mapreader"]], "pypath.utils.mapping.Mapper": [[1124, "pypath-utils-mapping-mapper"]], "pypath.utils.mapping.MappingTable": [[1125, "pypath-utils-mapping-mappingtable"]], "pypath.utils.mapping.MappingTableKey": [[1126, "pypath-utils-mapping-mappingtablekey"]], "pypath.utils.mapping.UNIPROT_ID_TYPES": [[1127, "pypath-utils-mapping-uniprot-id-types"]], "pypath.utils.mapping.get_mapper": [[1128, "pypath-utils-mapping-get-mapper"]], "pypath.utils.mapping.guess_type": [[1129, "pypath-utils-mapping-guess-type"]], "pypath.utils.mapping.id_from_label": [[1130, "pypath-utils-mapping-id-from-label"]], "pypath.utils.mapping.id_from_label0": [[1131, "pypath-utils-mapping-id-from-label0"]], "pypath.utils.mapping.init": [[1132, "pypath-utils-mapping-init"]], "pypath.utils.mapping.label": [[1133, "pypath-utils-mapping-label"]], "pypath.utils.mapping.map_name": [[1134, "pypath-utils-mapping-map-name"]], "pypath.utils.mapping.map_name0": [[1135, "pypath-utils-mapping-map-name0"]], "pypath.utils.mapping.map_names": [[1136, "pypath-utils-mapping-map-names"]], "pypath.utils.pdb": [[1137, "module-pypath.utils.pdb"]], "pypath.utils.pdb.Residue": [[1138, "pypath-utils-pdb-residue"]], "pypath.utils.pdb.ResidueMapper": [[1139, "pypath-utils-pdb-residuemapper"]], "pypath.utils.pdb.Segment": [[1140, "pypath-utils-pdb-segment"]], "pypath.utils.pdb.residue_pdb": [[1141, "pypath-utils-pdb-residue-pdb"]], "pypath.utils.proteomicsdb": [[1142, "module-pypath.utils.proteomicsdb"]], "pypath.utils.proteomicsdb.ProteomicsDB": [[1143, "pypath-utils-proteomicsdb-proteomicsdb"]], "pypath.utils.pyreact": [[1144, "module-pypath.utils.pyreact"]], "pypath.utils.pyreact.AttributeHandler": [[1145, "pypath-utils-pyreact-attributehandler"]], "pypath.utils.pyreact.BioPaxReader": [[1146, "pypath-utils-pyreact-biopaxreader"]], "pypath.utils.pyreact.Complex": [[1147, "pypath-utils-pyreact-complex"]], "pypath.utils.pyreact.ComplexVariations": [[1148, "pypath-utils-pyreact-complexvariations"]], "pypath.utils.pyreact.Control": [[1149, "pypath-utils-pyreact-control"]], "pypath.utils.pyreact.Entity": [[1150, "pypath-utils-pyreact-entity"]], "pypath.utils.pyreact.EntitySet": [[1151, "pypath-utils-pyreact-entityset"]], "pypath.utils.pyreact.Intersecting": [[1152, "pypath-utils-pyreact-intersecting"]], "pypath.utils.pyreact.Protein": [[1153, "pypath-utils-pyreact-protein"]], "pypath.utils.pyreact.ProteinFamily": [[1154, "pypath-utils-pyreact-proteinfamily"]], "pypath.utils.pyreact.PyReact": [[1155, "pypath-utils-pyreact-pyreact"]], "pypath.utils.pyreact.Reaction": [[1156, "pypath-utils-pyreact-reaction"]], "pypath.utils.pyreact.ReactionSide": [[1157, "pypath-utils-pyreact-reactionside"]], "pypath.utils.pyreact.Reference": [[1158, "pypath-utils-pyreact-reference"]], "pypath.utils.reflists": [[1159, "module-pypath.utils.reflists"]], "pypath.utils.reflists.ReferenceListManager": [[1160, "pypath-utils-reflists-referencelistmanager"]], "pypath.utils.reflists.check": [[1161, "pypath-utils-reflists-check"]], "pypath.utils.reflists.get_manager": [[1162, "pypath-utils-reflists-get-manager"]], "pypath.utils.reflists.get_reflist": [[1163, "pypath-utils-reflists-get-reflist"]], "pypath.utils.reflists.init": [[1164, "pypath-utils-reflists-init"]], "pypath.utils.reflists.is_not": [[1165, "pypath-utils-reflists-is-not"]], "pypath.utils.reflists.select": [[1166, "pypath-utils-reflists-select"]], "pypath.utils.residues": [[1167, "module-pypath.utils.residues"]], "pypath.utils.residues.ResidueMapper": [[1168, "pypath-utils-residues-residuemapper"]], "pypath.utils.seq": [[1169, "module-pypath.utils.seq"]], "pypath.utils.seq.Pfam": [[1170, "pypath-utils-seq-pfam"]], "pypath.utils.seq.Resource": [[1171, "pypath-utils-seq-resource"]], "pypath.utils.seq.Seq": [[1172, "pypath-utils-seq-seq"]], "pypath.utils.seq.get_isoforms": [[1173, "pypath-utils-seq-get-isoforms"]], "pypath.utils.seq.read_fasta": [[1174, "pypath-utils-seq-read-fasta"]], "pypath.utils.seq.swissprot_seq": [[1175, "pypath-utils-seq-swissprot-seq"]], "pypath.utils.taxonomy": [[1176, "module-pypath.utils.taxonomy"]], "pypath.utils.taxonomy.ensure_common_name": [[1177, "pypath-utils-taxonomy-ensure-common-name"]], "pypath.utils.taxonomy.ensure_ensembl_name": [[1178, "pypath-utils-taxonomy-ensure-ensembl-name"]], "pypath.utils.taxonomy.ensure_latin_name": [[1179, "pypath-utils-taxonomy-ensure-latin-name"]], "pypath.utils.taxonomy.ensure_ncbi_tax_id": [[1180, "pypath-utils-taxonomy-ensure-ncbi-tax-id"]], "pypath.utils.taxonomy.get_db": [[1181, "pypath-utils-taxonomy-get-db"]], "pypath.utils.taxonomy.init_db": [[1182, "pypath-utils-taxonomy-init-db"]], "pypath.utils.taxonomy.short_latin_names": [[1183, "pypath-utils-taxonomy-short-latin-names"]], "pypath.utils.taxonomy.shorten_latin_name": [[1184, "pypath-utils-taxonomy-shorten-latin-name"]], "pypath.utils.taxonomy.taxid_from_common_name": [[1185, "pypath-utils-taxonomy-taxid-from-common-name"]], "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name": [[1186, "pypath-utils-taxonomy-taxid-from-dbptm-taxon-name"]], "pypath.utils.taxonomy.taxid_from_ensembl_name": [[1187, "pypath-utils-taxonomy-taxid-from-ensembl-name"]], "pypath.utils.taxonomy.taxid_from_latin_name": [[1188, "pypath-utils-taxonomy-taxid-from-latin-name"]], "pypath.utils.taxonomy.taxid_from_nonstandard": [[1189, "pypath-utils-taxonomy-taxid-from-nonstandard"]], "pypath.utils.taxonomy.uniprot_taxid": [[1190, "pypath-utils-taxonomy-uniprot-taxid"]], "pypath.utils.unichem": [[1191, "module-pypath.utils.unichem"]], "pypath.utils.unichem.Unichem": [[1192, "pypath-utils-unichem-unichem"]], "pypath.utils.uniprot": [[1193, "module-pypath.utils.uniprot"]], "pypath.utils.uniprot.UniprotProtein": [[1194, "pypath-utils-uniprot-uniprotprotein"]], "pypath.utils.uniprot.ac": [[1195, "pypath-utils-uniprot-ac"]], "pypath.utils.uniprot.activity_regulation": [[1196, "pypath-utils-uniprot-activity-regulation"]], "pypath.utils.uniprot.activity_regulation_with_xrefs": [[1197, "pypath-utils-uniprot-activity-regulation-with-xrefs"]], "pypath.utils.uniprot.alternative_products": [[1198, "pypath-utils-uniprot-alternative-products"]], "pypath.utils.uniprot.alternative_products_with_xrefs": [[1199, "pypath-utils-uniprot-alternative-products-with-xrefs"]], "pypath.utils.uniprot.browse": [[1200, "pypath-utils-uniprot-browse"]], "pypath.utils.uniprot.catalytic_activity": [[1201, "pypath-utils-uniprot-catalytic-activity"]], "pypath.utils.uniprot.catalytic_activity_with_xrefs": [[1202, "pypath-utils-uniprot-catalytic-activity-with-xrefs"]], "pypath.utils.uniprot.collect": [[1203, "pypath-utils-uniprot-collect"]], "pypath.utils.uniprot.databases": [[1204, "pypath-utils-uniprot-databases"]], "pypath.utils.uniprot.disease": [[1205, "pypath-utils-uniprot-disease"]], "pypath.utils.uniprot.disease_with_xrefs": [[1206, "pypath-utils-uniprot-disease-with-xrefs"]], "pypath.utils.uniprot.ec": [[1207, "pypath-utils-uniprot-ec"]], "pypath.utils.uniprot.features_table": [[1208, "pypath-utils-uniprot-features-table"]], "pypath.utils.uniprot.full_name": [[1209, "pypath-utils-uniprot-full-name"]], "pypath.utils.uniprot.function": [[1210, "pypath-utils-uniprot-function"]], "pypath.utils.uniprot.function_genecards": [[1211, "pypath-utils-uniprot-function-genecards"]], "pypath.utils.uniprot.function_or_genecards": [[1212, "pypath-utils-uniprot-function-or-genecards"]], "pypath.utils.uniprot.function_with_genecards": [[1213, "pypath-utils-uniprot-function-with-genecards"]], "pypath.utils.uniprot.function_with_xrefs": [[1214, "pypath-utils-uniprot-function-with-xrefs"]], "pypath.utils.uniprot.genesymbol": [[1215, "pypath-utils-uniprot-genesymbol"]], "pypath.utils.uniprot.has_tag": [[1216, "pypath-utils-uniprot-has-tag"]], "pypath.utils.uniprot.id": [[1217, "pypath-utils-uniprot-id"]], "pypath.utils.uniprot.info": [[1218, "pypath-utils-uniprot-info"]], "pypath.utils.uniprot.info_section": [[1219, "pypath-utils-uniprot-info-section"]], "pypath.utils.uniprot.interaction": [[1220, "pypath-utils-uniprot-interaction"]], "pypath.utils.uniprot.interaction_with_xrefs": [[1221, "pypath-utils-uniprot-interaction-with-xrefs"]], "pypath.utils.uniprot.is_reviewed": [[1222, "pypath-utils-uniprot-is-reviewed"]], "pypath.utils.uniprot.itertag": [[1223, "pypath-utils-uniprot-itertag"]], "pypath.utils.uniprot.keywords": [[1224, "pypath-utils-uniprot-keywords"]], "pypath.utils.uniprot.keywords_with_xrefs": [[1225, "pypath-utils-uniprot-keywords-with-xrefs"]], "pypath.utils.uniprot.length": [[1226, "pypath-utils-uniprot-length"]], "pypath.utils.uniprot.lengths": [[1227, "pypath-utils-uniprot-lengths"]], "pypath.utils.uniprot.load": [[1228, "pypath-utils-uniprot-load"]], "pypath.utils.uniprot.organism": [[1229, "pypath-utils-uniprot-organism"]], "pypath.utils.uniprot.print_features": [[1230, "pypath-utils-uniprot-print-features"]], "pypath.utils.uniprot.ptm": [[1231, "pypath-utils-uniprot-ptm"]], "pypath.utils.uniprot.ptm_with_xrefs": [[1232, "pypath-utils-uniprot-ptm-with-xrefs"]], "pypath.utils.uniprot.query": [[1233, "pypath-utils-uniprot-query"]], "pypath.utils.uniprot.reload": [[1234, "pypath-utils-uniprot-reload"]], "pypath.utils.uniprot.remove_xrefs": [[1235, "pypath-utils-uniprot-remove-xrefs"]], "pypath.utils.uniprot.sequence": [[1236, "pypath-utils-uniprot-sequence"]], "pypath.utils.uniprot.sequence_caution": [[1237, "pypath-utils-uniprot-sequence-caution"]], "pypath.utils.uniprot.sequence_caution_with_xrefs": [[1238, "pypath-utils-uniprot-sequence-caution-with-xrefs"]], "pypath.utils.uniprot.similarity": [[1239, "pypath-utils-uniprot-similarity"]], "pypath.utils.uniprot.similarity_with_xrefs": [[1240, "pypath-utils-uniprot-similarity-with-xrefs"]], "pypath.utils.uniprot.subcellular_location": [[1241, "pypath-utils-uniprot-subcellular-location"]], "pypath.utils.uniprot.subcellular_location_with_xrefs": [[1242, "pypath-utils-uniprot-subcellular-location-with-xrefs"]], "pypath.utils.uniprot.subunit": [[1243, "pypath-utils-uniprot-subunit"]], "pypath.utils.uniprot.subunit_with_xrefs": [[1244, "pypath-utils-uniprot-subunit-with-xrefs"]], "pypath.utils.uniprot.tissue_specificity": [[1245, "pypath-utils-uniprot-tissue-specificity"]], "pypath.utils.uniprot.tissue_specificity_with_xrefs": [[1246, "pypath-utils-uniprot-tissue-specificity-with-xrefs"]], "pypath.utils.uniprot.update_databases": [[1247, "pypath-utils-uniprot-update-databases"]], "pypath.utils.uniprot.update_info": [[1248, "pypath-utils-uniprot-update-info"]], "pypath.utils.uniprot.web_resource": [[1249, "pypath-utils-uniprot-web-resource"]], "pypath.utils.uniprot.web_resource_with_xrefs": [[1250, "pypath-utils-uniprot-web-resource-with-xrefs"]], "pypath.utils.uniprot.weight": [[1251, "pypath-utils-uniprot-weight"]], "pypath.utils.uniprot.weights": [[1252, "pypath-utils-uniprot-weights"]], "pypath.visual": [[1253, "module-pypath.visual"]], "pypath.visual.drawing": [[1254, "module-pypath.visual.drawing"]], "pypath.visual.drawing.InterSet": [[1255, "pypath-visual-drawing-interset"]], "pypath.visual.drawing.Plot": [[1256, "pypath-visual-drawing-plot"]], "pypath.visual.igraph_drawing": [[1257, "module-pypath.visual.igraph_drawing"]], "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer": [[1258, "pypath-visual-igraph-drawing-abstractcairographdrawer"]], "pypath.visual.igraph_drawing.ArrowEdgeDrawer": [[1259, "pypath-visual-igraph-drawing-arrowedgedrawer"]], "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport": [[1260, "pypath-visual-igraph-drawing-defaultgraphdrawerffsupport"]], "pypath.visual.igraph_drawing.DefaultVertexDrawer": [[1261, "pypath-visual-igraph-drawing-defaultvertexdrawer"]], "pypath.visual.igraph_drawing.TextDrawer": [[1262, "pypath-visual-igraph-drawing-textdrawer"]], "pypath.visual.igraph_drawing.edge": [[1263, "module-pypath.visual.igraph_drawing.edge"]], "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer": [[1264, "pypath-visual-igraph-drawing-edge-abstractedgedrawer"]], "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer": [[1265, "pypath-visual-igraph-drawing-edge-alphavaryingedgedrawer"]], "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer": [[1266, "pypath-visual-igraph-drawing-edge-arrowedgedrawer"]], "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer": [[1267, "pypath-visual-igraph-drawing-edge-darktolightedgedrawer"]], "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer": [[1268, "pypath-visual-igraph-drawing-edge-lighttodarkedgedrawer"]], "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer": [[1269, "pypath-visual-igraph-drawing-edge-taperededgedrawer"]], "pypath.visual.igraph_drawing.vertex": [[1270, "module-pypath.visual.igraph_drawing.vertex"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer": [[1271, "pypath-visual-igraph-drawing-vertex-abstractcairodrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer": [[1272, "pypath-visual-igraph-drawing-vertex-abstractcairovertexdrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractDrawer": [[1273, "pypath-visual-igraph-drawing-vertex-abstractdrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer": [[1274, "pypath-visual-igraph-drawing-vertex-abstractvertexdrawer"]], "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer": [[1275, "pypath-visual-igraph-drawing-vertex-defaultvertexdrawer"]], "pypath.visual.plot": [[1276, "module-pypath.visual.plot"]], "pypath.visual.plot.Barplot": [[1277, "pypath-visual-plot-barplot"]], "pypath.visual.plot.BarplotsGrid": [[1278, "pypath-visual-plot-barplotsgrid"]], "pypath.visual.plot.CurationPlot": [[1279, "pypath-visual-plot-curationplot"]], "pypath.visual.plot.Dendrogram": [[1280, "pypath-visual-plot-dendrogram"]], "pypath.visual.plot.Histogram": [[1281, "pypath-visual-plot-histogram"]], "pypath.visual.plot.HistoryTree": [[1282, "pypath-visual-plot-historytree"]], "pypath.visual.plot.HtpCharacteristics": [[1283, "pypath-visual-plot-htpcharacteristics"]], "pypath.visual.plot.MultiBarplot": [[1284, "pypath-visual-plot-multibarplot"]], "pypath.visual.plot.Plot": [[1285, "pypath-visual-plot-plot"]], "pypath.visual.plot.RefsComposite": [[1286, "pypath-visual-plot-refscomposite"]], "pypath.visual.plot.ScatterPlus": [[1287, "pypath-visual-plot-scatterplus"]], "pypath.visual.plot.SimilarityGraph": [[1288, "pypath-visual-plot-similaritygraph"]], "pypath.visual.plot.StackedBarplot": [[1289, "pypath-visual-plot-stackedbarplot"]], "pypath.visual.plot.boxplot": [[1290, "pypath-visual-plot-boxplot"]], "pypath.visual.plot.get_moves": [[1291, "pypath-visual-plot-get-moves"]], "pypath.visual.plot.is_opentype_cff_font": [[1292, "pypath-visual-plot-is-opentype-cff-font"]], "pypath.visual.plot.move_labels": [[1293, "pypath-visual-plot-move-labels"]], "pypath.visual.plot.overlap": [[1294, "pypath-visual-plot-overlap"]], "pypath.visual.plot.rotate_labels": [[1295, "pypath-visual-plot-rotate-labels"]], "Contents": [[1296, "contents"]], "Welcome to pypath!": [[1297, "welcome-to-pypath"]], "OmniPath": [[1297, "omnipath"]], "Do you need pypath?": [[1297, "do-you-need-pypath"]], "Installation": [[1297, "installation"]], "Docs": [[1297, "docs"]], "Get help": [[1297, "get-help"]], "Features": [[1297, "features"]], "Integrated databases": [[1297, "integrated-databases"]], "Database management": [[1297, "database-management"]], "Further modules in pypath": [[1297, "further-modules-in-pypath"]], "ID conversion": [[1297, "id-conversion"]], "Homology translation": [[1297, "homology-translation"], [1298, "Homology-translation"]], "FAQ": [[1297, "faq"]], "Contact": [[1297, "contact"]], "Impressum": [[1297, "impressum"]], "History and releases": [[1297, "history-and-releases"]], "The pypath book": [[1298, "The-pypath-book"]], "Introduction": [[1298, "Introduction"]], "Build, load and save databases": [[1298, "Build,-load-and-save-databases"]], "The OmniPath app": [[1298, "The-OmniPath-app"]], "Built-in database definitions": [[1298, "Built-in-database-definitions"]], "Networks": [[1298, "Networks"]], "Strictly literature curated network": [[1298, "Strictly-literature-curated-network"]], "The OmniPath network with extra activity flow, enzyme-substrate and ligand-receptor interactions": [[1298, "The-OmniPath-network-with-extra-activity-flow,-enzyme-substrate-and-ligand-receptor-interactions"]], "Transcriptional regulation network from DoRothEA and other resources": [[1298, "Transcriptional-regulation-network-from-DoRothEA-and-other-resources"]], "Literature curated miRNA post-transcriptional regulation network": [[1298, "Literature-curated-miRNA-post-transcriptional-regulation-network"]], "Transcriptional regulation of miRNA": [[1298, "Transcriptional-regulation-of-miRNA"]], "lncRNA-mRNA interactions": [[1298, "lncRNA-mRNA-interactions"]], "Small molecule-protein interactions": [[1298, "Small-molecule-protein-interactions"]], "Enzyme-substrate relationships": [[1298, "Enzyme-substrate-relationships"]], "Protein complexes": [[1298, "Protein-complexes"], [1298, "id2"]], "Annotations": [[1298, "Annotations"], [1298, "id1"], [1301, "annotations"]], "Inter-cellular communication roles": [[1298, "Inter-cellular-communication-roles"]], "Data directly from the original resources": [[1298, "Data-directly-from-the-original-resources"]], "Download management": [[1298, "Download-management"]], "Cache management and customization": [[1298, "Cache-management-and-customization"]], "Download failures": [[1298, "Download-failures"]], "Corrupted cache content": [[1298, "Corrupted-cache-content"]], "Network communication issues: look into the curl debug log": [[1298, "Network-communication-issues:-look-into-the-curl-debug-log"]], "Timeouts": [[1298, "Timeouts"]], "Access and inspect the Curl object": [[1298, "Access-and-inspect-the-Curl-object"]], "Is it failing only for you?": [[1298, "Is-it-failing-only-for-you?"]], "Read the log": [[1298, "Read-the-log"]], "TLS (SSL, HTTPS) errors": [[1298, "TLS-(SSL,-HTTPS)-errors"]], "Resources": [[1298, "Resources"]], "Licenses": [[1298, "Licenses"]], "Resource information": [[1298, "Resource-information"]], "Resource definitions for a certain database or dataset": [[1298, "Resource-definitions-for-a-certain-database-or-dataset"]], "Building networks": [[1298, "Building-networks"]], "Which network datasets are pre-defined in pypath?": [[1298, "Which-network-datasets-are-pre-defined-in-pypath?"]], "The Network object": [[1298, "The-Network-object"]], "Network in pandas.DataFrame": [[1298, "Network-in-pandas.DataFrame"]], "Translating identifiers": [[1298, "Translating-identifiers"]], "Pre-defined ID translation tables": [[1298, "Pre-defined-ID-translation-tables"]], "Homology translation tables as dictionaries": [[1298, "Homology-translation-tables-as-dictionaries"]], "Homology translation data frames": [[1298, "Homology-translation-data-frames"]], "Taxonomy": [[1298, "Taxonomy"]], "Translating to NCBI Taxonomy, scientific names and common names": [[1298, "Translating-to-NCBI-Taxonomy,-scientific-names-and-common-names"]], "Organism from UniProt ID": [[1298, "Organism-from-UniProt-ID"]], "UniProt": [[1298, "UniProt"]], "The UniProt input module": [[1298, "The-UniProt-input-module"]], "All UniProt IDs for one organism": [[1298, "All-UniProt-IDs-for-one-organism"]], "UniProt ID format validation": [[1298, "UniProt-ID-format-validation"]], "UniProt ID validation": [[1298, "UniProt-ID-validation"]], "Single UniProt protein datasheet": [[1298, "Single-UniProt-protein-datasheet"]], "History of UniProt records": [[1298, "History-of-UniProt-records"]], "UniProt legacy API": [[1298, "UniProt-legacy-API"]], "Processed UniProt annotations": [[1298, "Processed-UniProt-annotations"]], "The UniProt utils module": [[1298, "The-UniProt-utils-module"]], "Datasheets": [[1298, "Datasheets"]], "Tables": [[1298, "Tables"]], "Sanitizing UniProt IDs": [[1298, "Sanitizing-UniProt-IDs"]], "Enzyme-substrate interactions": [[1298, "Enzyme-substrate-interactions"], [1301, "enzyme-substrate-interactions"]], "Enzyme-substrate objects": [[1298, "Enzyme-substrate-objects"]], "Enzyme-substrate data frame": [[1298, "Enzyme-substrate-data-frame"]], "Protein sequences": [[1298, "Protein-sequences"]], "Load a single annotation resource": [[1298, "Load-a-single-annotation-resource"]], "Load the full annotations database by the database manager": [[1298, "Load-the-full-annotations-database-by-the-database-manager"]], "Load only selected annotations": [[1298, "Load-only-selected-annotations"]], "Data frames of annotations": [[1298, "Data-frames-of-annotations"]], "Inter-cellular signaling roles": [[1298, "Inter-cellular-signaling-roles"]], "Build an intercellular communication network": [[1298, "Build-an-intercellular-communication-network"]], "Quantitative overview of intercell annotations": [[1298, "Quantitative-overview-of-intercell-annotations"]], "Intercell database as data frame": [[1298, "Intercell-database-as-data-frame"]], "Browse intercell categories": [[1298, "Browse-intercell-categories"]], "Gene Ontology": [[1298, "Gene-Ontology"]], "Protein complex objects": [[1298, "Protein-complex-objects"]], "Protein complex data frame": [[1298, "Protein-complex-data-frame"]], "Saving datasets as pickles": [[1298, "Saving-datasets-as-pickles"]], "Log messages and sessions": [[1298, "Log-messages-and-sessions"]], "Basic info about the session": [[1298, "Basic-info-about-the-session"]], "Read the log file": [[1298, "Read-the-log-file"]], "Logging to the console": [[1298, "Logging-to-the-console"]], "Disable logging": [[1298, "Disable-logging"]], "Write to the log": [[1298, "Write-to-the-log"]], "Sending a single message": [[1298, "Sending-a-single-message"]], "Connect a module or class to the pypath logger": [[1298, "Connect-a-module-or-class-to-the-pypath-logger"]], "BEL export": [[1298, "BEL-export"]], "CellPhoneDB export": [[1298, "CellPhoneDB-export"]], "The legacy igraph-based network object": [[1298, "The-legacy-igraph-based-network-object"]], "I just want a network quickly and play around with pypath": [[1298, "I-just-want-a-network-quickly-and-play-around-with-pypath"]], "How do I build networks from any data with pypath?": [[1298, "How-do-I-build-networks-from-any-data-with-pypath?"]], "Defining input formats": [[1298, "Defining-input-formats"]], "Creating PyPath object and loading the 2 test files": [[1298, "Creating-PyPath-object-and-loading-the-2-test-files"]], "Structure of the legacy network object": [[1298, "Structure-of-the-legacy-network-object"]], "Directions and signs": [[1298, "Directions-and-signs"]], "Accessing nodes in the network": [[1298, "Accessing-nodes-in-the-network"]], "Querying relationships with our without causality": [[1298, "Querying-relationships-with-our-without-causality"]], "Accessing edges by identifiers": [[1298, "Accessing-edges-by-identifiers"]], "Literature references": [[1298, "Literature-references"]], "Plotting the network with igraph": [[1298, "Plotting-the-network-with-igraph"]], "Reference": [[1299, "reference"]], "How to navigate the reference?": [[1299, "how-to-navigate-the-reference"]], "Release history": [[1300, "release-history"]], "0.1.0": [[1300, "id1"]], "0.2.0": [[1300, "id2"]], "0.3.0": [[1300, "id3"]], "0.4.0": [[1300, "id4"]], "0.5.0": [[1300, "id5"]], "0.5.32": [[1300, "id6"]], "0.6.31": [[1300, "id7"]], "0.7.0": [[1300, "id8"]], "0.7.74": [[1300, "id9"]], "0.7.93": [[1300, "id10"]], "0.7.110": [[1300, "id11"]], "0.8": [[1300, "id12"]], "0.9": [[1300, "id13"]], "0.10.0": [[1300, "id14"]], "0.11.0": [[1300, "id15"]], "0.12.0": [[1300, "id16"]], "0.13.0": [[1300, "id17"]], "0.14.0": [[1300, "id18"]], "Upcoming": [[1300, "upcoming"]], "Webservice": [[1301, "webservice"]], "Query types": [[1301, "query-types"]], "Interaction datasets": [[1301, "interaction-datasets"]], "Mouse and rat": [[1301, "mouse-and-rat"]], "Examples": [[1301, "examples"]], "Molecular interaction network": [[1301, "molecular-interaction-network"]], "Molecular complexes": [[1301, "molecular-complexes"]], "Roles in inter-cellular communication": [[1301, "roles-in-inter-cellular-communication"]], "Exploring possible parameters": [[1301, "exploring-possible-parameters"]]}, "indexentries": {"module": [[0, "module-pypath"], [1, "module-pypath.core"], [2, "module-pypath.core.annot"], [95, "module-pypath.core.attrs"], [97, "module-pypath.core.common"], [99, "module-pypath.core.complex"], [121, "module-pypath.core.entity"], [125, "module-pypath.core.enz_sub"], [131, "module-pypath.core.evidence"], [134, "module-pypath.core.interaction"], [138, "module-pypath.core.intercell"], [142, "module-pypath.core.intercell_annot"], [144, "module-pypath.core.network"], [150, "module-pypath.data"], [153, "module-pypath.inputs"], [154, "module-pypath.inputs.abs"], [156, "module-pypath.inputs.acsn"], [159, "module-pypath.inputs.adhesome"], [162, "module-pypath.inputs.almen2009"], [164, "module-pypath.inputs.baccin2019"], [167, "module-pypath.inputs.biogps"], [173, "module-pypath.inputs.biogrid"], [176, "module-pypath.inputs.biomart"], [182, "module-pypath.inputs.biomodels"], [188, "module-pypath.inputs.ca1"], [190, "module-pypath.inputs.cancercellmap"], [192, "module-pypath.inputs.cancerdrugsdb"], [196, "module-pypath.inputs.cancersea"], [198, "module-pypath.inputs.cell"], [200, "module-pypath.inputs.cellcall"], [205, "module-pypath.inputs.cellcellinteractions"], [207, "module-pypath.inputs.cellchatdb"], [213, "module-pypath.inputs.cellinker"], [225, "module-pypath.inputs.cellphonedb"], [232, "module-pypath.inputs.celltalkdb"], [236, "module-pypath.inputs.celltypist"], [238, "module-pypath.inputs.chembl"], [245, "module-pypath.inputs.clinvar"], [248, "module-pypath.inputs.common"], [255, "module-pypath.inputs.compleat"], [258, "module-pypath.inputs.complexportal"], [260, "module-pypath.inputs.comppi"], [263, "module-pypath.inputs.connectomedb"], [266, "module-pypath.inputs.corum"], [268, "module-pypath.inputs.cosmic"], [270, "module-pypath.inputs.cpad"], [274, "module-pypath.inputs.cpdb"], [277, "module-pypath.inputs.credentials"], [279, "module-pypath.inputs.csa"], [281, "module-pypath.inputs.cspa"], [285, "module-pypath.inputs.ctdbase"], [288, "module-pypath.inputs.cytosig"], [291, "module-pypath.inputs.dbptm"], [295, "module-pypath.inputs.deathdomain"], [298, "module-pypath.inputs.depod"], [301, "module-pypath.inputs.dgidb"], [305, "module-pypath.inputs.dip"], [308, "module-pypath.inputs.disgenet"], [313, "module-pypath.inputs.domino"], [318, "module-pypath.inputs.dorothea"], [329, "module-pypath.inputs.drugbank"], [336, "module-pypath.inputs.drugcentral"], [340, "module-pypath.inputs.ebi"], [342, "module-pypath.inputs.elm"], [347, "module-pypath.inputs.embopress"], [349, "module-pypath.inputs.embrace"], [354, "module-pypath.inputs.encode"], [356, "module-pypath.inputs.ensembl"], [358, "module-pypath.inputs.exocarta"], [361, "module-pypath.inputs.genecards"], [366, "module-pypath.inputs.go"], [388, "module-pypath.inputs.gpcrdb"], [390, "module-pypath.inputs.graphviz"], [392, "module-pypath.inputs.guide2pharma"], [396, "module-pypath.inputs.havugimana"], [399, "module-pypath.inputs.hgnc"], [401, "module-pypath.inputs.hippie"], [403, "module-pypath.inputs.homologene"], [407, "module-pypath.inputs.hpmr"], [413, "module-pypath.inputs.hpo"], [418, "module-pypath.inputs.hprd"], [423, "module-pypath.inputs.htri"], [425, "module-pypath.inputs.humancellmap"], [427, "module-pypath.inputs.humap"], [430, "module-pypath.inputs.huri"], [443, "module-pypath.inputs.i3d"], [445, "module-pypath.inputs.icellnet"], [450, "module-pypath.inputs.ielm"], [453, "module-pypath.inputs.imweb"], [456, "module-pypath.inputs.innatedb"], [458, "module-pypath.inputs.instruct"], [461, "module-pypath.inputs.intact"], [463, "module-pypath.inputs.integrins"], [465, "module-pypath.inputs.interpro"], [470, "module-pypath.inputs.intogen"], [472, "module-pypath.inputs.ipi"], [474, "module-pypath.inputs.iptmnet"], [477, "module-pypath.inputs.italk"], [481, "module-pypath.inputs.kea"], [484, "module-pypath.inputs.kegg"], [494, "module-pypath.inputs.kegg_api"], [511, "module-pypath.inputs.kinasedotcom"], [513, "module-pypath.inputs.kirouac2010"], [515, "module-pypath.inputs.lambert2018"], [518, "module-pypath.inputs.laudanna"], [521, "module-pypath.inputs.li2012"], [526, "module-pypath.inputs.lincs"], [528, "module-pypath.inputs.lmpid"], [532, "module-pypath.inputs.lncdisease"], [534, "module-pypath.inputs.lncrnadb"], [536, "module-pypath.inputs.locate"], [538, "module-pypath.inputs.lrdb"], [542, "module-pypath.inputs.macrophage"], [544, "module-pypath.inputs.main"], [545, "module-pypath.inputs.matrisome"], [547, "module-pypath.inputs.matrixdb"], [553, "module-pypath.inputs.mcam"], [555, "module-pypath.inputs.membranome"], [557, "module-pypath.inputs.mimp"], [561, "module-pypath.inputs.mir2disease"], [563, "module-pypath.inputs.mirbase"], [571, "module-pypath.inputs.mirdeathdb"], [573, "module-pypath.inputs.mirecords"], [575, "module-pypath.inputs.mirtarbase"], [577, "module-pypath.inputs.mitab"], [580, "module-pypath.inputs.mppi"], [582, "module-pypath.inputs.ncrdeathdb"], [584, "module-pypath.inputs.negatome"], [586, "module-pypath.inputs.netbiol"], [589, "module-pypath.inputs.netpath"], [593, "module-pypath.inputs.oma"], [595, "module-pypath.inputs.ontology"], [598, "module-pypath.inputs.opm"], [600, "module-pypath.inputs.oreganno"], [603, "module-pypath.inputs.panglaodb"], [606, "module-pypath.inputs.pathophenodb"], [609, "module-pypath.inputs.pathwaycommons"], [626, "module-pypath.inputs.pazar"], [628, "module-pypath.inputs.pdb"], [632, "module-pypath.inputs.pdzbase"], [634, "module-pypath.inputs.pepcyber"], [637, "module-pypath.inputs.pfam"], [642, "module-pypath.inputs.pharos"], [651, "module-pypath.inputs.phobius"], [653, "module-pypath.inputs.phosphatome"], [655, "module-pypath.inputs.phosphoelm"], [659, "module-pypath.inputs.phosphonetworks"], [662, "module-pypath.inputs.phosphopoint"], [665, "module-pypath.inputs.phosphosite"], [678, "module-pypath.inputs.pisa"], [682, "module-pypath.inputs.pro"], [685, "module-pypath.inputs.progeny"], [688, "module-pypath.inputs.proteinatlas"], [693, "module-pypath.inputs.proteins"], [695, "module-pypath.inputs.protmapper"], [699, "module-pypath.inputs.pubchem"], [701, "module-pypath.inputs.pubmed"], [708, "module-pypath.inputs.ramilowski2015"], [711, "module-pypath.inputs.rdata"], [712, "module-pypath.inputs.reaction"], [732, "module-pypath.inputs.scconnect"], [736, "module-pypath.inputs.science"], [738, "module-pypath.inputs.signalink"], [743, "module-pypath.inputs.signor"], [750, "module-pypath.inputs.spike"], [753, "module-pypath.inputs.stitch"], [756, "module-pypath.inputs.string"], [761, "module-pypath.inputs.surfaceome"], [763, "module-pypath.inputs.switches_elm"], [765, "module-pypath.inputs.talklr"], [769, "module-pypath.inputs.tcdb"], [773, "module-pypath.inputs.tfcensus"], [775, "module-pypath.inputs.threedcomplex"], [781, "module-pypath.inputs.threedid"], [786, "module-pypath.inputs.topdb"], [788, "module-pypath.inputs.transmir"], [790, "module-pypath.inputs.trip"], [797, "module-pypath.inputs.trrust"], [804, "module-pypath.inputs.unichem"], [809, "module-pypath.inputs.uniprot"], [840, "module-pypath.inputs.wang"], [845, "module-pypath.inputs.wojtowicz2020"], [848, "module-pypath.inputs.zhong2015"], [850, "module-pypath.internals"], [851, "module-pypath.internals.annot_formats"], [856, "module-pypath.internals.input_formats"], [868, "module-pypath.internals.intera"], [878, "module-pypath.internals.license"], [884, "module-pypath.internals.maps"], [885, "module-pypath.internals.refs"], [888, "module-pypath.internals.resource"], [895, "module-pypath.legacy"], [896, "module-pypath.legacy.db_categories"], [899, "module-pypath.legacy.main"], [907, "module-pypath.omnipath"], [908, "module-pypath.omnipath.app"], [910, "module-pypath.omnipath.databases"], [913, "module-pypath.omnipath.databases.define"], [919, "module-pypath.omnipath.export"], [922, "module-pypath.omnipath.param"], [925, "module-pypath.omnipath.server"], [926, "module-pypath.omnipath.server.build"], [928, "module-pypath.omnipath.server.generate_about_page"], [933, "module-pypath.omnipath.server.legacy"], [935, "module-pypath.omnipath.server.run"], [944, "module-pypath.resources"], [945, "module-pypath.resources.controller"], [947, "module-pypath.resources.data"], [948, "module-pypath.resources.data_formats"], [959, "module-pypath.resources.descriptions"], [965, "module-pypath.resources.licenses"], [967, "module-pypath.resources.network"], [969, "module-pypath.resources.urls"], [970, "module-pypath.share"], [971, "module-pypath.share.cache"], [974, "module-pypath.share.common"], [1066, "module-pypath.share.constants"], [1067, "module-pypath.share.curl"], [1084, "module-pypath.share.log"], [1087, "module-pypath.share.progress"], [1089, "module-pypath.share.session"], [1095, "module-pypath.share.settings"], [1100, "module-pypath.utils"], [1101, "module-pypath.utils.go"], [1109, "module-pypath.utils.homology"], [1122, "module-pypath.utils.mapping"], [1137, "module-pypath.utils.pdb"], [1142, "module-pypath.utils.proteomicsdb"], [1144, "module-pypath.utils.pyreact"], [1159, "module-pypath.utils.reflists"], [1167, "module-pypath.utils.residues"], [1169, "module-pypath.utils.seq"], [1176, "module-pypath.utils.taxonomy"], [1191, "module-pypath.utils.unichem"], [1193, "module-pypath.utils.uniprot"], [1253, "module-pypath.visual"], [1254, "module-pypath.visual.drawing"], [1257, "module-pypath.visual.igraph_drawing"], [1263, "module-pypath.visual.igraph_drawing.edge"], [1270, "module-pypath.visual.igraph_drawing.vertex"], [1276, "module-pypath.visual.plot"]], "pypath": [[0, "module-pypath"]], "pypath.core": [[1, "module-pypath.core"]], "pypath.core.annot": [[2, "module-pypath.core.annot"]], "adhesome (class in pypath.core.annot)": [[3, "pypath.core.annot.Adhesome"]], "__init__() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_complexes"]], "all_entities() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_entities"]], "all_mirnas() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_mirnas"]], "all_proteins() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_proteins"]], "all_refs() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_refs"]], "annotate_complex() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.annotate_complex"]], "browse() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.browse"]], "complex_inference() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.complex_inference"]], "coverage() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.coverage"]], "curation_effort() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.curation_effort"]], "get_names() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_names"]], "get_reference_set() (pypath.core.annot.adhesome static method)": [[3, "pypath.core.annot.Adhesome.get_reference_set"]], "get_subset() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_subset_bool_array"]], "get_values() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_values"]], "labels() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.labels"]], "load() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load"]], "load_data() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load_data"]], "load_proteins() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load_proteins"]], "make_df() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.make_df"]], "numof_entities() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_entities"]], "numof_records() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_records"]], "numof_references() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_references"]], "process() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.process"]], "reload() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.reload"]], "select() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.select"]], "set_method() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.set_method"]], "set_reference_set() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.set_reference_set"]], "show() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.show"]], "subset_intersection() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.subset_intersection"]], "to_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_array"]], "to_bool_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_bool_array"]], "to_set() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_set"]], "almen2009 (class in pypath.core.annot)": [[4, "pypath.core.annot.Almen2009"]], "__init__() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.__init__"]], "add_complexes_by_inference() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_complexes"]], "all_entities() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_entities"]], "all_mirnas() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_mirnas"]], "all_proteins() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_proteins"]], "all_refs() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_refs"]], "annotate_complex() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.annotate_complex"]], "browse() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.browse"]], "complex_inference() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.complex_inference"]], "coverage() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.coverage"]], "curation_effort() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.curation_effort"]], "get_names() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_names"]], "get_reference_set() (pypath.core.annot.almen2009 static method)": [[4, "pypath.core.annot.Almen2009.get_reference_set"]], "get_subset() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_subset"]], "get_subset_bool_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_subset_bool_array"]], "get_values() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_values"]], "labels() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.labels"]], "load() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load"]], "load_data() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load_data"]], "load_proteins() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load_proteins"]], "make_df() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.make_df"]], "numof_entities() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_entities"]], "numof_records() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_records"]], "numof_references() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_references"]], "process() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.process"]], "reload() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.reload"]], "select() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.select"]], "set_method() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.set_method"]], "set_reference_set() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.set_reference_set"]], "show() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.show"]], "subset_intersection() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.subset_intersection"]], "to_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_array"]], "to_bool_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_bool_array"]], "to_set() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_set"]], "annotationbase (class in pypath.core.annot)": [[5, "pypath.core.annot.AnnotationBase"]], "__init__() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.__init__"]], "add_complexes_by_inference() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_complexes"]], "all_entities() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_entities"]], "all_mirnas() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_mirnas"]], "all_proteins() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_proteins"]], "all_refs() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_refs"]], "annotate_complex() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.annotate_complex"]], "browse() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.browse"]], "complex_inference() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.complex_inference"]], "coverage() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.coverage"]], "curation_effort() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.curation_effort"]], "get_names() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_names"]], "get_reference_set() (pypath.core.annot.annotationbase static method)": [[5, "pypath.core.annot.AnnotationBase.get_reference_set"]], "get_subset() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_subset"]], "get_subset_bool_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_subset_bool_array"]], "get_values() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_values"]], "labels() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.labels"]], "load() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load"]], "load_data() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load_data"]], "load_proteins() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load_proteins"]], "make_df() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.make_df"]], "numof_entities() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_entities"]], "numof_records() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_records"]], "numof_references() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_references"]], "process() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.process"]], "reload() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.reload"]], "select() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.select"]], "set_method() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.set_method"]], "set_reference_set() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.set_reference_set"]], "show() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.show"]], "subset_intersection() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.subset_intersection"]], "to_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_array"]], "to_bool_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_bool_array"]], "to_set() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_set"]], "annotationtable (class in pypath.core.annot)": [[6, "pypath.core.annot.AnnotationTable"]], "__init__() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.__init__"]], "all_annotations() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.all_annotations"]], "all_annotations_str() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.all_annotations_str"]], "reload() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.reload"]], "search() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.search"]], "baccin2019 (class in pypath.core.annot)": [[7, "pypath.core.annot.Baccin2019"]], "__init__() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.__init__"]], "add_complexes_by_inference() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_complexes"]], "all_entities() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_entities"]], "all_mirnas() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_mirnas"]], "all_proteins() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_proteins"]], "all_refs() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_refs"]], "annotate_complex() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.annotate_complex"]], "browse() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.browse"]], "complex_inference() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.complex_inference"]], "coverage() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.coverage"]], "curation_effort() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.curation_effort"]], "get_names() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_names"]], "get_reference_set() (pypath.core.annot.baccin2019 static method)": [[7, "pypath.core.annot.Baccin2019.get_reference_set"]], "get_subset() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_subset"]], "get_subset_bool_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_subset_bool_array"]], "get_values() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_values"]], "labels() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.labels"]], "load() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load"]], "load_data() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load_data"]], "load_proteins() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load_proteins"]], "make_df() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.make_df"]], "numof_entities() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_entities"]], "numof_records() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_records"]], "numof_references() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_references"]], "process() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.process"]], "reload() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.reload"]], "select() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.select"]], "set_method() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.set_method"]], "set_reference_set() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.set_reference_set"]], "show() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.show"]], "subset_intersection() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.subset_intersection"]], "to_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_array"]], "to_bool_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_bool_array"]], "to_set() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_set"]], "biogps (class in pypath.core.annot)": [[8, "pypath.core.annot.Biogps"]], "__init__() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.__init__"]], "add_complexes_by_inference() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_complexes"]], "all_entities() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_entities"]], "all_mirnas() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_mirnas"]], "all_proteins() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_proteins"]], "all_refs() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_refs"]], "annotate_complex() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.annotate_complex"]], "browse() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.browse"]], "complex_inference() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.complex_inference"]], "coverage() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.coverage"]], "curation_effort() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.curation_effort"]], "get_names() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_names"]], "get_reference_set() (pypath.core.annot.biogps static method)": [[8, "pypath.core.annot.Biogps.get_reference_set"]], "get_subset() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_subset"]], "get_subset_bool_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_subset_bool_array"]], "get_values() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_values"]], "labels() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.labels"]], "load() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load"]], "load_data() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load_data"]], "load_proteins() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load_proteins"]], "make_df() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.make_df"]], "numof_entities() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_entities"]], "numof_records() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_records"]], "numof_references() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_references"]], "process() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.process"]], "reload() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.reload"]], "select() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.select"]], "set_method() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.set_method"]], "set_reference_set() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.set_reference_set"]], "show() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.show"]], "subset_intersection() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.subset_intersection"]], "to_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_array"]], "to_bool_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_bool_array"]], "to_set() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_set"]], "cancergenecensus (class in pypath.core.annot)": [[9, "pypath.core.annot.CancerGeneCensus"]], "__init__() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_complexes"]], "all_entities() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_entities"]], "all_mirnas() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_mirnas"]], "all_proteins() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_proteins"]], "all_refs() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_refs"]], "annotate_complex() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.annotate_complex"]], "browse() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.browse"]], "complex_inference() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.complex_inference"]], "coverage() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.coverage"]], "curation_effort() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.curation_effort"]], "get_names() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_names"]], "get_reference_set() (pypath.core.annot.cancergenecensus static method)": [[9, "pypath.core.annot.CancerGeneCensus.get_reference_set"]], "get_subset() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_values"]], "labels() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.labels"]], "load() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load"]], "load_data() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load_data"]], "load_proteins() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load_proteins"]], "make_df() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.make_df"]], "numof_entities() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_entities"]], "numof_records() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_records"]], "numof_references() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_references"]], "process() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.process"]], "reload() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.reload"]], "select() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.select"]], "set_method() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.set_method"]], "set_reference_set() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.set_reference_set"]], "show() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.show"]], "subset_intersection() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.subset_intersection"]], "to_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_array"]], "to_bool_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_bool_array"]], "to_set() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_set"]], "cancerdrugsdb (class in pypath.core.annot)": [[10, "pypath.core.annot.Cancerdrugsdb"]], "__init__() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_complexes"]], "all_entities() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_entities"]], "all_mirnas() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_mirnas"]], "all_proteins() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_proteins"]], "all_refs() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_refs"]], "annotate_complex() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.annotate_complex"]], "browse() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.browse"]], "complex_inference() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.complex_inference"]], "coverage() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.coverage"]], "curation_effort() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.curation_effort"]], "get_names() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_names"]], "get_reference_set() (pypath.core.annot.cancerdrugsdb static method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_reference_set"]], "get_subset() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_values"]], "labels() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.labels"]], "load() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load"]], "load_data() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load_data"]], "load_proteins() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load_proteins"]], "make_df() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.make_df"]], "numof_entities() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_entities"]], "numof_records() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_records"]], "numof_references() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_references"]], "process() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.process"]], "reload() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.reload"]], "select() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.select"]], "set_method() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.set_method"]], "set_reference_set() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.set_reference_set"]], "show() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.show"]], "subset_intersection() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.subset_intersection"]], "to_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_array"]], "to_bool_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_bool_array"]], "to_set() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_set"]], "cancersea (class in pypath.core.annot)": [[11, "pypath.core.annot.Cancersea"]], "__init__() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_complexes"]], "all_entities() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_entities"]], "all_mirnas() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_mirnas"]], "all_proteins() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_proteins"]], "all_refs() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_refs"]], "annotate_complex() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.annotate_complex"]], "browse() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.browse"]], "complex_inference() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.complex_inference"]], "coverage() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.coverage"]], "curation_effort() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.curation_effort"]], "get_names() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_names"]], "get_reference_set() (pypath.core.annot.cancersea static method)": [[11, "pypath.core.annot.Cancersea.get_reference_set"]], "get_subset() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_values"]], "labels() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.labels"]], "load() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load"]], "load_data() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load_data"]], "load_proteins() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load_proteins"]], "make_df() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.make_df"]], "numof_entities() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_entities"]], "numof_records() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_records"]], "numof_references() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_references"]], "process() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.process"]], "reload() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.reload"]], "select() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.select"]], "set_method() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.set_method"]], "set_reference_set() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.set_reference_set"]], "show() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.show"]], "subset_intersection() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.subset_intersection"]], "to_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_array"]], "to_bool_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_bool_array"]], "to_set() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_set"]], "cellphonedb (class in pypath.core.annot)": [[12, "pypath.core.annot.CellPhoneDB"]], "__init__() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_complexes"]], "all_entities() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_entities"]], "all_mirnas() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_mirnas"]], "all_proteins() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_proteins"]], "all_refs() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_refs"]], "annotate_complex() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.annotate_complex"]], "browse() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.browse"]], "complex_inference() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.complex_inference"]], "coverage() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.coverage"]], "curation_effort() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.curation_effort"]], "get_names() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_names"]], "get_reference_set() (pypath.core.annot.cellphonedb static method)": [[12, "pypath.core.annot.CellPhoneDB.get_reference_set"]], "get_subset() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_values"]], "labels() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.labels"]], "load() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load"]], "load_data() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load_data"]], "load_proteins() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load_proteins"]], "make_df() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.make_df"]], "numof_entities() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_entities"]], "numof_records() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_records"]], "numof_references() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_references"]], "process() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.process"]], "reload() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.reload"]], "select() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.select"]], "set_method() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.set_method"]], "set_reference_set() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.set_reference_set"]], "show() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.show"]], "subset_intersection() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.subset_intersection"]], "to_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_array"]], "to_bool_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_bool_array"]], "to_set() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_set"]], "cellphonedbcomplex (class in pypath.core.annot)": [[13, "pypath.core.annot.CellPhoneDBComplex"]], "__init__() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.annotate_complex"]], "browse() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.browse"]], "complex_inference() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.complex_inference"]], "coverage() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.coverage"]], "curation_effort() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.curation_effort"]], "get_names() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellphonedbcomplex static method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_values"]], "labels() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.labels"]], "load() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load"]], "load_data() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load_data"]], "load_proteins() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load_proteins"]], "make_df() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.make_df"]], "numof_entities() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_records"]], "numof_references() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_references"]], "process() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.process"]], "reload() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.reload"]], "select() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.select"]], "set_method() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.set_reference_set"]], "show() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.show"]], "subset_intersection() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_set"]], "cellsurfaceproteinatlas (class in pypath.core.annot)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas"]], "__init__() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_complexes"]], "all_entities() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_entities"]], "all_mirnas() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_mirnas"]], "all_proteins() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_proteins"]], "all_refs() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_refs"]], "annotate_complex() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.annotate_complex"]], "browse() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.browse"]], "complex_inference() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.complex_inference"]], "coverage() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.coverage"]], "curation_effort() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.curation_effort"]], "get_names() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_names"]], "get_reference_set() (pypath.core.annot.cellsurfaceproteinatlas static method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_reference_set"]], "get_subset() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_values"]], "labels() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.labels"]], "load() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load"]], "load_data() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load_data"]], "load_proteins() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load_proteins"]], "make_df() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.make_df"]], "numof_entities() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_entities"]], "numof_records() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_records"]], "numof_references() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_references"]], "process() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.process"]], "reload() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.reload"]], "select() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.select"]], "set_method() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.set_method"]], "set_reference_set() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.set_reference_set"]], "show() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.show"]], "subset_intersection() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.subset_intersection"]], "to_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_array"]], "to_bool_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_bool_array"]], "to_set() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_set"]], "cellsurfaceproteinatlascelltype (class in pypath.core.annot)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType"]], "__init__() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_complexes"]], "all_entities() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_entities"]], "all_mirnas() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_mirnas"]], "all_proteins() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_proteins"]], "all_refs() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_refs"]], "annotate_complex() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.annotate_complex"]], "browse() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.browse"]], "complex_inference() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.complex_inference"]], "coverage() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.coverage"]], "curation_effort() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.curation_effort"]], "get_names() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_names"]], "get_reference_set() (pypath.core.annot.cellsurfaceproteinatlascelltype static method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_reference_set"]], "get_subset() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_values"]], "labels() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.labels"]], "load() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load"]], "load_data() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load_data"]], "load_proteins() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load_proteins"]], "make_df() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.make_df"]], "numof_entities() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_entities"]], "numof_records() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_records"]], "numof_references() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_references"]], "process() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.process"]], "reload() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.reload"]], "select() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.select"]], "set_method() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.set_method"]], "set_reference_set() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.set_reference_set"]], "show() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.show"]], "subset_intersection() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.subset_intersection"]], "to_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_array"]], "to_bool_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_bool_array"]], "to_set() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_set"]], "cellcall (class in pypath.core.annot)": [[16, "pypath.core.annot.Cellcall"]], "__init__() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_complexes"]], "all_entities() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_entities"]], "all_mirnas() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_mirnas"]], "all_proteins() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_proteins"]], "all_refs() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_refs"]], "annotate_complex() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.annotate_complex"]], "browse() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.browse"]], "complex_inference() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.complex_inference"]], "coverage() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.coverage"]], "curation_effort() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.curation_effort"]], "get_names() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_names"]], "get_reference_set() (pypath.core.annot.cellcall static method)": [[16, "pypath.core.annot.Cellcall.get_reference_set"]], "get_subset() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_values"]], "labels() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.labels"]], "load() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load"]], "load_data() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load_data"]], "load_proteins() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load_proteins"]], "make_df() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.make_df"]], "numof_entities() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_entities"]], "numof_records() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_records"]], "numof_references() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_references"]], "process() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.process"]], "reload() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.reload"]], "select() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.select"]], "set_method() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.set_method"]], "set_reference_set() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.set_reference_set"]], "show() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.show"]], "subset_intersection() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.subset_intersection"]], "to_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_array"]], "to_bool_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_bool_array"]], "to_set() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_set"]], "cellcellinteractions (class in pypath.core.annot)": [[17, "pypath.core.annot.Cellcellinteractions"]], "__init__() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_complexes"]], "all_entities() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_entities"]], "all_mirnas() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_mirnas"]], "all_proteins() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_proteins"]], "all_refs() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_refs"]], "annotate_complex() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.annotate_complex"]], "browse() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.browse"]], "complex_inference() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.complex_inference"]], "coverage() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.coverage"]], "curation_effort() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.curation_effort"]], "get_names() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_names"]], "get_reference_set() (pypath.core.annot.cellcellinteractions static method)": [[17, "pypath.core.annot.Cellcellinteractions.get_reference_set"]], "get_subset() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_values"]], "labels() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.labels"]], "load() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load"]], "load_data() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load_data"]], "load_proteins() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load_proteins"]], "make_df() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.make_df"]], "numof_entities() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_entities"]], "numof_records() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_records"]], "numof_references() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_references"]], "process() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.process"]], "reload() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.reload"]], "select() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.select"]], "set_method() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.set_method"]], "set_reference_set() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.set_reference_set"]], "show() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.show"]], "subset_intersection() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.subset_intersection"]], "to_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_array"]], "to_bool_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_bool_array"]], "to_set() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_set"]], "cellchatdb (class in pypath.core.annot)": [[18, "pypath.core.annot.Cellchatdb"]], "__init__() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_complexes"]], "all_entities() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_entities"]], "all_mirnas() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_mirnas"]], "all_proteins() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_proteins"]], "all_refs() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_refs"]], "annotate_complex() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.annotate_complex"]], "browse() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.browse"]], "complex_inference() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.complex_inference"]], "coverage() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.coverage"]], "curation_effort() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.curation_effort"]], "get_names() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_names"]], "get_reference_set() (pypath.core.annot.cellchatdb static method)": [[18, "pypath.core.annot.Cellchatdb.get_reference_set"]], "get_subset() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_values"]], "labels() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.labels"]], "load() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load"]], "load_data() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load_data"]], "load_proteins() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load_proteins"]], "make_df() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.make_df"]], "numof_entities() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_entities"]], "numof_records() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_records"]], "numof_references() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_references"]], "process() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.process"]], "reload() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.reload"]], "select() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.select"]], "set_method() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.set_method"]], "set_reference_set() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.set_reference_set"]], "show() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.show"]], "subset_intersection() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.subset_intersection"]], "to_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_array"]], "to_bool_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_bool_array"]], "to_set() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_set"]], "cellchatdbcomplex (class in pypath.core.annot)": [[19, "pypath.core.annot.CellchatdbComplex"]], "__init__() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.annotate_complex"]], "browse() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.browse"]], "complex_inference() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.complex_inference"]], "coverage() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.coverage"]], "curation_effort() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.curation_effort"]], "get_names() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellchatdbcomplex static method)": [[19, "pypath.core.annot.CellchatdbComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_values"]], "labels() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.labels"]], "load() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load"]], "load_data() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load_data"]], "load_proteins() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load_proteins"]], "make_df() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.make_df"]], "numof_entities() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_records"]], "numof_references() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_references"]], "process() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.process"]], "reload() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.reload"]], "select() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.select"]], "set_method() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.set_reference_set"]], "show() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.show"]], "subset_intersection() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_set"]], "cellinker (class in pypath.core.annot)": [[20, "pypath.core.annot.Cellinker"]], "__init__() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_complexes"]], "all_entities() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_entities"]], "all_mirnas() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_mirnas"]], "all_proteins() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_proteins"]], "all_refs() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_refs"]], "annotate_complex() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.annotate_complex"]], "browse() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.browse"]], "complex_inference() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.complex_inference"]], "coverage() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.coverage"]], "curation_effort() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.curation_effort"]], "get_names() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_names"]], "get_reference_set() (pypath.core.annot.cellinker static method)": [[20, "pypath.core.annot.Cellinker.get_reference_set"]], "get_subset() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_values"]], "labels() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.labels"]], "load() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load"]], "load_data() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load_data"]], "load_proteins() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load_proteins"]], "make_df() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.make_df"]], "numof_entities() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_entities"]], "numof_records() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_records"]], "numof_references() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_references"]], "process() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.process"]], "reload() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.reload"]], "select() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.select"]], "set_method() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.set_method"]], "set_reference_set() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.set_reference_set"]], "show() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.show"]], "subset_intersection() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.subset_intersection"]], "to_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_array"]], "to_bool_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_bool_array"]], "to_set() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_set"]], "cellinkercomplex (class in pypath.core.annot)": [[21, "pypath.core.annot.CellinkerComplex"]], "__init__() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.annotate_complex"]], "browse() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.browse"]], "complex_inference() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.complex_inference"]], "coverage() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.coverage"]], "curation_effort() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.curation_effort"]], "get_names() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellinkercomplex static method)": [[21, "pypath.core.annot.CellinkerComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_values"]], "labels() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.labels"]], "load() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load"]], "load_data() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load_data"]], "load_proteins() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load_proteins"]], "make_df() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.make_df"]], "numof_entities() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_records"]], "numof_references() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_references"]], "process() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.process"]], "reload() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.reload"]], "select() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.select"]], "set_method() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.set_reference_set"]], "show() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.show"]], "subset_intersection() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_set"]], "celltalkdb (class in pypath.core.annot)": [[22, "pypath.core.annot.Celltalkdb"]], "__init__() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_complexes"]], "all_entities() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_entities"]], "all_mirnas() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_mirnas"]], "all_proteins() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_proteins"]], "all_refs() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_refs"]], "annotate_complex() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.annotate_complex"]], "browse() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.browse"]], "complex_inference() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.complex_inference"]], "coverage() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.coverage"]], "curation_effort() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.curation_effort"]], "get_names() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_names"]], "get_reference_set() (pypath.core.annot.celltalkdb static method)": [[22, "pypath.core.annot.Celltalkdb.get_reference_set"]], "get_subset() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_values"]], "labels() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.labels"]], "load() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load"]], "load_data() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load_data"]], "load_proteins() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load_proteins"]], "make_df() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.make_df"]], "numof_entities() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_entities"]], "numof_records() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_records"]], "numof_references() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_references"]], "process() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.process"]], "reload() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.reload"]], "select() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.select"]], "set_method() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.set_method"]], "set_reference_set() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.set_reference_set"]], "show() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.show"]], "subset_intersection() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.subset_intersection"]], "to_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_array"]], "to_bool_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_bool_array"]], "to_set() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_set"]], "celltypist (class in pypath.core.annot)": [[23, "pypath.core.annot.Celltypist"]], "__init__() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.__init__"]], "add_complexes_by_inference() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_complexes"]], "all_entities() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_entities"]], "all_mirnas() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_mirnas"]], "all_proteins() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_proteins"]], "all_refs() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_refs"]], "annotate_complex() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.annotate_complex"]], "browse() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.browse"]], "complex_inference() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.complex_inference"]], "coverage() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.coverage"]], "curation_effort() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.curation_effort"]], "get_names() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_names"]], "get_reference_set() (pypath.core.annot.celltypist static method)": [[23, "pypath.core.annot.Celltypist.get_reference_set"]], "get_subset() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_subset"]], "get_subset_bool_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_subset_bool_array"]], "get_values() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_values"]], "labels() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.labels"]], "load() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load"]], "load_data() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load_data"]], "load_proteins() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load_proteins"]], "make_df() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.make_df"]], "numof_entities() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_entities"]], "numof_records() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_records"]], "numof_references() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_references"]], "process() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.process"]], "reload() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.reload"]], "select() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.select"]], "set_method() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.set_method"]], "set_reference_set() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.set_reference_set"]], "show() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.show"]], "subset_intersection() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.subset_intersection"]], "to_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_array"]], "to_bool_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_bool_array"]], "to_set() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_set"]], "comppi (class in pypath.core.annot)": [[24, "pypath.core.annot.Comppi"]], "__init__() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.__init__"]], "add_complexes_by_inference() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_complexes"]], "all_entities() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_entities"]], "all_mirnas() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_mirnas"]], "all_proteins() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_proteins"]], "all_refs() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_refs"]], "annotate_complex() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.annotate_complex"]], "browse() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.browse"]], "complex_inference() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.complex_inference"]], "coverage() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.coverage"]], "curation_effort() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.curation_effort"]], "get_names() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_names"]], "get_reference_set() (pypath.core.annot.comppi static method)": [[24, "pypath.core.annot.Comppi.get_reference_set"]], "get_subset() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_subset"]], "get_subset_bool_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_subset_bool_array"]], "get_values() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_values"]], "labels() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.labels"]], "load() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load"]], "load_data() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load_data"]], "load_proteins() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load_proteins"]], "make_df() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.make_df"]], "numof_entities() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_entities"]], "numof_records() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_records"]], "numof_references() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_references"]], "process() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.process"]], "reload() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.reload"]], "select() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.select"]], "set_method() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.set_method"]], "set_reference_set() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.set_reference_set"]], "show() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.show"]], "subset_intersection() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.subset_intersection"]], "to_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_array"]], "to_bool_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_bool_array"]], "to_set() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_set"]], "connectomedb (class in pypath.core.annot)": [[25, "pypath.core.annot.Connectomedb"]], "__init__() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_complexes"]], "all_entities() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_entities"]], "all_mirnas() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_mirnas"]], "all_proteins() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_proteins"]], "all_refs() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_refs"]], "annotate_complex() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.annotate_complex"]], "browse() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.browse"]], "complex_inference() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.complex_inference"]], "coverage() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.coverage"]], "curation_effort() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.curation_effort"]], "get_names() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_names"]], "get_reference_set() (pypath.core.annot.connectomedb static method)": [[25, "pypath.core.annot.Connectomedb.get_reference_set"]], "get_subset() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_subset_bool_array"]], "get_values() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_values"]], "labels() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.labels"]], "load() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load"]], "load_data() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load_data"]], "load_proteins() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load_proteins"]], "make_df() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.make_df"]], "numof_entities() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_entities"]], "numof_records() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_records"]], "numof_references() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_references"]], "process() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.process"]], "reload() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.reload"]], "select() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.select"]], "set_method() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.set_method"]], "set_reference_set() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.set_reference_set"]], "show() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.show"]], "subset_intersection() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.subset_intersection"]], "to_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_array"]], "to_bool_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_bool_array"]], "to_set() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_set"]], "corum (class in pypath.core.annot)": [[26, "pypath.core.annot.Corum"]], "__init__() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_complexes"]], "all_entities() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_entities"]], "all_mirnas() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_mirnas"]], "all_proteins() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_proteins"]], "all_refs() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_refs"]], "annotate_complex() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.annotate_complex"]], "browse() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.browse"]], "complex_inference() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.complex_inference"]], "coverage() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.coverage"]], "curation_effort() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.curation_effort"]], "get_names() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_names"]], "get_reference_set() (pypath.core.annot.corum static method)": [[26, "pypath.core.annot.Corum.get_reference_set"]], "get_subset() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_subset_bool_array"]], "get_values() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_values"]], "labels() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.labels"]], "load() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load"]], "load_data() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load_data"]], "load_proteins() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load_proteins"]], "make_df() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.make_df"]], "numof_entities() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_entities"]], "numof_records() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_records"]], "numof_references() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_references"]], "process() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.process"]], "reload() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.reload"]], "select() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.select"]], "set_method() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.set_method"]], "set_reference_set() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.set_reference_set"]], "show() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.show"]], "subset_intersection() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.subset_intersection"]], "to_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_array"]], "to_bool_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_bool_array"]], "to_set() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_set"]], "corumfuncat (class in pypath.core.annot)": [[27, "pypath.core.annot.CorumFuncat"]], "__init__() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_complexes"]], "all_entities() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_entities"]], "all_mirnas() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_mirnas"]], "all_proteins() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_proteins"]], "all_refs() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_refs"]], "annotate_complex() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.annotate_complex"]], "browse() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.browse"]], "complex_inference() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.complex_inference"]], "coverage() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.coverage"]], "curation_effort() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.curation_effort"]], "get_names() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_names"]], "get_reference_set() (pypath.core.annot.corumfuncat static method)": [[27, "pypath.core.annot.CorumFuncat.get_reference_set"]], "get_subset() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_subset_bool_array"]], "get_values() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_values"]], "labels() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.labels"]], "load() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load"]], "load_data() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load_data"]], "load_proteins() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load_proteins"]], "make_df() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.make_df"]], "numof_entities() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_entities"]], "numof_records() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_records"]], "numof_references() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_references"]], "process() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.process"]], "reload() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.reload"]], "select() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.select"]], "set_method() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.set_method"]], "set_reference_set() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.set_reference_set"]], "show() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.show"]], "subset_intersection() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.subset_intersection"]], "to_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_array"]], "to_bool_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_bool_array"]], "to_set() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_set"]], "corumgo (class in pypath.core.annot)": [[28, "pypath.core.annot.CorumGO"]], "__init__() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_complexes"]], "all_entities() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_entities"]], "all_mirnas() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_mirnas"]], "all_proteins() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_proteins"]], "all_refs() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_refs"]], "annotate_complex() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.annotate_complex"]], "browse() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.browse"]], "complex_inference() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.complex_inference"]], "coverage() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.coverage"]], "curation_effort() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.curation_effort"]], "get_names() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_names"]], "get_reference_set() (pypath.core.annot.corumgo static method)": [[28, "pypath.core.annot.CorumGO.get_reference_set"]], "get_subset() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_subset_bool_array"]], "get_values() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_values"]], "labels() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.labels"]], "load() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load"]], "load_data() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load_data"]], "load_proteins() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load_proteins"]], "make_df() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.make_df"]], "numof_entities() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_entities"]], "numof_records() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_records"]], "numof_references() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_references"]], "process() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.process"]], "reload() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.reload"]], "select() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.select"]], "set_method() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.set_method"]], "set_reference_set() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.set_reference_set"]], "show() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.show"]], "subset_intersection() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.subset_intersection"]], "to_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_array"]], "to_bool_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_bool_array"]], "to_set() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_set"]], "cpad (class in pypath.core.annot)": [[29, "pypath.core.annot.Cpad"]], "__init__() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_complexes"]], "all_entities() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_entities"]], "all_mirnas() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_mirnas"]], "all_proteins() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_proteins"]], "all_refs() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_refs"]], "annotate_complex() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.annotate_complex"]], "browse() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.browse"]], "complex_inference() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.complex_inference"]], "coverage() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.coverage"]], "curation_effort() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.curation_effort"]], "get_names() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_names"]], "get_reference_set() (pypath.core.annot.cpad static method)": [[29, "pypath.core.annot.Cpad.get_reference_set"]], "get_subset() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_subset_bool_array"]], "get_values() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_values"]], "labels() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.labels"]], "load() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load"]], "load_data() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load_data"]], "load_proteins() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load_proteins"]], "make_df() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.make_df"]], "numof_entities() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_entities"]], "numof_records() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_records"]], "numof_references() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_references"]], "process() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.process"]], "reload() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.reload"]], "select() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.select"]], "set_method() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.set_method"]], "set_reference_set() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.set_reference_set"]], "show() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.show"]], "subset_intersection() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.subset_intersection"]], "to_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_array"]], "to_bool_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_bool_array"]], "to_set() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_set"]], "customannotation (class in pypath.core.annot)": [[30, "pypath.core.annot.CustomAnnotation"]], "__init__() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.__init__"]], "browse() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.browse"]], "class_to_class_connections() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.class_to_class_connections"]], "classes_by_entity() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.classes_by_entity"]], "counts() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.counts"]], "counts_by_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.counts_by_class"]], "create_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.create_class"]], "degree_inter_class_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.degree_inter_class_network"]], "filter() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.filter"]], "filter_classes() (pypath.core.annot.customannotation static method)": [[30, "pypath.core.annot.CustomAnnotation.filter_classes"]], "filter_interclass_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.filter_interclass_network"]], "get_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_class"]], "get_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_df"]], "get_interclass_network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_interclass_network_df"]], "get_parents() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_parents"]], "get_resource() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_resource"]], "get_resources() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_resources"]], "labels() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.labels"]], "make_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.make_df"]], "network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.network_df"]], "populate_classes() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.populate_classes"]], "populate_scores() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.populate_scores"]], "process_annot() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.process_annot"]], "quality_check_table() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.quality_check_table"]], "register_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.register_network"]], "reload() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.reload"]], "resources_in_category() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.resources_in_category"]], "select() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.select"]], "set_interclass_network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.set_interclass_network_df"]], "show() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.show"]], "update_parents() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.update_parents"]], "cytosig (class in pypath.core.annot)": [[31, "pypath.core.annot.Cytosig"]], "__init__() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_complexes"]], "all_entities() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_entities"]], "all_mirnas() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_mirnas"]], "all_proteins() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_proteins"]], "all_refs() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_refs"]], "annotate_complex() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.annotate_complex"]], "browse() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.browse"]], "complex_inference() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.complex_inference"]], "coverage() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.coverage"]], "curation_effort() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.curation_effort"]], "get_names() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_names"]], "get_reference_set() (pypath.core.annot.cytosig static method)": [[31, "pypath.core.annot.Cytosig.get_reference_set"]], "get_subset() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_subset_bool_array"]], "get_values() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_values"]], "labels() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.labels"]], "load() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load"]], "load_data() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load_data"]], "load_proteins() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load_proteins"]], "make_df() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.make_df"]], "numof_entities() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_entities"]], "numof_records() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_records"]], "numof_references() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_references"]], "process() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.process"]], "reload() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.reload"]], "select() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.select"]], "set_method() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.set_method"]], "set_reference_set() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.set_reference_set"]], "show() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.show"]], "subset_intersection() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.subset_intersection"]], "to_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_array"]], "to_bool_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_bool_array"]], "to_set() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_set"]], "dgidb (class in pypath.core.annot)": [[32, "pypath.core.annot.Dgidb"]], "__init__() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_complexes"]], "all_entities() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_entities"]], "all_mirnas() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_mirnas"]], "all_proteins() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_proteins"]], "all_refs() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_refs"]], "annotate_complex() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.annotate_complex"]], "browse() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.browse"]], "complex_inference() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.complex_inference"]], "coverage() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.coverage"]], "curation_effort() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.curation_effort"]], "get_names() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_names"]], "get_reference_set() (pypath.core.annot.dgidb static method)": [[32, "pypath.core.annot.Dgidb.get_reference_set"]], "get_subset() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_subset_bool_array"]], "get_values() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_values"]], "labels() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.labels"]], "load() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load"]], "load_data() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load_data"]], "load_proteins() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load_proteins"]], "make_df() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.make_df"]], "numof_entities() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_entities"]], "numof_records() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_records"]], "numof_references() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_references"]], "process() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.process"]], "reload() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.reload"]], "select() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.select"]], "set_method() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.set_method"]], "set_reference_set() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.set_reference_set"]], "show() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.show"]], "subset_intersection() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.subset_intersection"]], "to_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_array"]], "to_bool_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_bool_array"]], "to_set() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_set"]], "disgenet (class in pypath.core.annot)": [[33, "pypath.core.annot.Disgenet"]], "__init__() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.__init__"]], "add_complexes_by_inference() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_complexes"]], "all_entities() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_entities"]], "all_mirnas() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_mirnas"]], "all_proteins() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_proteins"]], "all_refs() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_refs"]], "annotate_complex() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.annotate_complex"]], "browse() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.browse"]], "complex_inference() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.complex_inference"]], "coverage() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.coverage"]], "curation_effort() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.curation_effort"]], "get_names() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_names"]], "get_reference_set() (pypath.core.annot.disgenet static method)": [[33, "pypath.core.annot.Disgenet.get_reference_set"]], "get_subset() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_subset"]], "get_subset_bool_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_subset_bool_array"]], "get_values() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_values"]], "labels() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.labels"]], "load() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load"]], "load_data() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load_data"]], "load_proteins() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load_proteins"]], "make_df() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.make_df"]], "numof_entities() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_entities"]], "numof_records() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_records"]], "numof_references() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_references"]], "process() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.process"]], "reload() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.reload"]], "select() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.select"]], "set_method() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.set_method"]], "set_reference_set() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.set_reference_set"]], "show() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.show"]], "subset_intersection() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.subset_intersection"]], "to_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_array"]], "to_bool_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_bool_array"]], "to_set() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_set"]], "embrace (class in pypath.core.annot)": [[34, "pypath.core.annot.Embrace"]], "__init__() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.__init__"]], "add_complexes_by_inference() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_complexes"]], "all_entities() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_entities"]], "all_mirnas() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_mirnas"]], "all_proteins() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_proteins"]], "all_refs() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_refs"]], "annotate_complex() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.annotate_complex"]], "browse() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.browse"]], "complex_inference() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.complex_inference"]], "coverage() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.coverage"]], "curation_effort() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.curation_effort"]], "get_names() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_names"]], "get_reference_set() (pypath.core.annot.embrace static method)": [[34, "pypath.core.annot.Embrace.get_reference_set"]], "get_subset() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_subset"]], "get_subset_bool_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_subset_bool_array"]], "get_values() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_values"]], "labels() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.labels"]], "load() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load"]], "load_data() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load_data"]], "load_proteins() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load_proteins"]], "make_df() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.make_df"]], "numof_entities() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_entities"]], "numof_records() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_records"]], "numof_references() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_references"]], "process() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.process"]], "reload() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.reload"]], "select() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.select"]], "set_method() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.set_method"]], "set_reference_set() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.set_reference_set"]], "show() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.show"]], "subset_intersection() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.subset_intersection"]], "to_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_array"]], "to_bool_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_bool_array"]], "to_set() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_set"]], "exocarta (class in pypath.core.annot)": [[35, "pypath.core.annot.Exocarta"]], "__init__() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.__init__"]], "add_complexes_by_inference() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_complexes"]], "all_entities() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_entities"]], "all_mirnas() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_mirnas"]], "all_proteins() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_proteins"]], "all_refs() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_refs"]], "annotate_complex() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.annotate_complex"]], "browse() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.browse"]], "complex_inference() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.complex_inference"]], "coverage() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.coverage"]], "curation_effort() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.curation_effort"]], "get_names() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_names"]], "get_reference_set() (pypath.core.annot.exocarta static method)": [[35, "pypath.core.annot.Exocarta.get_reference_set"]], "get_subset() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_subset"]], "get_subset_bool_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_subset_bool_array"]], "get_values() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_values"]], "labels() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.labels"]], "load() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load"]], "load_data() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load_data"]], "load_proteins() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load_proteins"]], "make_df() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.make_df"]], "numof_entities() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_entities"]], "numof_records() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_records"]], "numof_references() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_references"]], "process() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.process"]], "reload() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.reload"]], "select() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.select"]], "set_method() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.set_method"]], "set_reference_set() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.set_reference_set"]], "show() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.show"]], "subset_intersection() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.subset_intersection"]], "to_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_array"]], "to_bool_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_bool_array"]], "to_set() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_set"]], "gocustomintercell (class in pypath.core.annot)": [[36, "pypath.core.annot.GOCustomIntercell"]], "__init__() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.__init__"]], "get_annotation() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.get_annotation"]], "get_annotations() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.get_annotations"]], "process_categories() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.process_categories"]], "reload() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.reload"]], "gointercell (class in pypath.core.annot)": [[37, "pypath.core.annot.GOIntercell"]], "__init__() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.__init__"]], "add_complexes_by_inference() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_complexes"]], "all_entities() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_entities"]], "all_mirnas() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_mirnas"]], "all_proteins() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_proteins"]], "all_refs() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_refs"]], "annotate_complex() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.annotate_complex"]], "browse() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.browse"]], "complex_inference() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.complex_inference"]], "coverage() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.coverage"]], "curation_effort() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.curation_effort"]], "get_names() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_names"]], "get_reference_set() (pypath.core.annot.gointercell static method)": [[37, "pypath.core.annot.GOIntercell.get_reference_set"]], "get_subset() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_subset"]], "get_subset_bool_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_subset_bool_array"]], "get_values() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_values"]], "labels() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.labels"]], "load() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load"]], "load_data() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load_data"]], "load_proteins() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load_proteins"]], "make_df() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.make_df"]], "numof_entities() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_entities"]], "numof_records() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_records"]], "numof_references() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_references"]], "process() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.process"]], "reload() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.reload"]], "select() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.select"]], "set_method() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.set_method"]], "set_reference_set() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.set_reference_set"]], "show() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.show"]], "subset_intersection() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.subset_intersection"]], "to_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_array"]], "to_bool_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_bool_array"]], "to_set() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_set"]], "gpcrdb (class in pypath.core.annot)": [[38, "pypath.core.annot.Gpcrdb"]], "__init__() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_complexes"]], "all_entities() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_entities"]], "all_mirnas() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_mirnas"]], "all_proteins() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_proteins"]], "all_refs() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_refs"]], "annotate_complex() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.annotate_complex"]], "browse() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.browse"]], "complex_inference() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.complex_inference"]], "coverage() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.coverage"]], "curation_effort() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.curation_effort"]], "get_names() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_names"]], "get_reference_set() (pypath.core.annot.gpcrdb static method)": [[38, "pypath.core.annot.Gpcrdb.get_reference_set"]], "get_subset() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_values"]], "labels() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.labels"]], "load() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load"]], "load_data() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load_data"]], "load_proteins() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load_proteins"]], "make_df() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.make_df"]], "numof_entities() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_entities"]], "numof_records() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_records"]], "numof_references() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_references"]], "process() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.process"]], "reload() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.reload"]], "select() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.select"]], "set_method() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.set_method"]], "set_reference_set() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.set_reference_set"]], "show() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.show"]], "subset_intersection() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.subset_intersection"]], "to_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_array"]], "to_bool_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_bool_array"]], "to_set() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_set"]], "guidetopharmacology (class in pypath.core.annot)": [[39, "pypath.core.annot.GuideToPharmacology"]], "__init__() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.__init__"]], "add_complexes_by_inference() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_complexes"]], "all_entities() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_entities"]], "all_mirnas() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_mirnas"]], "all_proteins() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_proteins"]], "all_refs() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_refs"]], "annotate_complex() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.annotate_complex"]], "browse() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.browse"]], "complex_inference() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.complex_inference"]], "coverage() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.coverage"]], "curation_effort() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.curation_effort"]], "get_names() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_names"]], "get_reference_set() (pypath.core.annot.guidetopharmacology static method)": [[39, "pypath.core.annot.GuideToPharmacology.get_reference_set"]], "get_subset() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_subset"]], "get_subset_bool_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_subset_bool_array"]], "get_values() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_values"]], "labels() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.labels"]], "load() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load"]], "load_data() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load_data"]], "load_proteins() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load_proteins"]], "make_df() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.make_df"]], "numof_entities() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_entities"]], "numof_records() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_records"]], "numof_references() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_references"]], "process() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.process"]], "reload() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.reload"]], "select() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.select"]], "set_method() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.set_method"]], "set_reference_set() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.set_reference_set"]], "show() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.show"]], "subset_intersection() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.subset_intersection"]], "to_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_array"]], "to_bool_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_bool_array"]], "to_set() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_set"]], "hpo (class in pypath.core.annot)": [[40, "pypath.core.annot.HPO"]], "__init__() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_complexes"]], "all_entities() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_entities"]], "all_mirnas() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_mirnas"]], "all_proteins() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_proteins"]], "all_refs() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_refs"]], "annotate_complex() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.annotate_complex"]], "browse() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.browse"]], "complex_inference() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.complex_inference"]], "coverage() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.coverage"]], "curation_effort() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.curation_effort"]], "get_names() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_names"]], "get_reference_set() (pypath.core.annot.hpo static method)": [[40, "pypath.core.annot.HPO.get_reference_set"]], "get_subset() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_subset_bool_array"]], "get_values() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_values"]], "labels() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.labels"]], "load() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load"]], "load_data() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load_data"]], "load_proteins() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load_proteins"]], "make_df() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.make_df"]], "numof_entities() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_entities"]], "numof_records() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_records"]], "numof_references() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_references"]], "process() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.process"]], "reload() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.reload"]], "select() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.select"]], "set_method() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.set_method"]], "set_reference_set() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.set_reference_set"]], "show() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.show"]], "subset_intersection() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.subset_intersection"]], "to_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_array"]], "to_bool_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_bool_array"]], "to_set() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_set"]], "hgnc (class in pypath.core.annot)": [[41, "pypath.core.annot.Hgnc"]], "__init__() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_complexes"]], "all_entities() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_entities"]], "all_mirnas() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_mirnas"]], "all_proteins() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_proteins"]], "all_refs() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_refs"]], "annotate_complex() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.annotate_complex"]], "browse() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.browse"]], "complex_inference() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.complex_inference"]], "coverage() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.coverage"]], "curation_effort() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.curation_effort"]], "get_names() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_names"]], "get_reference_set() (pypath.core.annot.hgnc static method)": [[41, "pypath.core.annot.Hgnc.get_reference_set"]], "get_subset() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_subset_bool_array"]], "get_values() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_values"]], "labels() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.labels"]], "load() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load"]], "load_data() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load_data"]], "load_proteins() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load_proteins"]], "make_df() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.make_df"]], "numof_entities() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_entities"]], "numof_records() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_records"]], "numof_references() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_references"]], "process() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.process"]], "reload() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.reload"]], "select() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.select"]], "set_method() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.set_method"]], "set_reference_set() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.set_reference_set"]], "show() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.show"]], "subset_intersection() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.subset_intersection"]], "to_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_array"]], "to_bool_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_bool_array"]], "to_set() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_set"]], "hpmrcomplex (class in pypath.core.annot)": [[42, "pypath.core.annot.HpmrComplex"]], "__init__() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_complexes"]], "all_entities() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_entities"]], "all_mirnas() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_proteins"]], "all_refs() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_refs"]], "annotate_complex() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.annotate_complex"]], "browse() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.browse"]], "complex_inference() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.complex_inference"]], "coverage() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.coverage"]], "curation_effort() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.curation_effort"]], "get_names() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_names"]], "get_reference_set() (pypath.core.annot.hpmrcomplex static method)": [[42, "pypath.core.annot.HpmrComplex.get_reference_set"]], "get_subset() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_values"]], "labels() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.labels"]], "load() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load"]], "load_data() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load_data"]], "load_proteins() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load_proteins"]], "make_df() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.make_df"]], "numof_entities() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_entities"]], "numof_records() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_records"]], "numof_references() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_references"]], "process() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.process"]], "reload() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.reload"]], "select() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.select"]], "set_method() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.set_method"]], "set_reference_set() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.set_reference_set"]], "show() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.show"]], "subset_intersection() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.subset_intersection"]], "to_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_array"]], "to_bool_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_bool_array"]], "to_set() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_set"]], "humanplasmamembranereceptome (class in pypath.core.annot)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome"]], "__init__() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_complexes"]], "all_entities() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_entities"]], "all_mirnas() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_mirnas"]], "all_proteins() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_proteins"]], "all_refs() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_refs"]], "annotate_complex() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.annotate_complex"]], "browse() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.browse"]], "complex_inference() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.complex_inference"]], "coverage() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.coverage"]], "curation_effort() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.curation_effort"]], "get_names() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_names"]], "get_reference_set() (pypath.core.annot.humanplasmamembranereceptome static method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_reference_set"]], "get_subset() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_values"]], "labels() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.labels"]], "load() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load"]], "load_data() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load_data"]], "load_proteins() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load_proteins"]], "make_df() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.make_df"]], "numof_entities() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_entities"]], "numof_records() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_records"]], "numof_references() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_references"]], "process() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.process"]], "reload() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.reload"]], "select() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.select"]], "set_method() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.set_method"]], "set_reference_set() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.set_reference_set"]], "show() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.show"]], "subset_intersection() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.subset_intersection"]], "to_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_array"]], "to_bool_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_bool_array"]], "to_set() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_set"]], "humanproteinatlas (class in pypath.core.annot)": [[44, "pypath.core.annot.HumanProteinAtlas"]], "__init__() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlas static method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_values"]], "labels() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.labels"]], "load() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load"]], "load_data() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_references"]], "process() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.process"]], "reload() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.reload"]], "select() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.select"]], "set_method() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_set"]], "humanproteinatlassecretome (class in pypath.core.annot)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome"]], "__init__() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlassecretome static method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_values"]], "labels() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.labels"]], "load() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load"]], "load_data() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_references"]], "process() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.process"]], "reload() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.reload"]], "select() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.select"]], "set_method() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_set"]], "humanproteinatlassubcellular (class in pypath.core.annot)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular"]], "__init__() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlassubcellular static method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_values"]], "labels() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.labels"]], "load() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load"]], "load_data() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_references"]], "process() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.process"]], "reload() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.reload"]], "select() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.select"]], "set_method() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_set"]], "humancellmap (class in pypath.core.annot)": [[47, "pypath.core.annot.Humancellmap"]], "__init__() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_complexes"]], "all_entities() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_entities"]], "all_mirnas() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_mirnas"]], "all_proteins() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_proteins"]], "all_refs() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_refs"]], "annotate_complex() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.annotate_complex"]], "browse() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.browse"]], "complex_inference() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.complex_inference"]], "coverage() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.coverage"]], "curation_effort() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.curation_effort"]], "get_names() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_names"]], "get_reference_set() (pypath.core.annot.humancellmap static method)": [[47, "pypath.core.annot.Humancellmap.get_reference_set"]], "get_subset() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_subset_bool_array"]], "get_values() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_values"]], "labels() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.labels"]], "load() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load"]], "load_data() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load_data"]], "load_proteins() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load_proteins"]], "make_df() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.make_df"]], "numof_entities() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_entities"]], "numof_records() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_records"]], "numof_references() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_references"]], "process() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.process"]], "reload() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.reload"]], "select() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.select"]], "set_method() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.set_method"]], "set_reference_set() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.set_reference_set"]], "show() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.show"]], "subset_intersection() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.subset_intersection"]], "to_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_array"]], "to_bool_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_bool_array"]], "to_set() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_set"]], "icellnet (class in pypath.core.annot)": [[48, "pypath.core.annot.Icellnet"]], "__init__() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.__init__"]], "add_complexes_by_inference() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_complexes"]], "all_entities() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_entities"]], "all_mirnas() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_mirnas"]], "all_proteins() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_proteins"]], "all_refs() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_refs"]], "annotate_complex() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.annotate_complex"]], "browse() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.browse"]], "complex_inference() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.complex_inference"]], "coverage() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.coverage"]], "curation_effort() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.curation_effort"]], "get_names() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_names"]], "get_reference_set() (pypath.core.annot.icellnet static method)": [[48, "pypath.core.annot.Icellnet.get_reference_set"]], "get_subset() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_subset"]], "get_subset_bool_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_subset_bool_array"]], "get_values() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_values"]], "labels() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.labels"]], "load() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load"]], "load_data() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load_data"]], "load_proteins() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load_proteins"]], "make_df() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.make_df"]], "numof_entities() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_entities"]], "numof_records() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_records"]], "numof_references() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_references"]], "process() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.process"]], "reload() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.reload"]], "select() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.select"]], "set_method() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.set_method"]], "set_reference_set() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.set_reference_set"]], "show() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.show"]], "subset_intersection() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.subset_intersection"]], "to_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_array"]], "to_bool_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_bool_array"]], "to_set() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_set"]], "icellnetcomplex (class in pypath.core.annot)": [[49, "pypath.core.annot.IcellnetComplex"]], "__init__() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_complexes"]], "all_entities() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_entities"]], "all_mirnas() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_proteins"]], "all_refs() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_refs"]], "annotate_complex() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.annotate_complex"]], "browse() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.browse"]], "complex_inference() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.complex_inference"]], "coverage() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.coverage"]], "curation_effort() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.curation_effort"]], "get_names() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_names"]], "get_reference_set() (pypath.core.annot.icellnetcomplex static method)": [[49, "pypath.core.annot.IcellnetComplex.get_reference_set"]], "get_subset() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_values"]], "labels() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.labels"]], "load() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load"]], "load_data() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load_data"]], "load_proteins() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load_proteins"]], "make_df() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.make_df"]], "numof_entities() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_entities"]], "numof_records() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_records"]], "numof_references() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_references"]], "process() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.process"]], "reload() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.reload"]], "select() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.select"]], "set_method() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.set_method"]], "set_reference_set() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.set_reference_set"]], "show() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.show"]], "subset_intersection() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.subset_intersection"]], "to_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_array"]], "to_bool_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_bool_array"]], "to_set() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_set"]], "integrins (class in pypath.core.annot)": [[50, "pypath.core.annot.Integrins"]], "__init__() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.__init__"]], "add_complexes_by_inference() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_complexes"]], "all_entities() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_entities"]], "all_mirnas() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_mirnas"]], "all_proteins() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_proteins"]], "all_refs() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_refs"]], "annotate_complex() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.annotate_complex"]], "browse() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.browse"]], "complex_inference() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.complex_inference"]], "coverage() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.coverage"]], "curation_effort() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.curation_effort"]], "get_names() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_names"]], "get_reference_set() (pypath.core.annot.integrins static method)": [[50, "pypath.core.annot.Integrins.get_reference_set"]], "get_subset() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_subset"]], "get_subset_bool_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_subset_bool_array"]], "get_values() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_values"]], "labels() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.labels"]], "load() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load"]], "load_data() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load_data"]], "load_proteins() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load_proteins"]], "make_df() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.make_df"]], "numof_entities() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_entities"]], "numof_records() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_records"]], "numof_references() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_references"]], "process() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.process"]], "reload() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.reload"]], "select() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.select"]], "set_method() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.set_method"]], "set_reference_set() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.set_reference_set"]], "show() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.show"]], "subset_intersection() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.subset_intersection"]], "to_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_array"]], "to_bool_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_bool_array"]], "to_set() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_set"]], "interpro (class in pypath.core.annot)": [[51, "pypath.core.annot.InterPro"]], "__init__() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.__init__"]], "add_complexes_by_inference() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_complexes"]], "all_entities() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_entities"]], "all_mirnas() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_mirnas"]], "all_proteins() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_proteins"]], "all_refs() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_refs"]], "annotate_complex() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.annotate_complex"]], "browse() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.browse"]], "complex_inference() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.complex_inference"]], "coverage() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.coverage"]], "curation_effort() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.curation_effort"]], "get_names() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_names"]], "get_reference_set() (pypath.core.annot.interpro static method)": [[51, "pypath.core.annot.InterPro.get_reference_set"]], "get_subset() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_subset"]], "get_subset_bool_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_subset_bool_array"]], "get_values() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_values"]], "labels() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.labels"]], "load() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load"]], "load_data() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load_data"]], "load_proteins() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load_proteins"]], "make_df() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.make_df"]], "numof_entities() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_entities"]], "numof_records() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_records"]], "numof_references() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_references"]], "process() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.process"]], "reload() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.reload"]], "select() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.select"]], "set_method() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.set_method"]], "set_reference_set() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.set_reference_set"]], "show() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.show"]], "subset_intersection() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.subset_intersection"]], "to_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_array"]], "to_bool_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_bool_array"]], "to_set() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_set"]], "intogen (class in pypath.core.annot)": [[52, "pypath.core.annot.Intogen"]], "__init__() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.__init__"]], "add_complexes_by_inference() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_complexes"]], "all_entities() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_entities"]], "all_mirnas() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_mirnas"]], "all_proteins() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_proteins"]], "all_refs() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_refs"]], "annotate_complex() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.annotate_complex"]], "browse() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.browse"]], "complex_inference() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.complex_inference"]], "coverage() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.coverage"]], "curation_effort() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.curation_effort"]], "get_names() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_names"]], "get_reference_set() (pypath.core.annot.intogen static method)": [[52, "pypath.core.annot.Intogen.get_reference_set"]], "get_subset() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_subset"]], "get_subset_bool_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_subset_bool_array"]], "get_values() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_values"]], "labels() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.labels"]], "load() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load"]], "load_data() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load_data"]], "load_proteins() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load_proteins"]], "make_df() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.make_df"]], "numof_entities() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_entities"]], "numof_records() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_records"]], "numof_references() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_references"]], "process() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.process"]], "reload() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.reload"]], "select() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.select"]], "set_method() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.set_method"]], "set_reference_set() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.set_reference_set"]], "show() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.show"]], "subset_intersection() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.subset_intersection"]], "to_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_array"]], "to_bool_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_bool_array"]], "to_set() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_set"]], "italk (class in pypath.core.annot)": [[53, "pypath.core.annot.Italk"]], "__init__() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.__init__"]], "add_complexes_by_inference() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_complexes"]], "all_entities() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_entities"]], "all_mirnas() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_mirnas"]], "all_proteins() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_proteins"]], "all_refs() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_refs"]], "annotate_complex() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.annotate_complex"]], "browse() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.browse"]], "complex_inference() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.complex_inference"]], "coverage() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.coverage"]], "curation_effort() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.curation_effort"]], "get_names() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_names"]], "get_reference_set() (pypath.core.annot.italk static method)": [[53, "pypath.core.annot.Italk.get_reference_set"]], "get_subset() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_subset"]], "get_subset_bool_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_subset_bool_array"]], "get_values() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_values"]], "labels() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.labels"]], "load() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load"]], "load_data() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load_data"]], "load_proteins() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load_proteins"]], "make_df() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.make_df"]], "numof_entities() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_entities"]], "numof_records() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_records"]], "numof_references() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_references"]], "process() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.process"]], "reload() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.reload"]], "select() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.select"]], "set_method() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.set_method"]], "set_reference_set() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.set_reference_set"]], "show() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.show"]], "subset_intersection() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.subset_intersection"]], "to_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_array"]], "to_bool_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_bool_array"]], "to_set() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_set"]], "keggpathways (class in pypath.core.annot)": [[54, "pypath.core.annot.KeggPathways"]], "__init__() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_complexes"]], "all_entities() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_entities"]], "all_mirnas() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_proteins"]], "all_refs() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_refs"]], "annotate_complex() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.annotate_complex"]], "browse() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.browse"]], "complex_inference() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.complex_inference"]], "coverage() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.coverage"]], "curation_effort() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.curation_effort"]], "get_names() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_names"]], "get_reference_set() (pypath.core.annot.keggpathways static method)": [[54, "pypath.core.annot.KeggPathways.get_reference_set"]], "get_subset() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_values"]], "labels() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.labels"]], "load() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load"]], "load_data() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load_data"]], "load_proteins() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load_proteins"]], "make_df() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.make_df"]], "numof_entities() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_entities"]], "numof_records() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_records"]], "numof_references() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_references"]], "process() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.process"]], "reload() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.reload"]], "select() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.select"]], "set_method() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.set_method"]], "set_reference_set() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.set_reference_set"]], "show() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.show"]], "subset_intersection() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.subset_intersection"]], "to_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_array"]], "to_bool_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_bool_array"]], "to_set() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_set"]], "keggpathwayspc (class in pypath.core.annot)": [[55, "pypath.core.annot.KeggPathwaysPC"]], "__init__() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.__init__"]], "add_complexes_by_inference() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_complexes"]], "all_entities() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_entities"]], "all_mirnas() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_mirnas"]], "all_proteins() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_proteins"]], "all_refs() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_refs"]], "annotate_complex() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.annotate_complex"]], "browse() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.browse"]], "complex_inference() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.complex_inference"]], "coverage() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.coverage"]], "curation_effort() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.curation_effort"]], "get_names() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_names"]], "get_reference_set() (pypath.core.annot.keggpathwayspc static method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_reference_set"]], "get_subset() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_subset"]], "get_subset_bool_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_subset_bool_array"]], "get_values() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_values"]], "labels() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.labels"]], "load() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load"]], "load_data() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load_data"]], "load_proteins() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load_proteins"]], "make_df() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.make_df"]], "numof_entities() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_entities"]], "numof_records() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_records"]], "numof_references() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_references"]], "process() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.process"]], "reload() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.reload"]], "select() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.select"]], "set_method() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.set_method"]], "set_reference_set() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.set_reference_set"]], "show() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.show"]], "subset_intersection() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.subset_intersection"]], "to_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_array"]], "to_bool_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_bool_array"]], "to_set() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_set"]], "kinasedotcom (class in pypath.core.annot)": [[56, "pypath.core.annot.Kinasedotcom"]], "__init__() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.__init__"]], "add_complexes_by_inference() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_complexes"]], "all_entities() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_entities"]], "all_mirnas() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_mirnas"]], "all_proteins() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_proteins"]], "all_refs() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_refs"]], "annotate_complex() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.annotate_complex"]], "browse() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.browse"]], "complex_inference() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.complex_inference"]], "coverage() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.coverage"]], "curation_effort() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.curation_effort"]], "get_names() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_names"]], "get_reference_set() (pypath.core.annot.kinasedotcom static method)": [[56, "pypath.core.annot.Kinasedotcom.get_reference_set"]], "get_subset() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_subset"]], "get_subset_bool_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_subset_bool_array"]], "get_values() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_values"]], "labels() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.labels"]], "load() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load"]], "load_data() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load_data"]], "load_proteins() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load_proteins"]], "make_df() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.make_df"]], "numof_entities() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_entities"]], "numof_records() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_records"]], "numof_references() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_references"]], "process() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.process"]], "reload() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.reload"]], "select() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.select"]], "set_method() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.set_method"]], "set_reference_set() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.set_reference_set"]], "show() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.show"]], "subset_intersection() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.subset_intersection"]], "to_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_array"]], "to_bool_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_bool_array"]], "to_set() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_set"]], "kirouac2010 (class in pypath.core.annot)": [[57, "pypath.core.annot.Kirouac2010"]], "__init__() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.__init__"]], "add_complexes_by_inference() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_complexes"]], "all_entities() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_entities"]], "all_mirnas() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_mirnas"]], "all_proteins() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_proteins"]], "all_refs() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_refs"]], "annotate_complex() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.annotate_complex"]], "browse() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.browse"]], "complex_inference() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.complex_inference"]], "coverage() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.coverage"]], "curation_effort() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.curation_effort"]], "get_names() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_names"]], "get_reference_set() (pypath.core.annot.kirouac2010 static method)": [[57, "pypath.core.annot.Kirouac2010.get_reference_set"]], "get_subset() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_subset"]], "get_subset_bool_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_subset_bool_array"]], "get_values() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_values"]], "labels() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.labels"]], "load() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load"]], "load_data() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load_data"]], "load_proteins() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load_proteins"]], "make_df() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.make_df"]], "numof_entities() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_entities"]], "numof_records() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_records"]], "numof_references() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_references"]], "process() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.process"]], "reload() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.reload"]], "select() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.select"]], "set_method() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.set_method"]], "set_reference_set() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.set_reference_set"]], "show() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.show"]], "subset_intersection() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.subset_intersection"]], "to_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_array"]], "to_bool_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_bool_array"]], "to_set() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_set"]], "lambert2018 (class in pypath.core.annot)": [[58, "pypath.core.annot.Lambert2018"]], "__init__() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.__init__"]], "add_complexes_by_inference() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_complexes"]], "all_entities() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_entities"]], "all_mirnas() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_mirnas"]], "all_proteins() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_proteins"]], "all_refs() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_refs"]], "annotate_complex() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.annotate_complex"]], "browse() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.browse"]], "complex_inference() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.complex_inference"]], "coverage() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.coverage"]], "curation_effort() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.curation_effort"]], "get_names() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_names"]], "get_reference_set() (pypath.core.annot.lambert2018 static method)": [[58, "pypath.core.annot.Lambert2018.get_reference_set"]], "get_subset() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_subset"]], "get_subset_bool_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_subset_bool_array"]], "get_values() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_values"]], "labels() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.labels"]], "load() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load"]], "load_data() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load_data"]], "load_proteins() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load_proteins"]], "make_df() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.make_df"]], "numof_entities() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_entities"]], "numof_records() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_records"]], "numof_references() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_references"]], "process() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.process"]], "reload() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.reload"]], "select() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.select"]], "set_method() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.set_method"]], "set_reference_set() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.set_reference_set"]], "show() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.show"]], "subset_intersection() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.subset_intersection"]], "to_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_array"]], "to_bool_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_bool_array"]], "to_set() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_set"]], "ligandreceptor (class in pypath.core.annot)": [[59, "pypath.core.annot.LigandReceptor"]], "__init__() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_complexes"]], "all_entities() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_entities"]], "all_mirnas() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_mirnas"]], "all_proteins() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_proteins"]], "all_refs() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_refs"]], "annotate_complex() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.annotate_complex"]], "browse() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.browse"]], "complex_inference() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.complex_inference"]], "coverage() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.coverage"]], "curation_effort() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.curation_effort"]], "get_names() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_names"]], "get_reference_set() (pypath.core.annot.ligandreceptor static method)": [[59, "pypath.core.annot.LigandReceptor.get_reference_set"]], "get_subset() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_subset_bool_array"]], "get_values() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_values"]], "labels() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.labels"]], "load() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load"]], "load_data() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load_data"]], "load_proteins() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load_proteins"]], "make_df() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.make_df"]], "numof_entities() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_entities"]], "numof_records() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_records"]], "numof_references() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_references"]], "process() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.process"]], "reload() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.reload"]], "select() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.select"]], "set_method() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.set_method"]], "set_reference_set() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.set_reference_set"]], "show() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.show"]], "subset_intersection() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.subset_intersection"]], "to_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_array"]], "to_bool_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_bool_array"]], "to_set() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_set"]], "locate (class in pypath.core.annot)": [[60, "pypath.core.annot.Locate"]], "__init__() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.__init__"]], "add_complexes_by_inference() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_complexes"]], "all_entities() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_entities"]], "all_mirnas() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_mirnas"]], "all_proteins() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_proteins"]], "all_refs() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_refs"]], "annotate_complex() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.annotate_complex"]], "browse() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.browse"]], "complex_inference() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.complex_inference"]], "coverage() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.coverage"]], "curation_effort() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.curation_effort"]], "get_names() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_names"]], "get_reference_set() (pypath.core.annot.locate static method)": [[60, "pypath.core.annot.Locate.get_reference_set"]], "get_subset() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_subset"]], "get_subset_bool_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_subset_bool_array"]], "get_values() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_values"]], "labels() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.labels"]], "load() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load"]], "load_data() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load_data"]], "load_proteins() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load_proteins"]], "make_df() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.make_df"]], "numof_entities() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_entities"]], "numof_records() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_records"]], "numof_references() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_references"]], "process() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.process"]], "reload() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.reload"]], "select() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.select"]], "set_method() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.set_method"]], "set_reference_set() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.set_reference_set"]], "show() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.show"]], "subset_intersection() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.subset_intersection"]], "to_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_array"]], "to_bool_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_bool_array"]], "to_set() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_set"]], "lrdb (class in pypath.core.annot)": [[61, "pypath.core.annot.Lrdb"]], "__init__() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_complexes"]], "all_entities() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_entities"]], "all_mirnas() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_mirnas"]], "all_proteins() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_proteins"]], "all_refs() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_refs"]], "annotate_complex() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.annotate_complex"]], "browse() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.browse"]], "complex_inference() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.complex_inference"]], "coverage() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.coverage"]], "curation_effort() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.curation_effort"]], "get_names() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_names"]], "get_reference_set() (pypath.core.annot.lrdb static method)": [[61, "pypath.core.annot.Lrdb.get_reference_set"]], "get_subset() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_values"]], "labels() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.labels"]], "load() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load"]], "load_data() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load_data"]], "load_proteins() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load_proteins"]], "make_df() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.make_df"]], "numof_entities() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_entities"]], "numof_records() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_records"]], "numof_references() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_references"]], "process() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.process"]], "reload() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.reload"]], "select() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.select"]], "set_method() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.set_method"]], "set_reference_set() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.set_reference_set"]], "show() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.show"]], "subset_intersection() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.subset_intersection"]], "to_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_array"]], "to_bool_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_bool_array"]], "to_set() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_set"]], "matrisome (class in pypath.core.annot)": [[62, "pypath.core.annot.Matrisome"]], "__init__() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_complexes"]], "all_entities() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_entities"]], "all_mirnas() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_mirnas"]], "all_proteins() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_proteins"]], "all_refs() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_refs"]], "annotate_complex() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.annotate_complex"]], "browse() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.browse"]], "complex_inference() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.complex_inference"]], "coverage() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.coverage"]], "curation_effort() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.curation_effort"]], "get_names() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_names"]], "get_reference_set() (pypath.core.annot.matrisome static method)": [[62, "pypath.core.annot.Matrisome.get_reference_set"]], "get_subset() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_subset_bool_array"]], "get_values() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_values"]], "labels() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.labels"]], "load() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load"]], "load_data() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load_data"]], "load_proteins() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load_proteins"]], "make_df() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.make_df"]], "numof_entities() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_entities"]], "numof_records() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_records"]], "numof_references() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_references"]], "process() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.process"]], "reload() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.reload"]], "select() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.select"]], "set_method() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.set_method"]], "set_reference_set() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.set_reference_set"]], "show() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.show"]], "subset_intersection() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.subset_intersection"]], "to_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_array"]], "to_bool_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_bool_array"]], "to_set() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_set"]], "matrixdb (class in pypath.core.annot)": [[63, "pypath.core.annot.Matrixdb"]], "__init__() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_complexes"]], "all_entities() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_entities"]], "all_mirnas() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_mirnas"]], "all_proteins() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_proteins"]], "all_refs() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_refs"]], "annotate_complex() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.annotate_complex"]], "browse() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.browse"]], "complex_inference() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.complex_inference"]], "coverage() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.coverage"]], "curation_effort() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.curation_effort"]], "get_names() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_names"]], "get_reference_set() (pypath.core.annot.matrixdb static method)": [[63, "pypath.core.annot.Matrixdb.get_reference_set"]], "get_subset() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_values"]], "labels() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.labels"]], "load() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load"]], "load_data() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load_data"]], "load_proteins() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load_proteins"]], "make_df() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.make_df"]], "numof_entities() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_entities"]], "numof_records() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_records"]], "numof_references() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_references"]], "process() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.process"]], "reload() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.reload"]], "select() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.select"]], "set_method() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.set_method"]], "set_reference_set() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.set_reference_set"]], "show() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.show"]], "subset_intersection() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.subset_intersection"]], "to_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_array"]], "to_bool_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_bool_array"]], "to_set() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_set"]], "mcam (class in pypath.core.annot)": [[64, "pypath.core.annot.Mcam"]], "__init__() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.__init__"]], "add_complexes_by_inference() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_complexes"]], "all_entities() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_entities"]], "all_mirnas() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_mirnas"]], "all_proteins() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_proteins"]], "all_refs() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_refs"]], "annotate_complex() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.annotate_complex"]], "browse() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.browse"]], "complex_inference() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.complex_inference"]], "coverage() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.coverage"]], "curation_effort() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.curation_effort"]], "get_names() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_names"]], "get_reference_set() (pypath.core.annot.mcam static method)": [[64, "pypath.core.annot.Mcam.get_reference_set"]], "get_subset() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_subset"]], "get_subset_bool_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_subset_bool_array"]], "get_values() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_values"]], "labels() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.labels"]], "load() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load"]], "load_data() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load_data"]], "load_proteins() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load_proteins"]], "make_df() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.make_df"]], "numof_entities() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_entities"]], "numof_records() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_records"]], "numof_references() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_references"]], "process() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.process"]], "reload() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.reload"]], "select() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.select"]], "set_method() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.set_method"]], "set_reference_set() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.set_reference_set"]], "show() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.show"]], "subset_intersection() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.subset_intersection"]], "to_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_array"]], "to_bool_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_bool_array"]], "to_set() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_set"]], "membranome (class in pypath.core.annot)": [[65, "pypath.core.annot.Membranome"]], "__init__() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_complexes"]], "all_entities() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_entities"]], "all_mirnas() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_mirnas"]], "all_proteins() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_proteins"]], "all_refs() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_refs"]], "annotate_complex() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.annotate_complex"]], "browse() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.browse"]], "complex_inference() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.complex_inference"]], "coverage() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.coverage"]], "curation_effort() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.curation_effort"]], "get_names() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_names"]], "get_reference_set() (pypath.core.annot.membranome static method)": [[65, "pypath.core.annot.Membranome.get_reference_set"]], "get_subset() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_subset_bool_array"]], "get_values() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_values"]], "labels() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.labels"]], "load() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load"]], "load_data() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load_data"]], "load_proteins() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load_proteins"]], "make_df() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.make_df"]], "numof_entities() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_entities"]], "numof_records() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_records"]], "numof_references() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_references"]], "process() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.process"]], "reload() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.reload"]], "select() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.select"]], "set_method() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.set_method"]], "set_reference_set() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.set_reference_set"]], "show() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.show"]], "subset_intersection() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.subset_intersection"]], "to_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_array"]], "to_bool_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_bool_array"]], "to_set() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_set"]], "msigdb (class in pypath.core.annot)": [[66, "pypath.core.annot.Msigdb"]], "__init__() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_complexes"]], "all_entities() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_entities"]], "all_mirnas() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_mirnas"]], "all_proteins() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_proteins"]], "all_refs() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_refs"]], "annotate_complex() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.annotate_complex"]], "browse() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.browse"]], "complex_inference() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.complex_inference"]], "coverage() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.coverage"]], "curation_effort() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.curation_effort"]], "get_names() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_names"]], "get_reference_set() (pypath.core.annot.msigdb static method)": [[66, "pypath.core.annot.Msigdb.get_reference_set"]], "get_subset() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_values"]], "labels() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.labels"]], "load() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load"]], "load_data() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load_data"]], "load_proteins() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load_proteins"]], "make_df() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.make_df"]], "numof_entities() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_entities"]], "numof_records() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_records"]], "numof_references() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_references"]], "process() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.process"]], "reload() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.reload"]], "select() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.select"]], "set_method() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.set_method"]], "set_reference_set() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.set_reference_set"]], "show() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.show"]], "subset_intersection() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.subset_intersection"]], "to_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_array"]], "to_bool_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_bool_array"]], "to_set() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_set"]], "netpathpathways (class in pypath.core.annot)": [[67, "pypath.core.annot.NetpathPathways"]], "__init__() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_complexes"]], "all_entities() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_entities"]], "all_mirnas() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_proteins"]], "all_refs() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_refs"]], "annotate_complex() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.annotate_complex"]], "browse() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.browse"]], "complex_inference() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.complex_inference"]], "coverage() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.coverage"]], "curation_effort() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.curation_effort"]], "get_names() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_names"]], "get_reference_set() (pypath.core.annot.netpathpathways static method)": [[67, "pypath.core.annot.NetpathPathways.get_reference_set"]], "get_subset() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_values"]], "labels() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.labels"]], "load() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load"]], "load_data() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load_data"]], "load_proteins() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load_proteins"]], "make_df() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.make_df"]], "numof_entities() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_entities"]], "numof_records() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_records"]], "numof_references() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_references"]], "process() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.process"]], "reload() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.reload"]], "select() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.select"]], "set_method() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.set_method"]], "set_reference_set() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.set_reference_set"]], "show() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.show"]], "subset_intersection() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.subset_intersection"]], "to_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_array"]], "to_bool_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_bool_array"]], "to_set() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_set"]], "opm (class in pypath.core.annot)": [[68, "pypath.core.annot.Opm"]], "__init__() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.__init__"]], "add_complexes_by_inference() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_complexes"]], "all_entities() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_entities"]], "all_mirnas() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_mirnas"]], "all_proteins() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_proteins"]], "all_refs() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_refs"]], "annotate_complex() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.annotate_complex"]], "browse() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.browse"]], "complex_inference() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.complex_inference"]], "coverage() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.coverage"]], "curation_effort() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.curation_effort"]], "get_names() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_names"]], "get_reference_set() (pypath.core.annot.opm static method)": [[68, "pypath.core.annot.Opm.get_reference_set"]], "get_subset() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_subset"]], "get_subset_bool_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_subset_bool_array"]], "get_values() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_values"]], "labels() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.labels"]], "load() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load"]], "load_data() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load_data"]], "load_proteins() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load_proteins"]], "make_df() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.make_df"]], "numof_entities() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_entities"]], "numof_records() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_records"]], "numof_references() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_references"]], "process() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.process"]], "reload() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.reload"]], "select() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.select"]], "set_method() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.set_method"]], "set_reference_set() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.set_reference_set"]], "show() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.show"]], "subset_intersection() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.subset_intersection"]], "to_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_array"]], "to_bool_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_bool_array"]], "to_set() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_set"]], "panglaodb (class in pypath.core.annot)": [[69, "pypath.core.annot.Panglaodb"]], "__init__() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_complexes"]], "all_entities() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_entities"]], "all_mirnas() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_mirnas"]], "all_proteins() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_proteins"]], "all_refs() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_refs"]], "annotate_complex() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.annotate_complex"]], "browse() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.browse"]], "complex_inference() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.complex_inference"]], "coverage() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.coverage"]], "curation_effort() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.curation_effort"]], "get_names() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_names"]], "get_reference_set() (pypath.core.annot.panglaodb static method)": [[69, "pypath.core.annot.Panglaodb.get_reference_set"]], "get_subset() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_subset_bool_array"]], "get_values() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_values"]], "labels() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.labels"]], "load() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load"]], "load_data() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load_data"]], "load_proteins() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load_proteins"]], "make_df() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.make_df"]], "numof_entities() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_entities"]], "numof_records() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_records"]], "numof_references() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_references"]], "process() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.process"]], "reload() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.reload"]], "select() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.select"]], "set_method() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.set_method"]], "set_reference_set() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.set_reference_set"]], "show() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.show"]], "subset_intersection() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.subset_intersection"]], "to_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_array"]], "to_bool_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_bool_array"]], "to_set() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_set"]], "phobius (class in pypath.core.annot)": [[70, "pypath.core.annot.Phobius"]], "__init__() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.__init__"]], "add_complexes_by_inference() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_complexes"]], "all_entities() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_entities"]], "all_mirnas() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_mirnas"]], "all_proteins() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_proteins"]], "all_refs() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_refs"]], "annotate_complex() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.annotate_complex"]], "browse() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.browse"]], "complex_inference() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.complex_inference"]], "coverage() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.coverage"]], "curation_effort() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.curation_effort"]], "get_names() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_names"]], "get_reference_set() (pypath.core.annot.phobius static method)": [[70, "pypath.core.annot.Phobius.get_reference_set"]], "get_subset() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_subset"]], "get_subset_bool_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_subset_bool_array"]], "get_values() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_values"]], "labels() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.labels"]], "load() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load"]], "load_data() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load_data"]], "load_proteins() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load_proteins"]], "make_df() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.make_df"]], "numof_entities() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_entities"]], "numof_records() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_records"]], "numof_references() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_references"]], "process() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.process"]], "reload() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.reload"]], "select() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.select"]], "set_method() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.set_method"]], "set_reference_set() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.set_reference_set"]], "show() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.show"]], "subset_intersection() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.subset_intersection"]], "to_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_array"]], "to_bool_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_bool_array"]], "to_set() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_set"]], "phosphatome (class in pypath.core.annot)": [[71, "pypath.core.annot.Phosphatome"]], "__init__() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_complexes"]], "all_entities() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_entities"]], "all_mirnas() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_mirnas"]], "all_proteins() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_proteins"]], "all_refs() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_refs"]], "annotate_complex() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.annotate_complex"]], "browse() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.browse"]], "complex_inference() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.complex_inference"]], "coverage() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.coverage"]], "curation_effort() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.curation_effort"]], "get_names() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_names"]], "get_reference_set() (pypath.core.annot.phosphatome static method)": [[71, "pypath.core.annot.Phosphatome.get_reference_set"]], "get_subset() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_subset_bool_array"]], "get_values() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_values"]], "labels() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.labels"]], "load() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load"]], "load_data() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load_data"]], "load_proteins() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load_proteins"]], "make_df() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.make_df"]], "numof_entities() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_entities"]], "numof_records() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_records"]], "numof_references() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_references"]], "process() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.process"]], "reload() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.reload"]], "select() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.select"]], "set_method() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.set_method"]], "set_reference_set() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.set_reference_set"]], "show() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.show"]], "subset_intersection() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.subset_intersection"]], "to_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_array"]], "to_bool_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_bool_array"]], "to_set() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_set"]], "progeny (class in pypath.core.annot)": [[72, "pypath.core.annot.Progeny"]], "__init__() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.__init__"]], "add_complexes_by_inference() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_complexes"]], "all_entities() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_entities"]], "all_mirnas() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_mirnas"]], "all_proteins() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_proteins"]], "all_refs() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_refs"]], "annotate_complex() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.annotate_complex"]], "browse() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.browse"]], "complex_inference() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.complex_inference"]], "coverage() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.coverage"]], "curation_effort() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.curation_effort"]], "get_names() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_names"]], "get_reference_set() (pypath.core.annot.progeny static method)": [[72, "pypath.core.annot.Progeny.get_reference_set"]], "get_subset() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_subset"]], "get_subset_bool_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_subset_bool_array"]], "get_values() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_values"]], "labels() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.labels"]], "load() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load"]], "load_data() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load_data"]], "load_proteins() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load_proteins"]], "make_df() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.make_df"]], "numof_entities() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_entities"]], "numof_records() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_records"]], "numof_references() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_references"]], "process() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.process"]], "reload() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.reload"]], "select() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.select"]], "set_method() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.set_method"]], "set_reference_set() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.set_reference_set"]], "show() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.show"]], "subset_intersection() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.subset_intersection"]], "to_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_array"]], "to_bool_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_bool_array"]], "to_set() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_set"]], "ramilowski2015 (class in pypath.core.annot)": [[73, "pypath.core.annot.Ramilowski2015"]], "__init__() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_complexes"]], "all_entities() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_entities"]], "all_mirnas() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_mirnas"]], "all_proteins() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_proteins"]], "all_refs() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_refs"]], "annotate_complex() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.annotate_complex"]], "browse() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.browse"]], "complex_inference() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.complex_inference"]], "coverage() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.coverage"]], "curation_effort() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.curation_effort"]], "get_names() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_names"]], "get_reference_set() (pypath.core.annot.ramilowski2015 static method)": [[73, "pypath.core.annot.Ramilowski2015.get_reference_set"]], "get_subset() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_subset_bool_array"]], "get_values() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_values"]], "labels() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.labels"]], "load() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load"]], "load_data() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load_data"]], "load_proteins() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load_proteins"]], "make_df() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.make_df"]], "numof_entities() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_entities"]], "numof_records() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_records"]], "numof_references() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_references"]], "process() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.process"]], "reload() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.reload"]], "select() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.select"]], "set_method() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.set_method"]], "set_reference_set() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.set_reference_set"]], "show() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.show"]], "subset_intersection() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.subset_intersection"]], "to_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_array"]], "to_bool_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_bool_array"]], "to_set() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_set"]], "ramilowski2015location (class in pypath.core.annot)": [[74, "pypath.core.annot.Ramilowski2015Location"]], "__init__() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_complexes"]], "all_entities() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_entities"]], "all_mirnas() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_mirnas"]], "all_proteins() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_proteins"]], "all_refs() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_refs"]], "annotate_complex() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.annotate_complex"]], "browse() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.browse"]], "complex_inference() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.complex_inference"]], "coverage() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.coverage"]], "curation_effort() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.curation_effort"]], "get_names() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_names"]], "get_reference_set() (pypath.core.annot.ramilowski2015location static method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_reference_set"]], "get_subset() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_subset_bool_array"]], "get_values() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_values"]], "labels() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.labels"]], "load() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load"]], "load_data() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load_data"]], "load_proteins() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load_proteins"]], "make_df() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.make_df"]], "numof_entities() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_entities"]], "numof_records() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_records"]], "numof_references() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_references"]], "process() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.process"]], "reload() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.reload"]], "select() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.select"]], "set_method() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.set_method"]], "set_reference_set() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.set_reference_set"]], "show() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.show"]], "subset_intersection() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.subset_intersection"]], "to_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_array"]], "to_bool_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_bool_array"]], "to_set() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_set"]], "scconnect (class in pypath.core.annot)": [[75, "pypath.core.annot.Scconnect"]], "__init__() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.__init__"]], "add_complexes_by_inference() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_complexes"]], "all_entities() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_entities"]], "all_mirnas() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_mirnas"]], "all_proteins() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_proteins"]], "all_refs() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_refs"]], "annotate_complex() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.annotate_complex"]], "browse() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.browse"]], "complex_inference() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.complex_inference"]], "coverage() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.coverage"]], "curation_effort() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.curation_effort"]], "get_names() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_names"]], "get_reference_set() (pypath.core.annot.scconnect static method)": [[75, "pypath.core.annot.Scconnect.get_reference_set"]], "get_subset() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_subset"]], "get_subset_bool_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_subset_bool_array"]], "get_values() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_values"]], "labels() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.labels"]], "load() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load"]], "load_data() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load_data"]], "load_proteins() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load_proteins"]], "make_df() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.make_df"]], "numof_entities() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_entities"]], "numof_records() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_records"]], "numof_references() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_references"]], "process() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.process"]], "reload() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.reload"]], "select() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.select"]], "set_method() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.set_method"]], "set_reference_set() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.set_reference_set"]], "show() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.show"]], "subset_intersection() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.subset_intersection"]], "to_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_array"]], "to_bool_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_bool_array"]], "to_set() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_set"]], "scconnectcomplex (class in pypath.core.annot)": [[76, "pypath.core.annot.ScconnectComplex"]], "__init__() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_complexes"]], "all_entities() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_entities"]], "all_mirnas() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_proteins"]], "all_refs() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_refs"]], "annotate_complex() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.annotate_complex"]], "browse() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.browse"]], "complex_inference() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.complex_inference"]], "coverage() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.coverage"]], "curation_effort() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.curation_effort"]], "get_names() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_names"]], "get_reference_set() (pypath.core.annot.scconnectcomplex static method)": [[76, "pypath.core.annot.ScconnectComplex.get_reference_set"]], "get_subset() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_values"]], "labels() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.labels"]], "load() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load"]], "load_data() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load_data"]], "load_proteins() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load_proteins"]], "make_df() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.make_df"]], "numof_entities() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_entities"]], "numof_records() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_records"]], "numof_references() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_references"]], "process() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.process"]], "reload() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.reload"]], "select() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.select"]], "set_method() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.set_method"]], "set_reference_set() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.set_reference_set"]], "show() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.show"]], "subset_intersection() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.subset_intersection"]], "to_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_array"]], "to_bool_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_bool_array"]], "to_set() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_set"]], "signalinkfunctions (class in pypath.core.annot)": [[77, "pypath.core.annot.SignalinkFunctions"]], "__init__() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_complexes"]], "all_entities() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_entities"]], "all_mirnas() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_mirnas"]], "all_proteins() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_proteins"]], "all_refs() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_refs"]], "annotate_complex() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.annotate_complex"]], "browse() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.browse"]], "complex_inference() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.complex_inference"]], "coverage() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.coverage"]], "curation_effort() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.curation_effort"]], "get_names() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_names"]], "get_reference_set() (pypath.core.annot.signalinkfunctions static method)": [[77, "pypath.core.annot.SignalinkFunctions.get_reference_set"]], "get_subset() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_subset_bool_array"]], "get_values() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_values"]], "labels() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.labels"]], "load() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load"]], "load_data() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load_data"]], "load_proteins() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load_proteins"]], "make_df() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.make_df"]], "numof_entities() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_entities"]], "numof_records() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_records"]], "numof_references() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_references"]], "process() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.process"]], "reload() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.reload"]], "select() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.select"]], "set_method() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.set_method"]], "set_reference_set() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.set_reference_set"]], "show() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.show"]], "subset_intersection() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.subset_intersection"]], "to_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_array"]], "to_bool_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_bool_array"]], "to_set() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_set"]], "signalinkpathways (class in pypath.core.annot)": [[78, "pypath.core.annot.SignalinkPathways"]], "__init__() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_complexes"]], "all_entities() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_entities"]], "all_mirnas() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_proteins"]], "all_refs() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_refs"]], "annotate_complex() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.annotate_complex"]], "browse() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.browse"]], "complex_inference() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.complex_inference"]], "coverage() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.coverage"]], "curation_effort() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.curation_effort"]], "get_names() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_names"]], "get_reference_set() (pypath.core.annot.signalinkpathways static method)": [[78, "pypath.core.annot.SignalinkPathways.get_reference_set"]], "get_subset() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_values"]], "labels() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.labels"]], "load() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load"]], "load_data() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load_data"]], "load_proteins() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load_proteins"]], "make_df() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.make_df"]], "numof_entities() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_entities"]], "numof_records() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_records"]], "numof_references() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_references"]], "process() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.process"]], "reload() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.reload"]], "select() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.select"]], "set_method() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.set_method"]], "set_reference_set() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.set_reference_set"]], "show() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.show"]], "subset_intersection() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.subset_intersection"]], "to_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_array"]], "to_bool_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_bool_array"]], "to_set() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_set"]], "signorpathways (class in pypath.core.annot)": [[79, "pypath.core.annot.SignorPathways"]], "__init__() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_complexes"]], "all_entities() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_entities"]], "all_mirnas() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_proteins"]], "all_refs() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_refs"]], "annotate_complex() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.annotate_complex"]], "browse() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.browse"]], "complex_inference() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.complex_inference"]], "coverage() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.coverage"]], "curation_effort() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.curation_effort"]], "get_names() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_names"]], "get_reference_set() (pypath.core.annot.signorpathways static method)": [[79, "pypath.core.annot.SignorPathways.get_reference_set"]], "get_subset() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_values"]], "labels() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.labels"]], "load() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load"]], "load_data() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load_data"]], "load_proteins() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load_proteins"]], "make_df() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.make_df"]], "numof_entities() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_entities"]], "numof_records() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_records"]], "numof_references() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_references"]], "process() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.process"]], "reload() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.reload"]], "select() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.select"]], "set_method() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.set_method"]], "set_reference_set() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.set_reference_set"]], "show() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.show"]], "subset_intersection() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.subset_intersection"]], "to_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_array"]], "to_bool_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_bool_array"]], "to_set() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_set"]], "surfaceome (class in pypath.core.annot)": [[80, "pypath.core.annot.Surfaceome"]], "__init__() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_complexes"]], "all_entities() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_entities"]], "all_mirnas() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_mirnas"]], "all_proteins() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_proteins"]], "all_refs() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_refs"]], "annotate_complex() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.annotate_complex"]], "browse() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.browse"]], "complex_inference() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.complex_inference"]], "coverage() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.coverage"]], "curation_effort() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.curation_effort"]], "get_names() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_names"]], "get_reference_set() (pypath.core.annot.surfaceome static method)": [[80, "pypath.core.annot.Surfaceome.get_reference_set"]], "get_subset() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_subset_bool_array"]], "get_values() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_values"]], "labels() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.labels"]], "load() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load"]], "load_data() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load_data"]], "load_proteins() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load_proteins"]], "make_df() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.make_df"]], "numof_entities() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_entities"]], "numof_records() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_records"]], "numof_references() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_references"]], "process() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.process"]], "reload() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.reload"]], "select() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.select"]], "set_method() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.set_method"]], "set_reference_set() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.set_reference_set"]], "show() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.show"]], "subset_intersection() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.subset_intersection"]], "to_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_array"]], "to_bool_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_bool_array"]], "to_set() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_set"]], "talklr (class in pypath.core.annot)": [[81, "pypath.core.annot.Talklr"]], "__init__() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.__init__"]], "add_complexes_by_inference() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_complexes"]], "all_entities() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_entities"]], "all_mirnas() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_mirnas"]], "all_proteins() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_proteins"]], "all_refs() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_refs"]], "annotate_complex() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.annotate_complex"]], "browse() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.browse"]], "complex_inference() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.complex_inference"]], "coverage() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.coverage"]], "curation_effort() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.curation_effort"]], "get_names() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_names"]], "get_reference_set() (pypath.core.annot.talklr static method)": [[81, "pypath.core.annot.Talklr.get_reference_set"]], "get_subset() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_subset"]], "get_subset_bool_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_subset_bool_array"]], "get_values() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_values"]], "labels() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.labels"]], "load() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load"]], "load_data() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load_data"]], "load_proteins() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load_proteins"]], "make_df() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.make_df"]], "numof_entities() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_entities"]], "numof_records() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_records"]], "numof_references() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_references"]], "process() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.process"]], "reload() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.reload"]], "select() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.select"]], "set_method() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.set_method"]], "set_reference_set() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.set_reference_set"]], "show() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.show"]], "subset_intersection() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.subset_intersection"]], "to_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_array"]], "to_bool_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_bool_array"]], "to_set() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_set"]], "tcdb (class in pypath.core.annot)": [[82, "pypath.core.annot.Tcdb"]], "__init__() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_complexes"]], "all_entities() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_entities"]], "all_mirnas() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_mirnas"]], "all_proteins() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_proteins"]], "all_refs() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_refs"]], "annotate_complex() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.annotate_complex"]], "browse() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.browse"]], "complex_inference() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.complex_inference"]], "coverage() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.coverage"]], "curation_effort() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.curation_effort"]], "get_names() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_names"]], "get_reference_set() (pypath.core.annot.tcdb static method)": [[82, "pypath.core.annot.Tcdb.get_reference_set"]], "get_subset() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_values"]], "labels() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.labels"]], "load() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load"]], "load_data() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load_data"]], "load_proteins() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load_proteins"]], "make_df() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.make_df"]], "numof_entities() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_entities"]], "numof_records() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_records"]], "numof_references() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_references"]], "process() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.process"]], "reload() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.reload"]], "select() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.select"]], "set_method() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.set_method"]], "set_reference_set() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.set_reference_set"]], "show() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.show"]], "subset_intersection() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.subset_intersection"]], "to_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_array"]], "to_bool_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_bool_array"]], "to_set() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_set"]], "tfcensus (class in pypath.core.annot)": [[83, "pypath.core.annot.Tfcensus"]], "__init__() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.__init__"]], "add_complexes_by_inference() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_complexes"]], "all_entities() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_entities"]], "all_mirnas() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_mirnas"]], "all_proteins() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_proteins"]], "all_refs() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_refs"]], "annotate_complex() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.annotate_complex"]], "browse() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.browse"]], "complex_inference() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.complex_inference"]], "coverage() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.coverage"]], "curation_effort() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.curation_effort"]], "get_names() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_names"]], "get_reference_set() (pypath.core.annot.tfcensus static method)": [[83, "pypath.core.annot.Tfcensus.get_reference_set"]], "get_subset() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_subset"]], "get_subset_bool_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_subset_bool_array"]], "get_values() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_values"]], "labels() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.labels"]], "load() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load"]], "load_data() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load_data"]], "load_proteins() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load_proteins"]], "make_df() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.make_df"]], "numof_entities() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_entities"]], "numof_records() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_records"]], "numof_references() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_references"]], "process() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.process"]], "reload() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.reload"]], "select() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.select"]], "set_method() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.set_method"]], "set_reference_set() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.set_reference_set"]], "show() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.show"]], "subset_intersection() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.subset_intersection"]], "to_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_array"]], "to_bool_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_bool_array"]], "to_set() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_set"]], "topdb (class in pypath.core.annot)": [[84, "pypath.core.annot.Topdb"]], "__init__() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_complexes"]], "all_entities() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_entities"]], "all_mirnas() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_mirnas"]], "all_proteins() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_proteins"]], "all_refs() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_refs"]], "annotate_complex() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.annotate_complex"]], "browse() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.browse"]], "complex_inference() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.complex_inference"]], "coverage() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.coverage"]], "curation_effort() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.curation_effort"]], "get_names() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_names"]], "get_reference_set() (pypath.core.annot.topdb static method)": [[84, "pypath.core.annot.Topdb.get_reference_set"]], "get_subset() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_values"]], "labels() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.labels"]], "load() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load"]], "load_data() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load_data"]], "load_proteins() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load_proteins"]], "make_df() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.make_df"]], "numof_entities() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_entities"]], "numof_records() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_records"]], "numof_references() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_references"]], "process() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.process"]], "reload() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.reload"]], "select() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.select"]], "set_method() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.set_method"]], "set_reference_set() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.set_reference_set"]], "show() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.show"]], "subset_intersection() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.subset_intersection"]], "to_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_array"]], "to_bool_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_bool_array"]], "to_set() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_set"]], "uniprotfamilies (class in pypath.core.annot)": [[85, "pypath.core.annot.UniprotFamilies"]], "__init__() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_complexes"]], "all_entities() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_proteins"]], "all_refs() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.annotate_complex"]], "browse() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.browse"]], "complex_inference() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.complex_inference"]], "coverage() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.coverage"]], "curation_effort() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.curation_effort"]], "get_names() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_names"]], "get_reference_set() (pypath.core.annot.uniprotfamilies static method)": [[85, "pypath.core.annot.UniprotFamilies.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_values"]], "labels() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.labels"]], "load() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load"]], "load_data() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load_data"]], "load_proteins() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load_proteins"]], "make_df() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.make_df"]], "numof_entities() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_entities"]], "numof_records() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_records"]], "numof_references() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_references"]], "process() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.process"]], "reload() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.reload"]], "select() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.select"]], "set_method() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.set_method"]], "set_reference_set() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.set_reference_set"]], "show() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.show"]], "subset_intersection() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.subset_intersection"]], "to_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_array"]], "to_bool_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_bool_array"]], "to_set() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_set"]], "uniprotkeywords (class in pypath.core.annot)": [[86, "pypath.core.annot.UniprotKeywords"]], "__init__() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_complexes"]], "all_entities() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_proteins"]], "all_refs() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.annotate_complex"]], "browse() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.browse"]], "complex_inference() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.complex_inference"]], "coverage() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.coverage"]], "curation_effort() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.curation_effort"]], "get_names() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_names"]], "get_reference_set() (pypath.core.annot.uniprotkeywords static method)": [[86, "pypath.core.annot.UniprotKeywords.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_values"]], "labels() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.labels"]], "load() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load"]], "load_data() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load_data"]], "load_proteins() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load_proteins"]], "make_df() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.make_df"]], "numof_entities() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_entities"]], "numof_records() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_records"]], "numof_references() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_references"]], "process() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.process"]], "reload() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.reload"]], "select() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.select"]], "set_method() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.set_method"]], "set_reference_set() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.set_reference_set"]], "show() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.show"]], "subset_intersection() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.subset_intersection"]], "to_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_array"]], "to_bool_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_bool_array"]], "to_set() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_set"]], "uniprotlocations (class in pypath.core.annot)": [[87, "pypath.core.annot.UniprotLocations"]], "__init__() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_complexes"]], "all_entities() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_proteins"]], "all_refs() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.annotate_complex"]], "browse() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.browse"]], "complex_inference() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.complex_inference"]], "coverage() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.coverage"]], "curation_effort() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.curation_effort"]], "get_names() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_names"]], "get_reference_set() (pypath.core.annot.uniprotlocations static method)": [[87, "pypath.core.annot.UniprotLocations.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_values"]], "labels() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.labels"]], "load() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load"]], "load_data() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load_data"]], "load_proteins() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load_proteins"]], "make_df() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.make_df"]], "numof_entities() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_entities"]], "numof_records() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_records"]], "numof_references() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_references"]], "process() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.process"]], "reload() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.reload"]], "select() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.select"]], "set_method() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.set_method"]], "set_reference_set() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.set_reference_set"]], "show() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.show"]], "subset_intersection() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.subset_intersection"]], "to_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_array"]], "to_bool_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_bool_array"]], "to_set() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_set"]], "uniprottissues (class in pypath.core.annot)": [[88, "pypath.core.annot.UniprotTissues"]], "__init__() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_complexes"]], "all_entities() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_entities"]], "all_mirnas() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_proteins"]], "all_refs() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_refs"]], "annotate_complex() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.annotate_complex"]], "browse() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.browse"]], "complex_inference() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.complex_inference"]], "coverage() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.coverage"]], "curation_effort() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.curation_effort"]], "get_names() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_names"]], "get_reference_set() (pypath.core.annot.uniprottissues static method)": [[88, "pypath.core.annot.UniprotTissues.get_reference_set"]], "get_subset() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_values"]], "labels() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.labels"]], "load() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load"]], "load_data() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load_data"]], "load_proteins() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load_proteins"]], "make_df() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.make_df"]], "numof_entities() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_entities"]], "numof_records() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_records"]], "numof_references() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_references"]], "process() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.process"]], "reload() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.reload"]], "select() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.select"]], "set_method() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.set_method"]], "set_reference_set() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.set_reference_set"]], "show() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.show"]], "subset_intersection() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.subset_intersection"]], "to_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_array"]], "to_bool_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_bool_array"]], "to_set() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_set"]], "uniprottopologies (class in pypath.core.annot)": [[89, "pypath.core.annot.UniprotTopologies"]], "__init__() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_complexes"]], "all_entities() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_entities"]], "all_mirnas() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_proteins"]], "all_refs() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_refs"]], "annotate_complex() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.annotate_complex"]], "browse() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.browse"]], "complex_inference() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.complex_inference"]], "coverage() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.coverage"]], "curation_effort() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.curation_effort"]], "get_names() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_names"]], "get_reference_set() (pypath.core.annot.uniprottopologies static method)": [[89, "pypath.core.annot.UniprotTopologies.get_reference_set"]], "get_subset() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_values"]], "labels() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.labels"]], "load() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load"]], "load_data() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load_data"]], "load_proteins() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load_proteins"]], "make_df() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.make_df"]], "numof_entities() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_entities"]], "numof_records() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_records"]], "numof_references() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_references"]], "process() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.process"]], "reload() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.reload"]], "select() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.select"]], "set_method() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.set_method"]], "set_reference_set() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.set_reference_set"]], "show() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.show"]], "subset_intersection() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.subset_intersection"]], "to_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_array"]], "to_bool_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_bool_array"]], "to_set() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_set"]], "vesiclepedia (class in pypath.core.annot)": [[90, "pypath.core.annot.Vesiclepedia"]], "__init__() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.__init__"]], "add_complexes_by_inference() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_complexes"]], "all_entities() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_entities"]], "all_mirnas() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_mirnas"]], "all_proteins() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_proteins"]], "all_refs() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_refs"]], "annotate_complex() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.annotate_complex"]], "browse() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.browse"]], "complex_inference() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.complex_inference"]], "coverage() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.coverage"]], "curation_effort() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.curation_effort"]], "get_names() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_names"]], "get_reference_set() (pypath.core.annot.vesiclepedia static method)": [[90, "pypath.core.annot.Vesiclepedia.get_reference_set"]], "get_subset() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_subset"]], "get_subset_bool_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_subset_bool_array"]], "get_values() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_values"]], "labels() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.labels"]], "load() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load"]], "load_data() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load_data"]], "load_proteins() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load_proteins"]], "make_df() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.make_df"]], "numof_entities() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_entities"]], "numof_records() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_records"]], "numof_references() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_references"]], "process() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.process"]], "reload() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.reload"]], "select() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.select"]], "set_method() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.set_method"]], "set_reference_set() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.set_reference_set"]], "show() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.show"]], "subset_intersection() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.subset_intersection"]], "to_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_array"]], "to_bool_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_bool_array"]], "to_set() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_set"]], "wang (class in pypath.core.annot)": [[91, "pypath.core.annot.Wang"]], "__init__() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.__init__"]], "add_complexes_by_inference() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_complexes"]], "all_entities() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_entities"]], "all_mirnas() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_mirnas"]], "all_proteins() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_proteins"]], "all_refs() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_refs"]], "annotate_complex() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.annotate_complex"]], "browse() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.browse"]], "complex_inference() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.complex_inference"]], "coverage() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.coverage"]], "curation_effort() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.curation_effort"]], "get_names() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_names"]], "get_reference_set() (pypath.core.annot.wang static method)": [[91, "pypath.core.annot.Wang.get_reference_set"]], "get_subset() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_subset"]], "get_subset_bool_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_subset_bool_array"]], "get_values() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_values"]], "labels() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.labels"]], "load() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load"]], "load_data() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load_data"]], "load_proteins() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load_proteins"]], "make_df() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.make_df"]], "numof_entities() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_entities"]], "numof_records() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_records"]], "numof_references() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_references"]], "process() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.process"]], "reload() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.reload"]], "select() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.select"]], "set_method() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.set_method"]], "set_reference_set() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.set_reference_set"]], "show() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.show"]], "subset_intersection() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.subset_intersection"]], "to_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_array"]], "to_bool_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_bool_array"]], "to_set() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_set"]], "zhong2015 (class in pypath.core.annot)": [[92, "pypath.core.annot.Zhong2015"]], "__init__() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.__init__"]], "add_complexes_by_inference() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_complexes"]], "all_entities() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_entities"]], "all_mirnas() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_mirnas"]], "all_proteins() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_proteins"]], "all_refs() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_refs"]], "annotate_complex() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.annotate_complex"]], "browse() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.browse"]], "complex_inference() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.complex_inference"]], "coverage() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.coverage"]], "curation_effort() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.curation_effort"]], "get_names() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_names"]], "get_reference_set() (pypath.core.annot.zhong2015 static method)": [[92, "pypath.core.annot.Zhong2015.get_reference_set"]], "get_subset() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_subset"]], "get_subset_bool_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_subset_bool_array"]], "get_values() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_values"]], "labels() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.labels"]], "load() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load"]], "load_data() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load_data"]], "load_proteins() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load_proteins"]], "make_df() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.make_df"]], "numof_entities() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_entities"]], "numof_records() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_records"]], "numof_references() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_references"]], "process() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.process"]], "reload() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.reload"]], "select() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.select"]], "set_method() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.set_method"]], "set_reference_set() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.set_reference_set"]], "show() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.show"]], "subset_intersection() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.subset_intersection"]], "to_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_array"]], "to_bool_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_bool_array"]], "to_set() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_set"]], "get_db() (in module pypath.core.annot)": [[93, "pypath.core.annot.get_db"]], "init_db() (in module pypath.core.annot)": [[94, "pypath.core.annot.init_db"]], "pypath.core.attrs": [[95, "module-pypath.core.attrs"]], "attributehandler (class in pypath.core.attrs)": [[96, "pypath.core.attrs.AttributeHandler"]], "__init__() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.__init__"]], "serialize() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.serialize"]], "update_attrs() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.update_attrs"]], "pypath.core.common": [[97, "module-pypath.core.common"]], "filter_network_df() (in module pypath.core.common)": [[98, "pypath.core.common.filter_network_df"]], "pypath.core.complex": [[99, "module-pypath.core.complex"]], "abstractcomplexresource (class in pypath.core.complex)": [[100, "pypath.core.complex.AbstractComplexResource"]], "__init__() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.__init__"]], "load_data() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.load_data"]], "process() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.process"]], "set_method() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.set_method"]], "cellphonedb (class in pypath.core.complex)": [[101, "pypath.core.complex.CellPhoneDB"]], "__init__() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.__init__"]], "load_data() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.load_data"]], "process() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.process"]], "set_method() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.set_method"]], "cellchatdb (class in pypath.core.complex)": [[102, "pypath.core.complex.Cellchatdb"]], "__init__() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.__init__"]], "load_data() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.load_data"]], "process() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.process"]], "set_method() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.set_method"]], "cellinker (class in pypath.core.complex)": [[103, "pypath.core.complex.Cellinker"]], "__init__() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.__init__"]], "load_data() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.load_data"]], "process() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.process"]], "set_method() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.set_method"]], "compleat (class in pypath.core.complex)": [[104, "pypath.core.complex.Compleat"]], "__init__() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.__init__"]], "load_data() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.load_data"]], "process() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.process"]], "set_method() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.set_method"]], "complexaggregator (class in pypath.core.complex)": [[105, "pypath.core.complex.ComplexAggregator"]], "__init__() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.__init__"]], "load_data() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.load_data"]], "process() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.process"]], "reload() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.reload"]], "set_method() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.set_method"]], "complexportal (class in pypath.core.complex)": [[106, "pypath.core.complex.ComplexPortal"]], "__init__() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.__init__"]], "load_data() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.load_data"]], "process() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.process"]], "set_method() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.set_method"]], "corum (class in pypath.core.complex)": [[107, "pypath.core.complex.Corum"]], "__init__() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.__init__"]], "load_data() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.load_data"]], "process() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.process"]], "set_method() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.set_method"]], "guidetopharmacology (class in pypath.core.complex)": [[108, "pypath.core.complex.GuideToPharmacology"]], "__init__() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.__init__"]], "load_data() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.load_data"]], "process() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.process"]], "set_method() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.set_method"]], "havugimana (class in pypath.core.complex)": [[109, "pypath.core.complex.Havugimana"]], "__init__() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.__init__"]], "load_data() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.load_data"]], "process() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.process"]], "set_method() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.set_method"]], "hpmr (class in pypath.core.complex)": [[110, "pypath.core.complex.Hpmr"]], "__init__() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.__init__"]], "load_data() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.load_data"]], "process() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.process"]], "set_method() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.set_method"]], "humap (class in pypath.core.complex)": [[111, "pypath.core.complex.Humap"]], "__init__() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.__init__"]], "load_data() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.load_data"]], "process() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.process"]], "set_method() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.set_method"]], "humap2 (class in pypath.core.complex)": [[112, "pypath.core.complex.Humap2"]], "__init__() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.__init__"]], "load_data() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.load_data"]], "process() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.process"]], "set_method() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.set_method"]], "icellnet (class in pypath.core.complex)": [[113, "pypath.core.complex.Icellnet"]], "__init__() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.__init__"]], "load_data() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.load_data"]], "process() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.process"]], "set_method() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.set_method"]], "kegg (class in pypath.core.complex)": [[114, "pypath.core.complex.Kegg"]], "__init__() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.__init__"]], "load_data() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.load_data"]], "process() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.process"]], "set_method() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.set_method"]], "pdb (class in pypath.core.complex)": [[115, "pypath.core.complex.Pdb"]], "__init__() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.__init__"]], "load_data() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.load_data"]], "process() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.process"]], "set_method() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.set_method"]], "signor (class in pypath.core.complex)": [[116, "pypath.core.complex.Signor"]], "__init__() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.__init__"]], "load_data() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.load_data"]], "process() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.process"]], "set_method() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.set_method"]], "spike (class in pypath.core.complex)": [[117, "pypath.core.complex.Spike"]], "__init__() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.__init__"]], "load_data() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.load_data"]], "process() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.process"]], "set_method() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.set_method"]], "all_complexes() (in module pypath.core.complex)": [[118, "pypath.core.complex.all_complexes"]], "get_db() (in module pypath.core.complex)": [[119, "pypath.core.complex.get_db"]], "init_db() (in module pypath.core.complex)": [[120, "pypath.core.complex.init_db"]], "pypath.core.entity": [[121, "module-pypath.core.entity"]], "entity (class in pypath.core.entity)": [[122, "pypath.core.entity.Entity"]], "__init__() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.__init__"]], "count_entity_type() (pypath.core.entity.entity class method)": [[122, "pypath.core.entity.Entity.count_entity_type"]], "filter_entity_type() (pypath.core.entity.entity class method)": [[122, "pypath.core.entity.Entity.filter_entity_type"]], "serialize() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.serialize"]], "update_attrs() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.update_attrs"]], "entitykey (class in pypath.core.entity)": [[123, "pypath.core.entity.EntityKey"]], "__init__() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.__init__"]], "count() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.count"]], "entity_type (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.entity_type"]], "id_type (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.id_type"]], "identifier (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.identifier"]], "index() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.index"]], "taxon (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.taxon"]], "entitylist (class in pypath.core.entity)": [[124, "pypath.core.entity.EntityList"]], "__init__() (pypath.core.entity.entitylist method)": [[124, "pypath.core.entity.EntityList.__init__"]], "pypath.core.enz_sub": [[125, "module-pypath.core.enz_sub"]], "enzymesubstrateaggregator (class in pypath.core.enz_sub)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator"]], "__init__() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.__init__"]], "assign_to_network() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.assign_to_network"]], "build_list() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.build_list"]], "unique() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.unique"]], "enzymesubstratehomologyprocessor (class in pypath.core.enz_sub)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor"]], "__init__() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.__init__"]], "asdict() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.asdict"]], "df() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.df"]], "load_data() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.load_data"]], "load_homologene() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.load_homologene"]], "ptm_orthology() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.ptm_orthology"]], "set_inputargs() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.set_inputargs"]], "set_method() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.set_method"]], "translate() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate"]], "translate_df() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate_df"]], "translate_site() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate_site"]], "enzymesubstrateprocessor (class in pypath.core.enz_sub)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor"]], "__init__() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.__init__"]], "load_data() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.load_data"]], "set_inputargs() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.set_inputargs"]], "set_method() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.set_method"]], "get_db() (in module pypath.core.enz_sub)": [[129, "pypath.core.enz_sub.get_db"]], "init_db() (in module pypath.core.enz_sub)": [[130, "pypath.core.enz_sub.init_db"]], "pypath.core.evidence": [[131, "module-pypath.core.evidence"]], "evidence (class in pypath.core.evidence)": [[132, "pypath.core.evidence.Evidence"]], "__init__() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.__init__"]], "has_interaction_type() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.has_interaction_type"]], "merge() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.merge"]], "reload() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.reload"]], "serialize() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.serialize"]], "update_attrs() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.update_attrs"]], "evidences (class in pypath.core.evidence)": [[133, "pypath.core.evidence.Evidences"]], "__init__() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.__init__"]], "has_interaction_type() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.has_interaction_type"]], "items() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.items"]], "keys() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.keys"]], "reload() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.reload"]], "serialize_attrs() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.serialize_attrs"]], "simple_dict (pypath.core.evidence.evidences property)": [[133, "pypath.core.evidence.Evidences.simple_dict"]], "pypath.core.interaction": [[134, "module-pypath.core.interaction"]], "interaction (class in pypath.core.interaction)": [[135, "pypath.core.interaction.Interaction"]], "__init__() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.__init__"]], "add_evidence() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.add_evidence"]], "add_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.add_sign"]], "complex_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_data_model"]], "complex_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type"]], "complex_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type_and_data_model"]], "complex_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "complex_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_reference"]], "complex_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_resource"]], "complex_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_data_model"]], "complex_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type"]], "complex_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type_and_data_model"]], "complex_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type_and_data_model_and_resource"]], "complex_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_reference"]], "complex_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_resource"]], "complexes_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_data_model"]], "complexes_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type"]], "complexes_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type_and_data_model"]], "complexes_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type_and_data_model_and_resource"]], "complexes_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_reference"]], "complexes_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_resource"]], "consensus() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.consensus"]], "consensus_edges() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.consensus_edges"]], "count_complex_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complex_identifiers"]], "count_complex_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complex_labels"]], "count_complexes() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complexes"]], "count_data_models (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_data_models"]], "count_degrees_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed"]], "count_degrees_directed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed_in"]], "count_degrees_directed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed_out"]], "count_degrees_negative (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative"]], "count_degrees_negative_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative_in"]], "count_degrees_negative_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative_out"]], "count_degrees_non_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_non_directed"]], "count_degrees_positive (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive"]], "count_degrees_positive_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive_in"]], "count_degrees_positive_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive_out"]], "count_degrees_signed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed"]], "count_degrees_signed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed_in"]], "count_degrees_signed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed_out"]], "count_degrees_undirected (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_undirected"]], "count_entities() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_entities"]], "count_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_identifiers"]], "count_interaction_types (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_interaction_types"]], "count_interactions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions"]], "count_interactions_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_0"]], "count_interactions_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_directed"]], "count_interactions_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_mutual"]], "count_interactions_negative() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_negative"]], "count_interactions_non_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_non_directed"]], "count_interactions_positive() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_positive"]], "count_interactions_signed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_signed"]], "count_interactions_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_undirected"]], "count_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_labels"]], "count_lncrna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrna_identifiers"]], "count_lncrna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrna_labels"]], "count_lncrnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrnas"]], "count_mirna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirna_identifiers"]], "count_mirna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirna_labels"]], "count_mirnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirnas"]], "count_protein_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_protein_identifiers"]], "count_protein_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_protein_labels"]], "count_proteins() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_proteins"]], "count_references (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_references"]], "count_resource_names (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resource_names"]], "count_resource_names_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resource_names_via"]], "count_resources (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resources"]], "count_resources_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resources_via"]], "count_small_molecule_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecule_identifiers"]], "count_small_molecule_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecule_labels"]], "count_small_molecules() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecules"]], "data_models_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_data_model"]], "data_models_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type"]], "data_models_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type_and_data_model"]], "data_models_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type_and_data_model_and_resource"]], "data_models_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_reference"]], "data_models_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_resource"]], "degrees_directed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_data_model"]], "degrees_directed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type"]], "degrees_directed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type_and_data_model"]], "degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_reference"]], "degrees_directed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_resource"]], "degrees_directed_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_data_model"]], "degrees_directed_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type"]], "degrees_directed_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type_and_data_model"]], "degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_reference"]], "degrees_directed_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_resource"]], "degrees_directed_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_data_model"]], "degrees_directed_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type"]], "degrees_directed_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type_and_data_model"]], "degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_reference"]], "degrees_directed_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_resource"]], "degrees_negative_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_data_model"]], "degrees_negative_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type"]], "degrees_negative_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type_and_data_model"]], "degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_reference"]], "degrees_negative_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_resource"]], "degrees_negative_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_data_model"]], "degrees_negative_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type"]], "degrees_negative_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type_and_data_model"]], "degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_reference"]], "degrees_negative_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_resource"]], "degrees_negative_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_data_model"]], "degrees_negative_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type"]], "degrees_negative_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type_and_data_model"]], "degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_reference"]], "degrees_negative_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_resource"]], "degrees_non_directed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_data_model"]], "degrees_non_directed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type"]], "degrees_non_directed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type_and_data_model"]], "degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_non_directed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_reference"]], "degrees_non_directed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_resource"]], "degrees_positive_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_data_model"]], "degrees_positive_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type"]], "degrees_positive_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type_and_data_model"]], "degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_reference"]], "degrees_positive_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_resource"]], "degrees_positive_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_data_model"]], "degrees_positive_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type"]], "degrees_positive_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type_and_data_model"]], "degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_reference"]], "degrees_positive_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_resource"]], "degrees_positive_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_data_model"]], "degrees_positive_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type"]], "degrees_positive_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type_and_data_model"]], "degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_reference"]], "degrees_positive_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_resource"]], "degrees_signed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_data_model"]], "degrees_signed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type"]], "degrees_signed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type_and_data_model"]], "degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_reference"]], "degrees_signed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_resource"]], "degrees_signed_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_data_model"]], "degrees_signed_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type"]], "degrees_signed_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type_and_data_model"]], "degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_reference"]], "degrees_signed_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_resource"]], "degrees_signed_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_data_model"]], "degrees_signed_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type"]], "degrees_signed_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type_and_data_model"]], "degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_reference"]], "degrees_signed_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_resource"]], "degrees_undirected_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_data_model"]], "degrees_undirected_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type"]], "degrees_undirected_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type_and_data_model"]], "degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "degrees_undirected_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_reference"]], "degrees_undirected_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_resource"]], "direction_key() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.direction_key"]], "dorothea_level() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.dorothea_level"]], "dorothea_levels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.dorothea_levels"]], "entities_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_data_model"]], "entities_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type"]], "entities_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type_and_data_model"]], "entities_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type_and_data_model_and_resource"]], "entities_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_reference"]], "entities_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_resource"]], "evaluate_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.evaluate_evidences"]], "generate_df_records() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.generate_df_records"]], "get_attr() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_attr"]], "get_complex_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complex_identifiers"]], "get_complex_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complex_labels"]], "get_complexes() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complexes"]], "get_data_models (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_data_models"]], "get_degrees() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_degrees"]], "get_degrees_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed"]], "get_degrees_directed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed_in"]], "get_degrees_directed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed_out"]], "get_degrees_negative (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative"]], "get_degrees_negative_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative_in"]], "get_degrees_negative_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative_out"]], "get_degrees_non_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_non_directed"]], "get_degrees_positive (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive"]], "get_degrees_positive_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive_in"]], "get_degrees_positive_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive_out"]], "get_degrees_signed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed"]], "get_degrees_signed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed_in"]], "get_degrees_signed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed_out"]], "get_degrees_undirected (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_undirected"]], "get_direction() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_direction"]], "get_directions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_directions"]], "get_entities() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_entities"]], "get_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_identifiers"]], "get_interaction_types (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_interaction_types"]], "get_interactions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions"]], "get_interactions_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_0"]], "get_interactions_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_directed"]], "get_interactions_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_mutual"]], "get_interactions_negative() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_negative"]], "get_interactions_non_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_non_directed"]], "get_interactions_non_directed_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_non_directed_0"]], "get_interactions_positive() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_positive"]], "get_interactions_signed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_signed"]], "get_interactions_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_undirected"]], "get_interactions_undirected_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_undirected_0"]], "get_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_labels"]], "get_lncrna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrna_identifiers"]], "get_lncrna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrna_labels"]], "get_lncrnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrnas"]], "get_mirna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirna_identifiers"]], "get_mirna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirna_labels"]], "get_mirnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirnas"]], "get_protein_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_protein_identifiers"]], "get_protein_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_protein_labels"]], "get_proteins() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_proteins"]], "get_references (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_references"]], "get_resource_names (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resource_names"]], "get_resource_names_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resource_names_via"]], "get_resources (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resources"]], "get_resources_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resources_via"]], "get_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_sign"]], "get_small_molecule_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecule_identifiers"]], "get_small_molecule_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecule_labels"]], "get_small_molecules() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecules"]], "has_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.has_sign"]], "identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_data_model"]], "identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type"]], "identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type_and_data_model"]], "identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type_and_data_model_and_resource"]], "identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_reference"]], "identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_resource"]], "interaction_types_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_data_model"]], "interaction_types_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type"]], "interaction_types_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type_and_data_model"]], "interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type_and_data_model_and_resource"]], "interaction_types_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_reference"]], "interaction_types_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_resource"]], "interactions_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_data_model"]], "interactions_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type"]], "interactions_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type_and_data_model"]], "interactions_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type_and_data_model_and_resource"]], "interactions_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_reference"]], "interactions_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_resource"]], "interactions_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_data_model"]], "interactions_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type"]], "interactions_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type_and_data_model"]], "interactions_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type_and_data_model_and_resource"]], "interactions_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_reference"]], "interactions_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_resource"]], "interactions_directed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_data_model"]], "interactions_directed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type"]], "interactions_directed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type_and_data_model"]], "interactions_directed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_directed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_reference"]], "interactions_directed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_resource"]], "interactions_mutual_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_data_model"]], "interactions_mutual_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type"]], "interactions_mutual_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type_and_data_model"]], "interactions_mutual_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "interactions_mutual_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_reference"]], "interactions_mutual_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_resource"]], "interactions_negative_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_data_model"]], "interactions_negative_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type"]], "interactions_negative_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type_and_data_model"]], "interactions_negative_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type_and_data_model_and_resource"]], "interactions_negative_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_reference"]], "interactions_negative_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_resource"]], "interactions_non_directed_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_data_model"]], "interactions_non_directed_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type"]], "interactions_non_directed_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type_and_data_model"]], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_reference"]], "interactions_non_directed_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_resource"]], "interactions_non_directed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_data_model"]], "interactions_non_directed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type"]], "interactions_non_directed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type_and_data_model"]], "interactions_non_directed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_reference"]], "interactions_non_directed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_resource"]], "interactions_positive_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_data_model"]], "interactions_positive_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type"]], "interactions_positive_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type_and_data_model"]], "interactions_positive_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type_and_data_model_and_resource"]], "interactions_positive_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_reference"]], "interactions_positive_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_resource"]], "interactions_signed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_data_model"]], "interactions_signed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type"]], "interactions_signed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type_and_data_model"]], "interactions_signed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type_and_data_model_and_resource"]], "interactions_signed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_reference"]], "interactions_signed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_resource"]], "interactions_undirected_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_data_model"]], "interactions_undirected_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type"]], "interactions_undirected_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type_and_data_model"]], "interactions_undirected_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_reference"]], "interactions_undirected_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_resource"]], "interactions_undirected_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_data_model"]], "interactions_undirected_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type"]], "interactions_undirected_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type_and_data_model"]], "interactions_undirected_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_reference"]], "interactions_undirected_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_resource"]], "is_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_directed"]], "is_directed_by_resources() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_directed_by_resources"]], "is_inhibition() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_inhibition"]], "is_loop() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_loop"]], "is_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_mutual"]], "is_mutual_by_resources() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_mutual_by_resources"]], "is_stimulation() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_stimulation"]], "iter_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.iter_evidences"]], "iter_match_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.iter_match_evidences"]], "labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_data_model"]], "labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type"]], "labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type_and_data_model"]], "labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type_and_data_model_and_resource"]], "labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_reference"]], "labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_resource"]], "lncrna_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_data_model"]], "lncrna_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type"]], "lncrna_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type_and_data_model"]], "lncrna_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "lncrna_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_reference"]], "lncrna_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_resource"]], "lncrna_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_data_model"]], "lncrna_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type"]], "lncrna_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type_and_data_model"]], "lncrna_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "lncrna_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_reference"]], "lncrna_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_resource"]], "lncrnas_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_data_model"]], "lncrnas_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type"]], "lncrnas_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type_and_data_model"]], "lncrnas_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type_and_data_model_and_resource"]], "lncrnas_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_reference"]], "lncrnas_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_resource"]], "majority_dir() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.majority_dir"]], "majority_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.majority_sign"]], "merge() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.merge"]], "mirna_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_data_model"]], "mirna_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type"]], "mirna_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type_and_data_model"]], "mirna_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "mirna_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_reference"]], "mirna_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_resource"]], "mirna_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_data_model"]], "mirna_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type"]], "mirna_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type_and_data_model"]], "mirna_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type_and_data_model_and_resource"]], "mirna_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_reference"]], "mirna_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_resource"]], "mirnas_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_data_model"]], "mirnas_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type"]], "mirnas_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type_and_data_model"]], "mirnas_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type_and_data_model_and_resource"]], "mirnas_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_reference"]], "mirnas_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_resource"]], "negative_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_a_b"]], "negative_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_b_a"]], "negative_resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_resources_a_b"]], "negative_resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_resources_b_a"]], "negative_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_reverse"]], "negative_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_straight"]], "positive_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_a_b"]], "positive_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_b_a"]], "positive_resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_resources_a_b"]], "positive_resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_resources_b_a"]], "positive_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_reverse"]], "positive_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_straight"]], "protein_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_data_model"]], "protein_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type"]], "protein_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type_and_data_model"]], "protein_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "protein_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_reference"]], "protein_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_resource"]], "protein_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_data_model"]], "protein_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type"]], "protein_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type_and_data_model"]], "protein_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type_and_data_model_and_resource"]], "protein_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_reference"]], "protein_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_resource"]], "proteins_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_data_model"]], "proteins_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type"]], "proteins_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type_and_data_model"]], "proteins_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type_and_data_model_and_resource"]], "proteins_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_reference"]], "proteins_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_resource"]], "references_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_data_model"]], "references_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type"]], "references_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type_and_data_model"]], "references_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type_and_data_model_and_resource"]], "references_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_reference"]], "references_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_resource"]], "reload() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.reload"]], "resource_names_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_data_model"]], "resource_names_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type"]], "resource_names_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type_and_data_model"]], "resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type_and_data_model_and_resource"]], "resource_names_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_reference"]], "resource_names_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_resource"]], "resource_names_via_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_data_model"]], "resource_names_via_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type"]], "resource_names_via_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type_and_data_model"]], "resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type_and_data_model_and_resource"]], "resource_names_via_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_reference"]], "resource_names_via_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_resource"]], "resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_a_b"]], "resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_b_a"]], "resources_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_data_model"]], "resources_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type"]], "resources_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type_and_data_model"]], "resources_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type_and_data_model_and_resource"]], "resources_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_reference"]], "resources_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_resource"]], "resources_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_undirected"]], "resources_via_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_data_model"]], "resources_via_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type"]], "resources_via_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type_and_data_model"]], "resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type_and_data_model_and_resource"]], "resources_via_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_reference"]], "resources_via_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_resource"]], "serialize() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.serialize"]], "small_molecule_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_data_model"]], "small_molecule_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type"]], "small_molecule_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type_and_data_model"]], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "small_molecule_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_reference"]], "small_molecule_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_resource"]], "small_molecule_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_data_model"]], "small_molecule_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type"]], "small_molecule_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type_and_data_model"]], "small_molecule_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "small_molecule_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_reference"]], "small_molecule_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_resource"]], "small_molecules_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_data_model"]], "small_molecules_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type"]], "small_molecules_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type_and_data_model"]], "small_molecules_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type_and_data_model_and_resource"]], "small_molecules_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_reference"]], "small_molecules_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_resource"]], "source() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.source"]], "sources_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_reverse"]], "sources_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_straight"]], "sources_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_undirected"]], "src() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.src"]], "src_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.src_by_resource"]], "target() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.target"]], "tgt() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.tgt"]], "tgt_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.tgt_by_resource"]], "translate() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.translate"]], "unset_dir() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_dir"]], "unset_direction() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_direction"]], "unset_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_interaction_type"]], "unset_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_sign"]], "update_attrs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.update_attrs"]], "which_directions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_directions"]], "which_dirs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_dirs"]], "which_signs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_signs"]], "interactiondataframerecord (class in pypath.core.interaction)": [[136, "pypath.core.interaction.InteractionDataFrameRecord"]], "__init__() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.__init__"]], "count() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.count"]], "directed (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.directed"]], "dmodel (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.dmodel"]], "effect (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.effect"]], "id_a (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.id_a"]], "id_b (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.id_b"]], "index() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.index"]], "references (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.references"]], "sources (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.sources"]], "type (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type"]], "type_a (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type_a"]], "type_b (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type_b"]], "interactionkey (class in pypath.core.interaction)": [[137, "pypath.core.interaction.InteractionKey"]], "__init__() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.__init__"]], "count() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.count"]], "entity_a (pypath.core.interaction.interactionkey attribute)": [[137, "pypath.core.interaction.InteractionKey.entity_a"]], "entity_b (pypath.core.interaction.interactionkey attribute)": [[137, "pypath.core.interaction.InteractionKey.entity_b"]], "index() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.index"]], "pypath.core.intercell": [[138, "module-pypath.core.intercell"]], "intercellannotation (class in pypath.core.intercell)": [[139, "pypath.core.intercell.IntercellAnnotation"]], "__init__() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.__init__"]], "browse() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.browse"]], "class_to_class_connections() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.class_to_class_connections"]], "classes_by_entity() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.classes_by_entity"]], "counts() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.counts"]], "counts_by_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.counts_by_class"]], "create_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.create_class"]], "degree_inter_class_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.degree_inter_class_network"]], "filter() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter"]], "filter_classes() (pypath.core.intercell.intercellannotation static method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter_classes"]], "filter_interclass_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter_interclass_network"]], "get_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_class"]], "get_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_df"]], "get_interclass_network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_interclass_network_df"]], "get_parents() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_parents"]], "get_resource() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_resource"]], "get_resources() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_resources"]], "labels() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.labels"]], "make_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.make_df"]], "network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.network_df"]], "populate_classes() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.populate_classes"]], "populate_scores() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.populate_scores"]], "process_annot() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.process_annot"]], "quality_check_table() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.quality_check_table"]], "register_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.register_network"]], "reload() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.reload"]], "resources_in_category() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.resources_in_category"]], "select() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.select"]], "set_interclass_network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.set_interclass_network_df"]], "show() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.show"]], "update_parents() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.update_parents"]], "get_db() (in module pypath.core.intercell)": [[140, "pypath.core.intercell.get_db"]], "init_db() (in module pypath.core.intercell)": [[141, "pypath.core.intercell.init_db"]], "pypath.core.intercell_annot": [[142, "module-pypath.core.intercell_annot"]], "excludes (in module pypath.core.intercell_annot)": [[143, "pypath.core.intercell_annot.excludes"]], "pypath.core.network": [[144, "module-pypath.core.network"]], "network (class in pypath.core.network)": [[145, "pypath.core.network.Network"]], "__init__() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.__init__"]], "activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.activated_by"]], "activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.activates"]], "add_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.add_interaction"]], "add_node() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.add_node"]], "collect_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complex_identifiers"]], "collect_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complex_labels"]], "collect_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complexes"]], "collect_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_curation_effort"]], "collect_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_data_models"]], "collect_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed"]], "collect_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed_in"]], "collect_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed_out"]], "collect_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative"]], "collect_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative_in"]], "collect_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative_out"]], "collect_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_non_directed"]], "collect_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive"]], "collect_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive_in"]], "collect_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive_out"]], "collect_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed"]], "collect_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed_in"]], "collect_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed_out"]], "collect_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_undirected"]], "collect_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_entities"]], "collect_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_evidences"]], "collect_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_identifiers"]], "collect_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interaction_types"]], "collect_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions"]], "collect_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_0"]], "collect_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_directed"]], "collect_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_mutual"]], "collect_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_negative"]], "collect_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_non_directed"]], "collect_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_non_directed_0"]], "collect_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_positive"]], "collect_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_signed"]], "collect_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_undirected"]], "collect_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_undirected_0"]], "collect_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_labels"]], "collect_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrna_identifiers"]], "collect_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrna_labels"]], "collect_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrnas"]], "collect_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirna_identifiers"]], "collect_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirna_labels"]], "collect_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirnas"]], "collect_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_protein_identifiers"]], "collect_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_protein_labels"]], "collect_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_proteins"]], "collect_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_references"]], "collect_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resource_names"]], "collect_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resource_names_via"]], "collect_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resources"]], "collect_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resources_via"]], "collect_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecule_identifiers"]], "collect_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecule_labels"]], "collect_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecules"]], "complex_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_data_model"]], "complex_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type"]], "complex_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type_and_data_model"]], "complex_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "complex_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_reference"]], "complex_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_resource"]], "complex_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_data_model"]], "complex_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type"]], "complex_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type_and_data_model"]], "complex_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type_and_data_model_and_resource"]], "complex_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_reference"]], "complex_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_resource"]], "complexes_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_data_model"]], "complexes_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type"]], "complexes_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type_and_data_model"]], "complexes_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type_and_data_model_and_resource"]], "complexes_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_reference"]], "complexes_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_resource"]], "count_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_activated_by"]], "count_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_activates"]], "count_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers"]], "count_complex_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_data_model"]], "count_complex_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type"]], "count_complex_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type_and_data_model"]], "count_complex_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_complex_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_reference"]], "count_complex_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_resource"]], "count_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels"]], "count_complex_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_data_model"]], "count_complex_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type"]], "count_complex_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type_and_data_model"]], "count_complex_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type_and_data_model_and_resource"]], "count_complex_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_reference"]], "count_complex_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_resource"]], "count_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes"]], "count_complexes_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_data_model"]], "count_complexes_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type"]], "count_complexes_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type_and_data_model"]], "count_complexes_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type_and_data_model_and_resource"]], "count_complexes_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_reference"]], "count_complexes_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_resource"]], "count_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort"]], "count_curation_effort_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_data_model"]], "count_curation_effort_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type"]], "count_curation_effort_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type_and_data_model"]], "count_curation_effort_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type_and_data_model_and_resource"]], "count_curation_effort_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_reference"]], "count_curation_effort_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_resource"]], "count_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models"]], "count_data_models_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_data_model"]], "count_data_models_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type"]], "count_data_models_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type_and_data_model"]], "count_data_models_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type_and_data_model_and_resource"]], "count_data_models_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_reference"]], "count_data_models_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_resource"]], "count_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed"]], "count_degrees_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_data_model"]], "count_degrees_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type"]], "count_degrees_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type_and_data_model"]], "count_degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_reference"]], "count_degrees_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_resource"]], "count_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in"]], "count_degrees_directed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_data_model"]], "count_degrees_directed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type"]], "count_degrees_directed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type_and_data_model"]], "count_degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_reference"]], "count_degrees_directed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_resource"]], "count_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out"]], "count_degrees_directed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_data_model"]], "count_degrees_directed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type"]], "count_degrees_directed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type_and_data_model"]], "count_degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_reference"]], "count_degrees_directed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_resource"]], "count_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative"]], "count_degrees_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_data_model"]], "count_degrees_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type"]], "count_degrees_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type_and_data_model"]], "count_degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_reference"]], "count_degrees_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_resource"]], "count_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in"]], "count_degrees_negative_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_data_model"]], "count_degrees_negative_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type"]], "count_degrees_negative_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type_and_data_model"]], "count_degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_reference"]], "count_degrees_negative_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_resource"]], "count_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out"]], "count_degrees_negative_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_data_model"]], "count_degrees_negative_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type"]], "count_degrees_negative_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type_and_data_model"]], "count_degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_reference"]], "count_degrees_negative_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_resource"]], "count_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed"]], "count_degrees_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_data_model"]], "count_degrees_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type"]], "count_degrees_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type_and_data_model"]], "count_degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_reference"]], "count_degrees_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_resource"]], "count_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive"]], "count_degrees_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_data_model"]], "count_degrees_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type"]], "count_degrees_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type_and_data_model"]], "count_degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_reference"]], "count_degrees_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_resource"]], "count_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in"]], "count_degrees_positive_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_data_model"]], "count_degrees_positive_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type"]], "count_degrees_positive_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type_and_data_model"]], "count_degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_reference"]], "count_degrees_positive_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_resource"]], "count_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out"]], "count_degrees_positive_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_data_model"]], "count_degrees_positive_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type"]], "count_degrees_positive_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type_and_data_model"]], "count_degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_reference"]], "count_degrees_positive_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_resource"]], "count_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed"]], "count_degrees_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_data_model"]], "count_degrees_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type"]], "count_degrees_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type_and_data_model"]], "count_degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_reference"]], "count_degrees_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_resource"]], "count_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in"]], "count_degrees_signed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_data_model"]], "count_degrees_signed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type"]], "count_degrees_signed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type_and_data_model"]], "count_degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_reference"]], "count_degrees_signed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_resource"]], "count_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out"]], "count_degrees_signed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_data_model"]], "count_degrees_signed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type"]], "count_degrees_signed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type_and_data_model"]], "count_degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_reference"]], "count_degrees_signed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_resource"]], "count_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected"]], "count_degrees_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_data_model"]], "count_degrees_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type"]], "count_degrees_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type_and_data_model"]], "count_degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "count_degrees_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_reference"]], "count_degrees_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_resource"]], "count_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities"]], "count_entities_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_data_model"]], "count_entities_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type"]], "count_entities_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type_and_data_model"]], "count_entities_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type_and_data_model_and_resource"]], "count_entities_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_reference"]], "count_entities_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_resource"]], "count_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences"]], "count_evidences_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_data_model"]], "count_evidences_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type"]], "count_evidences_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type_and_data_model"]], "count_evidences_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type_and_data_model_and_resource"]], "count_evidences_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_reference"]], "count_evidences_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_resource"]], "count_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers"]], "count_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_data_model"]], "count_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type"]], "count_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type_and_data_model"]], "count_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_reference"]], "count_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_resource"]], "count_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types"]], "count_interaction_types_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_data_model"]], "count_interaction_types_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type"]], "count_interaction_types_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type_and_data_model"]], "count_interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type_and_data_model_and_resource"]], "count_interaction_types_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_reference"]], "count_interaction_types_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_resource"]], "count_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions"]], "count_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0"]], "count_interactions_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_data_model"]], "count_interactions_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type"]], "count_interactions_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type_and_data_model"]], "count_interactions_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_reference"]], "count_interactions_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_resource"]], "count_interactions_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_data_model"]], "count_interactions_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type"]], "count_interactions_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type_and_data_model"]], "count_interactions_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type_and_data_model_and_resource"]], "count_interactions_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_reference"]], "count_interactions_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_resource"]], "count_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed"]], "count_interactions_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_data_model"]], "count_interactions_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type"]], "count_interactions_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type_and_data_model"]], "count_interactions_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_reference"]], "count_interactions_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_resource"]], "count_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual"]], "count_interactions_mutual_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_data_model"]], "count_interactions_mutual_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type"]], "count_interactions_mutual_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type_and_data_model"]], "count_interactions_mutual_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "count_interactions_mutual_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_reference"]], "count_interactions_mutual_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_resource"]], "count_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative"]], "count_interactions_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_data_model"]], "count_interactions_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type"]], "count_interactions_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type_and_data_model"]], "count_interactions_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type_and_data_model_and_resource"]], "count_interactions_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_reference"]], "count_interactions_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_resource"]], "count_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed"]], "count_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0"]], "count_interactions_non_directed_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_data_model"]], "count_interactions_non_directed_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type"]], "count_interactions_non_directed_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type_and_data_model"]], "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_non_directed_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_reference"]], "count_interactions_non_directed_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_resource"]], "count_interactions_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_data_model"]], "count_interactions_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type"]], "count_interactions_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type_and_data_model"]], "count_interactions_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_reference"]], "count_interactions_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_resource"]], "count_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive"]], "count_interactions_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_data_model"]], "count_interactions_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type"]], "count_interactions_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type_and_data_model"]], "count_interactions_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type_and_data_model_and_resource"]], "count_interactions_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_reference"]], "count_interactions_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_resource"]], "count_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed"]], "count_interactions_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_data_model"]], "count_interactions_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type"]], "count_interactions_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type_and_data_model"]], "count_interactions_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_reference"]], "count_interactions_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_resource"]], "count_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected"]], "count_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0"]], "count_interactions_undirected_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_data_model"]], "count_interactions_undirected_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type"]], "count_interactions_undirected_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type_and_data_model"]], "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_undirected_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_reference"]], "count_interactions_undirected_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_resource"]], "count_interactions_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_data_model"]], "count_interactions_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type"]], "count_interactions_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type_and_data_model"]], "count_interactions_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "count_interactions_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_reference"]], "count_interactions_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_resource"]], "count_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels"]], "count_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_data_model"]], "count_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type"]], "count_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type_and_data_model"]], "count_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type_and_data_model_and_resource"]], "count_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_reference"]], "count_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_resource"]], "count_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers"]], "count_lncrna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_data_model"]], "count_lncrna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type"]], "count_lncrna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type_and_data_model"]], "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_lncrna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_reference"]], "count_lncrna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_resource"]], "count_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels"]], "count_lncrna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_data_model"]], "count_lncrna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type"]], "count_lncrna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type_and_data_model"]], "count_lncrna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "count_lncrna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_reference"]], "count_lncrna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_resource"]], "count_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas"]], "count_lncrnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_data_model"]], "count_lncrnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type"]], "count_lncrnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type_and_data_model"]], "count_lncrnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type_and_data_model_and_resource"]], "count_lncrnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_reference"]], "count_lncrnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_resource"]], "count_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers"]], "count_mirna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_data_model"]], "count_mirna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type"]], "count_mirna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type_and_data_model"]], "count_mirna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_mirna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_reference"]], "count_mirna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_resource"]], "count_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels"]], "count_mirna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_data_model"]], "count_mirna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type"]], "count_mirna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type_and_data_model"]], "count_mirna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type_and_data_model_and_resource"]], "count_mirna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_reference"]], "count_mirna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_resource"]], "count_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas"]], "count_mirnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_data_model"]], "count_mirnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type"]], "count_mirnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type_and_data_model"]], "count_mirnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type_and_data_model_and_resource"]], "count_mirnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_reference"]], "count_mirnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_resource"]], "count_partners() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.count_partners"]], "count_post_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_activated_by"]], "count_post_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_activates"]], "count_post_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_regulated_by"]], "count_post_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_regulates"]], "count_post_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_suppressed_by"]], "count_post_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_suppresses"]], "count_post_translationally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_activated_by"]], "count_post_translationally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_activates"]], "count_post_translationally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_regulated_by"]], "count_post_translationally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_regulates"]], "count_post_translationally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_suppressed_by"]], "count_post_translationally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_suppresses"]], "count_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers"]], "count_protein_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_data_model"]], "count_protein_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type"]], "count_protein_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type_and_data_model"]], "count_protein_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_protein_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_reference"]], "count_protein_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_resource"]], "count_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels"]], "count_protein_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_data_model"]], "count_protein_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type"]], "count_protein_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type_and_data_model"]], "count_protein_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type_and_data_model_and_resource"]], "count_protein_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_reference"]], "count_protein_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_resource"]], "count_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins"]], "count_proteins_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_data_model"]], "count_proteins_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type"]], "count_proteins_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type_and_data_model"]], "count_proteins_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type_and_data_model_and_resource"]], "count_proteins_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_reference"]], "count_proteins_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_resource"]], "count_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references"]], "count_references_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_data_model"]], "count_references_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type"]], "count_references_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type_and_data_model"]], "count_references_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type_and_data_model_and_resource"]], "count_references_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_reference"]], "count_references_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_resource"]], "count_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_regulated_by"]], "count_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_regulates"]], "count_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names"]], "count_resource_names_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_data_model"]], "count_resource_names_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type"]], "count_resource_names_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type_and_data_model"]], "count_resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type_and_data_model_and_resource"]], "count_resource_names_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_reference"]], "count_resource_names_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_resource"]], "count_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via"]], "count_resource_names_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_data_model"]], "count_resource_names_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type"]], "count_resource_names_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type_and_data_model"]], "count_resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type_and_data_model_and_resource"]], "count_resource_names_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_reference"]], "count_resource_names_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_resource"]], "count_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources"]], "count_resources_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_data_model"]], "count_resources_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type"]], "count_resources_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type_and_data_model"]], "count_resources_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type_and_data_model_and_resource"]], "count_resources_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_reference"]], "count_resources_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_resource"]], "count_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via"]], "count_resources_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_data_model"]], "count_resources_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type"]], "count_resources_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type_and_data_model"]], "count_resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type_and_data_model_and_resource"]], "count_resources_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_reference"]], "count_resources_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_resource"]], "count_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers"]], "count_small_molecule_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_data_model"]], "count_small_molecule_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type"]], "count_small_molecule_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type_and_data_model"]], "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_small_molecule_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_reference"]], "count_small_molecule_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_resource"]], "count_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels"]], "count_small_molecule_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_data_model"]], "count_small_molecule_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type"]], "count_small_molecule_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type_and_data_model"]], "count_small_molecule_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "count_small_molecule_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_reference"]], "count_small_molecule_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_resource"]], "count_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules"]], "count_small_molecules_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_data_model"]], "count_small_molecules_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type"]], "count_small_molecules_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type_and_data_model"]], "count_small_molecules_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type_and_data_model_and_resource"]], "count_small_molecules_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_reference"]], "count_small_molecules_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_resource"]], "count_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_suppressed_by"]], "count_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_suppresses"]], "count_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_activated_by"]], "count_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_activates"]], "count_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_regulated_by"]], "count_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_regulates"]], "count_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_suppressed_by"]], "count_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_suppresses"]], "curation_effort_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_data_model"]], "curation_effort_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type"]], "curation_effort_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type_and_data_model"]], "curation_effort_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type_and_data_model_and_resource"]], "curation_effort_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_reference"]], "curation_effort_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_resource"]], "data_models_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_data_model"]], "data_models_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type"]], "data_models_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type_and_data_model"]], "data_models_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type_and_data_model_and_resource"]], "data_models_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_reference"]], "data_models_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_resource"]], "degrees_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_data_model"]], "degrees_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type"]], "degrees_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type_and_data_model"]], "degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_reference"]], "degrees_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_resource"]], "degrees_directed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_data_model"]], "degrees_directed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type"]], "degrees_directed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type_and_data_model"]], "degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_reference"]], "degrees_directed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_resource"]], "degrees_directed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_data_model"]], "degrees_directed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type"]], "degrees_directed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type_and_data_model"]], "degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_reference"]], "degrees_directed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_resource"]], "degrees_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_data_model"]], "degrees_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type"]], "degrees_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type_and_data_model"]], "degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_reference"]], "degrees_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_resource"]], "degrees_negative_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_data_model"]], "degrees_negative_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type"]], "degrees_negative_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type_and_data_model"]], "degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_reference"]], "degrees_negative_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_resource"]], "degrees_negative_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_data_model"]], "degrees_negative_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type"]], "degrees_negative_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type_and_data_model"]], "degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_reference"]], "degrees_negative_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_resource"]], "degrees_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_data_model"]], "degrees_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type"]], "degrees_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type_and_data_model"]], "degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_reference"]], "degrees_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_resource"]], "degrees_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_data_model"]], "degrees_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type"]], "degrees_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type_and_data_model"]], "degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_reference"]], "degrees_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_resource"]], "degrees_positive_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_data_model"]], "degrees_positive_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type"]], "degrees_positive_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type_and_data_model"]], "degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_reference"]], "degrees_positive_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_resource"]], "degrees_positive_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_data_model"]], "degrees_positive_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type"]], "degrees_positive_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type_and_data_model"]], "degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_reference"]], "degrees_positive_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_resource"]], "degrees_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_data_model"]], "degrees_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type"]], "degrees_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type_and_data_model"]], "degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_reference"]], "degrees_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_resource"]], "degrees_signed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_data_model"]], "degrees_signed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type"]], "degrees_signed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type_and_data_model"]], "degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_reference"]], "degrees_signed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_resource"]], "degrees_signed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_data_model"]], "degrees_signed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type"]], "degrees_signed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type_and_data_model"]], "degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_reference"]], "degrees_signed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_resource"]], "degrees_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_data_model"]], "degrees_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type"]], "degrees_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type_and_data_model"]], "degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "degrees_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_reference"]], "degrees_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_resource"]], "direction_consistency() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.direction_consistency"]], "dorothea() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.dorothea"]], "entities_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_data_model"]], "entities_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type"]], "entities_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type_and_data_model"]], "entities_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type_and_data_model_and_resource"]], "entities_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_reference"]], "entities_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_resource"]], "entity_by_id() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.entity_by_id"]], "entity_by_label() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.entity_by_label"]], "evidences_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_data_model"]], "evidences_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type"]], "evidences_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type_and_data_model"]], "evidences_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type_and_data_model_and_resource"]], "evidences_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_reference"]], "evidences_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_resource"]], "extra_directions() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.extra_directions"]], "find_paths() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.find_paths"]], "from_igraph() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.from_igraph"]], "from_pickle() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.from_pickle"]], "get_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complex_identifiers"]], "get_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complex_labels"]], "get_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complexes"]], "get_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_curation_effort"]], "get_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_data_models"]], "get_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed"]], "get_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed_in"]], "get_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed_out"]], "get_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative"]], "get_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative_in"]], "get_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative_out"]], "get_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_non_directed"]], "get_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive"]], "get_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive_in"]], "get_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive_out"]], "get_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed"]], "get_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed_in"]], "get_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed_out"]], "get_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_undirected"]], "get_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_entities"]], "get_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_evidences"]], "get_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_identifiers"]], "get_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interaction_types"]], "get_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions"]], "get_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_0"]], "get_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_directed"]], "get_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_mutual"]], "get_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_negative"]], "get_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_non_directed"]], "get_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_non_directed_0"]], "get_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_positive"]], "get_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_signed"]], "get_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_undirected"]], "get_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_undirected_0"]], "get_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_labels"]], "get_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrna_identifiers"]], "get_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrna_labels"]], "get_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrnas"]], "get_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirna_identifiers"]], "get_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirna_labels"]], "get_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirnas"]], "get_organisms() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.get_organisms"]], "get_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_protein_identifiers"]], "get_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_protein_labels"]], "get_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_proteins"]], "get_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_references"]], "get_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resource_names"]], "get_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resource_names_via"]], "get_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resources"]], "get_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resources_via"]], "get_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecule_identifiers"]], "get_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecule_labels"]], "get_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecules"]], "htp_interactions() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.htp_interactions"]], "htp_references() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.htp_references"]], "identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_data_model"]], "identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type"]], "identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type_and_data_model"]], "identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type_and_data_model_and_resource"]], "identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_reference"]], "identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_resource"]], "init_network() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.init_network"]], "interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction"]], "interaction_by_id() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction_by_id"]], "interaction_by_label() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction_by_label"]], "interaction_types_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_data_model"]], "interaction_types_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type"]], "interaction_types_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type_and_data_model"]], "interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type_and_data_model_and_resource"]], "interaction_types_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_reference"]], "interaction_types_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_resource"]], "interactions_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_data_model"]], "interactions_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type"]], "interactions_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type_and_data_model"]], "interactions_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type_and_data_model_and_resource"]], "interactions_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_reference"]], "interactions_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_resource"]], "interactions_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_data_model"]], "interactions_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type"]], "interactions_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type_and_data_model"]], "interactions_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type_and_data_model_and_resource"]], "interactions_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_reference"]], "interactions_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_resource"]], "interactions_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_data_model"]], "interactions_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type"]], "interactions_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type_and_data_model"]], "interactions_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_reference"]], "interactions_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_resource"]], "interactions_mutual_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_data_model"]], "interactions_mutual_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type"]], "interactions_mutual_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type_and_data_model"]], "interactions_mutual_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "interactions_mutual_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_reference"]], "interactions_mutual_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_resource"]], "interactions_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_data_model"]], "interactions_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type"]], "interactions_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type_and_data_model"]], "interactions_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type_and_data_model_and_resource"]], "interactions_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_reference"]], "interactions_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_resource"]], "interactions_non_directed_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_data_model"]], "interactions_non_directed_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type"]], "interactions_non_directed_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type_and_data_model"]], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_reference"]], "interactions_non_directed_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_resource"]], "interactions_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_data_model"]], "interactions_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type"]], "interactions_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type_and_data_model"]], "interactions_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_reference"]], "interactions_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_resource"]], "interactions_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_data_model"]], "interactions_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type"]], "interactions_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type_and_data_model"]], "interactions_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type_and_data_model_and_resource"]], "interactions_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_reference"]], "interactions_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_resource"]], "interactions_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_data_model"]], "interactions_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type"]], "interactions_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type_and_data_model"]], "interactions_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type_and_data_model_and_resource"]], "interactions_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_reference"]], "interactions_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_resource"]], "interactions_undirected_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_data_model"]], "interactions_undirected_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type"]], "interactions_undirected_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type_and_data_model"]], "interactions_undirected_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_reference"]], "interactions_undirected_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_resource"]], "interactions_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_data_model"]], "interactions_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type"]], "interactions_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type_and_data_model"]], "interactions_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_reference"]], "interactions_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_resource"]], "labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_data_model"]], "labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type"]], "labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type_and_data_model"]], "labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type_and_data_model_and_resource"]], "labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_reference"]], "labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_resource"]], "lncrna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_data_model"]], "lncrna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type"]], "lncrna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type_and_data_model"]], "lncrna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "lncrna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_reference"]], "lncrna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_resource"]], "lncrna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_data_model"]], "lncrna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type"]], "lncrna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type_and_data_model"]], "lncrna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "lncrna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_reference"]], "lncrna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_resource"]], "lncrnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_data_model"]], "lncrnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type"]], "lncrnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type_and_data_model"]], "lncrnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type_and_data_model_and_resource"]], "lncrnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_reference"]], "lncrnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_resource"]], "load() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load"]], "load_from_pickle() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_from_pickle"]], "load_resource() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_resource"]], "load_resources() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_resources"]], "make_df() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.make_df"]], "mirna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_data_model"]], "mirna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type"]], "mirna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type_and_data_model"]], "mirna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "mirna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_reference"]], "mirna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_resource"]], "mirna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_data_model"]], "mirna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type"]], "mirna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type_and_data_model"]], "mirna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type_and_data_model_and_resource"]], "mirna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_reference"]], "mirna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_resource"]], "mirna_target() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.mirna_target"]], "mirnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_data_model"]], "mirnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type"]], "mirnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type_and_data_model"]], "mirnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type_and_data_model_and_resource"]], "mirnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_reference"]], "mirnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_resource"]], "numof_interactions_per_reference() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.numof_interactions_per_reference"]], "organisms_check() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.organisms_check"]], "partners() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.partners"]], "post_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_activated_by"]], "post_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_activates"]], "post_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_regulated_by"]], "post_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_regulates"]], "post_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_suppressed_by"]], "post_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_suppresses"]], "post_translationally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_activated_by"]], "post_translationally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_activates"]], "post_translationally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_regulated_by"]], "post_translationally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_regulates"]], "post_translationally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_suppressed_by"]], "post_translationally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_suppresses"]], "protein_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_data_model"]], "protein_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type"]], "protein_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type_and_data_model"]], "protein_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "protein_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_reference"]], "protein_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_resource"]], "protein_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_data_model"]], "protein_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type"]], "protein_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type_and_data_model"]], "protein_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type_and_data_model_and_resource"]], "protein_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_reference"]], "protein_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_resource"]], "proteins_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_data_model"]], "proteins_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type"]], "proteins_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type_and_data_model"]], "proteins_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type_and_data_model_and_resource"]], "proteins_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_reference"]], "proteins_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_resource"]], "random_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.random_interaction"]], "references_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_data_model"]], "references_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type"]], "references_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type_and_data_model"]], "references_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type_and_data_model_and_resource"]], "references_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_reference"]], "references_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_resource"]], "regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.regulated_by"]], "regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.regulates"]], "reload() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.reload"]], "remove_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_interaction"]], "remove_loops() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_loops"]], "remove_node() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_node"]], "remove_zero_degree() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_zero_degree"]], "reset() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.reset"]], "resource_names (pypath.core.network.network property)": [[145, "pypath.core.network.Network.resource_names"]], "resource_names_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_data_model"]], "resource_names_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type"]], "resource_names_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type_and_data_model"]], "resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type_and_data_model_and_resource"]], "resource_names_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_reference"]], "resource_names_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_resource"]], "resource_names_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_data_model"]], "resource_names_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type"]], "resource_names_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type_and_data_model"]], "resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type_and_data_model_and_resource"]], "resource_names_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_reference"]], "resource_names_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_resource"]], "resources (pypath.core.network.network property)": [[145, "pypath.core.network.Network.resources"]], "resources_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_data_model"]], "resources_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type"]], "resources_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type_and_data_model"]], "resources_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type_and_data_model_and_resource"]], "resources_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_reference"]], "resources_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_resource"]], "resources_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_data_model"]], "resources_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type"]], "resources_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type_and_data_model"]], "resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type_and_data_model_and_resource"]], "resources_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_reference"]], "resources_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_resource"]], "save_to_pickle() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.save_to_pickle"]], "small_molecule_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_data_model"]], "small_molecule_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type"]], "small_molecule_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type_and_data_model"]], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "small_molecule_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_reference"]], "small_molecule_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_resource"]], "small_molecule_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_data_model"]], "small_molecule_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type"]], "small_molecule_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type_and_data_model"]], "small_molecule_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "small_molecule_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_reference"]], "small_molecule_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_resource"]], "small_molecules_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_data_model"]], "small_molecules_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type"]], "small_molecules_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type_and_data_model"]], "small_molecules_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type_and_data_model_and_resource"]], "small_molecules_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_reference"]], "small_molecules_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_resource"]], "summaries_tab() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.summaries_tab"]], "suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.suppressed_by"]], "suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.suppresses"]], "to_igraph() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.to_igraph"]], "transcription() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.transcription"]], "transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_activated_by"]], "transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_activates"]], "transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_regulated_by"]], "transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_regulates"]], "transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_suppressed_by"]], "transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_suppresses"]], "networkentitycollection (class in pypath.core.network)": [[146, "pypath.core.network.NetworkEntityCollection"]], "__init__() (pypath.core.network.networkentitycollection method)": [[146, "pypath.core.network.NetworkEntityCollection.__init__"]], "networkstatsrecord (class in pypath.core.network)": [[147, "pypath.core.network.NetworkStatsRecord"]], "__init__() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.__init__"]], "by_category (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.by_category"]], "by_resource (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.by_resource"]], "cat_resource (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.cat_resource"]], "count() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.count"]], "index() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.index"]], "label (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.label"]], "method (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.method"]], "percent (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent"]], "percent_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent_cat"]], "percent_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent_res_cat"]], "resource_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.resource_cat"]], "shared (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared"]], "shared_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared_cat"]], "shared_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared_res_cat"]], "total (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.total"]], "unique (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique"]], "unique_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique_cat"]], "unique_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique_res_cat"]], "get_db() (in module pypath.core.network)": [[148, "pypath.core.network.get_db"]], "init_db() (in module pypath.core.network)": [[149, "pypath.core.network.init_db"]], "pypath.data": [[150, "module-pypath.data"]], "disclaimer() (in module pypath)": [[151, "pypath.disclaimer"]], "info() (in module pypath)": [[152, "pypath.info"]], "pypath.inputs": [[153, "module-pypath.inputs"]], "pypath.inputs.abs": [[154, "module-pypath.inputs.abs"]], "abs_interactions() (in module pypath.inputs.abs)": [[155, "pypath.inputs.abs.abs_interactions"]], "pypath.inputs.acsn": [[156, "module-pypath.inputs.acsn"]], "acsn_interactions() (in module pypath.inputs.acsn)": [[157, "pypath.inputs.acsn.acsn_interactions"]], "acsn_interactions_sif() (in module pypath.inputs.acsn)": [[158, "pypath.inputs.acsn.acsn_interactions_sif"]], "pypath.inputs.adhesome": [[159, "module-pypath.inputs.adhesome"]], "adhesome_annotations() (in module pypath.inputs.adhesome)": [[160, "pypath.inputs.adhesome.adhesome_annotations"]], "adhesome_interactions() (in module pypath.inputs.adhesome)": [[161, "pypath.inputs.adhesome.adhesome_interactions"]], "pypath.inputs.almen2009": [[162, "module-pypath.inputs.almen2009"]], "almen2009_annotations() (in module pypath.inputs.almen2009)": [[163, "pypath.inputs.almen2009.almen2009_annotations"]], "pypath.inputs.baccin2019": [[164, "module-pypath.inputs.baccin2019"]], "baccin2019_annotations() (in module pypath.inputs.baccin2019)": [[165, "pypath.inputs.baccin2019.baccin2019_annotations"]], "baccin2019_interactions() (in module pypath.inputs.baccin2019)": [[166, "pypath.inputs.baccin2019.baccin2019_interactions"]], "pypath.inputs.biogps": [[167, "module-pypath.inputs.biogps"]], "biogpsdataset (class in pypath.inputs.biogps)": [[168, "pypath.inputs.biogps.BiogpsDataset"]], "__init__() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.__init__"]], "count() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.count"]], "index() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.index"]], "label (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.label"]], "organism (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.organism"]], "url (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.url"]], "biogps_annotations() (in module pypath.inputs.biogps)": [[169, "pypath.inputs.biogps.biogps_annotations"]], "biogps_datasets() (in module pypath.inputs.biogps)": [[170, "pypath.inputs.biogps.biogps_datasets"]], "biogps_download() (in module pypath.inputs.biogps)": [[171, "pypath.inputs.biogps.biogps_download"]], "biogps_download_all() (in module pypath.inputs.biogps)": [[172, "pypath.inputs.biogps.biogps_download_all"]], "pypath.inputs.biogrid": [[173, "module-pypath.inputs.biogrid"]], "biogrid_all_interactions() (in module pypath.inputs.biogrid)": [[174, "pypath.inputs.biogrid.biogrid_all_interactions"]], "biogrid_interactions() (in module pypath.inputs.biogrid)": [[175, "pypath.inputs.biogrid.biogrid_interactions"]], "pypath.inputs.biomart": [[176, "module-pypath.inputs.biomart"]], "biomart_homology() (in module pypath.inputs.biomart)": [[177, "pypath.inputs.biomart.biomart_homology"]], "biomart_microarray() (in module pypath.inputs.biomart)": [[178, "pypath.inputs.biomart.biomart_microarray"]], "biomart_microarray_types() (in module pypath.inputs.biomart)": [[179, "pypath.inputs.biomart.biomart_microarray_types"]], "biomart_microarrays() (in module pypath.inputs.biomart)": [[180, "pypath.inputs.biomart.biomart_microarrays"]], "biomart_query() (in module pypath.inputs.biomart)": [[181, "pypath.inputs.biomart.biomart_query"]], "pypath.inputs.biomodels": [[182, "module-pypath.inputs.biomodels"]], "download_single_model() (in module pypath.inputs.biomodels)": [[183, "pypath.inputs.biomodels.download_single_model"]], "get_all_models() (in module pypath.inputs.biomodels)": [[184, "pypath.inputs.biomodels.get_all_models"]], "get_biomodels() (in module pypath.inputs.biomodels)": [[185, "pypath.inputs.biomodels.get_biomodels"]], "get_biomodels_req() (in module pypath.inputs.biomodels)": [[186, "pypath.inputs.biomodels.get_biomodels_req"]], "get_single_model() (in module pypath.inputs.biomodels)": [[187, "pypath.inputs.biomodels.get_single_model"]], "pypath.inputs.ca1": [[188, "module-pypath.inputs.ca1"]], "ca1_interactions() (in module pypath.inputs.ca1)": [[189, "pypath.inputs.ca1.ca1_interactions"]], "pypath.inputs.cancercellmap": [[190, "module-pypath.inputs.cancercellmap"]], "ccmap_interactions() (in module pypath.inputs.cancercellmap)": [[191, "pypath.inputs.cancercellmap.ccmap_interactions"]], "pypath.inputs.cancerdrugsdb": [[192, "module-pypath.inputs.cancerdrugsdb"]], "cancerdrugsdb_annotations() (in module pypath.inputs.cancerdrugsdb)": [[193, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations"]], "cancerdrugsdb_download() (in module pypath.inputs.cancerdrugsdb)": [[194, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download"]], "cancerdrugsdb_interactions() (in module pypath.inputs.cancerdrugsdb)": [[195, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions"]], "pypath.inputs.cancersea": [[196, "module-pypath.inputs.cancersea"]], "cancersea_annotations() (in module pypath.inputs.cancersea)": [[197, "pypath.inputs.cancersea.cancersea_annotations"]], "pypath.inputs.cell": [[198, "module-pypath.inputs.cell"]], "cell_supplementary() (in module pypath.inputs.cell)": [[199, "pypath.inputs.cell.cell_supplementary"]], "pypath.inputs.cellcall": [[200, "module-pypath.inputs.cellcall"]], "cellcall_annotations() (in module pypath.inputs.cellcall)": [[201, "pypath.inputs.cellcall.cellcall_annotations"]], "cellcall_download() (in module pypath.inputs.cellcall)": [[202, "pypath.inputs.cellcall.cellcall_download"]], "cellcall_download_all() (in module pypath.inputs.cellcall)": [[203, "pypath.inputs.cellcall.cellcall_download_all"]], "cellcall_interactions() (in module pypath.inputs.cellcall)": [[204, "pypath.inputs.cellcall.cellcall_interactions"]], "pypath.inputs.cellcellinteractions": [[205, "module-pypath.inputs.cellcellinteractions"]], "cellcellinteractions_annotations() (in module pypath.inputs.cellcellinteractions)": [[206, "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations"]], "pypath.inputs.cellchatdb": [[207, "module-pypath.inputs.cellchatdb"]], "cellchatdb_annotations() (in module pypath.inputs.cellchatdb)": [[208, "pypath.inputs.cellchatdb.cellchatdb_annotations"]], "cellchatdb_cofactors() (in module pypath.inputs.cellchatdb)": [[209, "pypath.inputs.cellchatdb.cellchatdb_cofactors"]], "cellchatdb_complexes() (in module pypath.inputs.cellchatdb)": [[210, "pypath.inputs.cellchatdb.cellchatdb_complexes"]], "cellchatdb_download() (in module pypath.inputs.cellchatdb)": [[211, "pypath.inputs.cellchatdb.cellchatdb_download"]], "cellchatdb_interactions() (in module pypath.inputs.cellchatdb)": [[212, "pypath.inputs.cellchatdb.cellchatdb_interactions"]], "pypath.inputs.cellinker": [[213, "module-pypath.inputs.cellinker"]], "cellinkerinteraction (class in pypath.inputs.cellinker)": [[214, "pypath.inputs.cellinker.CellinkerInteraction"]], "__init__() (pypath.inputs.cellinker.cellinkerinteraction method)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.__init__"]], "count() (pypath.inputs.cellinker.cellinkerinteraction method)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.count"]], "index() (pypath.inputs.cellinker.cellinkerinteraction method)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.index"]], "ligand (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.ligand"]], "ligand_location (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.ligand_location"]], "pmids (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.pmids"]], "receptor (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.receptor"]], "receptor_location (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.receptor_location"]], "resources (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.resources"]], "type (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.type"]], "cellinker_annotations() (in module pypath.inputs.cellinker)": [[215, "pypath.inputs.cellinker.cellinker_annotations"]], "cellinker_complex_annotations() (in module pypath.inputs.cellinker)": [[216, "pypath.inputs.cellinker.cellinker_complex_annotations"]], "cellinker_complexes() (in module pypath.inputs.cellinker)": [[217, "pypath.inputs.cellinker.cellinker_complexes"]], "cellinker_complexes_raw() (in module pypath.inputs.cellinker)": [[218, "pypath.inputs.cellinker.cellinker_complexes_raw"]], "cellinker_lr_interactions() (in module pypath.inputs.cellinker)": [[219, "pypath.inputs.cellinker.cellinker_lr_interactions"]], "cellinker_lr_interactions_raw() (in module pypath.inputs.cellinker)": [[220, "pypath.inputs.cellinker.cellinker_lr_interactions_raw"]], "cellinker_protein_annotations() (in module pypath.inputs.cellinker)": [[221, "pypath.inputs.cellinker.cellinker_protein_annotations"]], "cellinker_smol_interactions() (in module pypath.inputs.cellinker)": [[222, "pypath.inputs.cellinker.cellinker_smol_interactions"]], "cellinker_smol_interactions_raw() (in module pypath.inputs.cellinker)": [[223, "pypath.inputs.cellinker.cellinker_smol_interactions_raw"]], "components_to_complex() (in module pypath.inputs.cellinker)": [[224, "pypath.inputs.cellinker.components_to_complex"]], "pypath.inputs.cellphonedb": [[225, "module-pypath.inputs.cellphonedb"]], "cellphonedbannotation (class in pypath.inputs.cellphonedb)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation"]], "__init__() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.__init__"]], "count() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.count"]], "index() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.index"]], "integrin (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.integrin"]], "peripheral (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.peripheral"]], "receptor (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.receptor"]], "receptor_class (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.receptor_class"]], "secreted (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.secreted"]], "secreted_class (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.secreted_class"]], "transmembrane (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.transmembrane"]], "cellphonedb_complex_annotations() (in module pypath.inputs.cellphonedb)": [[227, "pypath.inputs.cellphonedb.cellphonedb_complex_annotations"]], "cellphonedb_complexes() (in module pypath.inputs.cellphonedb)": [[228, "pypath.inputs.cellphonedb.cellphonedb_complexes"]], "cellphonedb_interactions() (in module pypath.inputs.cellphonedb)": [[229, "pypath.inputs.cellphonedb.cellphonedb_interactions"]], "cellphonedb_ligands_receptors() (in module pypath.inputs.cellphonedb)": [[230, "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors"]], "cellphonedb_protein_annotations() (in module pypath.inputs.cellphonedb)": [[231, "pypath.inputs.cellphonedb.cellphonedb_protein_annotations"]], "pypath.inputs.celltalkdb": [[232, "module-pypath.inputs.celltalkdb"]], "celltalkdb_annotations() (in module pypath.inputs.celltalkdb)": [[233, "pypath.inputs.celltalkdb.celltalkdb_annotations"]], "celltalkdb_download() (in module pypath.inputs.celltalkdb)": [[234, "pypath.inputs.celltalkdb.celltalkdb_download"]], "celltalkdb_interactions() (in module pypath.inputs.celltalkdb)": [[235, "pypath.inputs.celltalkdb.celltalkdb_interactions"]], "pypath.inputs.celltypist": [[236, "module-pypath.inputs.celltypist"]], "celltypist_annotations() (in module pypath.inputs.celltypist)": [[237, "pypath.inputs.celltypist.celltypist_annotations"]], "pypath.inputs.chembl": [[238, "module-pypath.inputs.chembl"]], "chembl_activities() (in module pypath.inputs.chembl)": [[239, "pypath.inputs.chembl.chembl_activities"]], "chembl_assays() (in module pypath.inputs.chembl)": [[240, "pypath.inputs.chembl.chembl_assays"]], "chembl_documents() (in module pypath.inputs.chembl)": [[241, "pypath.inputs.chembl.chembl_documents"]], "chembl_drug_indications() (in module pypath.inputs.chembl)": [[242, "pypath.inputs.chembl.chembl_drug_indications"]], "chembl_molecules() (in module pypath.inputs.chembl)": [[243, "pypath.inputs.chembl.chembl_molecules"]], "chembl_targets() (in module pypath.inputs.chembl)": [[244, "pypath.inputs.chembl.chembl_targets"]], "pypath.inputs.clinvar": [[245, "module-pypath.inputs.clinvar"]], "clinvar_citations() (in module pypath.inputs.clinvar)": [[246, "pypath.inputs.clinvar.clinvar_citations"]], "clinvar_raw() (in module pypath.inputs.clinvar)": [[247, "pypath.inputs.clinvar.clinvar_raw"]], "pypath.inputs.common": [[248, "module-pypath.inputs.common"]], "csv_sep_change() (in module pypath.inputs.common)": [[249, "pypath.inputs.common.csv_sep_change"]], "glom_fields() (in module pypath.inputs.common)": [[250, "pypath.inputs.common.glom_fields"]], "json_extract() (in module pypath.inputs.common)": [[251, "pypath.inputs.common.json_extract"]], "json_read() (in module pypath.inputs.common)": [[252, "pypath.inputs.common.json_read"]], "read_table() (in module pypath.inputs.common)": [[253, "pypath.inputs.common.read_table"]], "read_xls() (in module pypath.inputs.common)": [[254, "pypath.inputs.common.read_xls"]], "pypath.inputs.compleat": [[255, "module-pypath.inputs.compleat"]], "compleat_complexes() (in module pypath.inputs.compleat)": [[256, "pypath.inputs.compleat.compleat_complexes"]], "compleat_raw() (in module pypath.inputs.compleat)": [[257, "pypath.inputs.compleat.compleat_raw"]], "pypath.inputs.complexportal": [[258, "module-pypath.inputs.complexportal"]], "complexportal_complexes() (in module pypath.inputs.complexportal)": [[259, "pypath.inputs.complexportal.complexportal_complexes"]], "pypath.inputs.comppi": [[260, "module-pypath.inputs.comppi"]], "comppi_interaction_locations() (in module pypath.inputs.comppi)": [[261, "pypath.inputs.comppi.comppi_interaction_locations"]], "comppi_locations() (in module pypath.inputs.comppi)": [[262, "pypath.inputs.comppi.comppi_locations"]], "pypath.inputs.connectomedb": [[263, "module-pypath.inputs.connectomedb"]], "connectomedb_annotations() (in module pypath.inputs.connectomedb)": [[264, "pypath.inputs.connectomedb.connectomedb_annotations"]], "connectomedb_interactions() (in module pypath.inputs.connectomedb)": [[265, "pypath.inputs.connectomedb.connectomedb_interactions"]], "pypath.inputs.corum": [[266, "module-pypath.inputs.corum"]], "corum_complexes() (in module pypath.inputs.corum)": [[267, "pypath.inputs.corum.corum_complexes"]], "pypath.inputs.cosmic": [[268, "module-pypath.inputs.cosmic"]], "cancer_gene_census_annotations() (in module pypath.inputs.cosmic)": [[269, "pypath.inputs.cosmic.cancer_gene_census_annotations"]], "pypath.inputs.cpad": [[270, "module-pypath.inputs.cpad"]], "cpad_annotations() (in module pypath.inputs.cpad)": [[271, "pypath.inputs.cpad.cpad_annotations"]], "cpad_pathway_cancer() (in module pypath.inputs.cpad)": [[272, "pypath.inputs.cpad.cpad_pathway_cancer"]], "get_cpad() (in module pypath.inputs.cpad)": [[273, "pypath.inputs.cpad.get_cpad"]], "pypath.inputs.cpdb": [[274, "module-pypath.inputs.cpdb"]], "cpdb_interactions() (in module pypath.inputs.cpdb)": [[275, "pypath.inputs.cpdb.cpdb_interactions"]], "cpdb_interactions_ltp() (in module pypath.inputs.cpdb)": [[276, "pypath.inputs.cpdb.cpdb_interactions_ltp"]], "pypath.inputs.credentials": [[277, "module-pypath.inputs.credentials"]], "credentials() (in module pypath.inputs.credentials)": [[278, "pypath.inputs.credentials.credentials"]], "pypath.inputs.csa": [[279, "module-pypath.inputs.csa"]], "get_csa() (in module pypath.inputs.csa)": [[280, "pypath.inputs.csa.get_csa"]], "pypath.inputs.cspa": [[281, "module-pypath.inputs.cspa"]], "cspa_annotations() (in module pypath.inputs.cspa)": [[282, "pypath.inputs.cspa.cspa_annotations"]], "cspa_cell_type_annotations() (in module pypath.inputs.cspa)": [[283, "pypath.inputs.cspa.cspa_cell_type_annotations"]], "cspa_cell_types() (in module pypath.inputs.cspa)": [[284, "pypath.inputs.cspa.cspa_cell_types"]], "pypath.inputs.ctdbase": [[285, "module-pypath.inputs.ctdbase"]], "ctdbase_relations() (in module pypath.inputs.ctdbase)": [[286, "pypath.inputs.ctdbase.ctdbase_relations"]], "ctdbase_vocabulary() (in module pypath.inputs.ctdbase)": [[287, "pypath.inputs.ctdbase.ctdbase_vocabulary"]], "pypath.inputs.cytosig": [[288, "module-pypath.inputs.cytosig"]], "cytosig_annotations() (in module pypath.inputs.cytosig)": [[289, "pypath.inputs.cytosig.cytosig_annotations"]], "cytosig_df() (in module pypath.inputs.cytosig)": [[290, "pypath.inputs.cytosig.cytosig_df"]], "pypath.inputs.dbptm": [[291, "module-pypath.inputs.dbptm"]], "dbptm_enzyme_substrate() (in module pypath.inputs.dbptm)": [[292, "pypath.inputs.dbptm.dbptm_enzyme_substrate"]], "dbptm_enzyme_substrate_old() (in module pypath.inputs.dbptm)": [[293, "pypath.inputs.dbptm.dbptm_enzyme_substrate_old"]], "dbptm_interactions() (in module pypath.inputs.dbptm)": [[294, "pypath.inputs.dbptm.dbptm_interactions"]], "pypath.inputs.deathdomain": [[295, "module-pypath.inputs.deathdomain"]], "deathdomain_interactions() (in module pypath.inputs.deathdomain)": [[296, "pypath.inputs.deathdomain.deathdomain_interactions"]], "deathdomain_interactions_rescued() (in module pypath.inputs.deathdomain)": [[297, "pypath.inputs.deathdomain.deathdomain_interactions_rescued"]], "pypath.inputs.depod": [[298, "module-pypath.inputs.depod"]], "depod_enzyme_substrate() (in module pypath.inputs.depod)": [[299, "pypath.inputs.depod.depod_enzyme_substrate"]], "depod_interactions() (in module pypath.inputs.depod)": [[300, "pypath.inputs.depod.depod_interactions"]], "pypath.inputs.dgidb": [[301, "module-pypath.inputs.dgidb"]], "dgidb_annotations() (in module pypath.inputs.dgidb)": [[302, "pypath.inputs.dgidb.dgidb_annotations"]], "dgidb_interactions() (in module pypath.inputs.dgidb)": [[303, "pypath.inputs.dgidb.dgidb_interactions"]], "get_dgidb_old() (in module pypath.inputs.dgidb)": [[304, "pypath.inputs.dgidb.get_dgidb_old"]], "pypath.inputs.dip": [[305, "module-pypath.inputs.dip"]], "dip_interactions() (in module pypath.inputs.dip)": [[306, "pypath.inputs.dip.dip_interactions"]], "dip_login() (in module pypath.inputs.dip)": [[307, "pypath.inputs.dip.dip_login"]], "pypath.inputs.disgenet": [[308, "module-pypath.inputs.disgenet"]], "disgenetapi (class in pypath.inputs.disgenet)": [[309, "pypath.inputs.disgenet.DisgenetApi"]], "__init__() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.__init__"]], "authenticate() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.authenticate"]], "get_ddas_that_share_genes() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_ddas_that_share_genes"]], "get_ddas_that_share_variants() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_ddas_that_share_variants"]], "get_gdas_by_diseases() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_diseases"]], "get_gdas_by_genes() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_genes"]], "get_gdas_by_source() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_source"]], "get_gdas_by_uniprots() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_uniprots"]], "get_vdas_by_diseases() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_diseases"]], "get_vdas_by_genes() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_genes"]], "get_vdas_by_source() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_source"]], "get_vdas_by_variants() (pypath.inputs.disgenet.disgenetapi method)": [[309, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_variants"]], "disease_id_mappings() (in module pypath.inputs.disgenet)": [[310, "pypath.inputs.disgenet.disease_id_mappings"]], "disgenet_annotations() (in module pypath.inputs.disgenet)": [[311, "pypath.inputs.disgenet.disgenet_annotations"]], "variant_gene_mappings() (in module pypath.inputs.disgenet)": [[312, "pypath.inputs.disgenet.variant_gene_mappings"]], "pypath.inputs.domino": [[313, "module-pypath.inputs.domino"]], "domino_ddi() (in module pypath.inputs.domino)": [[314, "pypath.inputs.domino.domino_ddi"]], "domino_enzsub() (in module pypath.inputs.domino)": [[315, "pypath.inputs.domino.domino_enzsub"]], "domino_interactions() (in module pypath.inputs.domino)": [[316, "pypath.inputs.domino.domino_interactions"]], "get_domino() (in module pypath.inputs.domino)": [[317, "pypath.inputs.domino.get_domino"]], "pypath.inputs.dorothea": [[318, "module-pypath.inputs.dorothea"]], "dorotheainteraction (class in pypath.inputs.dorothea)": [[319, "pypath.inputs.dorothea.DorotheaInteraction"]], "__init__() (pypath.inputs.dorothea.dorotheainteraction method)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.__init__"]], "all_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.all_sources"]], "chipseq (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.chipseq"]], "chipseq_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.chipseq_sources"]], "coexp (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.coexp"]], "coexp_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.coexp_sources"]], "count() (pypath.inputs.dorothea.dorotheainteraction method)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.count"]], "curated (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.curated"]], "curated_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.curated_sources"]], "effect (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.effect"]], "index() (pypath.inputs.dorothea.dorotheainteraction method)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.index"]], "kegg_pathways (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.kegg_pathways"]], "level (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.level"]], "predicted (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.predicted"]], "predicted_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.predicted_sources"]], "pubmed (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.pubmed"]], "target (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.target"]], "tf (pypath.inputs.dorothea.dorotheainteraction attribute)": [[319, "pypath.inputs.dorothea.DorotheaInteraction.tf"]], "dorothea_full_raw() (in module pypath.inputs.dorothea)": [[320, "pypath.inputs.dorothea.dorothea_full_raw"]], "dorothea_interactions() (in module pypath.inputs.dorothea)": [[321, "pypath.inputs.dorothea.dorothea_interactions"]], "dorothea_interactions_old() (in module pypath.inputs.dorothea)": [[322, "pypath.inputs.dorothea.dorothea_interactions_old"]], "dorothea_old_csv() (in module pypath.inputs.dorothea)": [[323, "pypath.inputs.dorothea.dorothea_old_csv"]], "dorothea_rda_raw() (in module pypath.inputs.dorothea)": [[324, "pypath.inputs.dorothea.dorothea_rda_raw"]], "get_dorothea_old() (in module pypath.inputs.dorothea)": [[325, "pypath.inputs.dorothea.get_dorothea_old"]], "get_tfregulons() (in module pypath.inputs.dorothea)": [[326, "pypath.inputs.dorothea.get_tfregulons"]], "tfregulons_interactions() (in module pypath.inputs.dorothea)": [[327, "pypath.inputs.dorothea.tfregulons_interactions"]], "tfregulons_interactions_old() (in module pypath.inputs.dorothea)": [[328, "pypath.inputs.dorothea.tfregulons_interactions_old"]], "pypath.inputs.drugbank": [[329, "module-pypath.inputs.drugbank"]], "drugbankfull (class in pypath.inputs.drugbank)": [[330, "pypath.inputs.drugbank.DrugbankFull"]], "__init__() (pypath.inputs.drugbank.drugbankfull method)": [[330, "pypath.inputs.drugbank.DrugbankFull.__init__"]], "drugbank_drugs_full() (pypath.inputs.drugbank.drugbankfull method)": [[330, "pypath.inputs.drugbank.DrugbankFull.drugbank_drugs_full"]], "drugbank_external_ids_full() (pypath.inputs.drugbank.drugbankfull method)": [[330, "pypath.inputs.drugbank.DrugbankFull.drugbank_external_ids_full"]], "drugbank_targets_full() (pypath.inputs.drugbank.drugbankfull method)": [[330, "pypath.inputs.drugbank.DrugbankFull.drugbank_targets_full"]], "drugbank_annotations() (in module pypath.inputs.drugbank)": [[331, "pypath.inputs.drugbank.drugbank_annotations"]], "drugbank_drugs() (in module pypath.inputs.drugbank)": [[332, "pypath.inputs.drugbank.drugbank_drugs"]], "drugbank_interactions() (in module pypath.inputs.drugbank)": [[333, "pypath.inputs.drugbank.drugbank_interactions"]], "drugbank_mapping() (in module pypath.inputs.drugbank)": [[334, "pypath.inputs.drugbank.drugbank_mapping"]], "drugbank_raw_interactions() (in module pypath.inputs.drugbank)": [[335, "pypath.inputs.drugbank.drugbank_raw_interactions"]], "pypath.inputs.drugcentral": [[336, "module-pypath.inputs.drugcentral"]], "drugcentral_drugs() (in module pypath.inputs.drugcentral)": [[337, "pypath.inputs.drugcentral.drugcentral_drugs"]], "drugcentral_interactions() (in module pypath.inputs.drugcentral)": [[338, "pypath.inputs.drugcentral.drugcentral_interactions"]], "drugcentral_mapping() (in module pypath.inputs.drugcentral)": [[339, "pypath.inputs.drugcentral.drugcentral_mapping"]], "pypath.inputs.ebi": [[340, "module-pypath.inputs.ebi"]], "ebi_rest() (in module pypath.inputs.ebi)": [[341, "pypath.inputs.ebi.ebi_rest"]], "pypath.inputs.elm": [[342, "module-pypath.inputs.elm"]], "elm_classes() (in module pypath.inputs.elm)": [[343, "pypath.inputs.elm.elm_classes"]], "elm_domains() (in module pypath.inputs.elm)": [[344, "pypath.inputs.elm.elm_domains"]], "elm_instances() (in module pypath.inputs.elm)": [[345, "pypath.inputs.elm.elm_instances"]], "elm_interactions() (in module pypath.inputs.elm)": [[346, "pypath.inputs.elm.elm_interactions"]], "pypath.inputs.embopress": [[347, "module-pypath.inputs.embopress"]], "embopress_supplementary() (in module pypath.inputs.embopress)": [[348, "pypath.inputs.embopress.embopress_supplementary"]], "pypath.inputs.embrace": [[349, "module-pypath.inputs.embrace"]], "embrace_annotations() (in module pypath.inputs.embrace)": [[350, "pypath.inputs.embrace.embrace_annotations"]], "embrace_interactions() (in module pypath.inputs.embrace)": [[351, "pypath.inputs.embrace.embrace_interactions"]], "embrace_raw() (in module pypath.inputs.embrace)": [[352, "pypath.inputs.embrace.embrace_raw"]], "embrace_translated() (in module pypath.inputs.embrace)": [[353, "pypath.inputs.embrace.embrace_translated"]], "pypath.inputs.encode": [[354, "module-pypath.inputs.encode"]], "encode_tf_mirna_interactions() (in module pypath.inputs.encode)": [[355, "pypath.inputs.encode.encode_tf_mirna_interactions"]], "pypath.inputs.ensembl": [[356, "module-pypath.inputs.ensembl"]], "ensembl_organisms() (in module pypath.inputs.ensembl)": [[357, "pypath.inputs.ensembl.ensembl_organisms"]], "pypath.inputs.exocarta": [[358, "module-pypath.inputs.exocarta"]], "get_exocarta() (in module pypath.inputs.exocarta)": [[359, "pypath.inputs.exocarta.get_exocarta"]], "get_vesiclepedia() (in module pypath.inputs.exocarta)": [[360, "pypath.inputs.exocarta.get_vesiclepedia"]], "pypath.inputs.genecards": [[361, "module-pypath.inputs.genecards"]], "genecards_datasheet() (in module pypath.inputs.genecards)": [[362, "pypath.inputs.genecards.genecards_datasheet"]], "genecards_soup() (in module pypath.inputs.genecards)": [[363, "pypath.inputs.genecards.genecards_soup"]], "genecards_summaries() (in module pypath.inputs.genecards)": [[364, "pypath.inputs.genecards.genecards_summaries"]], "get_method() (in module pypath.inputs)": [[365, "pypath.inputs.get_method"]], "pypath.inputs.go": [[366, "module-pypath.inputs.go"]], "get_go_desc() (in module pypath.inputs.go)": [[367, "pypath.inputs.go.get_go_desc"]], "get_go_quick() (in module pypath.inputs.go)": [[368, "pypath.inputs.go.get_go_quick"]], "get_goslim() (in module pypath.inputs.go)": [[369, "pypath.inputs.go.get_goslim"]], "go_ancestors() (in module pypath.inputs.go)": [[370, "pypath.inputs.go.go_ancestors"]], "go_ancestors_goose() (in module pypath.inputs.go)": [[371, "pypath.inputs.go.go_ancestors_goose"]], "go_ancestors_quickgo() (in module pypath.inputs.go)": [[372, "pypath.inputs.go.go_ancestors_quickgo"]], "go_annotations() (in module pypath.inputs.go)": [[373, "pypath.inputs.go.go_annotations"]], "go_annotations_all() (in module pypath.inputs.go)": [[374, "pypath.inputs.go.go_annotations_all"]], "go_annotations_goa() (in module pypath.inputs.go)": [[375, "pypath.inputs.go.go_annotations_goa"]], "go_annotations_goose() (in module pypath.inputs.go)": [[376, "pypath.inputs.go.go_annotations_goose"]], "go_annotations_quickgo() (in module pypath.inputs.go)": [[377, "pypath.inputs.go.go_annotations_quickgo"]], "go_annotations_solr() (in module pypath.inputs.go)": [[378, "pypath.inputs.go.go_annotations_solr"]], "go_annotations_uniprot() (in module pypath.inputs.go)": [[379, "pypath.inputs.go.go_annotations_uniprot"]], "go_descendants() (in module pypath.inputs.go)": [[380, "pypath.inputs.go.go_descendants"]], "go_descendants_goose() (in module pypath.inputs.go)": [[381, "pypath.inputs.go.go_descendants_goose"]], "go_descendants_quickgo() (in module pypath.inputs.go)": [[382, "pypath.inputs.go.go_descendants_quickgo"]], "go_descendants_to_ancestors() (in module pypath.inputs.go)": [[383, "pypath.inputs.go.go_descendants_to_ancestors"]], "go_terms() (in module pypath.inputs.go)": [[384, "pypath.inputs.go.go_terms"]], "go_terms_goose() (in module pypath.inputs.go)": [[385, "pypath.inputs.go.go_terms_goose"]], "go_terms_quickgo() (in module pypath.inputs.go)": [[386, "pypath.inputs.go.go_terms_quickgo"]], "go_terms_solr() (in module pypath.inputs.go)": [[387, "pypath.inputs.go.go_terms_solr"]], "pypath.inputs.gpcrdb": [[388, "module-pypath.inputs.gpcrdb"]], "gpcrdb_annotations() (in module pypath.inputs.gpcrdb)": [[389, "pypath.inputs.gpcrdb.gpcrdb_annotations"]], "pypath.inputs.graphviz": [[390, "module-pypath.inputs.graphviz"]], "graphviz_attrs() (in module pypath.inputs.graphviz)": [[391, "pypath.inputs.graphviz.graphviz_attrs"]], "pypath.inputs.guide2pharma": [[392, "module-pypath.inputs.guide2pharma"]], "guide2pharma_complexes() (in module pypath.inputs.guide2pharma)": [[393, "pypath.inputs.guide2pharma.guide2pharma_complexes"]], "guide2pharma_download() (in module pypath.inputs.guide2pharma)": [[394, "pypath.inputs.guide2pharma.guide2pharma_download"]], "guide2pharma_interactions() (in module pypath.inputs.guide2pharma)": [[395, "pypath.inputs.guide2pharma.guide2pharma_interactions"]], "pypath.inputs.havugimana": [[396, "module-pypath.inputs.havugimana"]], "get_havugimana() (in module pypath.inputs.havugimana)": [[397, "pypath.inputs.havugimana.get_havugimana"]], "havugimana_complexes() (in module pypath.inputs.havugimana)": [[398, "pypath.inputs.havugimana.havugimana_complexes"]], "pypath.inputs.hgnc": [[399, "module-pypath.inputs.hgnc"]], "hgnc_genegroups() (in module pypath.inputs.hgnc)": [[400, "pypath.inputs.hgnc.hgnc_genegroups"]], "pypath.inputs.hippie": [[401, "module-pypath.inputs.hippie"]], "hippie_interactions() (in module pypath.inputs.hippie)": [[402, "pypath.inputs.hippie.hippie_interactions"]], "pypath.inputs.homologene": [[403, "module-pypath.inputs.homologene"]], "get_homologene() (in module pypath.inputs.homologene)": [[404, "pypath.inputs.homologene.get_homologene"]], "homologene_dict() (in module pypath.inputs.homologene)": [[405, "pypath.inputs.homologene.homologene_dict"]], "homologene_uniprot_dict() (in module pypath.inputs.homologene)": [[406, "pypath.inputs.homologene.homologene_uniprot_dict"]], "pypath.inputs.hpmr": [[407, "module-pypath.inputs.hpmr"]], "hpmrinteraction (class in pypath.inputs.hpmr)": [[408, "pypath.inputs.hpmr.HpmrInteraction"]], "__init__() (pypath.inputs.hpmr.hpmrinteraction method)": [[408, "pypath.inputs.hpmr.HpmrInteraction.__init__"]], "count() (pypath.inputs.hpmr.hpmrinteraction method)": [[408, "pypath.inputs.hpmr.HpmrInteraction.count"]], "index() (pypath.inputs.hpmr.hpmrinteraction method)": [[408, "pypath.inputs.hpmr.HpmrInteraction.index"]], "partner (pypath.inputs.hpmr.hpmrinteraction attribute)": [[408, "pypath.inputs.hpmr.HpmrInteraction.partner"]], "partner_role (pypath.inputs.hpmr.hpmrinteraction attribute)": [[408, "pypath.inputs.hpmr.HpmrInteraction.partner_role"]], "receptor (pypath.inputs.hpmr.hpmrinteraction attribute)": [[408, "pypath.inputs.hpmr.HpmrInteraction.receptor"]], "references (pypath.inputs.hpmr.hpmrinteraction attribute)": [[408, "pypath.inputs.hpmr.HpmrInteraction.references"]], "unambiguous (pypath.inputs.hpmr.hpmrinteraction attribute)": [[408, "pypath.inputs.hpmr.HpmrInteraction.unambiguous"]], "get_hpmr() (in module pypath.inputs.hpmr)": [[409, "pypath.inputs.hpmr.get_hpmr"]], "hpmr_annotations() (in module pypath.inputs.hpmr)": [[410, "pypath.inputs.hpmr.hpmr_annotations"]], "hpmr_complexes() (in module pypath.inputs.hpmr)": [[411, "pypath.inputs.hpmr.hpmr_complexes"]], "hpmr_interactions() (in module pypath.inputs.hpmr)": [[412, "pypath.inputs.hpmr.hpmr_interactions"]], "pypath.inputs.hpo": [[413, "module-pypath.inputs.hpo"]], "hpo_annotations() (in module pypath.inputs.hpo)": [[414, "pypath.inputs.hpo.hpo_annotations"]], "hpo_diseases() (in module pypath.inputs.hpo)": [[415, "pypath.inputs.hpo.hpo_diseases"]], "hpo_ontology() (in module pypath.inputs.hpo)": [[416, "pypath.inputs.hpo.hpo_ontology"]], "hpo_terms() (in module pypath.inputs.hpo)": [[417, "pypath.inputs.hpo.hpo_terms"]], "pypath.inputs.hprd": [[418, "module-pypath.inputs.hprd"]], "get_hprd() (in module pypath.inputs.hprd)": [[419, "pypath.inputs.hprd.get_hprd"]], "hprd_enzyme_substrate() (in module pypath.inputs.hprd)": [[420, "pypath.inputs.hprd.hprd_enzyme_substrate"]], "hprd_interactions() (in module pypath.inputs.hprd)": [[421, "pypath.inputs.hprd.hprd_interactions"]], "hprd_interactions_htp() (in module pypath.inputs.hprd)": [[422, "pypath.inputs.hprd.hprd_interactions_htp"]], "pypath.inputs.htri": [[423, "module-pypath.inputs.htri"]], "htri_interactions() (in module pypath.inputs.htri)": [[424, "pypath.inputs.htri.htri_interactions"]], "pypath.inputs.humancellmap": [[425, "module-pypath.inputs.humancellmap"]], "humancellmap_annotations() (in module pypath.inputs.humancellmap)": [[426, "pypath.inputs.humancellmap.humancellmap_annotations"]], "pypath.inputs.humap": [[427, "module-pypath.inputs.humap"]], "humap2_complexes() (in module pypath.inputs.humap)": [[428, "pypath.inputs.humap.humap2_complexes"]], "humap_complexes() (in module pypath.inputs.humap)": [[429, "pypath.inputs.humap.humap_complexes"]], "pypath.inputs.huri": [[430, "module-pypath.inputs.huri"]], "hi_i_interactions() (in module pypath.inputs.huri)": [[431, "pypath.inputs.huri.hi_i_interactions"]], "hi_ii_interactions() (in module pypath.inputs.huri)": [[432, "pypath.inputs.huri.hi_ii_interactions"]], "hi_iii_old() (in module pypath.inputs.huri)": [[433, "pypath.inputs.huri.hi_iii_old"]], "hi_union_interactions() (in module pypath.inputs.huri)": [[434, "pypath.inputs.huri.hi_union_interactions"]], "huri_interactions() (in module pypath.inputs.huri)": [[435, "pypath.inputs.huri.huri_interactions"]], "lit_bm_13_interactions() (in module pypath.inputs.huri)": [[436, "pypath.inputs.huri.lit_bm_13_interactions"]], "lit_bm_17_interactions() (in module pypath.inputs.huri)": [[437, "pypath.inputs.huri.lit_bm_17_interactions"]], "lit_bm_interactions() (in module pypath.inputs.huri)": [[438, "pypath.inputs.huri.lit_bm_interactions"]], "rolland_hi_ii_14() (in module pypath.inputs.huri)": [[439, "pypath.inputs.huri.rolland_hi_ii_14"]], "vidal_hi_iii_old() (in module pypath.inputs.huri)": [[440, "pypath.inputs.huri.vidal_hi_iii_old"]], "yang2016_interactions() (in module pypath.inputs.huri)": [[441, "pypath.inputs.huri.yang2016_interactions"]], "yu2011_interactions() (in module pypath.inputs.huri)": [[442, "pypath.inputs.huri.yu2011_interactions"]], "pypath.inputs.i3d": [[443, "module-pypath.inputs.i3d"]], "get_i3d() (in module pypath.inputs.i3d)": [[444, "pypath.inputs.i3d.get_i3d"]], "pypath.inputs.icellnet": [[445, "module-pypath.inputs.icellnet"]], "icellnetrecord (class in pypath.inputs.icellnet)": [[446, "pypath.inputs.icellnet.IcellnetRecord"]], "__init__() (pypath.inputs.icellnet.icellnetrecord method)": [[446, "pypath.inputs.icellnet.IcellnetRecord.__init__"]], "classification (pypath.inputs.icellnet.icellnetrecord attribute)": [[446, "pypath.inputs.icellnet.IcellnetRecord.classification"]], "count() (pypath.inputs.icellnet.icellnetrecord method)": [[446, "pypath.inputs.icellnet.IcellnetRecord.count"]], "family (pypath.inputs.icellnet.icellnetrecord attribute)": [[446, "pypath.inputs.icellnet.IcellnetRecord.family"]], "index() (pypath.inputs.icellnet.icellnetrecord method)": [[446, "pypath.inputs.icellnet.IcellnetRecord.index"]], "ligand (pypath.inputs.icellnet.icellnetrecord attribute)": [[446, "pypath.inputs.icellnet.IcellnetRecord.ligand"]], "receptor (pypath.inputs.icellnet.icellnetrecord attribute)": [[446, "pypath.inputs.icellnet.IcellnetRecord.receptor"]], "references (pypath.inputs.icellnet.icellnetrecord attribute)": [[446, "pypath.inputs.icellnet.IcellnetRecord.references"]], "resources (pypath.inputs.icellnet.icellnetrecord attribute)": [[446, "pypath.inputs.icellnet.IcellnetRecord.resources"]], "subfamily (pypath.inputs.icellnet.icellnetrecord attribute)": [[446, "pypath.inputs.icellnet.IcellnetRecord.subfamily"]], "icellnet_annotations() (in module pypath.inputs.icellnet)": [[447, "pypath.inputs.icellnet.icellnet_annotations"]], "icellnet_complexes() (in module pypath.inputs.icellnet)": [[448, "pypath.inputs.icellnet.icellnet_complexes"]], "icellnet_interactions() (in module pypath.inputs.icellnet)": [[449, "pypath.inputs.icellnet.icellnet_interactions"]], "pypath.inputs.ielm": [[450, "module-pypath.inputs.ielm"]], "get_ielm() (in module pypath.inputs.ielm)": [[451, "pypath.inputs.ielm.get_ielm"]], "get_ielm_huge() (in module pypath.inputs.ielm)": [[452, "pypath.inputs.ielm.get_ielm_huge"]], "pypath.inputs.imweb": [[453, "module-pypath.inputs.imweb"]], "get_imweb() (in module pypath.inputs.imweb)": [[454, "pypath.inputs.imweb.get_imweb"]], "get_imweb_req() (in module pypath.inputs.imweb)": [[455, "pypath.inputs.imweb.get_imweb_req"]], "pypath.inputs.innatedb": [[456, "module-pypath.inputs.innatedb"]], "innatedb_interactions() (in module pypath.inputs.innatedb)": [[457, "pypath.inputs.innatedb.innatedb_interactions"]], "pypath.inputs.instruct": [[458, "module-pypath.inputs.instruct"]], "get_instruct() (in module pypath.inputs.instruct)": [[459, "pypath.inputs.instruct.get_instruct"]], "get_instruct_offsets() (in module pypath.inputs.instruct)": [[460, "pypath.inputs.instruct.get_instruct_offsets"]], "pypath.inputs.intact": [[461, "module-pypath.inputs.intact"]], "intact_interactions() (in module pypath.inputs.intact)": [[462, "pypath.inputs.intact.intact_interactions"]], "pypath.inputs.integrins": [[463, "module-pypath.inputs.integrins"]], "get_integrins() (in module pypath.inputs.integrins)": [[464, "pypath.inputs.integrins.get_integrins"]], "pypath.inputs.interpro": [[465, "module-pypath.inputs.interpro"]], "interpro2go_annotations() (in module pypath.inputs.interpro)": [[466, "pypath.inputs.interpro.interpro2go_annotations"]], "interpro_annotations() (in module pypath.inputs.interpro)": [[467, "pypath.inputs.interpro.interpro_annotations"]], "interpro_entries() (in module pypath.inputs.interpro)": [[468, "pypath.inputs.interpro.interpro_entries"]], "interpro_xrefs() (in module pypath.inputs.interpro)": [[469, "pypath.inputs.interpro.interpro_xrefs"]], "pypath.inputs.intogen": [[470, "module-pypath.inputs.intogen"]], "intogen_annotations() (in module pypath.inputs.intogen)": [[471, "pypath.inputs.intogen.intogen_annotations"]], "pypath.inputs.ipi": [[472, "module-pypath.inputs.ipi"]], "ipi_uniprot() (in module pypath.inputs.ipi)": [[473, "pypath.inputs.ipi.ipi_uniprot"]], "pypath.inputs.iptmnet": [[474, "module-pypath.inputs.iptmnet"]], "iptmnetinteraction (class in pypath.inputs.iptmnet)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction"]], "__init__() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.__init__"]], "count() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.count"]], "enzyme (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.enzyme"]], "enzyme_isoform (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.enzyme_isoform"]], "index() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.index"]], "ptm_type (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.ptm_type"]], "references (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.references"]], "resaa (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.resaa"]], "resnum (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.resnum"]], "score (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.score"]], "substrate (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.substrate"]], "substrate_isoform (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[475, "pypath.inputs.iptmnet.IptmnetInteraction.substrate_isoform"]], "iptmnet_interactions() (in module pypath.inputs.iptmnet)": [[476, "pypath.inputs.iptmnet.iptmnet_interactions"]], "pypath.inputs.italk": [[477, "module-pypath.inputs.italk"]], "italk_annotations() (in module pypath.inputs.italk)": [[478, "pypath.inputs.italk.italk_annotations"]], "italk_interactions() (in module pypath.inputs.italk)": [[479, "pypath.inputs.italk.italk_interactions"]], "italk_raw() (in module pypath.inputs.italk)": [[480, "pypath.inputs.italk.italk_raw"]], "pypath.inputs.kea": [[481, "module-pypath.inputs.kea"]], "kea_enzyme_substrate() (in module pypath.inputs.kea)": [[482, "pypath.inputs.kea.kea_enzyme_substrate"]], "kea_interactions() (in module pypath.inputs.kea)": [[483, "pypath.inputs.kea.kea_interactions"]], "pypath.inputs.kegg": [[484, "module-pypath.inputs.kegg"]], "keggpathway (class in pypath.inputs.kegg)": [[485, "pypath.inputs.kegg.KeggPathway"]], "__init__() (pypath.inputs.kegg.keggpathway method)": [[485, "pypath.inputs.kegg.KeggPathway.__init__"]], "count() (pypath.inputs.kegg.keggpathway method)": [[485, "pypath.inputs.kegg.KeggPathway.count"]], "index() (pypath.inputs.kegg.keggpathway method)": [[485, "pypath.inputs.kegg.KeggPathway.index"]], "pathway (pypath.inputs.kegg.keggpathway attribute)": [[485, "pypath.inputs.kegg.KeggPathway.pathway"]], "kegg_dbget() (in module pypath.inputs.kegg)": [[486, "pypath.inputs.kegg.kegg_dbget"]], "kegg_interactions() (in module pypath.inputs.kegg)": [[487, "pypath.inputs.kegg.kegg_interactions"]], "kegg_medicus() (in module pypath.inputs.kegg)": [[488, "pypath.inputs.kegg.kegg_medicus"]], "kegg_medicus_complexes() (in module pypath.inputs.kegg)": [[489, "pypath.inputs.kegg.kegg_medicus_complexes"]], "kegg_medicus_interactions() (in module pypath.inputs.kegg)": [[490, "pypath.inputs.kegg.kegg_medicus_interactions"]], "kegg_pathway_annotations() (in module pypath.inputs.kegg)": [[491, "pypath.inputs.kegg.kegg_pathway_annotations"]], "kegg_pathway_annotations_pathwaycommons() (in module pypath.inputs.kegg)": [[492, "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons"]], "kegg_pathways() (in module pypath.inputs.kegg)": [[493, "pypath.inputs.kegg.kegg_pathways"]], "pypath.inputs.kegg_api": [[494, "module-pypath.inputs.kegg_api"]], "disease_to_drug() (in module pypath.inputs.kegg_api)": [[495, "pypath.inputs.kegg_api.disease_to_drug"]], "disease_to_gene() (in module pypath.inputs.kegg_api)": [[496, "pypath.inputs.kegg_api.disease_to_gene"]], "disease_to_pathway() (in module pypath.inputs.kegg_api)": [[497, "pypath.inputs.kegg_api.disease_to_pathway"]], "drug_to_disease() (in module pypath.inputs.kegg_api)": [[498, "pypath.inputs.kegg_api.drug_to_disease"]], "drug_to_drug() (in module pypath.inputs.kegg_api)": [[499, "pypath.inputs.kegg_api.drug_to_drug"]], "drug_to_gene() (in module pypath.inputs.kegg_api)": [[500, "pypath.inputs.kegg_api.drug_to_gene"]], "drug_to_pathway() (in module pypath.inputs.kegg_api)": [[501, "pypath.inputs.kegg_api.drug_to_pathway"]], "gene_to_disease() (in module pypath.inputs.kegg_api)": [[502, "pypath.inputs.kegg_api.gene_to_disease"]], "gene_to_drug() (in module pypath.inputs.kegg_api)": [[503, "pypath.inputs.kegg_api.gene_to_drug"]], "gene_to_pathway() (in module pypath.inputs.kegg_api)": [[504, "pypath.inputs.kegg_api.gene_to_pathway"]], "kegg_drug_to_chebi() (in module pypath.inputs.kegg_api)": [[505, "pypath.inputs.kegg_api.kegg_drug_to_chebi"]], "kegg_gene_to_ncbi_geneid() (in module pypath.inputs.kegg_api)": [[506, "pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid"]], "kegg_gene_to_uniprot() (in module pypath.inputs.kegg_api)": [[507, "pypath.inputs.kegg_api.kegg_gene_to_uniprot"]], "pathway_to_disease() (in module pypath.inputs.kegg_api)": [[508, "pypath.inputs.kegg_api.pathway_to_disease"]], "pathway_to_drug() (in module pypath.inputs.kegg_api)": [[509, "pypath.inputs.kegg_api.pathway_to_drug"]], "pathway_to_gene() (in module pypath.inputs.kegg_api)": [[510, "pypath.inputs.kegg_api.pathway_to_gene"]], "pypath.inputs.kinasedotcom": [[511, "module-pypath.inputs.kinasedotcom"]], "kinasedotcom_annotations() (in module pypath.inputs.kinasedotcom)": [[512, "pypath.inputs.kinasedotcom.kinasedotcom_annotations"]], "pypath.inputs.kirouac2010": [[513, "module-pypath.inputs.kirouac2010"]], "kirouac2010_interactions() (in module pypath.inputs.kirouac2010)": [[514, "pypath.inputs.kirouac2010.kirouac2010_interactions"]], "pypath.inputs.lambert2018": [[515, "module-pypath.inputs.lambert2018"]], "lambert2018_annotations() (in module pypath.inputs.lambert2018)": [[516, "pypath.inputs.lambert2018.lambert2018_annotations"]], "lambert2018_s1_raw() (in module pypath.inputs.lambert2018)": [[517, "pypath.inputs.lambert2018.lambert2018_s1_raw"]], "pypath.inputs.laudanna": [[518, "module-pypath.inputs.laudanna"]], "laudanna_directions() (in module pypath.inputs.laudanna)": [[519, "pypath.inputs.laudanna.laudanna_directions"]], "laudanna_effects() (in module pypath.inputs.laudanna)": [[520, "pypath.inputs.laudanna.laudanna_effects"]], "pypath.inputs.li2012": [[521, "module-pypath.inputs.li2012"]], "get_li2012() (in module pypath.inputs.li2012)": [[522, "pypath.inputs.li2012.get_li2012"]], "li2012_dmi() (in module pypath.inputs.li2012)": [[523, "pypath.inputs.li2012.li2012_dmi"]], "li2012_enzyme_substrate() (in module pypath.inputs.li2012)": [[524, "pypath.inputs.li2012.li2012_enzyme_substrate"]], "li2012_interactions() (in module pypath.inputs.li2012)": [[525, "pypath.inputs.li2012.li2012_interactions"]], "pypath.inputs.lincs": [[526, "module-pypath.inputs.lincs"]], "lincs_compounds() (in module pypath.inputs.lincs)": [[527, "pypath.inputs.lincs.lincs_compounds"]], "pypath.inputs.lmpid": [[528, "module-pypath.inputs.lmpid"]], "lmpid_dmi() (in module pypath.inputs.lmpid)": [[529, "pypath.inputs.lmpid.lmpid_dmi"]], "lmpid_interactions() (in module pypath.inputs.lmpid)": [[530, "pypath.inputs.lmpid.lmpid_interactions"]], "load_lmpid() (in module pypath.inputs.lmpid)": [[531, "pypath.inputs.lmpid.load_lmpid"]], "pypath.inputs.lncdisease": [[532, "module-pypath.inputs.lncdisease"]], "lncdisease_interactions() (in module pypath.inputs.lncdisease)": [[533, "pypath.inputs.lncdisease.lncdisease_interactions"]], "pypath.inputs.lncrnadb": [[534, "module-pypath.inputs.lncrnadb"]], "lncrnadb_interactions() (in module pypath.inputs.lncrnadb)": [[535, "pypath.inputs.lncrnadb.lncrnadb_interactions"]], "pypath.inputs.locate": [[536, "module-pypath.inputs.locate"]], "locate_localizations() (in module pypath.inputs.locate)": [[537, "pypath.inputs.locate.locate_localizations"]], "pypath.inputs.lrdb": [[538, "module-pypath.inputs.lrdb"]], "lrdbannotation (class in pypath.inputs.lrdb)": [[539, "pypath.inputs.lrdb.LrdbAnnotation"]], "__init__() (pypath.inputs.lrdb.lrdbannotation method)": [[539, "pypath.inputs.lrdb.LrdbAnnotation.__init__"]], "cell_type (pypath.inputs.lrdb.lrdbannotation attribute)": [[539, "pypath.inputs.lrdb.LrdbAnnotation.cell_type"]], "count() (pypath.inputs.lrdb.lrdbannotation method)": [[539, "pypath.inputs.lrdb.LrdbAnnotation.count"]], "index() (pypath.inputs.lrdb.lrdbannotation method)": [[539, "pypath.inputs.lrdb.LrdbAnnotation.index"]], "references (pypath.inputs.lrdb.lrdbannotation attribute)": [[539, "pypath.inputs.lrdb.LrdbAnnotation.references"]], "role (pypath.inputs.lrdb.lrdbannotation attribute)": [[539, "pypath.inputs.lrdb.LrdbAnnotation.role"]], "sources (pypath.inputs.lrdb.lrdbannotation attribute)": [[539, "pypath.inputs.lrdb.LrdbAnnotation.sources"]], "lrdb_annotations() (in module pypath.inputs.lrdb)": [[540, "pypath.inputs.lrdb.lrdb_annotations"]], "lrdb_interactions() (in module pypath.inputs.lrdb)": [[541, "pypath.inputs.lrdb.lrdb_interactions"]], "pypath.inputs.macrophage": [[542, "module-pypath.inputs.macrophage"]], "macrophage_interactions() (in module pypath.inputs.macrophage)": [[543, "pypath.inputs.macrophage.macrophage_interactions"]], "pypath.inputs.main": [[544, "module-pypath.inputs.main"]], "pypath.inputs.matrisome": [[545, "module-pypath.inputs.matrisome"]], "matrisome_annotations() (in module pypath.inputs.matrisome)": [[546, "pypath.inputs.matrisome.matrisome_annotations"]], "pypath.inputs.matrixdb": [[547, "module-pypath.inputs.matrixdb"]], "matrixdb_annotations() (in module pypath.inputs.matrixdb)": [[548, "pypath.inputs.matrixdb.matrixdb_annotations"]], "matrixdb_ecm_proteins() (in module pypath.inputs.matrixdb)": [[549, "pypath.inputs.matrixdb.matrixdb_ecm_proteins"]], "matrixdb_interactions() (in module pypath.inputs.matrixdb)": [[550, "pypath.inputs.matrixdb.matrixdb_interactions"]], "matrixdb_membrane_proteins() (in module pypath.inputs.matrixdb)": [[551, "pypath.inputs.matrixdb.matrixdb_membrane_proteins"]], "matrixdb_secreted_proteins() (in module pypath.inputs.matrixdb)": [[552, "pypath.inputs.matrixdb.matrixdb_secreted_proteins"]], "pypath.inputs.mcam": [[553, "module-pypath.inputs.mcam"]], "mcam_cell_adhesion_molecules() (in module pypath.inputs.mcam)": [[554, "pypath.inputs.mcam.mcam_cell_adhesion_molecules"]], "pypath.inputs.membranome": [[555, "module-pypath.inputs.membranome"]], "membranome_annotations() (in module pypath.inputs.membranome)": [[556, "pypath.inputs.membranome.membranome_annotations"]], "pypath.inputs.mimp": [[557, "module-pypath.inputs.mimp"]], "get_kinase_class() (in module pypath.inputs.mimp)": [[558, "pypath.inputs.mimp.get_kinase_class"]], "mimp_enzyme_substrate() (in module pypath.inputs.mimp)": [[559, "pypath.inputs.mimp.mimp_enzyme_substrate"]], "mimp_interactions() (in module pypath.inputs.mimp)": [[560, "pypath.inputs.mimp.mimp_interactions"]], "pypath.inputs.mir2disease": [[561, "module-pypath.inputs.mir2disease"]], "mir2disease_interactions() (in module pypath.inputs.mir2disease)": [[562, "pypath.inputs.mir2disease.mir2disease_interactions"]], "pypath.inputs.mirbase": [[563, "module-pypath.inputs.mirbase"]], "get_mirbase_aliases() (in module pypath.inputs.mirbase)": [[564, "pypath.inputs.mirbase.get_mirbase_aliases"]], "mirbase_ids() (in module pypath.inputs.mirbase)": [[565, "pypath.inputs.mirbase.mirbase_ids"]], "mirbase_mature() (in module pypath.inputs.mirbase)": [[566, "pypath.inputs.mirbase.mirbase_mature"]], "mirbase_mature_all() (in module pypath.inputs.mirbase)": [[567, "pypath.inputs.mirbase.mirbase_mature_all"]], "mirbase_precursor() (in module pypath.inputs.mirbase)": [[568, "pypath.inputs.mirbase.mirbase_precursor"]], "mirbase_precursor_all() (in module pypath.inputs.mirbase)": [[569, "pypath.inputs.mirbase.mirbase_precursor_all"]], "mirbase_precursor_to_mature() (in module pypath.inputs.mirbase)": [[570, "pypath.inputs.mirbase.mirbase_precursor_to_mature"]], "pypath.inputs.mirdeathdb": [[571, "module-pypath.inputs.mirdeathdb"]], "mirdeathdb_interactions() (in module pypath.inputs.mirdeathdb)": [[572, "pypath.inputs.mirdeathdb.mirdeathdb_interactions"]], "pypath.inputs.mirecords": [[573, "module-pypath.inputs.mirecords"]], "mirecords_interactions() (in module pypath.inputs.mirecords)": [[574, "pypath.inputs.mirecords.mirecords_interactions"]], "pypath.inputs.mirtarbase": [[575, "module-pypath.inputs.mirtarbase"]], "mirtarbase_interactions() (in module pypath.inputs.mirtarbase)": [[576, "pypath.inputs.mirtarbase.mirtarbase_interactions"]], "pypath.inputs.mitab": [[577, "module-pypath.inputs.mitab"]], "mitab_field_list() (in module pypath.inputs.mitab)": [[578, "pypath.inputs.mitab.mitab_field_list"]], "mitab_field_uniprot() (in module pypath.inputs.mitab)": [[579, "pypath.inputs.mitab.mitab_field_uniprot"]], "pypath.inputs.mppi": [[580, "module-pypath.inputs.mppi"]], "mppi_interactions() (in module pypath.inputs.mppi)": [[581, "pypath.inputs.mppi.mppi_interactions"]], "pypath.inputs.ncrdeathdb": [[582, "module-pypath.inputs.ncrdeathdb"]], "ncrdeathdb_interactions() (in module pypath.inputs.ncrdeathdb)": [[583, "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions"]], "pypath.inputs.negatome": [[584, "module-pypath.inputs.negatome"]], "negatome_interactions() (in module pypath.inputs.negatome)": [[585, "pypath.inputs.negatome.negatome_interactions"]], "pypath.inputs.netbiol": [[586, "module-pypath.inputs.netbiol"]], "arn_interactions() (in module pypath.inputs.netbiol)": [[587, "pypath.inputs.netbiol.arn_interactions"]], "nrf2ome_interactions() (in module pypath.inputs.netbiol)": [[588, "pypath.inputs.netbiol.nrf2ome_interactions"]], "pypath.inputs.netpath": [[589, "module-pypath.inputs.netpath"]], "netpath_interactions() (in module pypath.inputs.netpath)": [[590, "pypath.inputs.netpath.netpath_interactions"]], "netpath_names() (in module pypath.inputs.netpath)": [[591, "pypath.inputs.netpath.netpath_names"]], "netpath_pathway_annotations() (in module pypath.inputs.netpath)": [[592, "pypath.inputs.netpath.netpath_pathway_annotations"]], "pypath.inputs.oma": [[593, "module-pypath.inputs.oma"]], "oma_orthologs() (in module pypath.inputs.oma)": [[594, "pypath.inputs.oma.oma_orthologs"]], "pypath.inputs.ontology": [[595, "module-pypath.inputs.ontology"]], "listof_ontologies() (in module pypath.inputs.ontology)": [[596, "pypath.inputs.ontology.listof_ontologies"]], "ontology() (in module pypath.inputs.ontology)": [[597, "pypath.inputs.ontology.ontology"]], "pypath.inputs.opm": [[598, "module-pypath.inputs.opm"]], "opm_annotations() (in module pypath.inputs.opm)": [[599, "pypath.inputs.opm.opm_annotations"]], "pypath.inputs.oreganno": [[600, "module-pypath.inputs.oreganno"]], "oreganno_interactions() (in module pypath.inputs.oreganno)": [[601, "pypath.inputs.oreganno.oreganno_interactions"]], "oreganno_raw() (in module pypath.inputs.oreganno)": [[602, "pypath.inputs.oreganno.oreganno_raw"]], "pypath.inputs.panglaodb": [[603, "module-pypath.inputs.panglaodb"]], "panglaodb_annotations() (in module pypath.inputs.panglaodb)": [[604, "pypath.inputs.panglaodb.panglaodb_annotations"]], "panglaodb_raw() (in module pypath.inputs.panglaodb)": [[605, "pypath.inputs.panglaodb.panglaodb_raw"]], "pypath.inputs.pathophenodb": [[606, "module-pypath.inputs.pathophenodb"]], "diseasepathogen (class in pypath.inputs.pathophenodb)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen"]], "__init__() (pypath.inputs.pathophenodb.diseasepathogen method)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.__init__"]], "count() (pypath.inputs.pathophenodb.diseasepathogen method)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.count"]], "disease (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.disease"]], "disease_id (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.disease_id"]], "evidence (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.evidence"]], "index() (pypath.inputs.pathophenodb.diseasepathogen method)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.index"]], "pathogen (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.pathogen"]], "pathogen_taxid (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[607, "pypath.inputs.pathophenodb.DiseasePathogen.pathogen_taxid"]], "disease_pathogen_interactions() (in module pypath.inputs.pathophenodb)": [[608, "pypath.inputs.pathophenodb.disease_pathogen_interactions"]], "pypath.inputs.pathwaycommons": [[609, "module-pypath.inputs.pathwaycommons"]], "pathwaycommonsinteraction (class in pypath.inputs.pathwaycommons)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction"]], "__init__() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.__init__"]], "count() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.count"]], "id_a (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.id_a"]], "id_b (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.id_b"]], "index() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.index"]], "interaction_type (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.interaction_type"]], "resource (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[610, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.resource"]], "pathwaycommonsresource (class in pypath.inputs.pathwaycommons)": [[611, "pypath.inputs.pathwaycommons.PathwayCommonsResource"]], "__init__() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[611, "pypath.inputs.pathwaycommons.PathwayCommonsResource.__init__"]], "count() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[611, "pypath.inputs.pathwaycommons.PathwayCommonsResource.count"]], "index() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[611, "pypath.inputs.pathwaycommons.PathwayCommonsResource.index"]], "name (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[611, "pypath.inputs.pathwaycommons.PathwayCommonsResource.name"]], "pc_label (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[611, "pypath.inputs.pathwaycommons.PathwayCommonsResource.pc_label"]], "version (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[611, "pypath.inputs.pathwaycommons.PathwayCommonsResource.version"]], "pathwaycommons_bind_interactions() (in module pypath.inputs.pathwaycommons)": [[612, "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions"]], "pathwaycommons_biogrid_interactions() (in module pypath.inputs.pathwaycommons)": [[613, "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions"]], "pathwaycommons_corum_interactions() (in module pypath.inputs.pathwaycommons)": [[614, "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions"]], "pathwaycommons_dip_interactions() (in module pypath.inputs.pathwaycommons)": [[615, "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions"]], "pathwaycommons_hprd_interactions() (in module pypath.inputs.pathwaycommons)": [[616, "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions"]], "pathwaycommons_inoh_interactions() (in module pypath.inputs.pathwaycommons)": [[617, "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions"]], "pathwaycommons_intact_interactions() (in module pypath.inputs.pathwaycommons)": [[618, "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions"]], "pathwaycommons_interactions() (in module pypath.inputs.pathwaycommons)": [[619, "pypath.inputs.pathwaycommons.pathwaycommons_interactions"]], "pathwaycommons_kegg_interactions() (in module pypath.inputs.pathwaycommons)": [[620, "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions"]], "pathwaycommons_netpath_interactions() (in module pypath.inputs.pathwaycommons)": [[621, "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions"]], "pathwaycommons_panther_interactions() (in module pypath.inputs.pathwaycommons)": [[622, "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions"]], "pathwaycommons_phosphosite_interactions() (in module pypath.inputs.pathwaycommons)": [[623, "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions"]], "pathwaycommons_reactome_interactions() (in module pypath.inputs.pathwaycommons)": [[624, "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions"]], "pathwaycommons_wikipathways_interactions() (in module pypath.inputs.pathwaycommons)": [[625, "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions"]], "pypath.inputs.pazar": [[626, "module-pypath.inputs.pazar"]], "pazar_interactions() (in module pypath.inputs.pazar)": [[627, "pypath.inputs.pazar.pazar_interactions"]], "pypath.inputs.pdb": [[628, "module-pypath.inputs.pdb"]], "pdb_chains() (in module pypath.inputs.pdb)": [[629, "pypath.inputs.pdb.pdb_chains"]], "pdb_complexes() (in module pypath.inputs.pdb)": [[630, "pypath.inputs.pdb.pdb_complexes"]], "pdb_uniprot() (in module pypath.inputs.pdb)": [[631, "pypath.inputs.pdb.pdb_uniprot"]], "pypath.inputs.pdzbase": [[632, "module-pypath.inputs.pdzbase"]], "pdzbase_interactions() (in module pypath.inputs.pdzbase)": [[633, "pypath.inputs.pdzbase.pdzbase_interactions"]], "pypath.inputs.pepcyber": [[634, "module-pypath.inputs.pepcyber"]], "pepcyber_details() (in module pypath.inputs.pepcyber)": [[635, "pypath.inputs.pepcyber.pepcyber_details"]], "pepcyber_interactions() (in module pypath.inputs.pepcyber)": [[636, "pypath.inputs.pepcyber.pepcyber_interactions"]], "pypath.inputs.pfam": [[637, "module-pypath.inputs.pfam"]], "pfam_names() (in module pypath.inputs.pfam)": [[638, "pypath.inputs.pfam.pfam_names"]], "pfam_pdb() (in module pypath.inputs.pfam)": [[639, "pypath.inputs.pfam.pfam_pdb"]], "pfam_regions() (in module pypath.inputs.pfam)": [[640, "pypath.inputs.pfam.pfam_regions"]], "pfam_uniprot() (in module pypath.inputs.pfam)": [[641, "pypath.inputs.pfam.pfam_uniprot"]], "pypath.inputs.pharos": [[642, "module-pypath.inputs.pharos"]], "pharos_diseases() (in module pypath.inputs.pharos)": [[643, "pypath.inputs.pharos.pharos_diseases"]], "pharos_expression() (in module pypath.inputs.pharos)": [[644, "pypath.inputs.pharos.pharos_expression"]], "pharos_general() (in module pypath.inputs.pharos)": [[645, "pypath.inputs.pharos.pharos_general"]], "pharos_gtex() (in module pypath.inputs.pharos)": [[646, "pypath.inputs.pharos.pharos_gtex"]], "pharos_ligands() (in module pypath.inputs.pharos)": [[647, "pypath.inputs.pharos.pharos_ligands"]], "pharos_orthologs() (in module pypath.inputs.pharos)": [[648, "pypath.inputs.pharos.pharos_orthologs"]], "pharos_targets() (in module pypath.inputs.pharos)": [[649, "pypath.inputs.pharos.pharos_targets"]], "pharos_xrefs() (in module pypath.inputs.pharos)": [[650, "pypath.inputs.pharos.pharos_xrefs"]], "pypath.inputs.phobius": [[651, "module-pypath.inputs.phobius"]], "phobius_annotations() (in module pypath.inputs.phobius)": [[652, "pypath.inputs.phobius.phobius_annotations"]], "pypath.inputs.phosphatome": [[653, "module-pypath.inputs.phosphatome"]], "phosphatome_annotations() (in module pypath.inputs.phosphatome)": [[654, "pypath.inputs.phosphatome.phosphatome_annotations"]], "pypath.inputs.phosphoelm": [[655, "module-pypath.inputs.phosphoelm"]], "phosphoelm_enzyme_substrate() (in module pypath.inputs.phosphoelm)": [[656, "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate"]], "phosphoelm_interactions() (in module pypath.inputs.phosphoelm)": [[657, "pypath.inputs.phosphoelm.phosphoelm_interactions"]], "phosphoelm_kinases() (in module pypath.inputs.phosphoelm)": [[658, "pypath.inputs.phosphoelm.phosphoelm_kinases"]], "pypath.inputs.phosphonetworks": [[659, "module-pypath.inputs.phosphonetworks"]], "phosphonetworks_enzyme_substrate() (in module pypath.inputs.phosphonetworks)": [[660, "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate"]], "phosphonetworks_interactions() (in module pypath.inputs.phosphonetworks)": [[661, "pypath.inputs.phosphonetworks.phosphonetworks_interactions"]], "pypath.inputs.phosphopoint": [[662, "module-pypath.inputs.phosphopoint"]], "phosphopoint_directions() (in module pypath.inputs.phosphopoint)": [[663, "pypath.inputs.phosphopoint.phosphopoint_directions"]], "phosphopoint_interactions() (in module pypath.inputs.phosphopoint)": [[664, "pypath.inputs.phosphopoint.phosphopoint_interactions"]], "pypath.inputs.phosphosite": [[665, "module-pypath.inputs.phosphosite"]], "phosphosite_directions() (in module pypath.inputs.phosphosite)": [[666, "pypath.inputs.phosphosite.phosphosite_directions"]], "phosphosite_enzyme_substrate() (in module pypath.inputs.phosphosite)": [[667, "pypath.inputs.phosphosite.phosphosite_enzyme_substrate"]], "phosphosite_interactions() (in module pypath.inputs.phosphosite)": [[668, "pypath.inputs.phosphosite.phosphosite_interactions"]], "phosphosite_interactions_all() (in module pypath.inputs.phosphosite)": [[669, "pypath.inputs.phosphosite.phosphosite_interactions_all"]], "phosphosite_interactions_curated() (in module pypath.inputs.phosphosite)": [[670, "pypath.inputs.phosphosite.phosphosite_interactions_curated"]], "phosphosite_interactions_new() (in module pypath.inputs.phosphosite)": [[671, "pypath.inputs.phosphosite.phosphosite_interactions_new"]], "phosphosite_interactions_noref() (in module pypath.inputs.phosphosite)": [[672, "pypath.inputs.phosphosite.phosphosite_interactions_noref"]], "phosphosite_ptm_orthology() (in module pypath.inputs.phosphosite)": [[673, "pypath.inputs.phosphosite.phosphosite_ptm_orthology"]], "phosphosite_ptms() (in module pypath.inputs.phosphosite)": [[674, "pypath.inputs.phosphosite.phosphosite_ptms"]], "phosphosite_regsites() (in module pypath.inputs.phosphosite)": [[675, "pypath.inputs.phosphosite.phosphosite_regsites"]], "phosphosite_regsites_one_organism() (in module pypath.inputs.phosphosite)": [[676, "pypath.inputs.phosphosite.phosphosite_regsites_one_organism"]], "regsites_tab() (in module pypath.inputs.phosphosite)": [[677, "pypath.inputs.phosphosite.regsites_tab"]], "pypath.inputs.pisa": [[678, "module-pypath.inputs.pisa"]], "pisabond (class in pypath.inputs.pisa)": [[679, "pypath.inputs.pisa.PisaBond"]], "__init__() (pypath.inputs.pisa.pisabond method)": [[679, "pypath.inputs.pisa.PisaBond.__init__"]], "chain_1 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.chain_1"]], "chain_2 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.chain_2"]], "count() (pypath.inputs.pisa.pisabond method)": [[679, "pypath.inputs.pisa.PisaBond.count"]], "index() (pypath.inputs.pisa.pisabond method)": [[679, "pypath.inputs.pisa.PisaBond.index"]], "residue_1 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.residue_1"]], "residue_2 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.residue_2"]], "seqnum_1 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.seqnum_1"]], "seqnum_2 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.seqnum_2"]], "uniprot_1 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.uniprot_1"]], "uniprot_2 (pypath.inputs.pisa.pisabond attribute)": [[679, "pypath.inputs.pisa.PisaBond.uniprot_2"]], "pisa_bonds() (in module pypath.inputs.pisa)": [[680, "pypath.inputs.pisa.pisa_bonds"]], "pisa_interfaces() (in module pypath.inputs.pisa)": [[681, "pypath.inputs.pisa.pisa_interfaces"]], "pypath.inputs.pro": [[682, "module-pypath.inputs.pro"]], "get_pro() (in module pypath.inputs.pro)": [[683, "pypath.inputs.pro.get_pro"]], "pro_mapping() (in module pypath.inputs.pro)": [[684, "pypath.inputs.pro.pro_mapping"]], "pypath.inputs.progeny": [[685, "module-pypath.inputs.progeny"]], "progeny_annotations() (in module pypath.inputs.progeny)": [[686, "pypath.inputs.progeny.progeny_annotations"]], "progeny_raw() (in module pypath.inputs.progeny)": [[687, "pypath.inputs.progeny.progeny_raw"]], "pypath.inputs.proteinatlas": [[688, "module-pypath.inputs.proteinatlas"]], "get_proteinatlas() (in module pypath.inputs.proteinatlas)": [[689, "pypath.inputs.proteinatlas.get_proteinatlas"]], "proteinatlas_annotations() (in module pypath.inputs.proteinatlas)": [[690, "pypath.inputs.proteinatlas.proteinatlas_annotations"]], "proteinatlas_secretome_annotations() (in module pypath.inputs.proteinatlas)": [[691, "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations"]], "proteinatlas_subcellular_annotations() (in module pypath.inputs.proteinatlas)": [[692, "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations"]], "pypath.inputs.proteins": [[693, "module-pypath.inputs.proteins"]], "variants() (in module pypath.inputs.proteins)": [[694, "pypath.inputs.proteins.variants"]], "pypath.inputs.protmapper": [[695, "module-pypath.inputs.protmapper"]], "get_protmapper() (in module pypath.inputs.protmapper)": [[696, "pypath.inputs.protmapper.get_protmapper"]], "protmapper_enzyme_substrate() (in module pypath.inputs.protmapper)": [[697, "pypath.inputs.protmapper.protmapper_enzyme_substrate"]], "protmapper_interactions() (in module pypath.inputs.protmapper)": [[698, "pypath.inputs.protmapper.protmapper_interactions"]], "pypath.inputs.pubchem": [[699, "module-pypath.inputs.pubchem"]], "pubchem_mapping() (in module pypath.inputs.pubchem)": [[700, "pypath.inputs.pubchem.pubchem_mapping"]], "pypath.inputs.pubmed": [[701, "module-pypath.inputs.pubmed"]], "get_pmid() (in module pypath.inputs.pubmed)": [[702, "pypath.inputs.pubmed.get_pmid"]], "get_pubmeds() (in module pypath.inputs.pubmed)": [[703, "pypath.inputs.pubmed.get_pubmeds"]], "only_pmids() (in module pypath.inputs.pubmed)": [[704, "pypath.inputs.pubmed.only_pmids"]], "open_pubmed() (in module pypath.inputs.pubmed)": [[705, "pypath.inputs.pubmed.open_pubmed"]], "pmids_dict() (in module pypath.inputs.pubmed)": [[706, "pypath.inputs.pubmed.pmids_dict"]], "pmids_list() (in module pypath.inputs.pubmed)": [[707, "pypath.inputs.pubmed.pmids_list"]], "pypath.inputs.ramilowski2015": [[708, "module-pypath.inputs.ramilowski2015"]], "ramilowski_interactions() (in module pypath.inputs.ramilowski2015)": [[709, "pypath.inputs.ramilowski2015.ramilowski_interactions"]], "ramilowski_locations() (in module pypath.inputs.ramilowski2015)": [[710, "pypath.inputs.ramilowski2015.ramilowski_locations"]], "pypath.inputs.rdata": [[711, "module-pypath.inputs.rdata"]], "pypath.inputs.reaction": [[712, "module-pypath.inputs.reaction"]], "acsn_biopax() (in module pypath.inputs.reaction)": [[713, "pypath.inputs.reaction.acsn_biopax"]], "acsn_interactions_2() (in module pypath.inputs.reaction)": [[714, "pypath.inputs.reaction.acsn_interactions_2"]], "get_acsn_effects() (in module pypath.inputs.reaction)": [[715, "pypath.inputs.reaction.get_acsn_effects"]], "get_controls() (in module pypath.inputs.reaction)": [[716, "pypath.inputs.reaction.get_controls"]], "get_interactions() (in module pypath.inputs.reaction)": [[717, "pypath.inputs.reaction.get_interactions"]], "get_reactions() (in module pypath.inputs.reaction)": [[718, "pypath.inputs.reaction.get_reactions"]], "get_soup() (in module pypath.inputs.reaction)": [[719, "pypath.inputs.reaction.get_soup"]], "panther_biopax() (in module pypath.inputs.reaction)": [[720, "pypath.inputs.reaction.panther_biopax"]], "panther_interactions() (in module pypath.inputs.reaction)": [[721, "pypath.inputs.reaction.panther_interactions"]], "pid_biopax() (in module pypath.inputs.reaction)": [[722, "pypath.inputs.reaction.pid_biopax"]], "pid_interactions() (in module pypath.inputs.reaction)": [[723, "pypath.inputs.reaction.pid_interactions"]], "process_complex() (in module pypath.inputs.reaction)": [[724, "pypath.inputs.reaction.process_complex"]], "process_controls() (in module pypath.inputs.reaction)": [[725, "pypath.inputs.reaction.process_controls"]], "process_reactions() (in module pypath.inputs.reaction)": [[726, "pypath.inputs.reaction.process_reactions"]], "reactions_biopax() (in module pypath.inputs.reaction)": [[727, "pypath.inputs.reaction.reactions_biopax"]], "reactome_biopax() (in module pypath.inputs.reaction)": [[728, "pypath.inputs.reaction.reactome_biopax"]], "reactome_bs() (in module pypath.inputs.reaction)": [[729, "pypath.inputs.reaction.reactome_bs"]], "reactome_interactions() (in module pypath.inputs.reaction)": [[730, "pypath.inputs.reaction.reactome_interactions"]], "reactome_sbml() (in module pypath.inputs.reaction)": [[731, "pypath.inputs.reaction.reactome_sbml"]], "pypath.inputs.scconnect": [[732, "module-pypath.inputs.scconnect"]], "scconnect_annotations() (in module pypath.inputs.scconnect)": [[733, "pypath.inputs.scconnect.scconnect_annotations"]], "scconnect_complexes() (in module pypath.inputs.scconnect)": [[734, "pypath.inputs.scconnect.scconnect_complexes"]], "scconnect_interactions() (in module pypath.inputs.scconnect)": [[735, "pypath.inputs.scconnect.scconnect_interactions"]], "pypath.inputs.science": [[736, "module-pypath.inputs.science"]], "science_download() (in module pypath.inputs.science)": [[737, "pypath.inputs.science.science_download"]], "pypath.inputs.signalink": [[738, "module-pypath.inputs.signalink"]], "signalink_annotations() (in module pypath.inputs.signalink)": [[739, "pypath.inputs.signalink.signalink_annotations"]], "signalink_function_annotations() (in module pypath.inputs.signalink)": [[740, "pypath.inputs.signalink.signalink_function_annotations"]], "signalink_interactions() (in module pypath.inputs.signalink)": [[741, "pypath.inputs.signalink.signalink_interactions"]], "signalink_pathway_annotations() (in module pypath.inputs.signalink)": [[742, "pypath.inputs.signalink.signalink_pathway_annotations"]], "pypath.inputs.signor": [[743, "module-pypath.inputs.signor"]], "signor_complexes() (in module pypath.inputs.signor)": [[744, "pypath.inputs.signor.signor_complexes"]], "signor_enzyme_substrate() (in module pypath.inputs.signor)": [[745, "pypath.inputs.signor.signor_enzyme_substrate"]], "signor_interactions() (in module pypath.inputs.signor)": [[746, "pypath.inputs.signor.signor_interactions"]], "signor_pathway_annotations() (in module pypath.inputs.signor)": [[747, "pypath.inputs.signor.signor_pathway_annotations"]], "signor_pathways() (in module pypath.inputs.signor)": [[748, "pypath.inputs.signor.signor_pathways"]], "signor_protein_families() (in module pypath.inputs.signor)": [[749, "pypath.inputs.signor.signor_protein_families"]], "pypath.inputs.spike": [[750, "module-pypath.inputs.spike"]], "spike_complexes() (in module pypath.inputs.spike)": [[751, "pypath.inputs.spike.spike_complexes"]], "spike_interactions() (in module pypath.inputs.spike)": [[752, "pypath.inputs.spike.spike_interactions"]], "pypath.inputs.stitch": [[753, "module-pypath.inputs.stitch"]], "stitch_actions_interactions() (in module pypath.inputs.stitch)": [[754, "pypath.inputs.stitch.stitch_actions_interactions"]], "stitch_links_interactions() (in module pypath.inputs.stitch)": [[755, "pypath.inputs.stitch.stitch_links_interactions"]], "pypath.inputs.string": [[756, "module-pypath.inputs.string"]], "string_effects() (in module pypath.inputs.string)": [[757, "pypath.inputs.string.string_effects"]], "string_links_interactions() (in module pypath.inputs.string)": [[758, "pypath.inputs.string.string_links_interactions"]], "string_physical_interactions() (in module pypath.inputs.string)": [[759, "pypath.inputs.string.string_physical_interactions"]], "string_species() (in module pypath.inputs.string)": [[760, "pypath.inputs.string.string_species"]], "pypath.inputs.surfaceome": [[761, "module-pypath.inputs.surfaceome"]], "surfaceome_annotations() (in module pypath.inputs.surfaceome)": [[762, "pypath.inputs.surfaceome.surfaceome_annotations"]], "pypath.inputs.switches_elm": [[763, "module-pypath.inputs.switches_elm"]], "get_switches_elm() (in module pypath.inputs.switches_elm)": [[764, "pypath.inputs.switches_elm.get_switches_elm"]], "pypath.inputs.talklr": [[765, "module-pypath.inputs.talklr"]], "talklr_annotations() (in module pypath.inputs.talklr)": [[766, "pypath.inputs.talklr.talklr_annotations"]], "talklr_interactions() (in module pypath.inputs.talklr)": [[767, "pypath.inputs.talklr.talklr_interactions"]], "talklr_raw() (in module pypath.inputs.talklr)": [[768, "pypath.inputs.talklr.talklr_raw"]], "pypath.inputs.tcdb": [[769, "module-pypath.inputs.tcdb"]], "tcdb_annotations() (in module pypath.inputs.tcdb)": [[770, "pypath.inputs.tcdb.tcdb_annotations"]], "tcdb_classes() (in module pypath.inputs.tcdb)": [[771, "pypath.inputs.tcdb.tcdb_classes"]], "tcdb_families() (in module pypath.inputs.tcdb)": [[772, "pypath.inputs.tcdb.tcdb_families"]], "pypath.inputs.tfcensus": [[773, "module-pypath.inputs.tfcensus"]], "tfcensus_annotations() (in module pypath.inputs.tfcensus)": [[774, "pypath.inputs.tfcensus.tfcensus_annotations"]], "pypath.inputs.threedcomplex": [[775, "module-pypath.inputs.threedcomplex"]], "threedcomplex_chains() (in module pypath.inputs.threedcomplex)": [[776, "pypath.inputs.threedcomplex.threedcomplex_chains"]], "threedcomplex_complexes() (in module pypath.inputs.threedcomplex)": [[777, "pypath.inputs.threedcomplex.threedcomplex_complexes"]], "threedcomplex_contacts() (in module pypath.inputs.threedcomplex)": [[778, "pypath.inputs.threedcomplex.threedcomplex_contacts"]], "threedcomplex_ddi() (in module pypath.inputs.threedcomplex)": [[779, "pypath.inputs.threedcomplex.threedcomplex_ddi"]], "threedcomplex_nresidues() (in module pypath.inputs.threedcomplex)": [[780, "pypath.inputs.threedcomplex.threedcomplex_nresidues"]], "pypath.inputs.threedid": [[781, "module-pypath.inputs.threedid"]], "get_3did() (in module pypath.inputs.threedid)": [[782, "pypath.inputs.threedid.get_3did"]], "get_3did_ddi() (in module pypath.inputs.threedid)": [[783, "pypath.inputs.threedid.get_3did_ddi"]], "get_3did_dmi() (in module pypath.inputs.threedid)": [[784, "pypath.inputs.threedid.get_3did_dmi"]], "process_3did_dmi() (in module pypath.inputs.threedid)": [[785, "pypath.inputs.threedid.process_3did_dmi"]], "pypath.inputs.topdb": [[786, "module-pypath.inputs.topdb"]], "topdb_annotations() (in module pypath.inputs.topdb)": [[787, "pypath.inputs.topdb.topdb_annotations"]], "pypath.inputs.transmir": [[788, "module-pypath.inputs.transmir"]], "transmir_interactions() (in module pypath.inputs.transmir)": [[789, "pypath.inputs.transmir.transmir_interactions"]], "pypath.inputs.trip": [[790, "module-pypath.inputs.trip"]], "take_a_trip() (in module pypath.inputs.trip)": [[791, "pypath.inputs.trip.take_a_trip"]], "trip_find_uniprot() (in module pypath.inputs.trip)": [[792, "pypath.inputs.trip.trip_find_uniprot"]], "trip_get_uniprot() (in module pypath.inputs.trip)": [[793, "pypath.inputs.trip.trip_get_uniprot"]], "trip_interactions() (in module pypath.inputs.trip)": [[794, "pypath.inputs.trip.trip_interactions"]], "trip_process() (in module pypath.inputs.trip)": [[795, "pypath.inputs.trip.trip_process"]], "trip_process_table() (in module pypath.inputs.trip)": [[796, "pypath.inputs.trip.trip_process_table"]], "pypath.inputs.trrust": [[797, "module-pypath.inputs.trrust"]], "scrape_human() (in module pypath.inputs.trrust)": [[798, "pypath.inputs.trrust.scrape_human"]], "scrape_mouse() (in module pypath.inputs.trrust)": [[799, "pypath.inputs.trrust.scrape_mouse"]], "trrust_general() (in module pypath.inputs.trrust)": [[800, "pypath.inputs.trrust.trrust_general"]], "trrust_human() (in module pypath.inputs.trrust)": [[801, "pypath.inputs.trrust.trrust_human"]], "trrust_mouse() (in module pypath.inputs.trrust)": [[802, "pypath.inputs.trrust.trrust_mouse"]], "trrust_scraping() (in module pypath.inputs.trrust)": [[803, "pypath.inputs.trrust.trrust_scraping"]], "pypath.inputs.unichem": [[804, "module-pypath.inputs.unichem"]], "info() (in module pypath.inputs.unichem)": [[805, "pypath.inputs.unichem.info"]], "unichem_info() (in module pypath.inputs.unichem)": [[806, "pypath.inputs.unichem.unichem_info"]], "unichem_mapping() (in module pypath.inputs.unichem)": [[807, "pypath.inputs.unichem.unichem_mapping"]], "unichem_sources() (in module pypath.inputs.unichem)": [[808, "pypath.inputs.unichem.unichem_sources"]], "pypath.inputs.uniprot": [[809, "module-pypath.inputs.uniprot"]], "taxon (class in pypath.inputs.uniprot)": [[810, "pypath.inputs.uniprot.Taxon"]], "__init__() (pypath.inputs.uniprot.taxon method)": [[810, "pypath.inputs.uniprot.Taxon.__init__"]], "count() (pypath.inputs.uniprot.taxon method)": [[810, "pypath.inputs.uniprot.Taxon.count"]], "english (pypath.inputs.uniprot.taxon attribute)": [[810, "pypath.inputs.uniprot.Taxon.english"]], "index() (pypath.inputs.uniprot.taxon method)": [[810, "pypath.inputs.uniprot.Taxon.index"]], "latin (pypath.inputs.uniprot.taxon attribute)": [[810, "pypath.inputs.uniprot.Taxon.latin"]], "latin_synonym (pypath.inputs.uniprot.taxon attribute)": [[810, "pypath.inputs.uniprot.Taxon.latin_synonym"]], "ncbi_id (pypath.inputs.uniprot.taxon attribute)": [[810, "pypath.inputs.uniprot.Taxon.ncbi_id"]], "uniprotrecordhistory (class in pypath.inputs.uniprot)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory"]], "__init__() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.__init__"]], "count() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.count"]], "database (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.database"]], "date (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.date"]], "entry_name (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.entry_name"]], "entry_version (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.entry_version"]], "index() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.index"]], "number (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.number"]], "replaced_by (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.replaced_by"]], "replaces (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.replaces"]], "sequence_version (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[811, "pypath.inputs.uniprot.UniprotRecordHistory.sequence_version"]], "all_swissprots() (in module pypath.inputs.uniprot)": [[812, "pypath.inputs.uniprot.all_swissprots"]], "all_trembls() (in module pypath.inputs.uniprot)": [[813, "pypath.inputs.uniprot.all_trembls"]], "all_uniprots() (in module pypath.inputs.uniprot)": [[814, "pypath.inputs.uniprot.all_uniprots"]], "deleted_uniprot_genesymbol() (in module pypath.inputs.uniprot)": [[815, "pypath.inputs.uniprot.deleted_uniprot_genesymbol"]], "get_db() (in module pypath.inputs.uniprot)": [[816, "pypath.inputs.uniprot.get_db"]], "get_uniprot_sec() (in module pypath.inputs.uniprot)": [[817, "pypath.inputs.uniprot.get_uniprot_sec"]], "init_db() (in module pypath.inputs.uniprot)": [[818, "pypath.inputs.uniprot.init_db"]], "is_swissprot() (in module pypath.inputs.uniprot)": [[819, "pypath.inputs.uniprot.is_swissprot"]], "is_trembl() (in module pypath.inputs.uniprot)": [[820, "pypath.inputs.uniprot.is_trembl"]], "is_uniprot() (in module pypath.inputs.uniprot)": [[821, "pypath.inputs.uniprot.is_uniprot"]], "protein_datasheet() (in module pypath.inputs.uniprot)": [[822, "pypath.inputs.uniprot.protein_datasheet"]], "swissprot_deleted() (in module pypath.inputs.uniprot)": [[823, "pypath.inputs.uniprot.swissprot_deleted"]], "trembl_deleted() (in module pypath.inputs.uniprot)": [[824, "pypath.inputs.uniprot.trembl_deleted"]], "uniprot_data() (in module pypath.inputs.uniprot)": [[825, "pypath.inputs.uniprot.uniprot_data"]], "uniprot_deleted() (in module pypath.inputs.uniprot)": [[826, "pypath.inputs.uniprot.uniprot_deleted"]], "uniprot_families() (in module pypath.inputs.uniprot)": [[827, "pypath.inputs.uniprot.uniprot_families"]], "uniprot_history() (in module pypath.inputs.uniprot)": [[828, "pypath.inputs.uniprot.uniprot_history"]], "uniprot_history_recent_datasheet() (in module pypath.inputs.uniprot)": [[829, "pypath.inputs.uniprot.uniprot_history_recent_datasheet"]], "uniprot_keywords() (in module pypath.inputs.uniprot)": [[830, "pypath.inputs.uniprot.uniprot_keywords"]], "uniprot_locations() (in module pypath.inputs.uniprot)": [[831, "pypath.inputs.uniprot.uniprot_locations"]], "uniprot_ncbi_taxids() (in module pypath.inputs.uniprot)": [[832, "pypath.inputs.uniprot.uniprot_ncbi_taxids"]], "uniprot_ncbi_taxids_2() (in module pypath.inputs.uniprot)": [[833, "pypath.inputs.uniprot.uniprot_ncbi_taxids_2"]], "uniprot_preprocess() (in module pypath.inputs.uniprot)": [[834, "pypath.inputs.uniprot.uniprot_preprocess"]], "uniprot_recent_version() (in module pypath.inputs.uniprot)": [[835, "pypath.inputs.uniprot.uniprot_recent_version"]], "uniprot_taxonomy() (in module pypath.inputs.uniprot)": [[836, "pypath.inputs.uniprot.uniprot_taxonomy"]], "uniprot_tissues() (in module pypath.inputs.uniprot)": [[837, "pypath.inputs.uniprot.uniprot_tissues"]], "uniprot_topology() (in module pypath.inputs.uniprot)": [[838, "pypath.inputs.uniprot.uniprot_topology"]], "valid_uniprot() (in module pypath.inputs.uniprot)": [[839, "pypath.inputs.uniprot.valid_uniprot"]], "pypath.inputs.wang": [[840, "module-pypath.inputs.wang"]], "cui_interactions() (in module pypath.inputs.wang)": [[841, "pypath.inputs.wang.cui_interactions"]], "hsn_interactions() (in module pypath.inputs.wang)": [[842, "pypath.inputs.wang.hsn_interactions"]], "wang_annotations() (in module pypath.inputs.wang)": [[843, "pypath.inputs.wang.wang_annotations"]], "wang_interactions() (in module pypath.inputs.wang)": [[844, "pypath.inputs.wang.wang_interactions"]], "pypath.inputs.wojtowicz2020": [[845, "module-pypath.inputs.wojtowicz2020"]], "wojtowicz2020_interactions() (in module pypath.inputs.wojtowicz2020)": [[846, "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions"]], "wojtowicz2020_raw() (in module pypath.inputs.wojtowicz2020)": [[847, "pypath.inputs.wojtowicz2020.wojtowicz2020_raw"]], "pypath.inputs.zhong2015": [[848, "module-pypath.inputs.zhong2015"]], "zhong2015_annotations() (in module pypath.inputs.zhong2015)": [[849, "pypath.inputs.zhong2015.zhong2015_annotations"]], "pypath.internals": [[850, "module-pypath.internals"]], "pypath.internals.annot_formats": [[851, "module-pypath.internals.annot_formats"]], "annotdef (class in pypath.internals.annot_formats)": [[852, "pypath.internals.annot_formats.AnnotDef"]], "__init__() (pypath.internals.annot_formats.annotdef method)": [[852, "pypath.internals.annot_formats.AnnotDef.__init__"]], "args (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.args"]], "aspect (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.aspect"]], "avoid (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.avoid"]], "count() (pypath.internals.annot_formats.annotdef method)": [[852, "pypath.internals.annot_formats.AnnotDef.count"]], "enabled (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.enabled"]], "exclude (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.exclude"]], "index() (pypath.internals.annot_formats.annotdef method)": [[852, "pypath.internals.annot_formats.AnnotDef.index"]], "limit (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.limit"]], "name (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.name"]], "parent (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.parent"]], "receiver (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.receiver"]], "resource (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.resource"]], "resource_name (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.resource_name"]], "scope (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.scope"]], "source (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.source"]], "transmitter (pypath.internals.annot_formats.annotdef attribute)": [[852, "pypath.internals.annot_formats.AnnotDef.transmitter"]], "annotdefkey (class in pypath.internals.annot_formats)": [[853, "pypath.internals.annot_formats.AnnotDefKey"]], "__init__() (pypath.internals.annot_formats.annotdefkey method)": [[853, "pypath.internals.annot_formats.AnnotDefKey.__init__"]], "count() (pypath.internals.annot_formats.annotdefkey method)": [[853, "pypath.internals.annot_formats.AnnotDefKey.count"]], "index() (pypath.internals.annot_formats.annotdefkey method)": [[853, "pypath.internals.annot_formats.AnnotDefKey.index"]], "name (pypath.internals.annot_formats.annotdefkey attribute)": [[853, "pypath.internals.annot_formats.AnnotDefKey.name"]], "parent (pypath.internals.annot_formats.annotdefkey attribute)": [[853, "pypath.internals.annot_formats.AnnotDefKey.parent"]], "resource (pypath.internals.annot_formats.annotdefkey attribute)": [[853, "pypath.internals.annot_formats.AnnotDefKey.resource"]], "annotop (class in pypath.internals.annot_formats)": [[854, "pypath.internals.annot_formats.AnnotOp"]], "__init__() (pypath.internals.annot_formats.annotop method)": [[854, "pypath.internals.annot_formats.AnnotOp.__init__"]], "annots (pypath.internals.annot_formats.annotop attribute)": [[854, "pypath.internals.annot_formats.AnnotOp.annots"]], "count() (pypath.internals.annot_formats.annotop method)": [[854, "pypath.internals.annot_formats.AnnotOp.count"]], "index() (pypath.internals.annot_formats.annotop method)": [[854, "pypath.internals.annot_formats.AnnotOp.index"]], "op (pypath.internals.annot_formats.annotop attribute)": [[854, "pypath.internals.annot_formats.AnnotOp.op"]], "annotationgroup (class in pypath.internals.annot_formats)": [[855, "pypath.internals.annot_formats.AnnotationGroup"]], "__init__() (pypath.internals.annot_formats.annotationgroup method)": [[855, "pypath.internals.annot_formats.AnnotationGroup.__init__"]], "filter_entity_type() (pypath.internals.annot_formats.annotationgroup method)": [[855, "pypath.internals.annot_formats.AnnotationGroup.filter_entity_type"]], "isdisjoint() (pypath.internals.annot_formats.annotationgroup class method)": [[855, "pypath.internals.annot_formats.AnnotationGroup.isdisjoint"]], "pypath.internals.input_formats": [[856, "module-pypath.internals.input_formats"]], "arraymapping (class in pypath.internals.input_formats)": [[857, "pypath.internals.input_formats.ArrayMapping"]], "__init__() (pypath.internals.input_formats.arraymapping method)": [[857, "pypath.internals.input_formats.ArrayMapping.__init__"]], "biomartmapping (class in pypath.internals.input_formats)": [[858, "pypath.internals.input_formats.BiomartMapping"]], "__init__() (pypath.internals.input_formats.biomartmapping method)": [[858, "pypath.internals.input_formats.BiomartMapping.__init__"]], "filemapping (class in pypath.internals.input_formats)": [[859, "pypath.internals.input_formats.FileMapping"]], "__init__() (pypath.internals.input_formats.filemapping method)": [[859, "pypath.internals.input_formats.FileMapping.__init__"]], "mappinginput (class in pypath.internals.input_formats)": [[860, "pypath.internals.input_formats.MappingInput"]], "__init__() (pypath.internals.input_formats.mappinginput method)": [[860, "pypath.internals.input_formats.MappingInput.__init__"]], "networkinput (class in pypath.internals.input_formats)": [[861, "pypath.internals.input_formats.NetworkInput"]], "__init__() (pypath.internals.input_formats.networkinput method)": [[861, "pypath.internals.input_formats.NetworkInput.__init__"]], "picklemapping (class in pypath.internals.input_formats)": [[862, "pypath.internals.input_formats.PickleMapping"]], "__init__() (pypath.internals.input_formats.picklemapping method)": [[862, "pypath.internals.input_formats.PickleMapping.__init__"]], "promapping (class in pypath.internals.input_formats)": [[863, "pypath.internals.input_formats.ProMapping"]], "__init__() (pypath.internals.input_formats.promapping method)": [[863, "pypath.internals.input_formats.ProMapping.__init__"]], "readlist (class in pypath.internals.input_formats)": [[864, "pypath.internals.input_formats.ReadList"]], "__init__() (pypath.internals.input_formats.readlist method)": [[864, "pypath.internals.input_formats.ReadList.__init__"]], "unichemmapping (class in pypath.internals.input_formats)": [[865, "pypath.internals.input_formats.UnichemMapping"]], "__init__() (pypath.internals.input_formats.unichemmapping method)": [[865, "pypath.internals.input_formats.UnichemMapping.__init__"]], "uniprotlistmapping (class in pypath.internals.input_formats)": [[866, "pypath.internals.input_formats.UniprotListMapping"]], "__init__() (pypath.internals.input_formats.uniprotlistmapping method)": [[866, "pypath.internals.input_formats.UniprotListMapping.__init__"]], "uniprotmapping (class in pypath.internals.input_formats)": [[867, "pypath.internals.input_formats.UniprotMapping"]], "__init__() (pypath.internals.input_formats.uniprotmapping method)": [[867, "pypath.internals.input_formats.UniprotMapping.__init__"]], "resource_id_type() (pypath.internals.input_formats.uniprotmapping static method)": [[867, "pypath.internals.input_formats.UniprotMapping.resource_id_type"]], "pypath.internals.intera": [[868, "module-pypath.internals.intera"]], "complex (class in pypath.internals.intera)": [[869, "pypath.internals.intera.Complex"]], "__init__() (pypath.internals.intera.complex method)": [[869, "pypath.internals.intera.Complex.__init__"]], "add_attr() (pypath.internals.intera.complex method)": [[869, "pypath.internals.intera.Complex.add_attr"]], "merge() (pypath.internals.intera.complex method)": [[869, "pypath.internals.intera.Complex.merge"]], "domain (class in pypath.internals.intera)": [[870, "pypath.internals.intera.Domain"]], "__init__() (pypath.internals.intera.domain method)": [[870, "pypath.internals.intera.Domain.__init__"]], "domaindomain (class in pypath.internals.intera)": [[871, "pypath.internals.intera.DomainDomain"]], "__init__() (pypath.internals.intera.domaindomain method)": [[871, "pypath.internals.intera.DomainDomain.__init__"]], "domainmotif (class in pypath.internals.intera)": [[872, "pypath.internals.intera.DomainMotif"]], "__init__() (pypath.internals.intera.domainmotif method)": [[872, "pypath.internals.intera.DomainMotif.__init__"]], "get_line() (pypath.internals.intera.domainmotif method)": [[872, "pypath.internals.intera.DomainMotif.get_line"]], "key() (pypath.internals.intera.domainmotif method)": [[872, "pypath.internals.intera.DomainMotif.key"]], "interface (class in pypath.internals.intera)": [[873, "pypath.internals.intera.Interface"]], "__init__() (pypath.internals.intera.interface method)": [[873, "pypath.internals.intera.Interface.__init__"]], "add_residues() (pypath.internals.intera.interface method)": [[873, "pypath.internals.intera.Interface.add_residues"]], "bond_types() (pypath.internals.intera.interface method)": [[873, "pypath.internals.intera.Interface.bond_types"]], "get_bonds() (pypath.internals.intera.interface method)": [[873, "pypath.internals.intera.Interface.get_bonds"]], "numof_residues() (pypath.internals.intera.interface method)": [[873, "pypath.internals.intera.Interface.numof_residues"]], "motif (class in pypath.internals.intera)": [[874, "pypath.internals.intera.Motif"]], "__init__() (pypath.internals.intera.motif method)": [[874, "pypath.internals.intera.Motif.__init__"]], "ptm (class in pypath.internals.intera)": [[875, "pypath.internals.intera.Ptm"]], "__init__() (pypath.internals.intera.ptm method)": [[875, "pypath.internals.intera.Ptm.__init__"]], "regulation (class in pypath.internals.intera)": [[876, "pypath.internals.intera.Regulation"]], "__init__() (pypath.internals.intera.regulation method)": [[876, "pypath.internals.intera.Regulation.__init__"]], "residue (class in pypath.internals.intera)": [[877, "pypath.internals.intera.Residue"]], "__init__() (pypath.internals.intera.residue method)": [[877, "pypath.internals.intera.Residue.__init__"]], "pypath.internals.license": [[878, "module-pypath.internals.license"]], "license (class in pypath.internals.license)": [[879, "pypath.internals.license.License"]], "__init__() (pypath.internals.license.license method)": [[879, "pypath.internals.license.License.__init__"]], "enables() (pypath.internals.license.license method)": [[879, "pypath.internals.license.License.enables"]], "licenseattrib (class in pypath.internals.license)": [[880, "pypath.internals.license.LicenseAttrib"]], "__init__() (pypath.internals.license.licenseattrib method)": [[880, "pypath.internals.license.LicenseAttrib.__init__"]], "check_level() (pypath.internals.license.licenseattrib class method)": [[880, "pypath.internals.license.LicenseAttrib.check_level"]], "int_to_level() (pypath.internals.license.licenseattrib class method)": [[880, "pypath.internals.license.LicenseAttrib.int_to_level"]], "level_to_int() (pypath.internals.license.licenseattrib class method)": [[880, "pypath.internals.license.LicenseAttrib.level_to_int"]], "to_int() (pypath.internals.license.licenseattrib method)": [[880, "pypath.internals.license.LicenseAttrib.to_int"]], "licensefeature (class in pypath.internals.license)": [[881, "pypath.internals.license.LicenseFeature"]], "__init__() (pypath.internals.license.licensefeature method)": [[881, "pypath.internals.license.LicenseFeature.__init__"]], "check_level() (pypath.internals.license.licensefeature class method)": [[881, "pypath.internals.license.LicenseFeature.check_level"]], "int_to_level() (pypath.internals.license.licensefeature class method)": [[881, "pypath.internals.license.LicenseFeature.int_to_level"]], "level_to_int() (pypath.internals.license.licensefeature class method)": [[881, "pypath.internals.license.LicenseFeature.level_to_int"]], "to_int() (pypath.internals.license.licensefeature method)": [[881, "pypath.internals.license.LicenseFeature.to_int"]], "licensepurpose (class in pypath.internals.license)": [[882, "pypath.internals.license.LicensePurpose"]], "__init__() (pypath.internals.license.licensepurpose method)": [[882, "pypath.internals.license.LicensePurpose.__init__"]], "check_level() (pypath.internals.license.licensepurpose class method)": [[882, "pypath.internals.license.LicensePurpose.check_level"]], "int_to_level() (pypath.internals.license.licensepurpose class method)": [[882, "pypath.internals.license.LicensePurpose.int_to_level"]], "level_to_int() (pypath.internals.license.licensepurpose class method)": [[882, "pypath.internals.license.LicensePurpose.level_to_int"]], "to_int() (pypath.internals.license.licensepurpose method)": [[882, "pypath.internals.license.LicensePurpose.to_int"]], "licensesharing (class in pypath.internals.license)": [[883, "pypath.internals.license.LicenseSharing"]], "__init__() (pypath.internals.license.licensesharing method)": [[883, "pypath.internals.license.LicenseSharing.__init__"]], "check_level() (pypath.internals.license.licensesharing class method)": [[883, "pypath.internals.license.LicenseSharing.check_level"]], "int_to_level() (pypath.internals.license.licensesharing class method)": [[883, "pypath.internals.license.LicenseSharing.int_to_level"]], "level_to_int() (pypath.internals.license.licensesharing class method)": [[883, "pypath.internals.license.LicenseSharing.level_to_int"]], "to_int() (pypath.internals.license.licensesharing method)": [[883, "pypath.internals.license.LicenseSharing.to_int"]], "pypath.internals.maps": [[884, "module-pypath.internals.maps"]], "pypath.internals.refs": [[885, "module-pypath.internals.refs"]], "reference (class in pypath.internals.refs)": [[886, "pypath.internals.refs.Reference"]], "__init__() (pypath.internals.refs.reference method)": [[886, "pypath.internals.refs.Reference.__init__"]], "get_pubmed_data() (in module pypath.internals.refs)": [[887, "pypath.internals.refs.get_pubmed_data"]], "pypath.internals.resource": [[888, "module-pypath.internals.resource"]], "abstractresource (class in pypath.internals.resource)": [[889, "pypath.internals.resource.AbstractResource"]], "__init__() (pypath.internals.resource.abstractresource method)": [[889, "pypath.internals.resource.AbstractResource.__init__"]], "load_data() (pypath.internals.resource.abstractresource method)": [[889, "pypath.internals.resource.AbstractResource.load_data"]], "process() (pypath.internals.resource.abstractresource method)": [[889, "pypath.internals.resource.AbstractResource.process"]], "set_method() (pypath.internals.resource.abstractresource method)": [[889, "pypath.internals.resource.AbstractResource.set_method"]], "enzymesubstrateresource (class in pypath.internals.resource)": [[890, "pypath.internals.resource.EnzymeSubstrateResource"]], "__init__() (pypath.internals.resource.enzymesubstrateresource method)": [[890, "pypath.internals.resource.EnzymeSubstrateResource.__init__"]], "get_via() (pypath.internals.resource.enzymesubstrateresource method)": [[890, "pypath.internals.resource.EnzymeSubstrateResource.get_via"]], "enzymesubstrateresourcekey (class in pypath.internals.resource)": [[891, "pypath.internals.resource.EnzymeSubstrateResourceKey"]], "__init__() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[891, "pypath.internals.resource.EnzymeSubstrateResourceKey.__init__"]], "count() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[891, "pypath.internals.resource.EnzymeSubstrateResourceKey.count"]], "data_type (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[891, "pypath.internals.resource.EnzymeSubstrateResourceKey.data_type"]], "index() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[891, "pypath.internals.resource.EnzymeSubstrateResourceKey.index"]], "name (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[891, "pypath.internals.resource.EnzymeSubstrateResourceKey.name"]], "via (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[891, "pypath.internals.resource.EnzymeSubstrateResourceKey.via"]], "networkresource (class in pypath.internals.resource)": [[892, "pypath.internals.resource.NetworkResource"]], "__init__() (pypath.internals.resource.networkresource method)": [[892, "pypath.internals.resource.NetworkResource.__init__"]], "networkresourcekey (class in pypath.internals.resource)": [[893, "pypath.internals.resource.NetworkResourceKey"]], "__init__() (pypath.internals.resource.networkresourcekey method)": [[893, "pypath.internals.resource.NetworkResourceKey.__init__"]], "count() (pypath.internals.resource.networkresourcekey method)": [[893, "pypath.internals.resource.NetworkResourceKey.count"]], "data_model (pypath.internals.resource.networkresourcekey attribute)": [[893, "pypath.internals.resource.NetworkResourceKey.data_model"]], "data_type (pypath.internals.resource.networkresourcekey attribute)": [[893, "pypath.internals.resource.NetworkResourceKey.data_type"]], "index() (pypath.internals.resource.networkresourcekey method)": [[893, "pypath.internals.resource.NetworkResourceKey.index"]], "interaction_type (pypath.internals.resource.networkresourcekey attribute)": [[893, "pypath.internals.resource.NetworkResourceKey.interaction_type"]], "label (pypath.internals.resource.networkresourcekey property)": [[893, "pypath.internals.resource.NetworkResourceKey.label"]], "last (pypath.internals.resource.networkresourcekey property)": [[893, "pypath.internals.resource.NetworkResourceKey.last"]], "name (pypath.internals.resource.networkresourcekey attribute)": [[893, "pypath.internals.resource.NetworkResourceKey.name"]], "via (pypath.internals.resource.networkresourcekey attribute)": [[893, "pypath.internals.resource.NetworkResourceKey.via"]], "resourceattributes (class in pypath.internals.resource)": [[894, "pypath.internals.resource.ResourceAttributes"]], "__init__() (pypath.internals.resource.resourceattributes method)": [[894, "pypath.internals.resource.ResourceAttributes.__init__"]], "pypath.legacy": [[895, "module-pypath.legacy"]], "pypath.legacy.db_categories": [[896, "module-pypath.legacy.db_categories"]], "get_categories() (in module pypath.legacy.db_categories)": [[897, "pypath.legacy.db_categories.get_categories"]], "get_category() (in module pypath.legacy.db_categories)": [[898, "pypath.legacy.db_categories.get_category"]], "pypath.legacy.main": [[899, "module-pypath.legacy.main"]], "direction (class in pypath.legacy.main)": [[900, "pypath.legacy.main.Direction"]], "__init__() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.__init__"]], "check_nodes() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.check_nodes"]], "check_param() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.check_param"]], "consensus_edges() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.consensus_edges"]], "get_dir() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.get_dir"]], "get_direction() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.get_direction"]], "get_directions() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.get_directions"]], "get_dirs() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.get_dirs"]], "get_sign() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.get_sign"]], "has_sign() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.has_sign"]], "is_directed() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.is_directed"]], "is_directed_by_resources() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.is_directed_by_resources"]], "is_inhibition() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.is_inhibition"]], "is_mutual() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.is_mutual"]], "is_mutual_by_resources() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.is_mutual_by_resources"]], "is_stimulation() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.is_stimulation"]], "majority_dir() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.majority_dir"]], "majority_sign() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.majority_sign"]], "merge() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.merge"]], "negative_reverse() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.negative_reverse"]], "negative_sources_reverse() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.negative_sources_reverse"]], "negative_sources_straight() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.negative_sources_straight"]], "negative_straight() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.negative_straight"]], "positive_reverse() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.positive_reverse"]], "positive_sources_reverse() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.positive_sources_reverse"]], "positive_sources_straight() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.positive_sources_straight"]], "positive_straight() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.positive_straight"]], "reload() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.reload"]], "set_dir() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.set_dir"]], "set_direction() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.set_direction"]], "set_sign() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.set_sign"]], "source() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.source"]], "sources_reverse() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.sources_reverse"]], "sources_straight() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.sources_straight"]], "sources_undirected() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.sources_undirected"]], "src() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.src"]], "src_by_source() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.src_by_source"]], "target() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.target"]], "tgt() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.tgt"]], "tgt_by_source() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.tgt_by_source"]], "translate() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.translate"]], "unset_dir() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.unset_dir"]], "unset_direction() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.unset_direction"]], "unset_sign() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.unset_sign"]], "which_directions() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.which_directions"]], "which_dirs() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.which_dirs"]], "which_signs() (pypath.legacy.main.direction method)": [[900, "pypath.legacy.main.Direction.which_signs"]], "networkentitycollection (class in pypath.legacy.main)": [[901, "pypath.legacy.main.NetworkEntityCollection"]], "__init__() (pypath.legacy.main.networkentitycollection method)": [[901, "pypath.legacy.main.NetworkEntityCollection.__init__"]], "by_category (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.by_category"]], "by_resource (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.by_resource"]], "cat_resource (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.cat_resource"]], "count() (pypath.legacy.main.networkentitycollection method)": [[901, "pypath.legacy.main.NetworkEntityCollection.count"]], "index() (pypath.legacy.main.networkentitycollection method)": [[901, "pypath.legacy.main.NetworkEntityCollection.index"]], "label (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.label"]], "method (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.method"]], "resource_cat (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.resource_cat"]], "shared (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.shared"]], "shared_cat (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.shared_cat"]], "shared_res_cat (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.shared_res_cat"]], "total (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.total"]], "unique (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.unique"]], "unique_cat (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.unique_cat"]], "unique_res_cat (pypath.legacy.main.networkentitycollection attribute)": [[901, "pypath.legacy.main.NetworkEntityCollection.unique_res_cat"]], "networkstatsrecord (class in pypath.legacy.main)": [[902, "pypath.legacy.main.NetworkStatsRecord"]], "__init__() (pypath.legacy.main.networkstatsrecord method)": [[902, "pypath.legacy.main.NetworkStatsRecord.__init__"]], "by_category (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.by_category"]], "by_resource (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.by_resource"]], "cat_resource (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.cat_resource"]], "count() (pypath.legacy.main.networkstatsrecord method)": [[902, "pypath.legacy.main.NetworkStatsRecord.count"]], "index() (pypath.legacy.main.networkstatsrecord method)": [[902, "pypath.legacy.main.NetworkStatsRecord.index"]], "label (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.label"]], "method (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.method"]], "percent (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.percent"]], "percent_cat (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.percent_cat"]], "percent_res_cat (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.percent_res_cat"]], "resource_cat (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.resource_cat"]], "shared (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.shared"]], "shared_cat (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.shared_cat"]], "shared_res_cat (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.shared_res_cat"]], "total (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.total"]], "unique (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.unique"]], "unique_cat (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.unique_cat"]], "unique_res_cat (pypath.legacy.main.networkstatsrecord attribute)": [[902, "pypath.legacy.main.NetworkStatsRecord.unique_res_cat"]], "pypath (class in pypath.legacy.main)": [[903, "pypath.legacy.main.PyPath"]], "__init__() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.__init__"]], "acsn_effects() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.acsn_effects"]], "add_genesets() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.add_genesets"]], "add_grouped_eattr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.add_grouped_eattr"]], "add_grouped_set_eattr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.add_grouped_set_eattr"]], "add_list_eattr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.add_list_eattr"]], "add_set_eattr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.add_set_eattr"]], "affects() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.affects"]], "all_between() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.all_between"]], "all_neighbours() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.all_neighbours"]], "apply_list() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.apply_list"]], "apply_negative() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.apply_negative"]], "basic_stats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.basic_stats"]], "basic_stats_intergroup() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.basic_stats_intergroup"]], "cancer_drivers_list() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.cancer_drivers_list"]], "cancer_gene_census_list() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.cancer_gene_census_list"]], "clean_graph() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.clean_graph"]], "collapse_by_name() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.collapse_by_name"]], "collect() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.collect"]], "combine_attr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.combine_attr"]], "communities() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.communities"]], "complex_comembership_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.complex_comembership_network"]], "complexes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.complexes"]], "complexes_in_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.complexes_in_network"]], "compounds_from_chembl() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.compounds_from_chembl"]], "consistency() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.consistency"]], "copy() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.copy"]], "copy_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.copy_edges"]], "count_sol() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.count_sol"]], "counts() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.counts"]], "coverage() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.coverage"]], "curation_effort() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.curation_effort"]], "curation_effort_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.curation_effort_by_resource"]], "curation_stats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.curation_stats"]], "curation_tab() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.curation_tab"]], "curators_work() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.curators_work"]], "databases_similarity() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.databases_similarity"]], "degree_dist() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.degree_dist"]], "degree_dists() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.degree_dists"]], "delete_by_organism() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.delete_by_organism"]], "delete_by_source() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.delete_by_source"]], "delete_unknown() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.delete_unknown"]], "delete_unmapped() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.delete_unmapped"]], "dgenesymbol() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dgenesymbol"]], "dgenesymbols() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dgenesymbols"]], "dgs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dgs"]], "dgss() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dgss"]], "dneighbors() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dneighbors"]], "dp() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dp"]], "dproteins() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dproteins"]], "dps() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dps"]], "duniprot() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.duniprot"]], "duniprots() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.duniprots"]], "dup() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dup"]], "dups() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dups"]], "dv() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dv"]], "dvs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.dvs"]], "edge_exists() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edge_exists"]], "edge_loc() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edge_loc"]], "edge_names() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edge_names"]], "edges_3d() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edges_3d"]], "edges_between() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edges_between"]], "edges_expression() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edges_expression"]], "edges_in_complexes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edges_in_complexes"]], "edges_ptms() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edges_ptms"]], "edgeseq_inverse() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.edgeseq_inverse"]], "entities_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.entities_by_resource"]], "entities_by_resources() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.entities_by_resources"]], "export_dot() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.export_dot"]], "export_edgelist() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.export_edgelist"]], "export_graphml() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.export_graphml"]], "export_ptms_tab() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.export_ptms_tab"]], "export_sif() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.export_sif"]], "export_struct_tab() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.export_struct_tab"]], "export_tab() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.export_tab"]], "find_all_paths() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.find_all_paths"]], "find_all_paths2() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.find_all_paths2"]], "find_complex() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.find_complex"]], "first_neighbours() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.first_neighbours"]], "fisher_enrichment() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.fisher_enrichment"]], "geneset_enrichment() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.geneset_enrichment"]], "genesymbol() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.genesymbol"]], "genesymbol_labels() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.genesymbol_labels"]], "genesymbols() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.genesymbols"]], "get_attrs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_attrs"]], "get_directed() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_directed"]], "get_dirs_signs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_dirs_signs"]], "get_edge() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_edge"]], "get_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_edges"]], "get_function() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_function"]], "get_giant() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_giant"]], "get_go() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_go"]], "get_max() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_max"]], "get_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_network"]], "get_node() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_node"]], "get_node_d() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_node_d"]], "get_node_pair() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_node_pair"]], "get_nodes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_nodes"]], "get_nodes_d() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_nodes_d"]], "get_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_pathways"]], "get_proteomicsdb() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_proteomicsdb"]], "get_sub() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_sub"]], "get_taxon() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.get_taxon"]], "go_annotate_graph() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.go_annotate_graph"]], "go_enrichment() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.go_enrichment"]], "gs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs"]], "gs_affected_by() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_affected_by"]], "gs_affects() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_affects"]], "gs_edge() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_edge"]], "gs_in_directed() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_in_directed"]], "gs_in_undirected() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_in_undirected"]], "gs_inhibited_by() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_inhibited_by"]], "gs_inhibits() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_inhibits"]], "gs_neighborhood() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_neighborhood"]], "gs_neighbors() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_neighbors"]], "gs_stimulated_by() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_stimulated_by"]], "gs_stimulates() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gs_stimulates"]], "gss() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.gss"]], "guide2pharma() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.guide2pharma"]], "having_attr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.having_attr"]], "having_eattr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.having_eattr"]], "having_ptm() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.having_ptm"]], "having_vattr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.having_vattr"]], "homology_translation() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.homology_translation"]], "htp_stats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.htp_stats"]], "in_complex() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.in_complex"]], "in_directed() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.in_directed"]], "in_undirected() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.in_undirected"]], "info() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.info"]], "init_complex_attr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.init_complex_attr"]], "init_edge_attr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.init_edge_attr"]], "init_gsea() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.init_gsea"]], "init_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.init_network"]], "init_vertex_attr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.init_vertex_attr"]], "interactions_all() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_all"]], "interactions_directed() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_directed"]], "interactions_directed_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_directed_by_resource"]], "interactions_inhibitory() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_inhibitory"]], "interactions_inhibitory_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_inhibitory_by_resource"]], "interactions_mutual() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_mutual"]], "interactions_mutual_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_mutual_by_resource"]], "interactions_signed() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_signed"]], "interactions_signed_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_signed_by_resource"]], "interactions_stimulatory() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_stimulatory"]], "interactions_stimulatory_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_stimulatory_by_resource"]], "interactions_undirected() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_undirected"]], "interactions_undirected_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.interactions_undirected_by_resource"]], "intergroup_shortest_paths() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.intergroup_shortest_paths"]], "intogen_cancer_drivers_list() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.intogen_cancer_drivers_list"]], "iter_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.iter_edges"]], "iter_interactions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.iter_interactions"]], "jaccard_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.jaccard_edges"]], "jaccard_meta() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.jaccard_meta"]], "kegg_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.kegg_directions"]], "kegg_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.kegg_pathways"]], "kinase_stats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.kinase_stats"]], "label() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.label"]], "label_by_go() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.label_by_go"]], "label_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.label_edges"]], "label_vertices() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.label_vertices"]], "laudanna_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.laudanna_directions"]], "laudanna_effects() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.laudanna_effects"]], "license() (pypath.legacy.main.pypath static method)": [[903, "pypath.legacy.main.PyPath.license"]], "list_resources() (pypath.legacy.main.pypath static method)": [[903, "pypath.legacy.main.PyPath.list_resources"]], "load_3dcomplexes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_3dcomplexes"]], "load_3did_ddi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_3did_ddi"]], "load_3did_ddi2() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_3did_ddi2"]], "load_3did_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_3did_dmi"]], "load_3did_interfaces() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_3did_interfaces"]], "load_all_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_all_pathways"]], "load_compleat() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_compleat"]], "load_complexportal() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_complexportal"]], "load_comppi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_comppi"]], "load_corum() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_corum"]], "load_dbptm() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_dbptm"]], "load_ddi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_ddi"]], "load_ddis() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_ddis"]], "load_depod_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_depod_dmi"]], "load_disgenet() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_disgenet"]], "load_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_dmi"]], "load_dmis() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_dmis"]], "load_domino_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_domino_dmi"]], "load_dorothea() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_dorothea"]], "load_elm() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_elm"]], "load_exocarta_attrs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_exocarta_attrs"]], "load_expression() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_expression"]], "load_from_pickle() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_from_pickle"]], "load_go() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_go"]], "load_havugimana() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_havugimana"]], "load_hpa() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_hpa"]], "load_hprd_ptms() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_hprd_ptms"]], "load_ielm() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_ielm"]], "load_interfaces() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_interfaces"]], "load_li2012_ptms() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_li2012_ptms"]], "load_ligand_receptor_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_ligand_receptor_network"]], "load_lmpid() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_lmpid"]], "load_matrisome_attrs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_matrisome_attrs"]], "load_membranome_attrs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_membranome_attrs"]], "load_mimp_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_mimp_dmi"]], "load_mutations() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_mutations"]], "load_negatives() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_negatives"]], "load_old_omnipath() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_old_omnipath"]], "load_omnipath() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_omnipath"]], "load_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pathways"]], "load_pdb() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pdb"]], "load_pepcyber() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pepcyber"]], "load_pfam() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pfam"]], "load_pfam2() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pfam2"]], "load_pfam3() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pfam3"]], "load_phospho_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_phospho_dmi"]], "load_phosphoelm() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_phosphoelm"]], "load_pisa() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pisa"]], "load_pnetworks_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_pnetworks_dmi"]], "load_psite_phos() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_psite_phos"]], "load_psite_reg() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_psite_reg"]], "load_ptms() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_ptms"]], "load_ptms2() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_ptms2"]], "load_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_resource"]], "load_resources() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_resources"]], "load_signor_ptms() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_signor_ptms"]], "load_surfaceome_attrs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_surfaceome_attrs"]], "load_tfregulons() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_tfregulons"]], "load_vesiclepedia_attrs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.load_vesiclepedia_attrs"]], "lookup_cache() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.lookup_cache"]], "loop_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.loop_edges"]], "mean_reference_per_interaction() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.mean_reference_per_interaction"]], "mean_reference_per_interaction_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.mean_reference_per_interaction_by_resource"]], "merge_lists() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.merge_lists"]], "merge_nodes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.merge_nodes"]], "mimp_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.mimp_directions"]], "mutated_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.mutated_edges"]], "name_edgelist() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.name_edgelist"]], "names2vids() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.names2vids"]], "negative_report() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.negative_report"]], "neighborhood() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.neighborhood"]], "neighbors() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.neighbors"]], "neighbourhood_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.neighbourhood_network"]], "network_by_go() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.network_by_go"]], "network_filter() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.network_filter"]], "network_stats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.network_stats"]], "new_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.new_edges"]], "new_nodes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.new_nodes"]], "node_exists() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.node_exists"]], "numof_directed_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.numof_directed_edges"]], "numof_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.numof_edges"]], "numof_reference_interaction_pairs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.numof_reference_interaction_pairs"]], "numof_references_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.numof_references_by_resource"]], "numof_undirected_edges() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.numof_undirected_edges"]], "orthology_translation() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.orthology_translation"]], "p() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.p"]], "pathway_attributes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.pathway_attributes"]], "pathway_members() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.pathway_members"]], "pathway_names() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.pathway_names"]], "pathway_similarity() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.pathway_similarity"]], "pathways_table() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.pathways_table"]], "pfam_regions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.pfam_regions"]], "phosphonetworks_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.phosphonetworks_directions"]], "phosphopoint_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.phosphopoint_directions"]], "phosphorylation_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.phosphorylation_directions"]], "phosphorylation_signs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.phosphorylation_signs"]], "phosphosite_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.phosphosite_directions"]], "prdb_tissue_expr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.prdb_tissue_expr"]], "process_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.process_directions"]], "process_dmi() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.process_dmi"]], "protein() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.protein"]], "protein_edge() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.protein_edge"]], "proteins() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.proteins"]], "ps() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.ps"]], "random_walk_with_return() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.random_walk_with_return"]], "random_walk_with_return2() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.random_walk_with_return2"]], "read_from_cache() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.read_from_cache"]], "read_list_file() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.read_list_file"]], "reference_edge_ratio() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.reference_edge_ratio"]], "reference_hist() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.reference_hist"]], "references() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.references"]], "references_by_resource() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.references_by_resource"]], "reload() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.reload"]], "remove_htp() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.remove_htp"]], "remove_undirected() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.remove_undirected"]], "resources (pypath.legacy.main.pypath property)": [[903, "pypath.legacy.main.PyPath.resources"]], "run_batch() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.run_batch"]], "save_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.save_network"]], "save_session() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.save_session"]], "save_to_pickle() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.save_to_pickle"]], "search_attr_and() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.search_attr_and"]], "search_attr_or() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.search_attr_or"]], "second_neighbours() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.second_neighbours"]], "select_by_go() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.select_by_go"]], "select_by_go_all() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.select_by_go_all"]], "select_by_go_expr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.select_by_go_expr"]], "separate() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.separate"]], "separate_by_category() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.separate_by_category"]], "sequences() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.sequences"]], "set_boolean_vattr() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_boolean_vattr"]], "set_categories() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_categories"]], "set_chembl_mysql() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_chembl_mysql"]], "set_disease_genes() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_disease_genes"]], "set_druggability() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_druggability"]], "set_drugtargets() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_drugtargets"]], "set_kinases() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_kinases"]], "set_plasma_membrane_proteins_cspa() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_plasma_membrane_proteins_cspa"]], "set_plasma_membrane_proteins_cspa_surfaceome() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_plasma_membrane_proteins_cspa_surfaceome"]], "set_plasma_membrane_proteins_surfaceome() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_plasma_membrane_proteins_surfaceome"]], "set_receptors() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_receptors"]], "set_signaling_proteins() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_signaling_proteins"]], "set_tfs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_tfs"]], "set_transcription_factors() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.set_transcription_factors"]], "shortest_path_dist() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.shortest_path_dist"]], "signaling_proteins_list() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.signaling_proteins_list"]], "signor_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.signor_pathways"]], "similarity_groups() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.similarity_groups"]], "small_plot() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.small_plot"]], "sorensen_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.sorensen_pathways"]], "source_diagram() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.source_diagram"]], "source_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.source_network"]], "source_similarity() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.source_similarity"]], "source_stats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.source_stats"]], "sources_hist() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.sources_hist"]], "sources_overlap() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.sources_overlap"]], "sources_venn_data() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.sources_venn_data"]], "stats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.stats"]], "straight_between() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.straight_between"]], "string_effects() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.string_effects"]], "sum_in_complex() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.sum_in_complex"]], "summaries_tab() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.summaries_tab"]], "table_latex() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.table_latex"]], "third_source_directions() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.third_source_directions"]], "tissue_network() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.tissue_network"]], "transcription_factors() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.transcription_factors"]], "uniprot() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.uniprot"]], "uniprots() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.uniprots"]], "uniq_node_list() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.uniq_node_list"]], "uniq_ptm() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.uniq_ptm"]], "uniq_ptms() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.uniq_ptms"]], "up() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up"]], "up_affected_by() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_affected_by"]], "up_affects() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_affects"]], "up_edge() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_edge"]], "up_in_directed() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_in_directed"]], "up_in_undirected() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_in_undirected"]], "up_inhibited_by() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_inhibited_by"]], "up_inhibits() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_inhibits"]], "up_neighborhood() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_neighborhood"]], "up_neighbors() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_neighbors"]], "up_stimulated_by() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_stimulated_by"]], "up_stimulates() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.up_stimulates"]], "update_adjlist() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_adjlist"]], "update_attrs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_attrs"]], "update_cats() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_cats"]], "update_db_dict() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_db_dict"]], "update_pathway_types() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_pathway_types"]], "update_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_pathways"]], "update_sources() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_sources"]], "update_summaries() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_summaries"]], "update_vertex_sources() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_vertex_sources"]], "update_vindex() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_vindex"]], "update_vname() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.update_vname"]], "ups() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.ups"]], "v() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.v"]], "vertex_pathways() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.vertex_pathways"]], "vsgs() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.vsgs"]], "vsup() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.vsup"]], "wang_effects() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.wang_effects"]], "write_table() (pypath.legacy.main.pypath method)": [[903, "pypath.legacy.main.PyPath.write_table"]], "get_db() (in module pypath.legacy.main)": [[904, "pypath.legacy.main.get_db"]], "init_db() (in module pypath.legacy.main)": [[905, "pypath.legacy.main.init_db"]], "log() (in module pypath)": [[906, "pypath.log"]], "pypath.omnipath": [[907, "module-pypath.omnipath"]], "pypath.omnipath.app": [[908, "module-pypath.omnipath.app"]], "databasemanager (class in pypath.omnipath.app)": [[909, "pypath.omnipath.app.DatabaseManager"]], "__init__() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.__init__"]], "build() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.build"]], "build_dataset() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.build_dataset"]], "compile_table() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.compile_table"]], "compile_tables() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.compile_tables"]], "dataset_dependencies() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.dataset_dependencies"]], "define_dataset() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.define_dataset"]], "ensure_dataset() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.ensure_dataset"]], "ensure_dirs() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.ensure_dirs"]], "ensure_module() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.ensure_module"]], "foreach_dataset() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.foreach_dataset"]], "get_args_curated() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_args_curated"]], "get_args_lncrna_mrna() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_args_lncrna_mrna"]], "get_args_mirna_mrna() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_args_mirna_mrna"]], "get_args_small_molecule() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_args_small_molecule"]], "get_args_tf_mirna() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_args_tf_mirna"]], "get_args_tf_target() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_args_tf_target"]], "get_build_args() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_build_args"]], "get_db() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_db"]], "get_param() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.get_param"]], "load_dataset() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.load_dataset"]], "network_df() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.network_df"]], "network_df_by_source() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.network_df_by_source"]], "pickle_exists() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.pickle_exists"]], "pickle_path() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.pickle_path"]], "reload() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.reload"]], "reload_module() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.reload_module"]], "remove_all() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.remove_all"]], "remove_db() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.remove_db"]], "set_network() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.set_network"]], "table_path() (pypath.omnipath.app.databasemanager method)": [[909, "pypath.omnipath.app.DatabaseManager.table_path"]], "pypath.omnipath.databases": [[910, "module-pypath.omnipath.databases"]], "build() (in module pypath.omnipath.databases)": [[911, "pypath.omnipath.databases.build"]], "class_and_param() (in module pypath.omnipath.databases)": [[912, "pypath.omnipath.databases.class_and_param"]], "pypath.omnipath.databases.define": [[913, "module-pypath.omnipath.databases.define"]], "databaseclass (class in pypath.omnipath.databases.define)": [[914, "pypath.omnipath.databases.define.DatabaseClass"]], "__init__() (pypath.omnipath.databases.define.databaseclass method)": [[914, "pypath.omnipath.databases.define.DatabaseClass.__init__"]], "databasedefinition (class in pypath.omnipath.databases.define)": [[915, "pypath.omnipath.databases.define.DatabaseDefinition"]], "__init__() (pypath.omnipath.databases.define.databasedefinition method)": [[915, "pypath.omnipath.databases.define.DatabaseDefinition.__init__"]], "from_dict() (pypath.omnipath.databases.define.databasedefinition class method)": [[915, "pypath.omnipath.databases.define.DatabaseDefinition.from_dict"]], "from_json() (pypath.omnipath.databases.define.databasedefinition class method)": [[915, "pypath.omnipath.databases.define.DatabaseDefinition.from_json"]], "databasedefinitionmanager (class in pypath.omnipath.databases.define)": [[916, "pypath.omnipath.databases.define.DatabaseDefinitionManager"]], "__init__() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[916, "pypath.omnipath.databases.define.DatabaseDefinitionManager.__init__"]], "build() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[916, "pypath.omnipath.databases.define.DatabaseDefinitionManager.build"]], "class_and_param() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[916, "pypath.omnipath.databases.define.DatabaseDefinitionManager.class_and_param"]], "get_manager() (in module pypath.omnipath.databases)": [[917, "pypath.omnipath.databases.get_manager"]], "init_manager() (in module pypath.omnipath.databases)": [[918, "pypath.omnipath.databases.init_manager"]], "pypath.omnipath.export": [[919, "module-pypath.omnipath.export"]], "export (class in pypath.omnipath.export)": [[920, "pypath.omnipath.export.Export"]], "__init__() (pypath.omnipath.export.export method)": [[920, "pypath.omnipath.export.Export.__init__"]], "add_extra_fields() (pypath.omnipath.export.export method)": [[920, "pypath.omnipath.export.Export.add_extra_fields"]], "generic_attr_processor() (pypath.omnipath.export.export static method)": [[920, "pypath.omnipath.export.Export.generic_attr_processor"]], "get_header() (pypath.omnipath.export.export method)": [[920, "pypath.omnipath.export.Export.get_header"]], "make_df() (pypath.omnipath.export.export method)": [[920, "pypath.omnipath.export.Export.make_df"]], "sources_table() (pypath.omnipath.export.export class method)": [[920, "pypath.omnipath.export.Export.sources_table"]], "write_tab() (pypath.omnipath.export.export method)": [[920, "pypath.omnipath.export.Export.write_tab"]], "init() (in module pypath.omnipath)": [[921, "pypath.omnipath.init"]], "pypath.omnipath.param": [[922, "module-pypath.omnipath.param"]], "curated_ppi_resources() (in module pypath.omnipath.param)": [[923, "pypath.omnipath.param.curated_ppi_resources"]], "tf_target_resources() (in module pypath.omnipath.param)": [[924, "pypath.omnipath.param.tf_target_resources"]], "pypath.omnipath.server": [[925, "module-pypath.omnipath.server"]], "pypath.omnipath.server.build": [[926, "module-pypath.omnipath.server.build"]], "webservicetables (class in pypath.omnipath.server.build)": [[927, "pypath.omnipath.server.build.WebserviceTables"]], "__init__() (pypath.omnipath.server.build.webservicetables method)": [[927, "pypath.omnipath.server.build.WebserviceTables.__init__"]], "pypath.omnipath.server.generate_about_page": [[928, "module-pypath.omnipath.server.generate_about_page"]], "export_licenses() (in module pypath.omnipath.server.generate_about_page)": [[929, "pypath.omnipath.server.generate_about_page.export_licenses"]], "generate_about_html() (in module pypath.omnipath.server.generate_about_page)": [[930, "pypath.omnipath.server.generate_about_page.generate_about_html"]], "resource_list_latex() (in module pypath.omnipath.server.generate_about_page)": [[931, "pypath.omnipath.server.generate_about_page.resource_list_latex"]], "write_html() (in module pypath.omnipath.server.generate_about_page)": [[932, "pypath.omnipath.server.generate_about_page.write_html"]], "pypath.omnipath.server.legacy": [[933, "module-pypath.omnipath.server.legacy"]], "pypathserver (class in pypath.omnipath.server.legacy)": [[934, "pypath.omnipath.server.legacy.PypathServer"]], "__init__() (pypath.omnipath.server.legacy.pypathserver method)": [[934, "pypath.omnipath.server.legacy.PypathServer.__init__"]], "pypath.omnipath.server.run": [[935, "module-pypath.omnipath.server.run"]], "baseserver (class in pypath.omnipath.server.run)": [[936, "pypath.omnipath.server.run.BaseServer"]], "__init__() (pypath.omnipath.server.run.baseserver method)": [[936, "pypath.omnipath.server.run.BaseServer.__init__"]], "rest (class in pypath.omnipath.server.run)": [[937, "pypath.omnipath.server.run.Rest"]], "__init__() (pypath.omnipath.server.run.rest method)": [[937, "pypath.omnipath.server.run.Rest.__init__"]], "tableserver (class in pypath.omnipath.server.run)": [[938, "pypath.omnipath.server.run.TableServer"]], "__init__() (pypath.omnipath.server.run.tableserver method)": [[938, "pypath.omnipath.server.run.TableServer.__init__"]], "twistedwebresource (class in pypath.omnipath.server.run)": [[939, "pypath.omnipath.server.run.TwistedWebResource"]], "__init__() (pypath.omnipath.server.run.twistedwebresource method)": [[939, "pypath.omnipath.server.run.TwistedWebResource.__init__"]], "twistedwebsite (class in pypath.omnipath.server.run)": [[940, "pypath.omnipath.server.run.TwistedWebSite"]], "__init__() (pypath.omnipath.server.run.twistedwebsite method)": [[940, "pypath.omnipath.server.run.TwistedWebSite.__init__"]], "stop_server() (in module pypath.omnipath.server.run)": [[941, "pypath.omnipath.server.run.stop_server"]], "twisted_listen_tcp() (in module pypath.omnipath.server.run)": [[942, "pypath.omnipath.server.run.twisted_listen_tcp"]], "twisted_run() (in module pypath.omnipath.server.run)": [[943, "pypath.omnipath.server.run.twisted_run"]], "pypath.resources": [[944, "module-pypath.resources"]], "pypath.resources.controller": [[945, "module-pypath.resources.controller"]], "resourcecontroller (class in pypath.resources.controller)": [[946, "pypath.resources.controller.ResourceController"]], "__init__() (pypath.resources.controller.resourcecontroller method)": [[946, "pypath.resources.controller.ResourceController.__init__"]], "update() (pypath.resources.controller.resourcecontroller method)": [[946, "pypath.resources.controller.ResourceController.update"]], "pypath.resources.data": [[947, "module-pypath.resources.data"]], "pypath.resources.data_formats": [[948, "module-pypath.resources.data_formats"]], "root (in module pypath.resources.data_formats)": [[949, "pypath.resources.data_formats.ROOT"]], "activity_flow (in module pypath.resources.data_formats)": [[950, "pypath.resources.data_formats.activity_flow"]], "enzyme_substrate (in module pypath.resources.data_formats)": [[951, "pypath.resources.data_formats.enzyme_substrate"]], "interaction (in module pypath.resources.data_formats)": [[952, "pypath.resources.data_formats.interaction"]], "interaction_htp (in module pypath.resources.data_formats)": [[953, "pypath.resources.data_formats.interaction_htp"]], "obsolate (in module pypath.resources.data_formats)": [[954, "pypath.resources.data_formats.obsolate"]], "pathway_bad (in module pypath.resources.data_formats)": [[955, "pypath.resources.data_formats.pathway_bad"]], "reaction_pc (in module pypath.resources.data_formats)": [[956, "pypath.resources.data_formats.reaction_pc"]], "transcription_deprecated (in module pypath.resources.data_formats)": [[957, "pypath.resources.data_formats.transcription_deprecated"]], "transcription_onebyone (in module pypath.resources.data_formats)": [[958, "pypath.resources.data_formats.transcription_onebyone"]], "pypath.resources.descriptions": [[959, "module-pypath.resources.descriptions"]], "export_licenses() (in module pypath.resources.descriptions)": [[960, "pypath.resources.descriptions.export_licenses"]], "gen_html() (in module pypath.resources.descriptions)": [[961, "pypath.resources.descriptions.gen_html"]], "resource_list_latex() (in module pypath.resources.descriptions)": [[962, "pypath.resources.descriptions.resource_list_latex"]], "write_html() (in module pypath.resources.descriptions)": [[963, "pypath.resources.descriptions.write_html"]], "get_controller() (in module pypath.resources)": [[964, "pypath.resources.get_controller"]], "pypath.resources.licenses": [[965, "module-pypath.resources.licenses"]], "licenses (class in pypath.resources.licenses)": [[966, "pypath.resources.licenses.Licenses"]], "__init__() (pypath.resources.licenses.licenses method)": [[966, "pypath.resources.licenses.Licenses.__init__"]], "pypath.resources.network": [[967, "module-pypath.resources.network"]], "dorothea_expand_levels() (in module pypath.resources.network)": [[968, "pypath.resources.network.dorothea_expand_levels"]], "pypath.resources.urls": [[969, "module-pypath.resources.urls"]], "pypath.share": [[970, "module-pypath.share"]], "pypath.share.cache": [[971, "module-pypath.share.cache"]], "cache_item() (in module pypath.share.cache)": [[972, "pypath.share.cache.cache_item"]], "get_cachedir() (in module pypath.share.cache)": [[973, "pypath.share.cache.get_cachedir"]], "pypath.share.common": [[974, "module-pypath.share.common"]], "add_to_list() (in module pypath.share.common)": [[975, "pypath.share.common.add_to_list"]], "add_to_set() (in module pypath.share.common)": [[976, "pypath.share.common.add_to_set"]], "at_least_in() (in module pypath.share.common)": [[977, "pypath.share.common.at_least_in"]], "clean_dict() (in module pypath.share.common)": [[978, "pypath.share.common.clean_dict"]], "combine_attrs() (in module pypath.share.common)": [[979, "pypath.share.common.combine_attrs"]], "console() (in module pypath.share.common)": [[980, "pypath.share.common.console"]], "decode() (in module pypath.share.common)": [[981, "pypath.share.common.decode"]], "del_empty() (in module pypath.share.common)": [[982, "pypath.share.common.del_empty"]], "df_memory_usage() (in module pypath.share.common)": [[983, "pypath.share.common.df_memory_usage"]], "dict_collapse_keys() (in module pypath.share.common)": [[984, "pypath.share.common.dict_collapse_keys"]], "dict_counts() (in module pypath.share.common)": [[985, "pypath.share.common.dict_counts"]], "dict_diff() (in module pypath.share.common)": [[986, "pypath.share.common.dict_diff"]], "dict_expand_keys() (in module pypath.share.common)": [[987, "pypath.share.common.dict_expand_keys"]], "dict_percent() (in module pypath.share.common)": [[988, "pypath.share.common.dict_percent"]], "dict_set_path() (in module pypath.share.common)": [[989, "pypath.share.common.dict_set_path"]], "dict_set_percent() (in module pypath.share.common)": [[990, "pypath.share.common.dict_set_percent"]], "dict_str() (in module pypath.share.common)": [[991, "pypath.share.common.dict_str"]], "dict_subtotals() (in module pypath.share.common)": [[992, "pypath.share.common.dict_subtotals"]], "dict_sym_diff() (in module pypath.share.common)": [[993, "pypath.share.common.dict_sym_diff"]], "dict_union() (in module pypath.share.common)": [[994, "pypath.share.common.dict_union"]], "eq() (in module pypath.share.common)": [[995, "pypath.share.common.eq"]], "filtr() (in module pypath.share.common)": [[996, "pypath.share.common.filtr"]], "first() (in module pypath.share.common)": [[997, "pypath.share.common.first"]], "flat_list() (in module pypath.share.common)": [[998, "pypath.share.common.flat_list"]], "float_or_nan() (in module pypath.share.common)": [[999, "pypath.share.common.float_or_nan"]], "gen_session_id() (in module pypath.share.common)": [[1000, "pypath.share.common.gen_session_id"]], "get() (in module pypath.share.common)": [[1001, "pypath.share.common.get"]], "get_args() (in module pypath.share.common)": [[1002, "pypath.share.common.get_args"]], "is_float() (in module pypath.share.common)": [[1003, "pypath.share.common.is_float"]], "is_int() (in module pypath.share.common)": [[1004, "pypath.share.common.is_int"]], "is_str() (in module pypath.share.common)": [[1005, "pypath.share.common.is_str"]], "jaccard_index() (in module pypath.share.common)": [[1006, "pypath.share.common.jaccard_index"]], "join_dicts() (in module pypath.share.common)": [[1007, "pypath.share.common.join_dicts"]], "latex_table() (in module pypath.share.common)": [[1008, "pypath.share.common.latex_table"]], "match() (in module pypath.share.common)": [[1009, "pypath.share.common.match"]], "maybe_in_dict() (in module pypath.share.common)": [[1010, "pypath.share.common.maybe_in_dict"]], "md5() (in module pypath.share.common)": [[1011, "pypath.share.common.md5"]], "merge_dicts() (in module pypath.share.common)": [[1012, "pypath.share.common.merge_dicts"]], "n_shared_elements() (in module pypath.share.common)": [[1013, "pypath.share.common.n_shared_elements"]], "n_shared_foreach() (in module pypath.share.common)": [[1014, "pypath.share.common.n_shared_foreach"]], "n_shared_total() (in module pypath.share.common)": [[1015, "pypath.share.common.n_shared_total"]], "n_shared_unique_foreach() (in module pypath.share.common)": [[1016, "pypath.share.common.n_shared_unique_foreach"]], "n_unique_elements() (in module pypath.share.common)": [[1017, "pypath.share.common.n_unique_elements"]], "n_unique_foreach() (in module pypath.share.common)": [[1018, "pypath.share.common.n_unique_foreach"]], "n_unique_total() (in module pypath.share.common)": [[1019, "pypath.share.common.n_unique_total"]], "negate() (in module pypath.share.common)": [[1020, "pypath.share.common.negate"]], "none_or_len() (in module pypath.share.common)": [[1021, "pypath.share.common.none_or_len"]], "paginate() (in module pypath.share.common)": [[1022, "pypath.share.common.paginate"]], "prefix() (in module pypath.share.common)": [[1023, "pypath.share.common.prefix"]], "print_table() (in module pypath.share.common)": [[1024, "pypath.share.common.print_table"]], "re_safe_groups() (in module pypath.share.common)": [[1025, "pypath.share.common.re_safe_groups"]], "remove_prefix() (in module pypath.share.common)": [[1026, "pypath.share.common.remove_prefix"]], "rotate() (in module pypath.share.common)": [[1027, "pypath.share.common.rotate"]], "sets_to_sorted_lists() (in module pypath.share.common)": [[1028, "pypath.share.common.sets_to_sorted_lists"]], "sfirst() (in module pypath.share.common)": [[1029, "pypath.share.common.sfirst"]], "shared_elements() (in module pypath.share.common)": [[1030, "pypath.share.common.shared_elements"]], "shared_foreach() (in module pypath.share.common)": [[1031, "pypath.share.common.shared_foreach"]], "shared_total() (in module pypath.share.common)": [[1032, "pypath.share.common.shared_total"]], "shared_unique() (in module pypath.share.common)": [[1033, "pypath.share.common.shared_unique"]], "shared_unique_foreach() (in module pypath.share.common)": [[1034, "pypath.share.common.shared_unique_foreach"]], "shared_unique_total() (in module pypath.share.common)": [[1035, "pypath.share.common.shared_unique_total"]], "__init__() (pypath.share.common.silent method)": [[1036, "pypath.share.common.silent.__init__"]], "silent (class in pypath.share.common)": [[1036, "pypath.share.common.silent"]], "simpson_index() (in module pypath.share.common)": [[1037, "pypath.share.common.simpson_index"]], "simpson_index_counts() (in module pypath.share.common)": [[1038, "pypath.share.common.simpson_index_counts"]], "something() (in module pypath.share.common)": [[1039, "pypath.share.common.something"]], "sorensen_index() (in module pypath.share.common)": [[1040, "pypath.share.common.sorensen_index"]], "suffix() (in module pypath.share.common)": [[1041, "pypath.share.common.suffix"]], "sum_dicts() (in module pypath.share.common)": [[1042, "pypath.share.common.sum_dicts"]], "swap_dict() (in module pypath.share.common)": [[1043, "pypath.share.common.swap_dict"]], "swap_dict_simple() (in module pypath.share.common)": [[1044, "pypath.share.common.swap_dict_simple"]], "swap_suffix() (in module pypath.share.common)": [[1045, "pypath.share.common.swap_suffix"]], "table_add_row_numbers() (in module pypath.share.common)": [[1046, "pypath.share.common.table_add_row_numbers"]], "table_format() (in module pypath.share.common)": [[1047, "pypath.share.common.table_format"]], "table_textwrap() (in module pypath.share.common)": [[1048, "pypath.share.common.table_textwrap"]], "to_list() (in module pypath.share.common)": [[1049, "pypath.share.common.to_list"]], "to_set() (in module pypath.share.common)": [[1050, "pypath.share.common.to_set"]], "try_bool() (in module pypath.share.common)": [[1051, "pypath.share.common.try_bool"]], "try_float() (in module pypath.share.common)": [[1052, "pypath.share.common.try_float"]], "tsv_table() (in module pypath.share.common)": [[1053, "pypath.share.common.tsv_table"]], "uniq_list() (in module pypath.share.common)": [[1054, "pypath.share.common.uniq_list"]], "uniq_list1() (in module pypath.share.common)": [[1055, "pypath.share.common.uniq_list1"]], "uniq_list2() (in module pypath.share.common)": [[1056, "pypath.share.common.uniq_list2"]], "uniq_ord_list() (in module pypath.share.common)": [[1057, "pypath.share.common.uniq_ord_list"]], "unique_elements() (in module pypath.share.common)": [[1058, "pypath.share.common.unique_elements"]], "unique_foreach() (in module pypath.share.common)": [[1059, "pypath.share.common.unique_foreach"]], "unique_list() (in module pypath.share.common)": [[1060, "pypath.share.common.unique_list"]], "unique_total() (in module pypath.share.common)": [[1061, "pypath.share.common.unique_total"]], "upper0() (in module pypath.share.common)": [[1062, "pypath.share.common.upper0"]], "values() (in module pypath.share.common)": [[1063, "pypath.share.common.values"]], "wcl() (in module pypath.share.common)": [[1064, "pypath.share.common.wcl"]], "wrap_truncate() (in module pypath.share.common)": [[1065, "pypath.share.common.wrap_truncate"]], "pypath.share.constants": [[1066, "module-pypath.share.constants"]], "pypath.share.curl": [[1067, "module-pypath.share.curl"]], "curl (class in pypath.share.curl)": [[1068, "pypath.share.curl.Curl"]], "__init__() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.__init__"]], "close() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.close"]], "construct_binary_data() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.construct_binary_data"]], "extract() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.extract"]], "is_quoted() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.is_quoted"]], "open() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.open"]], "open_tgz() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.open_tgz"]], "replace_forbidden() (pypath.share.curl.curl class method)": [[1068, "pypath.share.curl.Curl.replace_forbidden"]], "set_binary_data() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.set_binary_data"]], "url_fix() (pypath.share.curl.curl method)": [[1068, "pypath.share.curl.Curl.url_fix"]], "fileopener (class in pypath.share.curl)": [[1069, "pypath.share.curl.FileOpener"]], "__init__() (pypath.share.curl.fileopener method)": [[1069, "pypath.share.curl.FileOpener.__init__"]], "extract() (pypath.share.curl.fileopener method)": [[1069, "pypath.share.curl.FileOpener.extract"]], "open() (pypath.share.curl.fileopener method)": [[1069, "pypath.share.curl.FileOpener.open"]], "open_tgz() (pypath.share.curl.fileopener method)": [[1069, "pypath.share.curl.FileOpener.open_tgz"]], "remotefile (class in pypath.share.curl)": [[1070, "pypath.share.curl.RemoteFile"]], "__init__() (pypath.share.curl.remotefile method)": [[1070, "pypath.share.curl.RemoteFile.__init__"]], "__init__() (pypath.share.curl.cache_delete_off method)": [[1071, "pypath.share.curl.cache_delete_off.__init__"]], "cache_delete_off (class in pypath.share.curl)": [[1071, "pypath.share.curl.cache_delete_off"]], "__init__() (pypath.share.curl.cache_delete_on method)": [[1072, "pypath.share.curl.cache_delete_on.__init__"]], "cache_delete_on (class in pypath.share.curl)": [[1072, "pypath.share.curl.cache_delete_on"]], "__init__() (pypath.share.curl.cache_off method)": [[1073, "pypath.share.curl.cache_off.__init__"]], "cache_off (class in pypath.share.curl)": [[1073, "pypath.share.curl.cache_off"]], "__init__() (pypath.share.curl.cache_on method)": [[1074, "pypath.share.curl.cache_on.__init__"]], "cache_on (class in pypath.share.curl)": [[1074, "pypath.share.curl.cache_on"]], "__init__() (pypath.share.curl.cache_print_off method)": [[1075, "pypath.share.curl.cache_print_off.__init__"]], "cache_print_off (class in pypath.share.curl)": [[1075, "pypath.share.curl.cache_print_off"]], "__init__() (pypath.share.curl.cache_print_on method)": [[1076, "pypath.share.curl.cache_print_on.__init__"]], "cache_print_on (class in pypath.share.curl)": [[1076, "pypath.share.curl.cache_print_on"]], "__init__() (pypath.share.curl.debug_off method)": [[1077, "pypath.share.curl.debug_off.__init__"]], "debug_off (class in pypath.share.curl)": [[1077, "pypath.share.curl.debug_off"]], "__init__() (pypath.share.curl.debug_on method)": [[1078, "pypath.share.curl.debug_on.__init__"]], "debug_on (class in pypath.share.curl)": [[1078, "pypath.share.curl.debug_on"]], "__init__() (pypath.share.curl.dryrun_off method)": [[1079, "pypath.share.curl.dryrun_off.__init__"]], "dryrun_off (class in pypath.share.curl)": [[1079, "pypath.share.curl.dryrun_off"]], "__init__() (pypath.share.curl.dryrun_on method)": [[1080, "pypath.share.curl.dryrun_on.__init__"]], "dryrun_on (class in pypath.share.curl)": [[1080, "pypath.share.curl.dryrun_on"]], "is_url() (in module pypath.share.curl)": [[1081, "pypath.share.curl.is_url"]], "__init__() (pypath.share.curl.preserve_off method)": [[1082, "pypath.share.curl.preserve_off.__init__"]], "preserve_off (class in pypath.share.curl)": [[1082, "pypath.share.curl.preserve_off"]], "__init__() (pypath.share.curl.preserve_on method)": [[1083, "pypath.share.curl.preserve_on.__init__"]], "preserve_on (class in pypath.share.curl)": [[1083, "pypath.share.curl.preserve_on"]], "pypath.share.log": [[1084, "module-pypath.share.log"]], "logger (class in pypath.share.log)": [[1085, "pypath.share.log.Logger"]], "__init__() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.__init__"]], "browse() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.browse"]], "close_logfile() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.close_logfile"]], "console() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.console"]], "flush() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.flush"]], "get_logdir() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.get_logdir"]], "label_message() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.label_message"]], "msg() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.msg"]], "open_logfile() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.open_logfile"]], "strftime() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.strftime"]], "timestamp() (pypath.share.log.logger class method)": [[1085, "pypath.share.log.Logger.timestamp"]], "timestamp_message() (pypath.share.log.logger method)": [[1085, "pypath.share.log.Logger.timestamp_message"]], "new_logger() (in module pypath.share.log)": [[1086, "pypath.share.log.new_logger"]], "pypath.share.progress": [[1087, "module-pypath.share.progress"]], "progress (class in pypath.share.progress)": [[1088, "pypath.share.progress.Progress"]], "__init__() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.__init__"]], "get_desc() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.get_desc"]], "init_tqdm() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.init_tqdm"]], "set_done() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.set_done"]], "set_status() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.set_status"]], "set_total() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.set_total"]], "step() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.step"]], "terminate() (pypath.share.progress.progress method)": [[1088, "pypath.share.progress.Progress.terminate"]], "pypath.share.session": [[1089, "module-pypath.share.session"]], "logger (class in pypath.share.session)": [[1090, "pypath.share.session.Logger"]], "__init__() (pypath.share.session.logger method)": [[1090, "pypath.share.session.Logger.__init__"]], "session (class in pypath.share.session)": [[1091, "pypath.share.session.Session"]], "__init__() (pypath.share.session.session method)": [[1091, "pypath.share.session.Session.__init__"]], "gen_session_id() (pypath.share.session.session static method)": [[1091, "pypath.share.session.Session.gen_session_id"]], "start_logger() (pypath.share.session.session method)": [[1091, "pypath.share.session.Session.start_logger"]], "get_log() (in module pypath.share.session)": [[1092, "pypath.share.session.get_log"]], "get_session() (in module pypath.share.session)": [[1093, "pypath.share.session.get_session"]], "new_session() (in module pypath.share.session)": [[1094, "pypath.share.session.new_session"]], "pypath.share.settings": [[1095, "module-pypath.share.settings"]], "settings (class in pypath.share.settings)": [[1096, "pypath.share.settings.Settings"]], "__init__() (pypath.share.settings.settings method)": [[1096, "pypath.share.settings.Settings.__init__"]], "context() (pypath.share.settings.settings method)": [[1096, "pypath.share.settings.Settings.context"]], "get() (pypath.share.settings.settings method)": [[1096, "pypath.share.settings.Settings.get"]], "get_default() (pypath.share.settings.settings method)": [[1096, "pypath.share.settings.Settings.get_default"]], "reset() (pypath.share.settings.settings method)": [[1096, "pypath.share.settings.Settings.reset"]], "reset_all() (pypath.share.settings.settings method)": [[1096, "pypath.share.settings.Settings.reset_all"]], "setup() (pypath.share.settings.settings method)": [[1096, "pypath.share.settings.Settings.setup"]], "context() (in module pypath.share.settings)": [[1097, "pypath.share.settings.context"]], "get() (in module pypath.share.settings)": [[1098, "pypath.share.settings.get"]], "setup() (in module pypath.share.settings)": [[1099, "pypath.share.settings.setup"]], "pypath.utils": [[1100, "module-pypath.utils"]], "pypath.utils.go": [[1101, "module-pypath.utils.go"]], "goannotation (class in pypath.utils.go)": [[1102, "pypath.utils.go.GOAnnotation"]], "__init__() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.__init__"]], "all_uniprots() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.all_uniprots"]], "expr_names_to_terms() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.expr_names_to_terms"]], "get_annot() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.get_annot"]], "get_annot_ancestors() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.get_annot_ancestors"]], "get_annots() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.get_annots"]], "get_annots_ancestors() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.get_annots_ancestors"]], "get_name() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.get_name"]], "get_term() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.get_term"]], "has_any_term() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.has_any_term"]], "has_term() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.has_term"]], "i_select_by_term() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.i_select_by_term"]], "reload() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.reload"]], "select() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.select"]], "select_by_all() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.select_by_all"]], "select_by_expr() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.select_by_expr"]], "select_by_expr_terms() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.select_by_expr_terms"]], "select_by_name() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.select_by_name"]], "select_by_term() (pypath.utils.go.goannotation method)": [[1102, "pypath.utils.go.GOAnnotation.select_by_term"]], "gocustomannotation (class in pypath.utils.go)": [[1103, "pypath.utils.go.GOCustomAnnotation"]], "__init__() (pypath.utils.go.gocustomannotation method)": [[1103, "pypath.utils.go.GOCustomAnnotation.__init__"]], "get_annotation() (pypath.utils.go.gocustomannotation method)": [[1103, "pypath.utils.go.GOCustomAnnotation.get_annotation"]], "get_annotations() (pypath.utils.go.gocustomannotation method)": [[1103, "pypath.utils.go.GOCustomAnnotation.get_annotations"]], "process_categories() (pypath.utils.go.gocustomannotation method)": [[1103, "pypath.utils.go.GOCustomAnnotation.process_categories"]], "reload() (pypath.utils.go.gocustomannotation method)": [[1103, "pypath.utils.go.GOCustomAnnotation.reload"]], "geneontology (class in pypath.utils.go)": [[1104, "pypath.utils.go.GeneOntology"]], "__init__() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.__init__"]], "all_from_aspect() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.all_from_aspect"]], "aspect_from_name() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.aspect_from_name"]], "flatten() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.flatten"]], "get_all_ancestors() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.get_all_ancestors"]], "get_all_descendants() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.get_all_descendants"]], "get_aspect() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.get_aspect"]], "get_name() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.get_name"]], "get_term() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.get_term"]], "highest() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.highest"]], "is_leaf() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.is_leaf"]], "is_name() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.is_name"]], "is_root() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.is_root"]], "is_term() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.is_term"]], "lowest() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.lowest"]], "names_to_terms() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.names_to_terms"]], "names_to_terms_aspects() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.names_to_terms_aspects"]], "reload() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.reload"]], "set_of() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.set_of"]], "set_of_names() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.set_of_names"]], "set_of_terms() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.set_of_terms"]], "subgraph_nodes() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.subgraph_nodes"]], "terms_to_names() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.terms_to_names"]], "terms_to_names_aspects() (pypath.utils.go.geneontology method)": [[1104, "pypath.utils.go.GeneOntology.terms_to_names_aspects"]], "annotate() (in module pypath.utils.go)": [[1105, "pypath.utils.go.annotate"]], "get_db() (in module pypath.utils.go)": [[1106, "pypath.utils.go.get_db"]], "init_db() (in module pypath.utils.go)": [[1107, "pypath.utils.go.init_db"]], "load_go() (in module pypath.utils.go)": [[1108, "pypath.utils.go.load_go"]], "pypath.utils.homology": [[1109, "module-pypath.utils.homology"]], "homologymanager (class in pypath.utils.homology)": [[1110, "pypath.utils.homology.HomologyManager"]], "__init__() (pypath.utils.homology.homologymanager method)": [[1110, "pypath.utils.homology.HomologyManager.__init__"]], "get_df() (pypath.utils.homology.homologymanager method)": [[1110, "pypath.utils.homology.HomologyManager.get_df"]], "get_dict() (pypath.utils.homology.homologymanager method)": [[1110, "pypath.utils.homology.HomologyManager.get_dict"]], "translate() (pypath.utils.homology.homologymanager method)": [[1110, "pypath.utils.homology.HomologyManager.translate"]], "translate_df() (pypath.utils.homology.homologymanager method)": [[1110, "pypath.utils.homology.HomologyManager.translate_df"]], "ortholog (class in pypath.utils.homology)": [[1111, "pypath.utils.homology.Ortholog"]], "__init__() (pypath.utils.homology.ortholog method)": [[1111, "pypath.utils.homology.Ortholog.__init__"]], "count() (pypath.utils.homology.ortholog method)": [[1111, "pypath.utils.homology.Ortholog.count"]], "ensembl_hc (pypath.utils.homology.ortholog attribute)": [[1111, "pypath.utils.homology.Ortholog.ensembl_hc"]], "ensembl_type (pypath.utils.homology.ortholog attribute)": [[1111, "pypath.utils.homology.Ortholog.ensembl_type"]], "index() (pypath.utils.homology.ortholog method)": [[1111, "pypath.utils.homology.Ortholog.index"]], "resource (pypath.utils.homology.ortholog attribute)": [[1111, "pypath.utils.homology.Ortholog.resource"]], "uniprot (pypath.utils.homology.ortholog attribute)": [[1111, "pypath.utils.homology.Ortholog.uniprot"]], "proteinhomology (class in pypath.utils.homology)": [[1112, "pypath.utils.homology.ProteinHomology"]], "__init__() (pypath.utils.homology.proteinhomology method)": [[1112, "pypath.utils.homology.ProteinHomology.__init__"]], "asdict() (pypath.utils.homology.proteinhomology method)": [[1112, "pypath.utils.homology.ProteinHomology.asdict"]], "df() (pypath.utils.homology.proteinhomology method)": [[1112, "pypath.utils.homology.ProteinHomology.df"]], "load_homologene() (pypath.utils.homology.proteinhomology method)": [[1112, "pypath.utils.homology.ProteinHomology.load_homologene"]], "translate() (pypath.utils.homology.proteinhomology method)": [[1112, "pypath.utils.homology.ProteinHomology.translate"]], "translate_df() (pypath.utils.homology.proteinhomology method)": [[1112, "pypath.utils.homology.ProteinHomology.translate_df"]], "proteomes (class in pypath.utils.homology)": [[1113, "pypath.utils.homology.Proteomes"]], "__init__() (pypath.utils.homology.proteomes method)": [[1113, "pypath.utils.homology.Proteomes.__init__"]], "ptmhomology (class in pypath.utils.homology)": [[1114, "pypath.utils.homology.PtmHomology"]], "__init__() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.__init__"]], "asdict() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.asdict"]], "df() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.df"]], "load_homologene() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.load_homologene"]], "ptm_orthology() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.ptm_orthology"]], "translate() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.translate"]], "translate_df() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.translate_df"]], "translate_site() (pypath.utils.homology.ptmhomology method)": [[1114, "pypath.utils.homology.PtmHomology.translate_site"]], "sequencecontainer (class in pypath.utils.homology)": [[1115, "pypath.utils.homology.SequenceContainer"]], "__init__() (pypath.utils.homology.sequencecontainer method)": [[1115, "pypath.utils.homology.SequenceContainer.__init__"]], "get_df() (in module pypath.utils.homology)": [[1116, "pypath.utils.homology.get_df"]], "get_dict() (in module pypath.utils.homology)": [[1117, "pypath.utils.homology.get_dict"]], "get_manager() (in module pypath.utils.homology)": [[1118, "pypath.utils.homology.get_manager"]], "init() (in module pypath.utils.homology)": [[1119, "pypath.utils.homology.init"]], "translate() (in module pypath.utils.homology)": [[1120, "pypath.utils.homology.translate"]], "translate_df() (in module pypath.utils.homology)": [[1121, "pypath.utils.homology.translate_df"]], "pypath.utils.mapping": [[1122, "module-pypath.utils.mapping"]], "mapreader (class in pypath.utils.mapping)": [[1123, "pypath.utils.mapping.MapReader"]], "__init__() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.__init__"]], "id_type_side() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.id_type_side"]], "load() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.load"]], "mapping_table_a_to_b (pypath.utils.mapping.mapreader property)": [[1123, "pypath.utils.mapping.MapReader.mapping_table_a_to_b"]], "mapping_table_b_to_a (pypath.utils.mapping.mapreader property)": [[1123, "pypath.utils.mapping.MapReader.mapping_table_b_to_a"]], "read() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read"]], "read_cache() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read_cache"]], "read_mapping_array() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read_mapping_array"]], "read_mapping_biomart() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read_mapping_biomart"]], "read_mapping_file() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read_mapping_file"]], "read_mapping_unichem() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read_mapping_unichem"]], "read_mapping_uniprot() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read_mapping_uniprot"]], "read_mapping_uniprot_list() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.read_mapping_uniprot_list"]], "set_uniprot_space() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.set_uniprot_space"]], "setup_cache() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.setup_cache"]], "tables_loaded() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.tables_loaded"]], "write_cache() (pypath.utils.mapping.mapreader method)": [[1123, "pypath.utils.mapping.MapReader.write_cache"]], "mapper (class in pypath.utils.mapping)": [[1124, "pypath.utils.mapping.Mapper"]], "__init__() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.__init__"]], "chain_map() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.chain_map"]], "create_reverse() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.create_reverse"]], "get_table_key() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.get_table_key"]], "guess_type() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.guess_type"]], "has_mapping_table() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.has_mapping_table"]], "id_types() (pypath.utils.mapping.mapper class method)": [[1124, "pypath.utils.mapping.Mapper.id_types"]], "identifier() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.identifier"]], "label() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.label"]], "load_genesymbol5() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.load_genesymbol5"]], "load_mapping() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.load_mapping"]], "load_uniprot_static() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.load_uniprot_static"]], "map_name() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.map_name"]], "map_name0() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.map_name0"]], "map_names() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.map_names"]], "mapping_tables() (pypath.utils.mapping.mapper static method)": [[1124, "pypath.utils.mapping.Mapper.mapping_tables"]], "only_uniprot_ac() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.only_uniprot_ac"]], "other_organism_uniprot() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.other_organism_uniprot"]], "primary_uniprot() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.primary_uniprot"]], "reload() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.reload"]], "remove_expired() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.remove_expired"]], "remove_key() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.remove_key"]], "remove_table() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.remove_table"]], "reverse_key() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.reverse_key"]], "reverse_mapping() (pypath.utils.mapping.mapper static method)": [[1124, "pypath.utils.mapping.Mapper.reverse_mapping"]], "swissprots() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.swissprots"]], "translate_deleted_uniprot_by_genesymbol() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.translate_deleted_uniprot_by_genesymbol"]], "trembl_swissprot() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.trembl_swissprot"]], "uniprot_cleanup() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.uniprot_cleanup"]], "valid_uniprot() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.valid_uniprot"]], "which_table() (pypath.utils.mapping.mapper method)": [[1124, "pypath.utils.mapping.Mapper.which_table"]], "mappingtable (class in pypath.utils.mapping)": [[1125, "pypath.utils.mapping.MappingTable"]], "__init__() (pypath.utils.mapping.mappingtable method)": [[1125, "pypath.utils.mapping.MappingTable.__init__"]], "get_key() (pypath.utils.mapping.mappingtable method)": [[1125, "pypath.utils.mapping.MappingTable.get_key"]], "mappingtablekey (class in pypath.utils.mapping)": [[1126, "pypath.utils.mapping.MappingTableKey"]], "__init__() (pypath.utils.mapping.mappingtablekey method)": [[1126, "pypath.utils.mapping.MappingTableKey.__init__"]], "count() (pypath.utils.mapping.mappingtablekey method)": [[1126, "pypath.utils.mapping.MappingTableKey.count"]], "id_type (pypath.utils.mapping.mappingtablekey attribute)": [[1126, "pypath.utils.mapping.MappingTableKey.id_type"]], "index() (pypath.utils.mapping.mappingtablekey method)": [[1126, "pypath.utils.mapping.MappingTableKey.index"]], "ncbi_tax_id (pypath.utils.mapping.mappingtablekey attribute)": [[1126, "pypath.utils.mapping.MappingTableKey.ncbi_tax_id"]], "target_id_type (pypath.utils.mapping.mappingtablekey attribute)": [[1126, "pypath.utils.mapping.MappingTableKey.target_id_type"]], "uniprot_id_types (in module pypath.utils.mapping)": [[1127, "pypath.utils.mapping.UNIPROT_ID_TYPES"]], "get_mapper() (in module pypath.utils.mapping)": [[1128, "pypath.utils.mapping.get_mapper"]], "guess_type() (in module pypath.utils.mapping)": [[1129, "pypath.utils.mapping.guess_type"]], "id_from_label() (in module pypath.utils.mapping)": [[1130, "pypath.utils.mapping.id_from_label"]], "id_from_label0() (in module pypath.utils.mapping)": [[1131, "pypath.utils.mapping.id_from_label0"]], "init() (in module pypath.utils.mapping)": [[1132, "pypath.utils.mapping.init"]], "label() (in module pypath.utils.mapping)": [[1133, "pypath.utils.mapping.label"]], "map_name() (in module pypath.utils.mapping)": [[1134, "pypath.utils.mapping.map_name"]], "map_name0() (in module pypath.utils.mapping)": [[1135, "pypath.utils.mapping.map_name0"]], "map_names() (in module pypath.utils.mapping)": [[1136, "pypath.utils.mapping.map_names"]], "pypath.utils.pdb": [[1137, "module-pypath.utils.pdb"]], "residue (class in pypath.utils.pdb)": [[1138, "pypath.utils.pdb.Residue"]], "__init__() (pypath.utils.pdb.residue method)": [[1138, "pypath.utils.pdb.Residue.__init__"]], "chain (pypath.utils.pdb.residue attribute)": [[1138, "pypath.utils.pdb.Residue.chain"]], "count() (pypath.utils.pdb.residue method)": [[1138, "pypath.utils.pdb.Residue.count"]], "index() (pypath.utils.pdb.residue method)": [[1138, "pypath.utils.pdb.Residue.index"]], "offset (pypath.utils.pdb.residue attribute)": [[1138, "pypath.utils.pdb.Residue.offset"]], "resnum (pypath.utils.pdb.residue attribute)": [[1138, "pypath.utils.pdb.Residue.resnum"]], "uniprot (pypath.utils.pdb.residue attribute)": [[1138, "pypath.utils.pdb.Residue.uniprot"]], "residuemapper (class in pypath.utils.pdb)": [[1139, "pypath.utils.pdb.ResidueMapper"]], "__init__() (pypath.utils.pdb.residuemapper method)": [[1139, "pypath.utils.pdb.ResidueMapper.__init__"]], "clean() (pypath.utils.pdb.residuemapper method)": [[1139, "pypath.utils.pdb.ResidueMapper.clean"]], "get_residue() (pypath.utils.pdb.residuemapper method)": [[1139, "pypath.utils.pdb.ResidueMapper.get_residue"]], "load_mapping() (pypath.utils.pdb.residuemapper method)": [[1139, "pypath.utils.pdb.ResidueMapper.load_mapping"]], "segment (class in pypath.utils.pdb)": [[1140, "pypath.utils.pdb.Segment"]], "__init__() (pypath.utils.pdb.segment method)": [[1140, "pypath.utils.pdb.Segment.__init__"]], "count() (pypath.utils.pdb.segment method)": [[1140, "pypath.utils.pdb.Segment.count"]], "index() (pypath.utils.pdb.segment method)": [[1140, "pypath.utils.pdb.Segment.index"]], "pdb_end (pypath.utils.pdb.segment attribute)": [[1140, "pypath.utils.pdb.Segment.pdb_end"]], "pdb_start (pypath.utils.pdb.segment attribute)": [[1140, "pypath.utils.pdb.Segment.pdb_start"]], "uniprot (pypath.utils.pdb.segment attribute)": [[1140, "pypath.utils.pdb.Segment.uniprot"]], "uniprot_end (pypath.utils.pdb.segment attribute)": [[1140, "pypath.utils.pdb.Segment.uniprot_end"]], "uniprot_start (pypath.utils.pdb.segment attribute)": [[1140, "pypath.utils.pdb.Segment.uniprot_start"]], "residue_pdb() (in module pypath.utils.pdb)": [[1141, "pypath.utils.pdb.residue_pdb"]], "pypath.utils.proteomicsdb": [[1142, "module-pypath.utils.proteomicsdb"]], "proteomicsdb (class in pypath.utils.proteomicsdb)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB"]], "__init__() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.__init__"]], "get_expression() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.get_expression"]], "get_pieces() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.get_pieces"]], "get_proteins() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.get_proteins"]], "get_tissues() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.get_tissues"]], "pandas_matrix() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.pandas_matrix"]], "query() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.query"]], "tissues_x_proteins() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1143, "pypath.utils.proteomicsdb.ProteomicsDB.tissues_x_proteins"]], "pypath.utils.pyreact": [[1144, "module-pypath.utils.pyreact"]], "attributehandler (class in pypath.utils.pyreact)": [[1145, "pypath.utils.pyreact.AttributeHandler"]], "__init__() (pypath.utils.pyreact.attributehandler method)": [[1145, "pypath.utils.pyreact.AttributeHandler.__init__"]], "biopaxreader (class in pypath.utils.pyreact)": [[1146, "pypath.utils.pyreact.BioPaxReader"]], "__init__() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.__init__"]], "biopax_size() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.biopax_size"]], "cleanup_hook() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.cleanup_hook"]], "close_biopax() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.close_biopax"]], "extract() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.extract"]], "init_etree() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.init_etree"]], "iterate() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.iterate"]], "open_biopax() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.open_biopax"]], "process() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.process"]], "set_progress() (pypath.utils.pyreact.biopaxreader method)": [[1146, "pypath.utils.pyreact.BioPaxReader.set_progress"]], "complex (class in pypath.utils.pyreact)": [[1147, "pypath.utils.pyreact.Complex"]], "__init__() (pypath.utils.pyreact.complex method)": [[1147, "pypath.utils.pyreact.Complex.__init__"]], "complexvariations (class in pypath.utils.pyreact)": [[1148, "pypath.utils.pyreact.ComplexVariations"]], "__init__() (pypath.utils.pyreact.complexvariations method)": [[1148, "pypath.utils.pyreact.ComplexVariations.__init__"]], "itermembers() (pypath.utils.pyreact.complexvariations method)": [[1148, "pypath.utils.pyreact.ComplexVariations.itermembers"]], "control (class in pypath.utils.pyreact)": [[1149, "pypath.utils.pyreact.Control"]], "__init__() (pypath.utils.pyreact.control method)": [[1149, "pypath.utils.pyreact.Control.__init__"]], "entity (class in pypath.utils.pyreact)": [[1150, "pypath.utils.pyreact.Entity"]], "__init__() (pypath.utils.pyreact.entity method)": [[1150, "pypath.utils.pyreact.Entity.__init__"]], "expand() (pypath.utils.pyreact.entity method)": [[1150, "pypath.utils.pyreact.Entity.expand"]], "entityset (class in pypath.utils.pyreact)": [[1151, "pypath.utils.pyreact.EntitySet"]], "__init__() (pypath.utils.pyreact.entityset method)": [[1151, "pypath.utils.pyreact.EntitySet.__init__"]], "intersecting (class in pypath.utils.pyreact)": [[1152, "pypath.utils.pyreact.Intersecting"]], "__init__() (pypath.utils.pyreact.intersecting method)": [[1152, "pypath.utils.pyreact.Intersecting.__init__"]], "protein (class in pypath.utils.pyreact)": [[1153, "pypath.utils.pyreact.Protein"]], "__init__() (pypath.utils.pyreact.protein method)": [[1153, "pypath.utils.pyreact.Protein.__init__"]], "expand() (pypath.utils.pyreact.protein method)": [[1153, "pypath.utils.pyreact.Protein.expand"]], "proteinfamily (class in pypath.utils.pyreact)": [[1154, "pypath.utils.pyreact.ProteinFamily"]], "__init__() (pypath.utils.pyreact.proteinfamily method)": [[1154, "pypath.utils.pyreact.ProteinFamily.__init__"]], "pyreact (class in pypath.utils.pyreact)": [[1155, "pypath.utils.pyreact.PyReact"]], "__init__() (pypath.utils.pyreact.pyreact method)": [[1155, "pypath.utils.pyreact.PyReact.__init__"]], "gen_cvariations() (pypath.utils.pyreact.pyreact method)": [[1155, "pypath.utils.pyreact.PyReact.gen_cvariations"]], "in_same_component() (pypath.utils.pyreact.pyreact method)": [[1155, "pypath.utils.pyreact.PyReact.in_same_component"]], "merge_complexes() (pypath.utils.pyreact.pyreact method)": [[1155, "pypath.utils.pyreact.PyReact.merge_complexes"]], "merge_cvariations() (pypath.utils.pyreact.pyreact method)": [[1155, "pypath.utils.pyreact.PyReact.merge_cvariations"]], "reaction (class in pypath.utils.pyreact)": [[1156, "pypath.utils.pyreact.Reaction"]], "__init__() (pypath.utils.pyreact.reaction method)": [[1156, "pypath.utils.pyreact.Reaction.__init__"]], "reactionside (class in pypath.utils.pyreact)": [[1157, "pypath.utils.pyreact.ReactionSide"]], "__init__() (pypath.utils.pyreact.reactionside method)": [[1157, "pypath.utils.pyreact.ReactionSide.__init__"]], "expand() (pypath.utils.pyreact.reactionside method)": [[1157, "pypath.utils.pyreact.ReactionSide.expand"]], "reference (class in pypath.utils.pyreact)": [[1158, "pypath.utils.pyreact.Reference"]], "__init__() (pypath.utils.pyreact.reference method)": [[1158, "pypath.utils.pyreact.Reference.__init__"]], "expand() (pypath.utils.pyreact.reference method)": [[1158, "pypath.utils.pyreact.Reference.expand"]], "pypath.utils.reflists": [[1159, "module-pypath.utils.reflists"]], "referencelistmanager (class in pypath.utils.reflists)": [[1160, "pypath.utils.reflists.ReferenceListManager"]], "__init__() (pypath.utils.reflists.referencelistmanager method)": [[1160, "pypath.utils.reflists.ReferenceListManager.__init__"]], "check() (pypath.utils.reflists.referencelistmanager method)": [[1160, "pypath.utils.reflists.ReferenceListManager.check"]], "is_not() (pypath.utils.reflists.referencelistmanager method)": [[1160, "pypath.utils.reflists.ReferenceListManager.is_not"]], "select() (pypath.utils.reflists.referencelistmanager method)": [[1160, "pypath.utils.reflists.ReferenceListManager.select"]], "check() (in module pypath.utils.reflists)": [[1161, "pypath.utils.reflists.check"]], "get_manager() (in module pypath.utils.reflists)": [[1162, "pypath.utils.reflists.get_manager"]], "get_reflist() (in module pypath.utils.reflists)": [[1163, "pypath.utils.reflists.get_reflist"]], "init() (in module pypath.utils.reflists)": [[1164, "pypath.utils.reflists.init"]], "is_not() (in module pypath.utils.reflists)": [[1165, "pypath.utils.reflists.is_not"]], "select() (in module pypath.utils.reflists)": [[1166, "pypath.utils.reflists.select"]], "pypath.utils.residues": [[1167, "module-pypath.utils.residues"]], "residuemapper (class in pypath.utils.residues)": [[1168, "pypath.utils.residues.ResidueMapper"]], "__init__() (pypath.utils.residues.residuemapper method)": [[1168, "pypath.utils.residues.ResidueMapper.__init__"]], "clean() (pypath.utils.residues.residuemapper method)": [[1168, "pypath.utils.residues.ResidueMapper.clean"]], "pypath.utils.seq": [[1169, "module-pypath.utils.seq"]], "pfam (class in pypath.utils.seq)": [[1170, "pypath.utils.seq.Pfam"]], "__init__() (pypath.utils.seq.pfam method)": [[1170, "pypath.utils.seq.Pfam.__init__"]], "iterdb() (pypath.utils.seq.pfam method)": [[1170, "pypath.utils.seq.Pfam.iterdb"]], "iterprotein() (pypath.utils.seq.pfam method)": [[1170, "pypath.utils.seq.Pfam.iterprotein"]], "load() (pypath.utils.seq.pfam method)": [[1170, "pypath.utils.seq.Pfam.load"]], "processor() (pypath.utils.seq.pfam method)": [[1170, "pypath.utils.seq.Pfam.processor"]], "unload() (pypath.utils.seq.pfam method)": [[1170, "pypath.utils.seq.Pfam.unload"]], "resource (class in pypath.utils.seq)": [[1171, "pypath.utils.seq.Resource"]], "__init__() (pypath.utils.seq.resource method)": [[1171, "pypath.utils.seq.Resource.__init__"]], "iterdb() (pypath.utils.seq.resource method)": [[1171, "pypath.utils.seq.Resource.iterdb"]], "iterprotein() (pypath.utils.seq.resource method)": [[1171, "pypath.utils.seq.Resource.iterprotein"]], "load() (pypath.utils.seq.resource method)": [[1171, "pypath.utils.seq.Resource.load"]], "processor() (pypath.utils.seq.resource method)": [[1171, "pypath.utils.seq.Resource.processor"]], "unload() (pypath.utils.seq.resource method)": [[1171, "pypath.utils.seq.Resource.unload"]], "seq (class in pypath.utils.seq)": [[1172, "pypath.utils.seq.Seq"]], "__init__() (pypath.utils.seq.seq method)": [[1172, "pypath.utils.seq.Seq.__init__"]], "findall() (pypath.utils.seq.seq method)": [[1172, "pypath.utils.seq.Seq.findall"]], "get_isoforms() (in module pypath.utils.seq)": [[1173, "pypath.utils.seq.get_isoforms"]], "read_fasta() (in module pypath.utils.seq)": [[1174, "pypath.utils.seq.read_fasta"]], "swissprot_seq() (in module pypath.utils.seq)": [[1175, "pypath.utils.seq.swissprot_seq"]], "pypath.utils.taxonomy": [[1176, "module-pypath.utils.taxonomy"]], "ensure_common_name() (in module pypath.utils.taxonomy)": [[1177, "pypath.utils.taxonomy.ensure_common_name"]], "ensure_ensembl_name() (in module pypath.utils.taxonomy)": [[1178, "pypath.utils.taxonomy.ensure_ensembl_name"]], "ensure_latin_name() (in module pypath.utils.taxonomy)": [[1179, "pypath.utils.taxonomy.ensure_latin_name"]], "ensure_ncbi_tax_id() (in module pypath.utils.taxonomy)": [[1180, "pypath.utils.taxonomy.ensure_ncbi_tax_id"]], "get_db() (in module pypath.utils.taxonomy)": [[1181, "pypath.utils.taxonomy.get_db"]], "init_db() (in module pypath.utils.taxonomy)": [[1182, "pypath.utils.taxonomy.init_db"]], "short_latin_names() (in module pypath.utils.taxonomy)": [[1183, "pypath.utils.taxonomy.short_latin_names"]], "shorten_latin_name() (in module pypath.utils.taxonomy)": [[1184, "pypath.utils.taxonomy.shorten_latin_name"]], "taxid_from_common_name() (in module pypath.utils.taxonomy)": [[1185, "pypath.utils.taxonomy.taxid_from_common_name"]], "taxid_from_dbptm_taxon_name() (in module pypath.utils.taxonomy)": [[1186, "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name"]], "taxid_from_ensembl_name() (in module pypath.utils.taxonomy)": [[1187, "pypath.utils.taxonomy.taxid_from_ensembl_name"]], "taxid_from_latin_name() (in module pypath.utils.taxonomy)": [[1188, "pypath.utils.taxonomy.taxid_from_latin_name"]], "taxid_from_nonstandard() (in module pypath.utils.taxonomy)": [[1189, "pypath.utils.taxonomy.taxid_from_nonstandard"]], "uniprot_taxid() (in module pypath.utils.taxonomy)": [[1190, "pypath.utils.taxonomy.uniprot_taxid"]], "pypath.utils.unichem": [[1191, "module-pypath.utils.unichem"]], "unichem (class in pypath.utils.unichem)": [[1192, "pypath.utils.unichem.Unichem"]], "__init__() (pypath.utils.unichem.unichem method)": [[1192, "pypath.utils.unichem.Unichem.__init__"]], "connectivity_search() (pypath.utils.unichem.unichem method)": [[1192, "pypath.utils.unichem.Unichem.connectivity_search"]], "inchikey2anything() (pypath.utils.unichem.unichem method)": [[1192, "pypath.utils.unichem.Unichem.inchikey2anything"]], "info() (pypath.utils.unichem.unichem static method)": [[1192, "pypath.utils.unichem.Unichem.info"]], "smiles2chembl() (pypath.utils.unichem.unichem method)": [[1192, "pypath.utils.unichem.Unichem.smiles2chembl"]], "translate() (pypath.utils.unichem.unichem method)": [[1192, "pypath.utils.unichem.Unichem.translate"]], "usage() (pypath.utils.unichem.unichem method)": [[1192, "pypath.utils.unichem.Unichem.usage"]], "pypath.utils.uniprot": [[1193, "module-pypath.utils.uniprot"]], "uniprotprotein (class in pypath.utils.uniprot)": [[1194, "pypath.utils.uniprot.UniprotProtein"]], "__init__() (pypath.utils.uniprot.uniprotprotein method)": [[1194, "pypath.utils.uniprot.UniprotProtein.__init__"]], "databases (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.databases"]], "info_section() (pypath.utils.uniprot.uniprotprotein method)": [[1194, "pypath.utils.uniprot.UniprotProtein.info_section"]], "keywords (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.keywords"]], "keywords_with_xrefs (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.keywords_with_xrefs"]], "length (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.length"]], "lengths (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.lengths"]], "sequence (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.sequence"]], "weight (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.weight"]], "weights (pypath.utils.uniprot.uniprotprotein property)": [[1194, "pypath.utils.uniprot.UniprotProtein.weights"]], "ac() (in module pypath.utils.uniprot)": [[1195, "pypath.utils.uniprot.ac"]], "activity_regulation() (in module pypath.utils.uniprot)": [[1196, "pypath.utils.uniprot.activity_regulation"]], "activity_regulation_with_xrefs() (in module pypath.utils.uniprot)": [[1197, "pypath.utils.uniprot.activity_regulation_with_xrefs"]], "alternative_products() (in module pypath.utils.uniprot)": [[1198, "pypath.utils.uniprot.alternative_products"]], "alternative_products_with_xrefs() (in module pypath.utils.uniprot)": [[1199, "pypath.utils.uniprot.alternative_products_with_xrefs"]], "browse() (in module pypath.utils.uniprot)": [[1200, "pypath.utils.uniprot.browse"]], "catalytic_activity() (in module pypath.utils.uniprot)": [[1201, "pypath.utils.uniprot.catalytic_activity"]], "catalytic_activity_with_xrefs() (in module pypath.utils.uniprot)": [[1202, "pypath.utils.uniprot.catalytic_activity_with_xrefs"]], "collect() (in module pypath.utils.uniprot)": [[1203, "pypath.utils.uniprot.collect"]], "databases() (in module pypath.utils.uniprot)": [[1204, "pypath.utils.uniprot.databases"]], "disease() (in module pypath.utils.uniprot)": [[1205, "pypath.utils.uniprot.disease"]], "disease_with_xrefs() (in module pypath.utils.uniprot)": [[1206, "pypath.utils.uniprot.disease_with_xrefs"]], "ec() (in module pypath.utils.uniprot)": [[1207, "pypath.utils.uniprot.ec"]], "features_table() (in module pypath.utils.uniprot)": [[1208, "pypath.utils.uniprot.features_table"]], "full_name() (in module pypath.utils.uniprot)": [[1209, "pypath.utils.uniprot.full_name"]], "function() (in module pypath.utils.uniprot)": [[1210, "pypath.utils.uniprot.function"]], "function_genecards() (in module pypath.utils.uniprot)": [[1211, "pypath.utils.uniprot.function_genecards"]], "function_or_genecards() (in module pypath.utils.uniprot)": [[1212, "pypath.utils.uniprot.function_or_genecards"]], "function_with_genecards() (in module pypath.utils.uniprot)": [[1213, "pypath.utils.uniprot.function_with_genecards"]], "function_with_xrefs() (in module pypath.utils.uniprot)": [[1214, "pypath.utils.uniprot.function_with_xrefs"]], "genesymbol() (in module pypath.utils.uniprot)": [[1215, "pypath.utils.uniprot.genesymbol"]], "has_tag() (in module pypath.utils.uniprot)": [[1216, "pypath.utils.uniprot.has_tag"]], "id() (in module pypath.utils.uniprot)": [[1217, "pypath.utils.uniprot.id"]], "info() (in module pypath.utils.uniprot)": [[1218, "pypath.utils.uniprot.info"]], "info_section() (in module pypath.utils.uniprot)": [[1219, "pypath.utils.uniprot.info_section"]], "interaction() (in module pypath.utils.uniprot)": [[1220, "pypath.utils.uniprot.interaction"]], "interaction_with_xrefs() (in module pypath.utils.uniprot)": [[1221, "pypath.utils.uniprot.interaction_with_xrefs"]], "is_reviewed() (in module pypath.utils.uniprot)": [[1222, "pypath.utils.uniprot.is_reviewed"]], "itertag() (in module pypath.utils.uniprot)": [[1223, "pypath.utils.uniprot.itertag"]], "keywords() (in module pypath.utils.uniprot)": [[1224, "pypath.utils.uniprot.keywords"]], "keywords_with_xrefs() (in module pypath.utils.uniprot)": [[1225, "pypath.utils.uniprot.keywords_with_xrefs"]], "length() (in module pypath.utils.uniprot)": [[1226, "pypath.utils.uniprot.length"]], "lengths() (in module pypath.utils.uniprot)": [[1227, "pypath.utils.uniprot.lengths"]], "load() (in module pypath.utils.uniprot)": [[1228, "pypath.utils.uniprot.load"]], "organism() (in module pypath.utils.uniprot)": [[1229, "pypath.utils.uniprot.organism"]], "print_features() (in module pypath.utils.uniprot)": [[1230, "pypath.utils.uniprot.print_features"]], "ptm() (in module pypath.utils.uniprot)": [[1231, "pypath.utils.uniprot.ptm"]], "ptm_with_xrefs() (in module pypath.utils.uniprot)": [[1232, "pypath.utils.uniprot.ptm_with_xrefs"]], "query() (in module pypath.utils.uniprot)": [[1233, "pypath.utils.uniprot.query"]], "reload() (in module pypath.utils.uniprot)": [[1234, "pypath.utils.uniprot.reload"]], "remove_xrefs() (in module pypath.utils.uniprot)": [[1235, "pypath.utils.uniprot.remove_xrefs"]], "sequence() (in module pypath.utils.uniprot)": [[1236, "pypath.utils.uniprot.sequence"]], "sequence_caution() (in module pypath.utils.uniprot)": [[1237, "pypath.utils.uniprot.sequence_caution"]], "sequence_caution_with_xrefs() (in module pypath.utils.uniprot)": [[1238, "pypath.utils.uniprot.sequence_caution_with_xrefs"]], "similarity() (in module pypath.utils.uniprot)": [[1239, "pypath.utils.uniprot.similarity"]], "similarity_with_xrefs() (in module pypath.utils.uniprot)": [[1240, "pypath.utils.uniprot.similarity_with_xrefs"]], "subcellular_location() (in module pypath.utils.uniprot)": [[1241, "pypath.utils.uniprot.subcellular_location"]], "subcellular_location_with_xrefs() (in module pypath.utils.uniprot)": [[1242, "pypath.utils.uniprot.subcellular_location_with_xrefs"]], "subunit() (in module pypath.utils.uniprot)": [[1243, "pypath.utils.uniprot.subunit"]], "subunit_with_xrefs() (in module pypath.utils.uniprot)": [[1244, "pypath.utils.uniprot.subunit_with_xrefs"]], "tissue_specificity() (in module pypath.utils.uniprot)": [[1245, "pypath.utils.uniprot.tissue_specificity"]], "tissue_specificity_with_xrefs() (in module pypath.utils.uniprot)": [[1246, "pypath.utils.uniprot.tissue_specificity_with_xrefs"]], "update_databases() (in module pypath.utils.uniprot)": [[1247, "pypath.utils.uniprot.update_databases"]], "update_info() (in module pypath.utils.uniprot)": [[1248, "pypath.utils.uniprot.update_info"]], "web_resource() (in module pypath.utils.uniprot)": [[1249, "pypath.utils.uniprot.web_resource"]], "web_resource_with_xrefs() (in module pypath.utils.uniprot)": [[1250, "pypath.utils.uniprot.web_resource_with_xrefs"]], "weight() (in module pypath.utils.uniprot)": [[1251, "pypath.utils.uniprot.weight"]], "weights() (in module pypath.utils.uniprot)": [[1252, "pypath.utils.uniprot.weights"]], "pypath.visual": [[1253, "module-pypath.visual"]], "pypath.visual.drawing": [[1254, "module-pypath.visual.drawing"]], "interset (class in pypath.visual.drawing)": [[1255, "pypath.visual.drawing.InterSet"]], "__init__() (pypath.visual.drawing.interset method)": [[1255, "pypath.visual.drawing.InterSet.__init__"]], "draw() (pypath.visual.drawing.interset method)": [[1255, "pypath.visual.drawing.InterSet.draw"]], "plot (class in pypath.visual.drawing)": [[1256, "pypath.visual.drawing.Plot"]], "__init__() (pypath.visual.drawing.plot method)": [[1256, "pypath.visual.drawing.Plot.__init__"]], "pypath.visual.igraph_drawing": [[1257, "module-pypath.visual.igraph_drawing"]], "abstractcairographdrawer (class in pypath.visual.igraph_drawing)": [[1258, "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer"]], "__init__() (pypath.visual.igraph_drawing.abstractcairographdrawer method)": [[1258, "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer.__init__"]], "arrowedgedrawer (in module pypath.visual.igraph_drawing)": [[1259, "pypath.visual.igraph_drawing.ArrowEdgeDrawer"]], "defaultgraphdrawerffsupport (class in pypath.visual.igraph_drawing)": [[1260, "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport"]], "__init__() (pypath.visual.igraph_drawing.defaultgraphdrawerffsupport method)": [[1260, "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport.__init__"]], "defaultvertexdrawer (in module pypath.visual.igraph_drawing)": [[1261, "pypath.visual.igraph_drawing.DefaultVertexDrawer"]], "textdrawer (in module pypath.visual.igraph_drawing)": [[1262, "pypath.visual.igraph_drawing.TextDrawer"]], "pypath.visual.igraph_drawing.edge": [[1263, "module-pypath.visual.igraph_drawing.edge"]], "abstractedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1264, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1264, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1264, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1264, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1264, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1264, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.get_label_position"]], "alphavaryingedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1265, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1265, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1265, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1265, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1265, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1265, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.get_label_position"]], "arrowedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1266, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1266, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1266, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1266, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1266, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1266, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.get_label_position"]], "darktolightedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1267, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1267, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1267, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1267, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1267, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1267, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.get_label_position"]], "lighttodarkedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1268, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1268, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1268, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1268, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1268, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1268, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.get_label_position"]], "taperededgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1269, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1269, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1269, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1269, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1269, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1269, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.get_label_position"]], "pypath.visual.igraph_drawing.vertex": [[1270, "module-pypath.visual.igraph_drawing.vertex"]], "abstractcairodrawer (class in pypath.visual.igraph_drawing.vertex)": [[1271, "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractcairodrawer method)": [[1271, "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer.__init__"]], "abstractcairovertexdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1272, "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractcairovertexdrawer method)": [[1272, "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer.__init__"]], "draw() (pypath.visual.igraph_drawing.vertex.abstractcairovertexdrawer method)": [[1272, "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer.draw"]], "abstractdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1273, "pypath.visual.igraph_drawing.vertex.AbstractDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractdrawer method)": [[1273, "pypath.visual.igraph_drawing.vertex.AbstractDrawer.__init__"]], "abstractvertexdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1274, "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractvertexdrawer method)": [[1274, "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer.__init__"]], "draw() (pypath.visual.igraph_drawing.vertex.abstractvertexdrawer method)": [[1274, "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer.draw"]], "defaultvertexdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1275, "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.defaultvertexdrawer method)": [[1275, "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer.__init__"]], "draw() (pypath.visual.igraph_drawing.vertex.defaultvertexdrawer method)": [[1275, "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer.draw"]], "pypath.visual.plot": [[1276, "module-pypath.visual.plot"]], "barplot (class in pypath.visual.plot)": [[1277, "pypath.visual.plot.Barplot"]], "__init__() (pypath.visual.plot.barplot method)": [[1277, "pypath.visual.plot.Barplot.__init__"]], "finish() (pypath.visual.plot.barplot method)": [[1277, "pypath.visual.plot.Barplot.finish"]], "barplotsgrid (class in pypath.visual.plot)": [[1278, "pypath.visual.plot.BarplotsGrid"]], "__init__() (pypath.visual.plot.barplotsgrid method)": [[1278, "pypath.visual.plot.BarplotsGrid.__init__"]], "finish() (pypath.visual.plot.barplotsgrid method)": [[1278, "pypath.visual.plot.BarplotsGrid.finish"]], "init_fig() (pypath.visual.plot.barplotsgrid method)": [[1278, "pypath.visual.plot.BarplotsGrid.init_fig"]], "set_figsize() (pypath.visual.plot.barplotsgrid method)": [[1278, "pypath.visual.plot.BarplotsGrid.set_figsize"]], "set_grid() (pypath.visual.plot.barplotsgrid method)": [[1278, "pypath.visual.plot.BarplotsGrid.set_grid"]], "set_title() (pypath.visual.plot.barplotsgrid method)": [[1278, "pypath.visual.plot.BarplotsGrid.set_title"]], "curationplot (class in pypath.visual.plot)": [[1279, "pypath.visual.plot.CurationPlot"]], "__init__() (pypath.visual.plot.curationplot method)": [[1279, "pypath.visual.plot.CurationPlot.__init__"]], "finish() (pypath.visual.plot.curationplot method)": [[1279, "pypath.visual.plot.CurationPlot.finish"]], "init_fig() (pypath.visual.plot.curationplot method)": [[1279, "pypath.visual.plot.CurationPlot.init_fig"]], "set_figsize() (pypath.visual.plot.curationplot method)": [[1279, "pypath.visual.plot.CurationPlot.set_figsize"]], "dendrogram (class in pypath.visual.plot)": [[1280, "pypath.visual.plot.Dendrogram"]], "__init__() (pypath.visual.plot.dendrogram method)": [[1280, "pypath.visual.plot.Dendrogram.__init__"]], "finish() (pypath.visual.plot.dendrogram method)": [[1280, "pypath.visual.plot.Dendrogram.finish"]], "init_fig() (pypath.visual.plot.dendrogram method)": [[1280, "pypath.visual.plot.Dendrogram.init_fig"]], "set_figsize() (pypath.visual.plot.dendrogram method)": [[1280, "pypath.visual.plot.Dendrogram.set_figsize"]], "histogram (class in pypath.visual.plot)": [[1281, "pypath.visual.plot.Histogram"]], "__init__() (pypath.visual.plot.histogram method)": [[1281, "pypath.visual.plot.Histogram.__init__"]], "finish() (pypath.visual.plot.histogram method)": [[1281, "pypath.visual.plot.Histogram.finish"]], "historytree (class in pypath.visual.plot)": [[1282, "pypath.visual.plot.HistoryTree"]], "__init__() (pypath.visual.plot.historytree method)": [[1282, "pypath.visual.plot.HistoryTree.__init__"]], "run_latex() (pypath.visual.plot.historytree method)": [[1282, "pypath.visual.plot.HistoryTree.run_latex"]], "write_tex() (pypath.visual.plot.historytree method)": [[1282, "pypath.visual.plot.HistoryTree.write_tex"]], "htpcharacteristics (class in pypath.visual.plot)": [[1283, "pypath.visual.plot.HtpCharacteristics"]], "__init__() (pypath.visual.plot.htpcharacteristics method)": [[1283, "pypath.visual.plot.HtpCharacteristics.__init__"]], "finish() (pypath.visual.plot.htpcharacteristics method)": [[1283, "pypath.visual.plot.HtpCharacteristics.finish"]], "init_fig() (pypath.visual.plot.htpcharacteristics method)": [[1283, "pypath.visual.plot.HtpCharacteristics.init_fig"]], "set_figsize() (pypath.visual.plot.htpcharacteristics method)": [[1283, "pypath.visual.plot.HtpCharacteristics.set_figsize"]], "set_grid() (pypath.visual.plot.htpcharacteristics method)": [[1283, "pypath.visual.plot.HtpCharacteristics.set_grid"]], "set_title() (pypath.visual.plot.htpcharacteristics method)": [[1283, "pypath.visual.plot.HtpCharacteristics.set_title"]], "multibarplot (class in pypath.visual.plot)": [[1284, "pypath.visual.plot.MultiBarplot"]], "__init__() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.__init__"]], "by_plot() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.by_plot"]], "do_plot() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.do_plot"]], "finish() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.finish"]], "init_fig() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.init_fig"]], "labels() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.labels"]], "make_plots() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.make_plots"]], "plot() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.plot"]], "plots_order() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.plots_order"]], "post_plot() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.post_plot"]], "pre_plot() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.pre_plot"]], "reload() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.reload"]], "set_categories() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.set_categories"]], "set_colors() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.set_colors"]], "set_figsize() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.set_figsize"]], "set_grid() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.set_grid"]], "set_title() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.set_title"]], "sort() (pypath.visual.plot.multibarplot method)": [[1284, "pypath.visual.plot.MultiBarplot.sort"]], "plot (class in pypath.visual.plot)": [[1285, "pypath.visual.plot.Plot"]], "__init__() (pypath.visual.plot.plot method)": [[1285, "pypath.visual.plot.Plot.__init__"]], "finish() (pypath.visual.plot.plot method)": [[1285, "pypath.visual.plot.Plot.finish"]], "refscomposite (class in pypath.visual.plot)": [[1286, "pypath.visual.plot.RefsComposite"]], "__init__() (pypath.visual.plot.refscomposite method)": [[1286, "pypath.visual.plot.RefsComposite.__init__"]], "finish() (pypath.visual.plot.refscomposite method)": [[1286, "pypath.visual.plot.RefsComposite.finish"]], "init_fig() (pypath.visual.plot.refscomposite method)": [[1286, "pypath.visual.plot.RefsComposite.init_fig"]], "set_figsize() (pypath.visual.plot.refscomposite method)": [[1286, "pypath.visual.plot.RefsComposite.set_figsize"]], "set_grid() (pypath.visual.plot.refscomposite method)": [[1286, "pypath.visual.plot.RefsComposite.set_grid"]], "set_title() (pypath.visual.plot.refscomposite method)": [[1286, "pypath.visual.plot.RefsComposite.set_title"]], "scatterplus (class in pypath.visual.plot)": [[1287, "pypath.visual.plot.ScatterPlus"]], "__init__() (pypath.visual.plot.scatterplus method)": [[1287, "pypath.visual.plot.ScatterPlus.__init__"]], "finish() (pypath.visual.plot.scatterplus method)": [[1287, "pypath.visual.plot.ScatterPlus.finish"]], "init_fig() (pypath.visual.plot.scatterplus method)": [[1287, "pypath.visual.plot.ScatterPlus.init_fig"]], "reload() (pypath.visual.plot.scatterplus method)": [[1287, "pypath.visual.plot.ScatterPlus.reload"]], "set_figsize() (pypath.visual.plot.scatterplus method)": [[1287, "pypath.visual.plot.ScatterPlus.set_figsize"]], "set_title() (pypath.visual.plot.scatterplus method)": [[1287, "pypath.visual.plot.ScatterPlus.set_title"]], "values_to_sizes() (pypath.visual.plot.scatterplus method)": [[1287, "pypath.visual.plot.ScatterPlus.values_to_sizes"]], "similaritygraph (class in pypath.visual.plot)": [[1288, "pypath.visual.plot.SimilarityGraph"]], "__init__() (pypath.visual.plot.similaritygraph method)": [[1288, "pypath.visual.plot.SimilarityGraph.__init__"]], "sizes_edge() (pypath.visual.plot.similaritygraph method)": [[1288, "pypath.visual.plot.SimilarityGraph.sizes_edge"]], "stackedbarplot (class in pypath.visual.plot)": [[1289, "pypath.visual.plot.StackedBarplot"]], "__init__() (pypath.visual.plot.stackedbarplot method)": [[1289, "pypath.visual.plot.StackedBarplot.__init__"]], "finish() (pypath.visual.plot.stackedbarplot method)": [[1289, "pypath.visual.plot.StackedBarplot.finish"]], "init_fig() (pypath.visual.plot.stackedbarplot method)": [[1289, "pypath.visual.plot.StackedBarplot.init_fig"]], "plot() (pypath.visual.plot.stackedbarplot method)": [[1289, "pypath.visual.plot.StackedBarplot.plot"]], "reload() (pypath.visual.plot.stackedbarplot method)": [[1289, "pypath.visual.plot.StackedBarplot.reload"]], "set_figsize() (pypath.visual.plot.stackedbarplot method)": [[1289, "pypath.visual.plot.StackedBarplot.set_figsize"]], "set_title() (pypath.visual.plot.stackedbarplot method)": [[1289, "pypath.visual.plot.StackedBarplot.set_title"]], "boxplot() (in module pypath.visual.plot)": [[1290, "pypath.visual.plot.boxplot"]], "get_moves() (in module pypath.visual.plot)": [[1291, "pypath.visual.plot.get_moves"]], "is_opentype_cff_font() (in module pypath.visual.plot)": [[1292, "pypath.visual.plot.is_opentype_cff_font"]], "move_labels() (in module pypath.visual.plot)": [[1293, "pypath.visual.plot.move_labels"]], "overlap() (in module pypath.visual.plot)": [[1294, "pypath.visual.plot.overlap"]], "rotate_labels() (in module pypath.visual.plot)": [[1295, "pypath.visual.plot.rotate_labels"]]}})